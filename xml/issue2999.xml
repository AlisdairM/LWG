<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2999" status="New">
<title>&sect;[thread.decaycopy] issue</title>
<section><sref ref="[thread.decaycopy]"/></section>
<submitter>Marshall Clow</submitter>
<date>11 Jul 2017</date>
<priority>3</priority>

<discussion>
<p>
[thread.decaycopy] says:
</p>
<blockquote><p>
In several places in this Clause the operation <tt><i>DECAY_COPY</i>(x)</tt> is used. All such uses mean call the function 
<tt>decay_copy(x)</tt> and use the result, where <tt>decay_copy</tt> is defined as follows:
</p></blockquote>
<p>
but <tt>decay_copy</tt> is not defined in any synopsis.
<p/>
The Ranges TS has a similar use of <tt><i>DECAY_COPY</i></tt>, except that theirs is also <tt>constexpr</tt> and <tt>noexcept</tt>.
<p/>
We should mark the function <tt>decay_copy</tt> as "exposition only" and <tt>constexpr</tt> and <tt>noexcept</tt>.
</p>

<note>2017-07-16, Daniel comments</note>
<p>
Currently there exists no proper way to mark <tt>decay_copy</tt> as conditionally <tt>noexcept</tt> as explained in
<a href="http://wg21.link/n3255#Adding">N3255 section "Adding to the Standard"</a>. This is also slighly related to 
the request to add an <tt>is_nothrow_convertible</tt> trait, as requested by LWG <iref ref="2040"/>.
</p>

<note>
2017-11-01 P3 as result of c++std-lib online vote.
</note>
</discussion>

<resolution>
</resolution>
</issue>
