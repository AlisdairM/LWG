<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2855" status="C++17">
<title><tt>std::throw_with_nested("string_literal")</tt></title>
<section><sref ref="[except.nested]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>17 Jan 2017</date>
<priority>0</priority>

<discussion>
<p>
[except.nested] says:
</p>
<blockquote>
<pre>
template &lt;class T&gt; [[noreturn]] void throw_with_nested(T&amp;&amp; t);
</pre>
<blockquote>
<p>
Let <tt>U</tt> be <tt>remove_reference_t&lt;T&gt;</tt>.
<p/>
<i>Requires:</i> <tt>U</tt> shall be <tt>CopyConstructible</tt>.
</p>
</blockquote>
</blockquote>
<p>
This forbids <tt>std::throw_with_nested("string literal")</tt> because <tt>T</tt> gets deduced as <tt>const char(&amp;)[15]</tt> 
and so <tt>U</tt> is <tt>const char[15]</tt> which is not <tt>CopyConstructible</tt>.
<p/>
A throw expression decays an array argument to a pointer (<sref ref="[expr.throw]"/> p2) and so works fine with string literals. 
GCC's <tt>throw_with_nested</tt> also worked fine until I added a <tt>static_assert</tt> to enforce the 
<tt>CopyConstructible</tt> requirement.
<p/>
The same problem exists when throwing a function type, which should also decay:
</p>
<blockquote>
<pre>
#include &lt;exception&gt;

void f() { }

int main() {
  std::throw_with_nested(f);
}
</pre>
</blockquote>
<p>
(Note: LWG <iref ref="1370"/> added the <tt>remove_reference</tt>, which was a step in the right direction but not far enough.)
</p>

<note>2017-01-27 Telecon</note>
<p>Priority 0</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4618">N4618</a>.</p>

<ol>
<li><p>Edit <sref ref="[except.nested]"/> as indicated:</p>
<blockquote>
<pre>
template &lt;class T&gt; [[noreturn]] void throw_with_nested(T&amp;&amp; t);
</pre>
<blockquote>
<p>
-6- Let <tt>U</tt> be <tt><del>remove_reference</del><ins>decay</ins>_t&lt;T&gt;</tt>.
<p/>
-7- <i>Requires:</i> <tt>U</tt> shall be <tt>CopyConstructible</tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
