<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3158" status="New">
<title><tt>tuple(allocator_arg_t, const Alloc&amp;)</tt> should be conditionally explicit</title>
<section><sref ref="[tuple.cnstr]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>21 Aug 2018</date>
<priority>99</priority>

<discussion>
<p>
<tt>std::tuple</tt>'s allocator-extended constructors say "<i>Effects:</i> Equivalent to the preceding constructors except 
that each element is constructed with uses-allocator construction". That's not true for the first one, as shown by:
</p>
<blockquote><pre>
#include &lt;tuple&gt;

struct X { explicit X() { } };

std::tuple&lt;X&gt; f() { return {}; }
std::tuple&lt;X&gt; g() { return { std::allocator_arg, std::allocator&lt;int&gt;{} }; }
</pre></blockquote>
<p>
The function <tt>f()</tt> doesn't compile because of the explicit constructor, but <tt>g()</tt> does, despite using the 
same constructor for <tt>X</tt>. The conditional explicit-ness is not equivalent.
<p/>
Also, the editor requested that we change "implicitly default-constructible" to use words that mean something. He suggested "copy-list-initializable from an empty list".
</p>
</discussion>

<resolution>

<p>This wording is relative to <a href="https://wg21.link/n4762">N4762</a>.</p>

<ul>
<li><p>Modify <sref ref="[tuple.tuple]"/>, class template <tt>tuple</tt> synopsis, as indicated:</p>
<blockquote><pre>
[&hellip;]
<i>// allocator-extended constructors</i>
template&lt;class Alloc&gt;
  <ins>explicit(<i>see below</i>)</ins> tuple(allocator_arg_t, const Alloc&amp; a);
template&lt;class Alloc&gt;
  explicit(<i>see below</i>) tuple(allocator_arg_t, const Alloc&amp; a, const Types&amp;...);
[&hellip;]
</pre></blockquote>
</li>

<li><p>Modify <sref ref="[tuple.cnstr]"/>, as indicated:</p>

<blockquote>
<pre>
explicit(<i>see below</i>) constexpr tuple();
</pre>
<blockquote>
<p>
-5- <i>Effects:</i> Value-initializes each element.
<p/>
-6- <i>Remarks:</i> This constructor shall not participate in overload resolution unless 
<tt>is_default_constructible_v&lt;T<sub><i>i</i></sub>&gt;</tt> is <tt>true</tt> for all 
<tt><i>i</i></tt>. [<i>Note:</i> This behavior can be implemented by a constructor template with default template 
arguments. &mdash; <i>end note</i>] The expression inside <tt>explicit</tt> evaluates to <tt>true</tt> if
and only if <tt>T<sub><i>i</i></sub></tt> is not <del>implicitly default-constructible</del>
<ins>copy-list-initializable from an empty list</ins> for at least one <tt><i>i</i></tt>. 
[<i>Note:</i> This behavior can be implemented with a trait that checks whether a 
<tt>const T<sub><i>i</i></sub>&amp;</tt> can be initialized with <tt>{}</tt>. &mdash; <i>end note</i>]
</p>
</blockquote>
<p>
[&hellip;]
</p>
<pre>
template&lt;class Alloc&gt;
  <ins>explicit(<i>see below</i>)</ins> tuple(allocator_arg_t, const Alloc&amp; a);
template&lt;class Alloc&gt;
  explicit(<i>see below</i>) tuple(allocator_arg_t, const Alloc&amp; a, const Types&amp;...);
[&hellip;]
template&lt;class Alloc, class U1, class U2&gt;
  explicit(<i>see below</i>) tuple(allocator_arg_t, const Alloc&amp; a, pair&lt;U1, U2&gt;&amp;&amp;);
</pre>
<blockquote>
<p>
-25- <i>Requires:</i> <tt>Alloc</tt> shall satisfy the <tt><i>Cpp17Allocator</i></tt> requirements (Table 33).
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>

</ul>
</resolution>

</issue>
