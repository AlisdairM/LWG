<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3354" status="LEWG">
<title><tt>has_strong_structural_equality</tt> has a meaningless definition</title>
<section><sref ref="[meta.unary.prop]"/><sref ref="[version.syn]"/></section>
<submitter>Daniel Kr&uuml;gler</submitter>
<date>08 Dec 2019</date>
<priority>1</priority>

<discussion>
<p>
After the Belfast 2019 meeting with the acceptance of <a href="https://wg21.link/p1907r1">P1907R1</a>
the core language term "strong structural equality" has been removed and instead a more general 
definition of a "structural type" has been introduced that is suitable to be used as non-type template
parameter. These changes have caused the current definition of the <tt>has_strong_structural_equality</tt>
type trait (which had originally been introduced by <a href="https://wg21.link/p1614r2">P1614R2</a>
during the Cologne 2019 meeting) to become meaningless since it is currently defined as follows:
</p>
<blockquote>
<p>
The type <tt>T</tt> has strong structural equality (<sref ref="[class.compare.default]"/>).
</p>
</blockquote>
<p>
Besides the now undefined term "strong structural equality", the reference to <sref ref="[class.compare.default]"/>
doesn't make sense anymore, assuming that the trait definition is supposed to refer now to a type that 
can be used as non-type template parameter.
<p/>
During library reflector discussions several informal naming suggestions has been mentioned, such as
<tt>is_structural[_type]</tt>, <tt>can_be_nttp</tt>, <tt>is_nontype_template_parameter_type</tt>.
<p/>
Albeit <tt>is_structural_type</tt> would come very near to the current core terminology, core experts 
have argued that the term "structural type" should be considered as a "core-internal" term that may
easily be replaced post-C++20.
<p/>
In addition to that definition and naming question of that type trait it should be discussed whether
there should exist a specific feature macro for just this type trait, similar to the reason why we 
introduced the <tt>__cpp_lib_has_unique_object_representations</tt> test macro for the
<tt>has_unique_object_representations</tt> type trait while voting in 
<a href="https://wg21.link/p0258r2">P0258R2</a>. The submitter of this issue believes that such a feature 
macro should be added and given that its final definition should be related to the date of the
acceptance of this issue (and should <em>not</em> be related to any historically accepted papers such as 
<a href="https://wg21.link/p1614r2">P1614R2</a>).
</p>
<note>01-2020 Priority set to 1 and questions to LEWG after review on the reflector.</note>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4842">N4842</a>.</p>

<ol>
<li><p>Modify <sref ref="[version.syn]"/>, header <tt>&lt;version&gt;</tt> synopsis, as indicated (The
symbolic <tt>??????L</tt> represents the date to be defined by the project editor):</p>

<blockquote>
<pre>
[&hellip;]
#define __cpp_lib_is_swappable               201603L <i>// also in &lt;type_traits&gt;</i>
<ins>#define __cpp_lib_is_template_parameter_type ??????L <i>// also in &lt;type_traits&gt;</i></ins>
#define __cpp_lib_jthread                    201911L <i>// also in &lt;stop_token&gt;, &lt;thread&gt;</i>
[&hellip;]
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[meta.type.synop]"/>, header <tt>&lt;type_traits&gt;</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
[&hellip;]
template&lt;class T&gt; struct has_unique_object_representations;

template&lt;class T&gt; struct <del>has_strong_structural_equality</del><ins>is_template_parameter_type</ins>;

<i>// <sref ref="[meta.unary.prop.query]"/>, type property queries</i>
[&hellip;]
template&lt;class T&gt;
  inline constexpr bool has_unique_object_representations_v
    = has_unique_object_representations&lt;T&gt;::value;

template&lt;class T&gt;
  inline constexpr bool <del>has_strong_structural_equality_v</del><ins>is_template_parameter_type_v</ins>
    = <del>has_strong_structural_equality</del><ins>is_template_parameter_type</ins>&lt;T&gt;::value;
    
<i>// <sref ref="[meta.unary.prop.query]"/>, type property queries</i>
[&hellip;]
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[meta.type.synop]"/>, Table 47 ([tab:meta.unary.prop]) &mdash; 
"Type property predicates" &mdash; as indicated:</p>

<blockquote>
<table border="1">
<caption>Table 47: Type property predicates [tab:meta.unary.prop]</caption>
<tr>
<th align="center">Template</th>
<th align="center">Condition</th>
<th align="center">Preconditions</th>
</tr>

<tr>
<td colspan="3" align="center">
<tt>&hellip;</tt>
</td>
</tr>

<tr>
<td>
<tt>template&lt;class T&gt;<br/>
struct<br/>
<del>has_strong_structural_equality</del><ins>is_template_parameter_type</ins>;</tt>
</td>

<td>
The type <tt>T</tt> <del>has strong<br/>
structural<br/>
equality (<sref ref="[class.compare.default]"/>)</del><br/>
<ins>can be used as non-type<br/>
<i>template-parameter</i> (<sref ref="[temp.param]"/>)</ins>.
</td>

<td>
<del><tt>T</tt> shall be a complete type,<br/>
<i>cv</i> <tt>void</tt>, or an array of<br/>
unknown bound.</del><br/>
<ins>If <tt>T</tt> is a class type, <tt>T</tt> shall<br/>
be a complete type.</ins>
</td>
</tr>

<tr>
<td colspan="3" align="center">
<tt>&hellip;</tt>
</td>
</tr>

</table>
</blockquote>
</li>

</ol>
</resolution>
</issue>
