<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2387" status="Tentatively Voting">
<title>More nested types that must be accessible and unambiguous</title>
<section><sref ref="[func.require]"/>, <sref ref="[refwrap]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>23 May 2014</date>
<priority>99</priority>

<discussion>
<p>
Further to <iref ref="2299"/> and <iref ref="2361"/>, <sref ref="[func.require]"/> p3 and <sref ref="[refwrap]"/> p3 and p4
talk about member types without any mention of being accessible and unambiguous.
</p>

<note>2014-06-05 Daniel provides wording</note>

<note>2014-06-06 Library reflector vote</note>
<p>
The issue has been identified as Tentatively Ready based on six votes in favour.
</p>

</discussion>

<resolution>
<p>This wording is relative to N3936.</p>

<ol>
<li><p>Change <sref ref="[func.require]"/> p3 as indicated:</p>

<blockquote><p>
-3- If a call wrapper (20.9.1) has a <i>weak result type</i> the type of its member type <tt>result_type</tt> is based on the
type <tt>T</tt> of the wrapper's target object (20.9.1):
</p>
<ul>
<li><p>if <tt>T</tt> is a pointer to function type, <tt>result_type</tt> shall be a synonym for the return type of <tt>T</tt>;</p></li>
<li><p>if <tt>T</tt> is a pointer to member function, <tt>result_type</tt> shall be a synonym for the return type of <tt>T</tt>;</p></li>
<li><p>if <tt>T</tt> is a class type <ins>and the qualified-id <tt>T::result_type</tt> is valid and denotes a type 
(<sref ref="[temp.deduct]"/>)</ins><del>with a member type <tt>result_type</tt></del>, then <tt>result_type</tt> shall be a synonym for
<tt>T::result_type</tt>;</p></li> 
<li><p>otherwise <tt>result_type</tt> shall not be defined.</p></li>
</ul>
</blockquote>
</li>

<li><p>Change <sref ref="[refwrap]"/> p3+p4 as indicated:</p>

<blockquote>
<p>
-3- The template instantiation <tt>reference_wrapper&lt;T&gt;</tt> shall define a nested type named <tt>argument_type</tt> as a
synonym for <tt>T1</tt> only if the type <tt>T</tt> is any of the following:
</p>
<ul>
<li><p>a function type or a pointer to function type taking one argument of type <tt>T1</tt></p></li>
<li><p>a pointer to member function <tt>R T0::f</tt> <i>cv</i> (where  <i>cv</i> represents the member function_s cv-qualifiers);
the type <tt>T1</tt> is <i>cv</i> <tt>T0*</tt></p></li> 
<li><p>a class type <ins>where the qualified-id <tt>T::argument_type</tt> is valid and denotes a type 
(<sref ref="[temp.deduct]"/>)</ins><del>with a member type <tt>argument_type</tt></del>; the type <tt>T1</tt> is 
<tt>T::argument_type</tt>.</p></li>
</ul>
<p>
-4- The template instantiation <tt>reference_wrapper&lt;T&gt;</tt> shall define two nested types named <tt>first_argument_type</tt> 
and <tt>second_argument_type</tt> as synonyms for <tt>T1</tt> and <tt>T2</tt>, respectively, only if the type <tt>T</tt> is any of the
following:
</p>
<ul>
<li><p>a function type or a pointer to function type taking two arguments of types <tt>T1</tt> and <tt>T2</tt></p></li>
<li><p>a pointer to member function <tt>R T0::f(T2)</tt> <i>cv</i> (where <i>cv</i> represents the member function's cv-qualifiers);
the type <tt>T1</tt> is <i>cv</i> <tt>T0*</tt></p></li> 
<li><p>a class type <ins>where the qualified-ids <tt>T::first_argument_type</tt> and <tt>T::second_argument_type</tt> are both valid 
and both denote types (<sref ref="[temp.deduct]"/>)</ins><del>with member types <tt>first_argument_type</tt> and 
<tt>second_argument_type</tt></del>; the type <tt>T1</tt> is <tt>T::first_argument_type</tt><del>.</del> and the type <tt>T2</tt> is 
<tt>T::second_argument_type</tt>.</p></li>
</ul>
</blockquote>

</li>
</ol>
</resolution>

</issue>
