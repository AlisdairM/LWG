<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4161" status="New">
<title>Some free functions don't automatically work for program-defined <tt>std::complex&lt;<i>NonFloatingPoint</i>&gt;</tt></title>
<section><sref ref="[complex.numbers]"/></section>
<submitter>Jiang An</submitter>
<date>29 Sep 2024</date>
<priority>3</priority>

<discussion>
<p>
<tt>std::complex&lt;<i>NonFloatingPoint</i>&gt;</tt> is possibly a program-defined specialization and thus 
instantiation of such a specialization can have determined effect. However, it's improbable for implementations 
to ensure that some free functions, e.g. <tt>abs</tt>, <tt>sin</tt>, <tt>exp</tt>, work for such a specialization.
<p/>
Moreover, <paper num="P2819R2"/> made all <tt>std::complex</tt> specializations tuple-like types, despite that 
<tt>std::get</tt> overloads need to touch implementation details and thus don't work for program-defined specializations.
<p/>
It seems better to make only <tt>complex&lt;floating-point&gt;</tt> tuple-like types, and add <i>Constraints</i> 
to some free functions that can't be guaranteed to work to only accept cases where <tt>T</tt> is a <i>cv</i>-unqualified 
floating-point type. However, it's unclear to me how to handle cases where the implementation intentionally supports 
<tt>complex&lt;X&gt;</tt> (where <tt>X</tt> is not a program-defined type) as extension, and whether <i>Mandates</i> 
should be used.
</p>

<note>2025-02-07; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
</p>
<p>
"Program-defined specializations of `std::complex`
(i.e. explicit specializations and program-defined partial specializations)
seem unsupportably broken. We should say so explicitly until somebody writes
a paper to fix them."
</p>

</discussion>

<resolution>
</resolution>

</issue>
