<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3008" status="New">
<title><tt>make_shared</tt> (sub)object destruction semantics are not specified</title>
<section><sref ref="[util.smartptr.shared.create]"/></section>
<submitter>Glen Joseph Fernandes</submitter>
<date>6 Aug 2017</date>
<priority>99</priority>

<discussion>
<p>
The remarks for the <tt>make_shared</tt> and <tt>allocate_shared</tt> functions 
do not specify how the objects managed by the returned <tt>shared_ptr</tt> are 
destroyed. It is implied that when objects are constructed via a placement new 
expression, they are destroyed by calling the destructor, and that when objects 
are constructed via an allocator, they are destroyed using that allocator. This 
should be explicitly specified.
</p>
</discussion>

<resolution>
<p>This resolution is relative to <a href="http://wg21.link/n4687">N4687</a>.</p>

<ol>
<li><p>Edit <sref ref="[util.smartptr.shared.create]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class T, ...&gt;
shared_ptr&lt;T&gt; make_shared(<i>args</i>);
template&lt;class T, class A, ...&gt;
shared_ptr&lt;T&gt; allocate_shared(const A&amp; a, <i>args</i>);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-7- <i>Remarks:</i>
</p>
<ol style="list-style-type: none">
<li><p>[&hellip;]</p></li>
<li><p>(7.9) &mdash; When the lifetime of the object managed by the return value ends, or when the initialization of
an array element throws an exception, the initialized elements should be destroyed in the reverse
order of their construction.</p></li>
<li><p><ins>(7.?) &mdash; When a (sub)object of a non-array type <tt>U</tt> that was initialized by
<tt>make_shared</tt> is to be destroyed, it shall be destroyed via the expression <tt>pv-&gt;~U()</tt> 
where <tt>pv</tt> points to that object of type <tt>U</tt>.</ins></p></li>
<li><p><ins>(7.?) &mdash; When a (sub)object of a non-array type <tt>U</tt> that was initialized by
<tt>allocate_shared</tt> is to be destroyed, it shall be destroyed via the expression 
<tt>allocator_traits&lt;A2&gt;::destroy(a2, pv)</tt> where <tt>pv</tt> points to that object of type 
<i>cv</i>-unqualified <tt>U</tt> and <tt>a2</tt> of type <tt>A2</tt> is a rebound copy of the allocator
<tt>a</tt> passed to <tt>allocate_shared</tt> such that its <tt>value_type</tt> is 
<tt>remove_cv_t&lt;U&gt;</tt>.</ins></p></li>
</ol>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>
</issue>
