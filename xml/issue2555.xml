<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2555" status="WP">
<title>[fund.ts.v2] No handling for over-aligned types in <tt>optional</tt></title>
<section><sref ref="[optional.object]"/></section>
<submitter>Marshall Clow</submitter>
<date>3 Nov 2015</date>
<priority>0</priority>

<discussion>
<p><b>Addresses: fund.ts.v2</b></p>
<p>
<sref ref="[optional.object]"/> does not specify whether over-aligned types are supported. In other places where we specify 
allocation of user-supplied types, we state that "It is implementation-defined whether over-aligned types are supported (3.11)." 
(Examples: <sref ref="[expr.new]"/>/p1, <sref ref="[allocator.members]"/>/p5, <sref ref="[temporary.buffer]"/>/p1). We 
should presumably do the same thing here.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4562.html">N4562</a>.
</p>

<ol>
<li><p>Edit <sref ref="[optional.object]"/>/p1 as follows::</p>

<blockquote>
<p>
[&hellip;] The contained value shall be allocated in a region of the <tt>optional&lt;T&gt;</tt> storage suitably aligned for 
the type <tt>T</tt>. <ins>It is implementation-defined whether over-aligned types are supported (C++14 &sect;3.11).</ins> 
When an object of type <tt>optional&lt;T&gt;</tt> is contextually converted to <tt>bool</tt>, the conversion returns 
<tt>true</tt> if the object contains a value; otherwise the conversion returns <tt>false</tt>. 
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
