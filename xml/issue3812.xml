<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3812" status="New">
<title>[fund.ts.v3] Incorrect constraint on <tt>propagate_const</tt> conversion function</title>
<section><sref ref="[propagate_const.const_observers]"/></section>
<submitter>Giuseppe D'Angelo</submitter>
<date>04 Nov 2022</date>
<priority>99</priority>

<discussion>
<p><b>Addresses: fund.ts.v3</b></p>
<p>
This issue has its origin in the discussion of <a href="https://gcc.gnu.org/bugzilla/show_bug.cgi?id=107525">gcc issue 107525</a>.
<p/>
The current draft of LFTSv3 specifies this conversion function for <tt>propagate_const</tt> in 
<sref ref="[propagate_const.const_observers]"/>:
</p>
<blockquote>
<pre>
constexpr operator const element_type*() const;
</pre>
<blockquote>
<p>
-7- <i>Returns</i>: <tt>get()</tt>.
<p/>
-8- <i>Remarks</i>: This function shall not participate in overload resolution unless <tt>T</tt> is an 
object pointer type or has an implicit conversion to <tt>const element_type*</tt>. 
</p>
</blockquote>
</blockquote>
<p>
The constraint should however specify that <tt>const T</tt> (and not <tt>T</tt>) needs
to have an implicit conversion to <tt>const element_type *</tt>.
<p/>
Basically: if <tt>const T</tt> cannot do the conversion, then neither <tt>const propagate_const&lt;T&gt;</tt> 
should be able to.
<p/>
One can design a type <tt>X</tt> such as a <tt>const X</tt> cannot convert to <tt>const element_type *</tt> 
(for instance, by <tt>=delete</tt>ing the corresponding conversion function). If now one asks whether 
<tt>const propagate_const&lt;X&gt;</tt> is convertible to <tt>const element_type *</tt>, the answer is 
(surprisingly) "yes".
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4840"/>.
</p>

<ol>
<li><p>Modify <sref ref="[propagate_const.const_observers]"/> as indicated:</p>

<blockquote>
<pre>
constexpr operator const element_type*() const;
</pre>
<blockquote>
<p>
-7- <i>Returns</i>: <tt>get()</tt>.
<p/>
-8- <i>Remarks</i>: This function shall not participate in overload resolution unless <tt>T</tt> is an 
object pointer type or <ins><tt>const T</tt></ins> has an implicit conversion to <tt>const element_type*</tt>. 
</p>
</blockquote>
</blockquote>

</li>

</ol>
</resolution>

</issue>
