<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY hellip "&#x2026;">
  <!ENTITY mdash  "&#x2014;">
] >

<issue num="2523" status="New">
<title><tt>std::promise</tt> synopsis shows two <tt>set_value_at_thread_exit()</tt>'s for no apparent reason</title>
<section><sref ref="[futures.promise]"/></section>
<submitter>Tim Song</submitter>
<date>31 Jul 2015</date>
<priority>99</priority>

<discussion>
<p>
In <sref ref="[futures.promise]"/>, the class synopsis shows
</p>
<blockquote><pre>
void set_value_at_thread_exit(const R&amp; r);
void set_value_at_thread_exit(see below);
</pre></blockquote>
<p>
There's no apparent reason for having <tt>void set_value_at_thread_exit(const R&amp; r);</tt>, especially as that 
signature isn't really present in the specializations (particularly <tt>promise&lt;void&gt;</tt>). Note that the similar 
<tt>set_value</tt> only has a <tt>void set_value(<i>see below</i>);</tt>
</p>
<p>
While we are here, <sref ref="[futures.promise]"/>/p1 says that the specializations "differ only in the argument type of the 
member function <tt>set_value</tt>", which missed <tt>set_value_at_thread_exit</tt>.
</p>

</discussion>

<resolution>
<p>
This wording is relative to N4527.
</p>

<ol>
<li><p>Edit <sref ref="[futures.promise]"/>, class template <tt>promise</tt> synopsis, as indicated:</p>
<blockquote>
<pre>
namespace std {
  template &lt;class R&gt;
  class promise {
  public:
    [&hellip;]

    <i>// setting the result</i>
    void set_value(<i>see below</i>);
    void set_exception(exception_ptr p);
    
    <i>// setting the result with deferred notification</i>
    <del>void set_value_at_thread_exit(const R&amp; r);</del>
    void set_value_at_thread_exit(<i>see below</i>);
    void set_exception_at_thread_exit(exception_ptr p);
  };
}
</pre>
</blockquote>
</li>

<li><p>Edit <sref ref="[futures.promise]"/>/1 as indicated:</p>
<blockquote>
<p>
-1- The implementation shall provide the template <tt>promise</tt> and two specializations, <tt>promise&lt;R&amp;&gt;</tt> and 
<tt>promise&lt;void&gt;</tt>. These differ only in the argument type of the member function<ins>s</ins> <tt>set_value</tt>
<ins>and <tt>set_value_at_thread_exit</tt></ins>, as set out in <del>its description</del><ins>their descriptions</ins>, below.
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
