<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3772" status="WP">
<title><tt>repeat_view</tt>'s piecewise constructor is missing <i>Postconditions</i></title>
<section><sref ref="[range.repeat.view]"/></section>
<submitter>Hewill Kang</submitter>
<date>12 Sep 2022</date>
<priority>2</priority>

<discussion>
<p>
The first two value-bound pair constructors of <tt>repeat_view</tt> have the
<i>Preconditions</i> that the integer-like object <tt>bound</tt> must be
non-negative.
However, the piecewise constructor does not mention the valid values for
<tt>bound_args</tt>.
It would be nice to add a <i>Postconditions</i> that the initialized
<tt>bound_</tt> must be greater than or equal to <tt>0</tt> here.
</p>

<note>2022-09-23; Reflector poll</note>
<p>
Set priority to 2 after reflector poll.
</p>
<p>
This is trying to state a requirement on users, but that's not what
<i>Postconditions:</i> means. Should be something more like:
<br/>
Precondition: If <tt>Bound</tt> is not <tt>unreachable_sentinel_t</tt>,
the  <tt>bound_</tt> &ge; 0 after its initialization from <tt>bound_args</tt>.
</p>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>
This wording is relative to <paper num="n4917"/>.
</p>

<ol>
<li>
<p>Modify <sref ref="[range.repeat.view]"/> as shown:</p>

<blockquote>
<pre>
template&lt;class... WArgs, class... BoundArgs&gt;
  requires constructible_from&lt;W, WArgs...&gt; &amp;&amp;
           constructible_from&lt;Bound, BoundArgs...&gt;
constexpr explicit repeat_view(piecewise_construct_t,
  tuple&lt;Wargs...&gt; value_args, tuple&lt;BoundArgs...&gt; bound_args = tuple&lt;&gt;{});
</pre>

<blockquote>
<p>
-5- <i>Effects</i>: Initializes <tt><i>value_</i></tt> with arguments of types <tt>WArgs...</tt> obtained by forwarding the elements of <tt>value_args</tt> and initializes <tt><i>bound_</i></tt> 
with arguments of types <tt>BoundArgs...</tt> obtained by forwarding the elements of <tt>bound_args</tt>. (Here, forwarding an element <tt>x</tt> of type <tt>U</tt> within a tuple object means calling <tt>std::forward&lt;U&gt;(x)</tt>.)  
</p>
<p>
<ins>-?- <i>Postconditions</i>: If <tt>Bound</tt> is not <tt>unreachable_sentinel_t</tt>, <tt><i>bound_</i></tt> &ge; 0.</ins>
</p>
</blockquote>
</blockquote>
</li>
</ol>

</blockquote>

<note>2022-09-23; Jonathan provides improved wording</note>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">

<p>
This wording is relative to <paper num="N4917"/>.
</p>

<ol>
<li>
<p>Modify <sref ref="[range.repeat.view]"/> as shown:</p>

<blockquote>
<pre>
template&lt;class... WArgs, class... BoundArgs&gt;
  requires constructible_from&lt;W, WArgs...&gt; &amp;&amp;
           constructible_from&lt;Bound, BoundArgs...&gt;
constexpr explicit repeat_view(piecewise_construct_t,
  tuple&lt;Wargs...&gt; value_args, tuple&lt;BoundArgs...&gt; bound_args = tuple&lt;&gt;{});
</pre>

<blockquote>
<p>
<ins>-?- <i>Preconditions</i>:
<tt>Bound</tt> is <tt>unreachable_sentinel_t</tt>,
or the initialization of <tt><i>bound_</i></tt> yields a non-negative value.
</ins>
</p>
<p>
-5- <i>Effects</i>: Initializes <tt><i>value_</i></tt> with arguments of types <tt>WArgs...</tt> obtained by forwarding the elements of <tt>value_args</tt> and initializes <tt><i>bound_</i></tt>
with arguments of types <tt>BoundArgs...</tt> obtained by forwarding the elements of <tt>bound_args</tt>. (Here, forwarding an element <tt>x</tt> of type <tt>U</tt> within a tuple object means calling <tt>std::forward&lt;U&gt;(x)</tt>.)
</p>
</blockquote>
</blockquote>
</li>
</ol>

</blockquote>

<note>2023-01-11; Jonathan provides new wording requested by LWG</note>

<note>Issaquah 2023-02-07; LWG</note>
<p>Move to Immediate for C++23</p>

<note>2023-02-13 Status changed: Immediate &rarr; WP.</note>
</discussion>

<resolution>

<p>
This wording is relative to <paper num="N4917"/>.
</p>

<ol>
<li>
<p>Modify <sref ref="[range.repeat.view]"/> as shown:</p>

<blockquote>
<pre>
template&lt;class... TArgs, class... BoundArgs&gt;
  requires constructible_from&lt;T, TArgs...&gt; &amp;&amp;
           constructible_from&lt;Bound, BoundArgs...&gt;
constexpr explicit repeat_view(piecewise_construct_t,
  tuple&lt;Targs...&gt; value_args, tuple&lt;BoundArgs...&gt; bound_args = tuple&lt;&gt;{});
</pre>

<blockquote>
<p>
-5- <i>Effects</i>: Initializes <tt><i>value_</i></tt> with
<del>arguments of types <tt>TArgs...</tt> obtained by
forwarding the elements of <tt>value_args</tt></del>
<ins><tt>make_from_tuple&lt;T&gt;(std::move(value_args))</tt></ins>
and initializes <tt><i>bound_</i></tt>
with
<del>arguments of types <tt>BoundArgs...</tt> obtained by forwarding the elements of <tt>bound_args</tt>. (Here, forwarding an element <tt>x</tt> of type <tt>U</tt> within a tuple object means calling <tt>std::forward&lt;U&gt;(x)</tt>.)
</del>
<ins><tt>make_from_tuple&lt;Bound&gt;(std::move(bound_args))</tt>.</ins>
<ins>
The behavior is undefined if
<tt>Bound</tt> is not <tt>unreachable_sentinel_t</tt>
and <tt><i>bound_</i></tt> is negative.</ins>
</p>
</blockquote>
</blockquote>
</li>
</ol>

</resolution>

</issue>
