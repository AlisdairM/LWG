<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2310" status="Ready">
<title>Public <em>exposition only</em> member in <tt>std::array</tt></title>
<section><sref ref="[array.overview]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>30 Sep 2013</date>
<priority>4</priority>

<discussion>
<p>
<sref ref="[array.overview]"/> shows <tt>std::array</tt> with an "exposition only" data member, <tt>elems</tt>.
<p/>
The wording in <sref ref="[objects.within.classes]"/> that defines how
"exposition only" is used says it applies to private members, but
<tt>std::array::elems</tt> (or its equivalent) must be public in order for
<tt>std::array</tt> to be an aggregate.
<p/>
If the intention is that <tt>std::array::elems</tt> places requirements on the
implementation to provide "equivalent external behavior" to a public
array member, then <sref ref="[objects.within.classes]"/> needs to cover public
members too, or some other form should be used in <sref ref="[array.overview]"/>.
</p>

<note>Urbana 2014-11-07: Move to Open</note>
<note>Kona 2015-10: Link to <iref ref="2516"/></note>
<note>2015-11-14, Geoffrey Romer provides wording</note>

<note>2016-02-04, Tim Song improves the P/R</note>
<p>
Instead of the build-in address-operator, <tt>std::addressof</tt> should be used.
</p>

<note>2016-03 Jacksonville</note>
Move to Ready.
</discussion>

<resolution>
<p>This wording is relative to N4567.</p>

<ol>
<li><p>Edit <sref ref="[array.overview]"/> as indicated</p>

<blockquote>
<p>
[&hellip;]
<p/>
-3- An array [&hellip;]
</p>
<blockquote><pre>
namespace std {
  template &lt;class T, size_t N&gt;
  struct array {
    [&hellip;]
    <del>T elems[N]; <i>// exposition only</i></del>
    [&hellip;]
  };
}
</pre></blockquote>
<p>
<del>-4- [<i>Note</i>: The member variable <tt>elems</tt> is shown for exposition only, to emphasize that array is a class aggregate.
The name <tt>elems</tt> is not part of array's interface. &mdash; <i>end note</i>]</del>
</p>
</blockquote>
</li>

<li><p>Edit <sref ref="[array.data]"/> as follows:</p>

<blockquote>
<pre>
T* data() noexcept;
const T* data() const noexcept;
</pre>
<blockquote>
<p>
-1- <i>Returns</i>: <del><tt>elems</tt></del><ins>A pointer such that <tt>[data(), data() + size())</tt> is a valid range, 
and <tt>data() == addressof(front())</tt></ins>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
