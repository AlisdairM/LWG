<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3427" status="New">
<title><tt>operator&lt;=&gt;(const shared_ptr&lt;T&gt;&amp;, nullptr_t)</tt> definition ill-formed</title>
<section><sref ref="[util.smartptr.shared.cmp]"/></section>
<submitter>Daniel Kr&uuml;gler</submitter>
<date>11 Apr 2020</date>
<priority>99</priority>

<discussion>
<p>
This is similar to LWG <iref ref="3426"/>: This time the definition of 
<tt>operator&lt;=&gt;(const shared_ptr&lt;T&gt;&amp;, nullptr_t)</tt> is ill-formed, whose effects are essentially 
specified as calling:
</p>
<blockquote><pre>
compare_three_way()(a.get(), nullptr)
</pre></blockquote>
<p>
This call will be ill-formed by constraint-violation, because both <tt>nullptr &lt;=&gt; nullptr</tt> as well as 
<tt>((T*) 0) &lt;=&gt; nullptr</tt> are ill-formed.
<p/>
As a short-term solution we can make it work as intended &mdash; equivalent to LWG <iref ref="3426"/> &mdash; by 
comparing <tt>a.get()</tt> to <tt>(element_type*) nullptr</tt> instead of to <tt>nullptr</tt> directly.
<p/>
As a long-term solution we should at least consider to deprecate the mixed relational operators as well as the 
mixed three-way comparison operator of all our smart-pointers with <tt>std::nullptr_t</tt> since the core language 
has eliminated relational comparisons of pointers with <tt>std::nullptr_t</tt> with 
<a href="http://wg21.link/n3624">N3624</a> four years after they had been originally accepted by 
<a href="http://wg21.link/cwg879">CWG 879</a>. Consequently, for C++20, the mixed three-way comparison between 
pointers and <tt>nullptr</tt> is not supported either. For this long-term solution I'm suggesting to handle this
via a proposal.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <a href="http://wiki.edg.com/pub/Wg21summer2020/Documents/post-prague-wd.pdf">the 
post-Prague working draft preview</a>.
</p>

<ol>
<li><p>Modify <sref ref="[util.smartptr.shared.cmp]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class T&gt;
  strong_ordering operator&lt;=&gt;(const shared_ptr&lt;T&gt;&amp; a, nullptr_t) noexcept;
</pre>

<blockquote>
<p>
-5- <i>Returns:</i> <tt>compare_three_way()(a.get(), <ins>static_cast&lt;typename shared_ptr&lt;T&gt;::element_type*&gt;(</ins>nullptr<ins>)</ins>)</tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>
</issue>
