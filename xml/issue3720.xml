<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3720" status="Voting">
<title>Restrict the valid types of <i>arg-id</i> for <i>width</i> and <i>precision</i> in <i>std-format-spec</i></title>
<section><sref ref="[format.string.std]"/></section>
<submitter>Mark de Wever</submitter>
<date>19 Jun 2022</date>
<priority>2</priority>

<discussion>
<p>
Per <sref ref="[format.string.std]"/>/7
</p>
<blockquote><p>
If <tt>{ <i>arg-id<sub>opt</sub></i> }</tt> is used in a <i>width</i> or <i>precision</i>, 
the value of the corresponding formatting argument is used in its place. If the
corresponding formatting argument is not of integral type, or its value is negative for 
<i>precision</i> or non-positive for <i>width</i>, an exception of type <tt>format_error</tt> 
is thrown.
</p></blockquote>
<p>
The issue is the integral type requirement. The following code is currently valid:
</p>
<blockquote><pre>
std::cout &lt;&lt; std::format("{:*^{}}\n", 'a', '0');
std::cout &lt;&lt; std::format("{:*^{}}\n", 'a', true);
</pre></blockquote>
<p>
The output of the first example depends on the value of <tt>'0'</tt> in the implementation. 
When a <tt>char</tt> has <tt>signed char</tt> as underlying type negative values are invalid, 
while the same value would be valid when the underlying type is <tt>unsigned char</tt>.
For the second example the range of a boolean is very small, so this seems not really useful.
<p/>
Currently libc++ rejects these two examples and MSVC STL accepts them.
The members of the MSVC STL team, I spoke, agree these two cases should be rejected.
<p/>
The following integral types are rejected by both libc++ and MSVC STL:
</p>
<blockquote><pre>
std::cout &lt;&lt; std::format("{:*^{}}\n", 'a', L'0');
std::cout &lt;&lt; std::format("{:*^{}}\n", 'a', u'0');
std::cout &lt;&lt; std::format("{:*^{}}\n", 'a', U'0');
std::cout &lt;&lt; std::format("{:*^{}}\n", 'a', u8'0');
</pre></blockquote>
<p>
In order to accept these character types they need to meet the basic formatter 
requirements per <sref ref="[format.functions]"/>/20 and <sref ref="[format.functions]"/>/25
</p>
<blockquote><p>
<tt>formatter&lt;remove_cvref_t&lt;T<sub><i>i</i></sub>&gt;, charT&gt;</tt> meets the 
<i>BasicFormatter</i> requirements (<sref ref="[formatter.requirements]"/>) for each 
<tt>T<sub><i>i</i></sub></tt> in <tt>Args</tt>.
</p></blockquote>
<p>
which requires adding the following enabled formatter specializations to
<sref ref="[format.formatter.spec]"/>.
</p>
<blockquote><pre>
template&lt;&gt; struct formatter&lt;wchar_t, char&gt;;

template&lt;&gt; struct formatter&lt;char8_t, charT&gt;;
template&lt;&gt; struct formatter&lt;char16_t, charT&gt;;
template&lt;&gt; struct formatter&lt;char32_t, charT&gt;;
</pre></blockquote>
<p>
Note, that the specialization <tt>template&lt;&gt; struct formatter&lt;char, wchar_t&gt;</tt>
is already required by the Standard.
<p/>
Not only do they need to be added, but it also needs to be specified how
they behave when their value is not in the range of representable values
for <tt>charT</tt>.
<p/>
Instead of requiring these specializations, I propose to go the other
direction and limit the allowed types to signed and unsigned integers.
</p>

<note>2022-07-08; Reflector poll</note>
<p>
Set priority to 2 after reflector poll. Tim Song commented:
</p>
<blockquote><p>
"This is technically a breaking change, so we should do it sooner rather than later.
</p><p>
"I don't agree with the second part of the argument though - I don't see how this wording requires adding those transcoding specializations. Nothing in this wording requires integral types that cannot be packed into basic_format_arg to be accepted.
</p><p>
"I also think we need to restrict this to signed or unsigned integer types with size no greater than sizeof(long long). Larger types get type-erased into a handle and the value isn't really recoverable without heroics."
</p></blockquote>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>
This wording is relative to <paper num="N4910"/>.
</p>

<ol>
<li><p>Modify <sref ref="[format.string.std]"/> as indicated:</p>

<blockquote>
<p>
-7- If <tt>{ <i>arg-id<sub>opt</sub></i> }</tt> is used in a <i>width</i> or <i>precision</i>, 
the value of the corresponding formatting argument is used in its place. If the corresponding 
formatting argument is not of <del>integral</del><ins>signed or unsigned integer</ins> type, 
or its value is negative for <i>precision</i> or non-positive for <i>width</i>, an exception of 
type <tt>format_error</tt> is thrown.
</p>
</blockquote>
</li>

<li><p>Add a new paragraph to <sref ref="[diff.cpp20.utilities]"/> as indicated:</p>

<blockquote>
<p>
<ins><b>Affected subclause:</b> <sref ref="[format]"/></ins>
<p/>
<ins><b>Change:</b> Requirement changes of <i>arg-id</i> of the <i>width</i> and <i>precision</i>
fields of <i>std-format-spec</i>. <i>arg-id</i> now requires a signed or unsigned integer type instead 
of an integral type.</ins>
<p/>
<ins><b>Rationale:</b> Avoid types that are not useful and the need to specify enabled
  formatter specializations for all character types.</ins>
<p/>
<ins><b>Effect on original feature:</b> Valid C++ 2020 code that passes a boolean or character type 
as <i>arg-id</i> becomes invalid. For example:</ins>
</p>
<blockquote><pre>
<ins>std::format("{:*^{}}", "", true); <i>// ill-formed, previously returned "*"</i></ins>
</pre></blockquote>
</blockquote>

</li>

</ol>
</blockquote>

<note>2022-11-01; Jonathan provides improved wording</note>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">

<p>
This wording is relative to <paper num="N4917"/>.
</p>

<ol>
<li><p>Modify <sref ref="[format.string.std]"/> as indicated:</p>

<blockquote>
<p>
-8- If <tt>{ <i>arg-id<sub>opt</sub></i> }</tt> is used in a <i>width</i> or <i>precision</i>,
the value of the corresponding formatting argument is used in its place. If the corresponding
formatting argument is not of
<del>integral</del><ins>standard signed or unsigned integer</ins> type,
or its value is negative, an exception of type <tt>format_error</tt> is thrown.
</p>
</blockquote>
</li>

<li><p>Add a new paragraph to <sref ref="[diff.cpp20.utilities]"/> as indicated:</p>

<blockquote>
<p>
<ins><b>Affected subclause:</b> <sref ref="[format.string.std]"/></ins>
<p/>
<ins><b>Change:</b> Restrict types of formatting arguments used as
<i>width</i> or <i>precision</i> in a <i>std-format-spec</i>.</ins>
<p/>
<ins><b>Rationale:</b> Avoid types that are not useful or do not have
portable semantics.</ins>
<p/>
<ins><b>Effect on original feature:</b> Valid C++ 2020 code that passes a boolean or character type
as <i>arg-id</i> becomes invalid. For example:</ins>
</p>
<blockquote><pre>
<ins>std::format("{:*^{}}", "", true); <i>// ill-formed, previously returned "*"</i></ins>
<ins>std::format("{:*^{}}", "", '1'); <i>// ill-formed, previously returned an implementation-defined number of '*' characters</i></ins>
</pre></blockquote>
</blockquote>
</li>
</ol>

</blockquote>

<note>2022-11-10; Jonathan revises wording</note>
<p>Improve Annex C entry.</p>
<note>Kona 2022-11-10; Move to Ready</note>

</discussion>

<resolution>

<p>
This wording is relative to <paper num="N4917"/>.
</p>

<ol>
<li><p>Modify <sref ref="[format.string.std]"/> as indicated:</p>

<blockquote>
<p>
-8- If <tt>{ <i>arg-id<sub>opt</sub></i> }</tt> is used in a <i>width</i> or <i>precision</i>,
the value of the corresponding formatting argument is used in its place. If the corresponding
formatting argument is not of
<del>integral</del><ins>standard signed or unsigned integer</ins> type,
or its value is negative, an exception of type <tt>format_error</tt> is thrown.
</p>
</blockquote>
</li>

<li><p>Add a new paragraph to <sref ref="[diff.cpp20.utilities]"/> as indicated:</p>

<blockquote>
<p>
<ins><b>Affected subclause:</b> <sref ref="[format.string.std]"/></ins>
<p/>
<ins><b>Change:</b> Restrict types of formatting arguments used as
<i>width</i> or <i>precision</i> in a <i>std-format-spec</i>.</ins>
<p/>
<ins><b>Rationale:</b> Disallow types that do not have useful or portable
semantics as a formatting width or precision. </ins>
<p/>
<ins><b>Effect on original feature:</b> Valid C++ 2020 code that passes a boolean or character type
as <i>arg-id</i> becomes invalid. For example:</ins>
</p>
<blockquote><pre>
<ins>std::format("{:*^{}}", "", true); <i>// ill-formed, previously returned "*"</i></ins>
<ins>std::format("{:*^{}}", "", '1'); <i>// ill-formed, previously returned an implementation-defined number of '*' characters</i></ins>
</pre></blockquote>
</blockquote>
</li>
</ol>

</resolution>

</issue>
