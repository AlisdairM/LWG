<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3892" status="WP">
<title>Incorrect formatting of nested ranges and tuples</title>
<section><sref ref="[format.range.formatter]"/><sref ref="[format.tuple]"/></section>
<submitter>Victor Zverovich</submitter>
<date>20 Feb 2023</date>
<priority>2</priority>

<discussion>
<p>
<tt>formatter</tt> specializations for ranges and tuples set debug format for underlying element formatters in their 
<tt>parse</tt> functions e.g. <sref ref="[format.range.formatter]"/> p9:
</p>
<blockquote><pre>
template&lt;class ParseContext&gt;
  constexpr typename ParseContext::iterator
    parse(ParseContext&amp; ctx);
</pre>
<blockquote>
<p>
<i>Effects</i>: Parses the format specifier as a <i>range-format-spec</i> and stores the parsed specifiers in <tt>*this</tt>.
 The values of <tt><i>opening-bracket_</i></tt>, <tt><i>closing-bracket_</i></tt>, and <tt><i>separator_</i></tt> are modified 
 if and only if required by the <i>range-type</i> or the <tt>n</tt> option, if present. If:
</p>
<ol style="list-style-type: none">
<li><p>&mdash; the <i>range-type</i> is neither <tt>s</tt> nor <tt>?s</tt>,</p></li>
<li><p>&mdash; <tt><i>underlying_</i>.set_debug_format()</tt> is a valid expression, and</p></li>
<li><p>&mdash; there is no <i>range-underlying-spec</i>,</p></li>
</ol>
<p>
then calls <tt><i>underlying_</i>.set_debug_format()</tt>.
</p>
</blockquote>
</blockquote>
<p>
However, they don't say anything about calling <tt>parse</tt> functions of those formatters. As as result, 
formatting of nested ranges can be incorrect, e.g.
</p>
<blockquote><pre>
std::string s = std::format("{}", std::vector&lt;std::vector&lt;std::string&gt;&gt;{{"a, b", "c"}});
</pre></blockquote>
<p>
With the current specification <tt>s</tt> is <tt>[[a, b, c]]</tt> instead of <tt>[["a, b", "c"]]</tt>, i.e. strings 
in the output are not correctly escaped. The same is true for nested tuples and combinations of tuples and ranges.
<p/>
The fix approved by LEWG as part of <paper num="P2733"/> (which was trying to address a different issue) is to 
always call <tt>parse</tt> <a href="https://github.com/cplusplus/papers/issues/1426#issuecomment-1420017182">for underlying formatter</a>. 
Additionally the standard should clarify that <i>format-spec</i> cannot start with <tt>'}'</tt> because that's the 
implicit assumption in range formatting and what happens when <i>format-spec</i> is not present.
</p>

<note>2023-03-22; Reflector poll</note>
<p>
Set priority to 2 after reflector poll.
</p>

<superseded>
<p>
This wording is relative to <paper num="N4928"/>.
</p>

<ol>

<li><p>Modify <sref ref="[format.string.general]"/> p1 as indicated:</p>

<blockquote>
<dl>
<dt>[&hellip;]</dt>
<dt><i>format-specifier</i>:</dt>
<dd>: <i>format-spec</i></dd>
<dt><i>format-spec</i>:</dt>
<dd>as specified by the <tt>formatter</tt> specialization for the argument type<ins>; cannot start with <tt>}</tt></ins></dd>
</dl>
</blockquote>

</li>

<li><p>Modify <sref ref="[formatter.requirements]"/> as indicated:</p>

<blockquote>
<p>
-3- Given character type <tt>charT</tt>, output iterator type <tt>Out</tt>, and formatting argument type <tt>T</tt>, in 
Table 74 [tab:formatter.basic] and Table 75 [tab:formatter]:
<p/>
[&hellip;]
<p/>
<tt>pc.begin()</tt> points to the beginning of the <i>format-spec</i> (<sref ref="[format.string]"/>) of the 
replacement field being formatted in the format string. If <i>format-spec</i> is <ins>not present or</ins> empty then 
either <tt>pc.begin() == pc.end()</tt> or <tt>*pc.begin() == '}'</tt>.
</p>
</blockquote>

</li>

<li><p>Modify <sref ref="[format.range.formatter]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class ParseContext&gt;
  constexpr typename ParseContext::iterator
    parse(ParseContext&amp; ctx);
</pre>
<blockquote>
<p>
-9- <i>Effects</i>: Parses the format specifier<ins>s</ins> as a <i>range-format-spec</i> and stores the parsed specifiers in <tt>*this</tt>.
<ins>Calls <tt><i>underlying_</i>.parse(ctx)</tt> to parse <i>format-spec</i> in <i>range-format-spec</i> or, if the latter is not present, 
empty <i>format-spec</i>.</ins> The values of <tt><i>opening-bracket_</i></tt>, <tt><i>closing-bracket_</i></tt>, and <tt><i>separator_</i></tt> 
are modified if and only if required by the <i>range-type</i> or the <tt>n</tt> option, if present. If:
</p>
<ol style="list-style-type: none">
<li><p>(9.1) &mdash; the <i>range-type</i> is neither <tt>s</tt> nor <tt>?s</tt>,</p></li>
<li><p>(9.2) &mdash; <tt><i>underlying_</i>.set_debug_format()</tt> is a valid expression, and</p></li>
<li><p>(9.3) &mdash; there is no <i>range-underlying-spec</i>,</p></li>
</ol>
<p>
then calls <tt><i>underlying_</i>.set_debug_format()</tt>.
</p>
</blockquote>
</blockquote>

</li>

<li><p>Modify <sref ref="[format.tuple]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class ParseContext&gt;
  constexpr typename ParseContext::iterator
    parse(ParseContext&amp; ctx);
</pre>
<blockquote>
<p>
-7- <i>Effects</i>: Parses the format specifier<ins>s</ins> as a <i>tuple-format-spec</i> and stores the parsed specifiers 
in <tt>*this</tt>. The values of <tt><i>opening-bracket_</i></tt>, <tt><i>closing-bracket_</i></tt>, and <tt><i>separator_</i></tt> 
are modified if and only if required by the <i>tuple-type</i>, if present. For each element <tt><i>e</i></tt> in 
<tt><i>underlying_</i></tt>, <ins>calls <tt><i>e</i>.parse(ctx)</tt> to parse empty <i>format-spec</i> and,</ins> 
if <tt><i>e</i>.set_debug_format()</tt> is a valid expression, calls <tt><i>e</i>.set_debug_format()</tt>.
</p>
</blockquote>
</blockquote>


</li>


</ol>
</superseded>

<note>Varna 2023-06-16; Jonathan provides tweaked wording</note>
<p>
Add "an" in two places.
</p>

<note>Varna 2023-06-16; Move to Ready</note>
<p>
This would allow resolving LWG <iref ref="3776"/> as NAD.
</p>

<note>2023-11-11 Approved at November 2023 meeting in Kona. Status changed: Voting &rarr; WP.</note>
</discussion>

<resolution>

<p>
This wording is relative to <paper num="N4928"/>.
</p>

<ol>

<li><p>Modify <sref ref="[format.string.general]"/> p1 as indicated:</p>

<blockquote>
<dl>
<dt>[&hellip;]</dt>
<dt><i>format-specifier</i>:</dt>
<dd>: <i>format-spec</i></dd>
<dt><i>format-spec</i>:</dt>
<dd>as specified by the <tt>formatter</tt> specialization for the argument type<ins>; cannot start with <tt>}</tt></ins></dd>
</dl>
</blockquote>

</li>

<li><p>Modify <sref ref="[formatter.requirements]"/> as indicated:</p>

<blockquote>
<p>
-3- Given character type <tt>charT</tt>, output iterator type <tt>Out</tt>, and formatting argument type <tt>T</tt>, in 
Table 74 [tab:formatter.basic] and Table 75 [tab:formatter]:
<p/>
[&hellip;]
<p/>
<tt>pc.begin()</tt> points to the beginning of the <i>format-spec</i> (<sref ref="[format.string]"/>) of the 
replacement field being formatted in the format string. If <i>format-spec</i> is <ins>not present or</ins> empty then 
either <tt>pc.begin() == pc.end()</tt> or <tt>*pc.begin() == '}'</tt>.
</p>
</blockquote>

</li>

<li><p>Modify <sref ref="[format.range.formatter]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class ParseContext&gt;
  constexpr typename ParseContext::iterator
    parse(ParseContext&amp; ctx);
</pre>
<blockquote>
<p>
-9- <i>Effects</i>: Parses the format specifier<ins>s</ins> as a <i>range-format-spec</i> and stores the parsed specifiers in <tt>*this</tt>.
<ins>Calls <tt><i>underlying_</i>.parse(ctx)</tt> to parse <i>format-spec</i> in <i>range-format-spec</i> or, if the latter is not present, 
an empty <i>format-spec</i>.</ins> The values of <tt><i>opening-bracket_</i></tt>, <tt><i>closing-bracket_</i></tt>, and <tt><i>separator_</i></tt> 
are modified if and only if required by the <i>range-type</i> or the <tt>n</tt> option, if present. If:
</p>
<ol style="list-style-type: none">
<li><p>(9.1) &mdash; the <i>range-type</i> is neither <tt>s</tt> nor <tt>?s</tt>,</p></li>
<li><p>(9.2) &mdash; <tt><i>underlying_</i>.set_debug_format()</tt> is a valid expression, and</p></li>
<li><p>(9.3) &mdash; there is no <i>range-underlying-spec</i>,</p></li>
</ol>
<p>
then calls <tt><i>underlying_</i>.set_debug_format()</tt>.
</p>
</blockquote>
</blockquote>

</li>

<li><p>Modify <sref ref="[format.tuple]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class ParseContext&gt;
  constexpr typename ParseContext::iterator
    parse(ParseContext&amp; ctx);
</pre>
<blockquote>
<p>
-7- <i>Effects</i>: Parses the format specifier<ins>s</ins> as a <i>tuple-format-spec</i> and stores the parsed specifiers 
in <tt>*this</tt>. The values of <tt><i>opening-bracket_</i></tt>, <tt><i>closing-bracket_</i></tt>, and <tt><i>separator_</i></tt> 
are modified if and only if required by the <i>tuple-type</i>, if present. For each element <tt><i>e</i></tt> in 
<tt><i>underlying_</i></tt>, <ins>calls <tt><i>e</i>.parse(ctx)</tt> to parse an empty <i>format-spec</i> and,</ins> 
if <tt><i>e</i>.set_debug_format()</tt> is a valid expression, calls <tt><i>e</i>.set_debug_format()</tt>.
</p>
</blockquote>
</blockquote>


</li>


</ol>
</resolution>

</issue>
