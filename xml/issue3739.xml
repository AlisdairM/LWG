<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3739" status="New">
<title><tt>chunk_view::size</tt> should preserve the signedness of the size of the underlying range</title>
<section><sref ref="[range.chunk.view.input]"/><sref ref="[range.chunk.view.fwd]"/></section>
<submitter>Hewill Kang</submitter>
<date>15 Jul 2022</date>
<priority>99</priority>

<discussion>
<p>
Currently, the <i>Effects</i> of <tt>chunk_view::size</tt> simply returns 
<tt><i>to-unsigned-like</i>(<i>div-ceil</i>(ranges::distance(<i>base_</i>), <i>n_</i>))</tt>, 
where <tt><i>div-ceil</i></tt> is defined in <sref ref="[range.chunk.view.input]"/> as:
</p>
<pre>
template&lt;class I&gt;
constexpr I <i>div-ceil</i>(I num, I denom) { // <i>exposition only</i>
  I r = num / denom;
  if (num % denom)
    ++r;
  return r;
}
</pre>
<p>
There are two problems here. First, for the const version of chunk_view::size, 
the types of <tt>ranges::distance(<i>base_</i>)</tt> and <tt><i>n_</i></tt> are 
<tt>range_difference_t&lt;const V&gt;</tt> and 
<tt>range_difference_t&lt;V&gt;</tt> respectively,   and the two parameters of 
<tt><i>div-ceil</i></tt> have the same type <tt>I</tt>.
Given that the standard does not guarantee that <tt>V</tt> and <tt>const V</tt> must have 
the same <tt>difference_type</tt>,   this makes the <tt><i>div-ceil</i></tt>'s template 
deduction fail when the two are different.
<p/>
Second, the standard does not guarantee that <tt>ranges::size</tt> must return an 
unsigned type, but here we use <tt><i>to-unsigned-like</i></tt> to unconditionally 
convert the return type of <tt>chunk_view::size</tt> to an unsigned type,
which is inconsistent with the behavior of other range adaptors such as 
<tt>take_view</tt> and <tt>drop_view</tt>.
<p/>
We should try to preserve the characteristics of the <tt>range_size_t</tt> of the underlying 
range as much as possible.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4910"/>.
</p>

<ol>
<li><p>Modify <sref ref="[range.chunk.view.input]"/> as indicated:</p>

<blockquote>
<pre>
constexpr auto size() requires sized_range&lt;V&gt;;
constexpr auto size() const requires sized_range&lt;const V&gt;;
</pre>
<blockquote>
<p>
-5- <i>Effects:</i> Equivalent to:
<pre>
return <del><i>to-unsigned-like</i>(</del><i>div-ceil</i>(ranges::<ins>size</ins><del>distance</del>(<i>base_</i>), <ins>static_cast&lt;decltype(ranges::size(<i><i>base_</i></i>))&gt;(</ins><i>n_</i>));
</pre>
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.chunk.view.fwd]"/> as indicated:</p>

<blockquote>
<pre>
constexpr auto size() requires sized_range&lt;V&gt;;
constexpr auto size() const requires sized_range&lt;const V&gt;;
</pre>
<blockquote>
<p>
-3- <i>Effects:</i> Equivalent to:
<pre>
return <del><i>to-unsigned-like</i>(</del><i>div-ceil</i>(ranges::<ins>size</ins><del>distance</del>(<i>base_</i>), <ins>static_cast&lt;decltype(ranges::size(<i><i>base_</i></i>))&gt;(</ins><i>n_</i>));
</pre>
</p>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
