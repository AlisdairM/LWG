<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3478" status="New">
<title><tt>views::split</tt> drops trailing empty range</title>
<section><sref ref="[range.split]"/></section>
<submitter>Barry Revzin</submitter>
<date>20 Aug 2020</date>
<priority>99</priority>

<discussion>
<p>
From <a href="https://stackoverflow.com/q/63497978/2069064">StackOverflow</a>, the program:
</p>
<blockquote><pre>
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;ranges&gt;

int main() 
{
  std::string s = " text ";
  auto sv = std::ranges::views::split(s, ' ');                    
  std::cout &lt;&lt; std::ranges::distance(sv.begin(), sv.end());
}
</pre></blockquote>
<p>
prints 2 (as specified), but it really should print 3. If a range has <tt>N</tt> delimiters in it, 
splitting should produce <tt>N+1</tt> pieces. If the <tt>N</tt><sup>th</sup> delimiter is the last 
element in the input range, <tt>views::split</tt> produces only <tt>N</tt> pieces &mdash; it doesn't 
emit a trailing empty range.
<p/>
Going through a bunch of languages gets a sense of what they all do here. There are basically two 
groups (and Haskell goes in both because it has several different split functions)
</p>
<ol>
<li><p>Rust, Python, Javascript, Go, Kotlin, Haskell's <tt>"splitOn"</tt> all provide <tt>N+1</tt> parts 
if there were <tt>N</tt> delimiters.</p></li>
<li><p>APL, D, Elixir, Java, Haskell's <tt>"words"</tt>, Ruby, and Clojure all compress all empty words. 
Splitting <tt>" x "</tt> on <tt>" "</tt> would give <tt>["x"]</tt> here, whereas the languages in the 
above group would give <tt>["", "x", ""]</tt></p></li>
</ol>
<p>
I think C++20/range-v3's <tt>split</tt> intends to be in that first category, and it very nearly is except 
for the case where the last character is the delimiter. That's why I think the current behavior is just 
a specification error. 
</p>
</discussion>

<resolution>
</resolution>

</issue>
