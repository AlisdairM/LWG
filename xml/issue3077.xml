<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3077" status="Voting">
<title><tt>(push|emplace)_back</tt> should invalidate the <tt>end</tt> iterator</title>
<section><sref ref="[vector.modifiers]"/></section>
<submitter>Casey Carter</submitter>
<date>10 Mar 2018</date>
<priority>3</priority>

<discussion>
<p>
<sref ref="[vector.modifiers]"/> paragraph 1 specifies that <tt>emplace_back</tt>
and <tt>push_back</tt> do not invalidate iterators before the insertion point when
reallocation is unnecessary:
<blockquote>
<i>Remarks:</i> Causes reallocation if the new size is greater than the old capacity.
Reallocation invalidates all the references, pointers, and iterators referring to
the elements in the sequence. If no reallocation happens, all the iterators and
references before the insertion point remain valid. [&hellip;]
</blockquote>
This statement is redundant, given the blanket wording in
<sref ref="[container.requirements.general]"/> paragraph 12:
<blockquote>
Unless otherwise specified (either explicitly or by defining a function in terms
of other functions), invoking a container member function or passing a container
as an argument to a library function shall not invalidate iterators to, or change
the values of, objects within that container.
</blockquote>
It seems that this second sentence (1) should be a note that reminds us that the
blanket wording applies here when no reallocation occurs, and/or (2) actually
intends to specify that iterators at and after the insertion point are invalidated.
</p>
<p>
Also, it seems intended that reallocation should invalidate the <tt>end</tt>
iterator as well.
</p>

<note>2018-06-18 after reflector discussion</note>
<p>Priority set to 3</p>
<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<ol>
<li>
<p>Edit <sref ref="[vector.modifiers]"/> as indicated:</p>
<blockquote>
<p>
-1- <i>Remarks:</i> <ins>Invalidates the past-the-end iterator.</ins> Causes
reallocation if the new size is greater than the old capacity. Reallocation
invalidates all the references, pointers, and iterators referring to the elements
in the sequence. <ins>[<i>Note:</i></ins> If no reallocation happens, all the
iterators and references before the insertion point remain
valid.<ins>&mdash;<i>end note</i>]</ins> If an exception is thrown [&hellip;]
</p>
</blockquote>
</li>
</ol>
</blockquote>

<note>2018-11-28 Casey provides an updated P/R</note>
Per discussion in the prioritization thread on the reflector.

<note>2018-12-01 Status to Tentatively Ready after seven positive votes on the reflector.</note>
</discussion>

<resolution>
<p>
This wording is relative to the post-San Diego working draft.
</p>

<ol>
<li>
<p>Change <sref ref="[string.capacity]"/> as indicated:</p>
<blockquote>
<blockquote>
<pre>
void shrink_to_fit();
</pre>
</blockquote>
<p>
-11- <i>Effects:</i> <tt>shrink_­to_­fit</tt> is a non-binding request to reduce
<tt>capacity()</tt> to <tt>size()</tt>. [ <i>Note:</i> The request is
non-binding to allow latitude for implementation-specific optimizations.
&mdash; <i>end note</i> ] It does not increase <tt>capacity()</tt>, but may
reduce <tt>capacity()</tt> by causing reallocation.
</p><p>
-12- <i>Complexity:</i> <ins>If the size is not equal to the old capacity,</ins>
linear in the size of the sequence<ins>; otherwise constant</ins>.
</p><p>
-13- <i>Remarks:</i> Reallocation invalidates all the references, pointers, and
iterators referring to the elements in the sequence<ins>,</ins> as well as the
past-the-end iterator. <ins>[ <i>Note:</i></ins> If no reallocation happens,
they remain valid. <ins>&mdash; <i>end note</i> ]</ins>
</p>
</blockquote>
</li>
<li>
<p>Change <sref ref="[deque.capacity]"/> as indicated:</p>
<blockquote>
<blockquote>
<pre>
void shrink_to_fit();
</pre>
</blockquote>
<p>
-5- <i>Requires:</i> <tt>T</tt> shall be <i><tt>Cpp17MoveInsertable</tt></i>
into <tt>*this</tt>.
</p><p>
-6- <i>Effects:</i> <tt>shrink_­to_­fit</tt> is a non-binding request to reduce
memory use but does not change the size of the sequence. [ <i>Note:</i> The
request is non-binding to allow latitude for implementation-specific
optimizations. &mdash;<i>end note</i> ] If <ins>the size is equal to
the old capacity, or if</ins> an exception is thrown other than by
the move constructor of a non-<i><tt>Cpp17CopyInsertable</tt></i>
<tt>T</tt><ins>, then</ins> there are no effects.
</p><p>
-7- <i>Complexity:</i> <ins>If the size is not equal to the old capacity,</ins>
linear in the size of the sequence<ins>; otherwise constant</ins>.
</p><p>
-8- <i>Remarks:</i> <del><tt>shrink_to_fit</tt></del> <ins>If the size is not
equal to the old capacity, then</ins> invalidates all the references, pointers,
and iterators referring to the elements in the sequence<ins>,</ins> as well as
the past-the-end iterator.
</p>
</blockquote>
</li>
<li>
<p>Change <sref ref="[vector.capacity]"/> as indicated:</p>
<blockquote>
<blockquote>
<pre>
void reserve(size_type n);
</pre>
</blockquote>
<p>[&hellip;]</p>
<p>
-7- <i>Remarks:</i> Reallocation invalidates all the references, pointers, and
iterators referring to the elements in the sequence<ins>, as well as the
past-the-end iterator</ins>. <ins>[ <i>Note:</i> If no reallocation happens,
they remain valid. &mdash; <i>end note</i> ]</ins> No reallocation shall take place
during insertions that happen after a call to <tt>reserve()</tt> until <del>the
time when</del> an insertion would make the size of the vector greater than the
value of <tt>capacity()</tt>.
</p>
<blockquote>
<pre>
void shrink_to_fit();
</pre>
</blockquote>
<p>[&hellip;]</p>
<p>
-10- <i>Complexity:</i> <ins>If reallocation happens,</ins> linear in the size
of the sequence.
</p><p>
-11- <i>Remarks:</i> Reallocation invalidates all the references, pointers, and
iterators referring to the elements in the sequence<ins>,</ins> as well as the
past-the-end iterator. <ins>[ <i>Note:</i></ins> If no reallocation happens,
they remain valid. <ins>&mdash; <i>end
note</i> ]</ins>
</p>
</blockquote>
</li>
<li>
<p>Change <sref ref="[vector.modifiers]"/> as indicated:</p>
<blockquote>
<p>
-1- <i>Remarks:</i> Causes reallocation if the new size is greater than the old
capacity. Reallocation invalidates all the references, pointers, and iterators
referring to the elements in the sequence <ins>as well as the past-the-end
iterator</ins>. If no reallocation happens, <del>all the iterators and
references</del> <ins>then references, pointers, and iterators</ins> before the
insertion point remain valid <ins>but those at or after the insertion point,
including the past-the-end iterator, are invalidated</ins>.
If an exception is thrown [&hellip;]
</p><p>
-2- <i>Complexity:</i> <del>The complexity is</del> <ins>If reallocation
happens, linear in the number of elements of the resulting vector;
otherwise</ins> linear in the number of elements inserted plus the distance to
the end of the vector.
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
