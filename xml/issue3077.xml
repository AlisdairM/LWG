<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3077" status="New">
<title><tt>(push|emplace)_back</tt> should invalidate the <tt>end</tt> iterator</title>
<section><sref ref="[vector.modifiers]"/></section>
<submitter>Casey Carter</submitter>
<date>10 Mar 2018</date>
<priority>3</priority>

<discussion>
<p>
<sref ref="[vector.modifiers]"/> paragraph 1 specifies that <tt>emplace_back</tt>
and <tt>push_back</tt> do not invalidate iterators before the insertion point when
reallocation is unnecessary:
<blockquote>
Remarks: Causes reallocation if the new size is greater than the old capacity.
Reallocation invalidates all the references, pointers, and iterators referring to
the elements in the sequence. If no reallocation happens, all the iterators and
references before the insertion point remain valid. [&hellip;]
</blockquote>
This statement is redundant, given the blanket wording in
<sref ref="[container.requirements.general]"/> paragraph 12:
<blockquote>
Unless otherwise specified (either explicitly or by defining a function in terms
of other functions), invoking a container member function or passing a container
as an argument to a library function shall not invalidate iterators to, or change
the values of, objects within that container.
</blockquote>
It seems that this second sentence (1) should be a note that reminds us that the
blanket wording applies here when no reallocation occurs, and/or (2) actually
intends to specify that iterators at and after the insertion point are invalidated.
</p>
<p>
Also, it seems intended that reallocation should invalidate the <tt>end</tt>
iterator as well.
</p>

<note>2018-06-18 after reflector discussion</note>
<p>Priority set to 3</p>
</discussion>

<resolution>
<p>
This wording is relative to <a href="http://wg21.link/n4727">N4727</a>.
</p>

<ol>
<li>
<p>Edit <sref ref="[vector.modifiers]"/> as indicated:</p>
<blockquote>
<p>
-1- <i>Remarks:</i> <ins>Invalidates the past-the-end iterator.</ins> Causes
reallocation if the new size is greater than the old capacity. Reallocation
invalidates all the references, pointers, and iterators referring to the elements
in the sequence. <ins>[<i>Note:</i></ins> If no reallocation happens, all the
iterators and references before the insertion point remain
valid.<ins>&mdash;<i>end note</i>]</ins> If an exception is thrown [&hellip;]
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
