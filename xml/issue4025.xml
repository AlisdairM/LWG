<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4025" status="Voting">
<title>Move assignment operator of <tt>std::expected&lt;<i>cv</i> void, E&gt;</tt> should not be conditionally deleted</title>
<section><sref ref="[expected.void.assign]"/></section>
<submitter>Jiang An</submitter>
<date>16 Dec 2023</date>
<priority>99</priority>

<discussion>
<p>
It seems intended that copy functions of <tt>std::optional</tt>, <tt>std::variant</tt>, and <tt>std::expected</tt> 
are conditionally deleted, while move functions are constrained. However, the move assignment operator of 
<tt>std::expected&lt;<i>cv</i> void, E&gt;</tt> is currently conditionally deleted, which is inconsistent.
</p>

<note>2024-03-11; Reflector poll</note>
<p>
Set status to Tentatively Ready after six votes in favour during reflector poll.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4971"/>.
</p>

<ol>

<li><p>Modify <sref ref="[expected.void.assign]"/> as indicated:</p>

<blockquote>
<pre>
constexpr expected&amp; operator=(expected&amp;&amp; rhs) noexcept(<i>see below</i>);
</pre>
<blockquote>
<p>
<ins>-?- <i>Constraints</i>: <tt>is_move_constructible_v&lt;E&gt;</tt> is <tt>true</tt> and 
<tt>is_move_assignable_v&lt;E&gt;</tt> is <tt>true</tt>.</ins>
<p/>
[&hellip;]
<p/>
-6- <i>Remarks</i>: The exception specification is equivalent to <tt>is_nothrow_move_constructible_v&lt;E&gt; &amp;&amp;
is_nothrow_move_assignable_v&lt;E&gt;</tt>.
<p/>
<del>-7- This operator is defined as deleted unless <tt>is_move_constructible_v&lt;E&gt;</tt> is <tt>true</tt> 
and <tt>is_move_assignable_v&lt;E&gt;</tt> is <tt>true</tt>.</del>
</p>
</blockquote>
</blockquote>
</li>

</ol>


</resolution>

</issue>
