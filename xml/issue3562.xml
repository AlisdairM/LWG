<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3562" status="NAD">
<title>Superseding <tt>nullopt_t</tt>'s requirement to not be <i>DefaultConstructible</i></title>
<section><sref ref="[optional.nullopt]"/></section>
<submitter>David Friberg</submitter>
<date>04 Jun 2021</date>
<priority>99</priority>

<discussion>
<p>
<sref ref="[optional.nullopt]"/> p2 requires that <tt>nullopt_t</tt> shall not have a default constructor 
([&hellip;] or an initializer-list constructor, and shall not be an aggregate). However, after the final 
resolution of LWG issue <iref ref="2510"/> and <a href="https://wg21.link/cwg1518">CWG 1518</a> it seems 
as if the following synopsis would suffice:
</p>
<blockquote><pre>
struct nullopt_t { explicit nullopt_t() = default; };
</pre></blockquote>
<p>
Which would also be consistent with other tag types.
<p/>
<sref ref="[optional.nullopt]"/> p2 in its current form was written prior to the final resolution of LWG issue 
<iref ref="2510"/> and <a href="https://wg21.link/cwg1518">CWG 1518</a>, and is arguably based on using an 
earlier proposed approach for tag types which was later superseded.
<p/>
<b>Details:</b>
<p/>
<paper num="P0032R3"/> was part of introducing <tt>optional</tt> and contained a discussion around the 
<tt>nullopt_t</tt> type, tag types in general, and the <i>DefaultConstructible</i> requirement. Particularly, 
from section 'Not assignable from <tt>{}</tt>':
</p>
<blockquote style="border-left: 3px solid #ccc;padding-left: 15px;"><p>
To re-enforce this design, there is an pending issue 2510-Tag types should not be DefaultConstructible Core issue 2510.
</p></blockquote>
<p>
At the time of <paper num="P0032R3"/>, the resolution of LWG issue <iref ref="2510"/> was indeed for all tag types
to not be <i>DefaultConstructible</i>, but this resolution was later superseded as part of the resolution of 
CWG issue <a href="https://wg21.link/cwg1518">CWG 1518</a>, which in turn reverted parts of the resolution of 
CWG issue <a href="https://wg21.link/cwg1630">CWG 1630</a> (which "went too far in allowing use of explicit 
constructors for default initialization").
<p/>
The final resolution for CWG 1518 (<paper num="P0398R0"/>) lead to the requirement for aggregate classes to not 
have any explicit [user-declared] constructors, and LWG <iref ref="2510"/> was resolved accordingly by making all 
tag types have explicit user-declared (constexpr) default constructors.
<p/>
However, the spec of <tt>nullopt_t</tt> never changed after these events or as part of updating other tag types, 
and it is still explicitly required to not be <i>DefaultConstructible</i> (nor have a initialization-list constructor) 
and to not be an aggregate, whereas the implementation of it is otherwise unspecified.
<p/>
We may note that we still see some compiler variance on the topic of CWG issues 1518 &amp; 1630, see this
<a href="https://godbolt.org/z/Tf96s4Krf">godbolt link</a>.
</p>
<note>2021-06-14 Reflector poll:
Current wording prevents an implicit conversion sequence from <code>{}</code>.
Status changed: New &rarr; NAD.</note>
</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4885">N4885</a>.
</p>

<ol>
<li><p>Modify <sref ref="[optional.syn]"/>, header <tt>&lt;optional&gt;</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
[&hellip;]

<i>// <sref ref="[optional.nullopt]"/>, no-value state indicator</i>
struct nullopt_t{<del><i>see below</i></del> <ins>explicit nullopt_t() = default;</ins> };
inline constexpr nullopt_t nullopt<ins>{}</ins><del>(<i>unspecified</i>)</del>;

[&hellip;]
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[optional.nullopt]"/> as indicated:</p>

<blockquote>
<blockquote>
<pre>
struct nullopt_t{<del><i>see below</i></del> <ins>explicit nullopt_t() = default;</ins> };
inline constexpr nullopt_t nullopt<ins>{}</ins><del>(<i>unspecified</i>)</del>;
</pre>
</blockquote>
<p>
-1- The struct <tt>nullopt_t</tt> is an empty class type used as a unique type to indicate the state 
of not containing a value for <tt>optional</tt> objects. In particular, <tt>optional&lt;T&gt;</tt> 
has a constructor with <tt>nullopt_t</tt> as a single argument; this indicates that an optional object 
not containing a value shall be constructed.
<p/>
<del>-2- Type <tt>nullopt_t</tt> shall not have a default constructor or an initializer-list constructor, 
and shall not be an aggregate.</del>
</p>
</blockquote>
</li>

</ol>
</resolution>
</issue>
