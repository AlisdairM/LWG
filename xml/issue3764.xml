<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3764" status="C++23">
<title><tt>reference_wrapper::operator()</tt> should propagate <tt>noexcept</tt></title>
<section><sref ref="[refwrap.invoke]"/></section>
<submitter>Zhihao Yuan</submitter>
<date>31 Aug 2022</date>
<priority>99</priority>

<discussion>
<p>
The following assertion does not hold, making
the type less capable than the function pointers.
</p>
<blockquote><pre>
void f() noexcept;

std::reference_wrapper fn = f;
static_assert(std::is_nothrow_invocable_v&lt;decltype(fn)&gt;);
</pre></blockquote>

<note>2022-09-23; Reflector poll</note>
<p>
Set status to Tentatively Ready after six votes in favour during reflector poll.
</p>
<p>
Already implemented in MSVC and libstdc++.
</p>

<note>2022-11-12 Approved at November 2022 meeting in Kona. Status changed: Voting &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4910"/>.
</p>

<ol>

<li><p>Modify <sref ref="[refwrap.general]"/>, class template <tt>reference_wrapper</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
<i>// <sref ref="[refwrap.invoke]"/>, invocation</i>
template&lt;class... ArgTypes&gt;
  constexpr invoke_result_t&lt;T&amp;, ArgTypes...&gt; operator()(ArgTypes&amp;&amp;...) const 
    <ins>noexcept(is_nothrow_invocable_v&lt;T&amp;, ArgTypes...&gt;)</ins>;
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[refwrap.invoke]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class... ArgTypes&gt;
  constexpr invoke_result_t&lt;T&amp;, ArgTypes...&gt;
    operator()(ArgTypes&amp;&amp;... args) const <ins>noexcept(is_nothrow_invocable_v&lt;T&amp;, ArgTypes...&gt;)</ins>;
</pre>
<blockquote>
<p>
-1- <i>Mandates</i>: <tt>T</tt> is a complete type.
<p/>
-2- <i>Returns</i>: <tt><i>INVOKE</i>(get(), std::forward&lt;ArgTypes&gt;(args)...)</tt>. (<sref ref="[func.require]"/>)
</p>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
