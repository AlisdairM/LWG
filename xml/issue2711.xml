<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2711" status="New">
<title><tt>path</tt> is convertible from approximately everything under the sun</title>
<section><sref ref="[path.construct]"/></section>
<submitter>Tim Song</submitter>
<date>10 May 2016</date>
<priority>99</priority>

<discussion>
<p>
The unconstrained <tt>template&lt;class Source&gt; path(const Source&amp; source);</tt> constructor defines an 
implicit conversion from pretty much everything to <tt>path</tt>. This can lead to surprising ambiguities in 
overload resolution.
<p/>
For example, given LWG <iref ref="2676"/>'s proposed resolution, the following code appears to be ambiguous:
</p>
<blockquote><pre>
struct meow {
  operator const char *() const;
};

std::ifstream purr(meow{});
</pre></blockquote>
<p>
because a <tt>meow</tt> can be converted to either a <tt>path</tt> or a <tt>const char*</tt> by a user-defined 
conversion, even though part of the stated goal of LWG <iref ref="2676"/>'s P/R is to avoid "break[ing] user 
code depending on user-defined automatic conversions to the existing argument types".
</p>
</discussion>

<resolution>
<p>
This wording is relative to N4582.
</p>

<blockquote class="note">
<p>
[<i>Drafting note:</i> <tt>decay_t&lt;Source&gt;</tt> handles both the input iterator case (<sref ref="[path.req]"/>/1.2) and 
the array case (<sref ref="[path.req]"/>/1.3). The level of constraints required is debatable; the following wording limits 
the constraint to "is a <tt>basic_string</tt> or an iterator", but perhaps stronger constraints (e.g., an 
<tt>iterator_category</tt> check in the second case, and/or a <tt>value_type</tt> check for both cases) would be desirable.]
</p>
</blockquote>

<ol>
<li><p>Change <sref ref="[path.construct]"/> as indicated:</p>

<blockquote>
<pre>
template &lt;class Source&gt;
  path(const Source&amp; source);
template &lt;class InputIterator&gt;
  path(InputIterator first, InputIterator last);
</pre>
<blockquote>
<p>
-4- <i>Effects:</i> Constructs an object of class <tt>path</tt>, storing the effective range of <tt>source</tt> (27.10.8.3) 
or the range <tt>[first, last)</tt> in <tt>pathname</tt>, converting format and encoding if required (27.10.8.2.1).
<p/>
<ins>-?- <i>Remarks:</i> The first overload shall not participate in overload resolution unless either <tt>Source</tt> 
is a specialization of <tt>basic_string</tt> or the qualified-id <tt>iterator_traits&lt;decay_t&lt;Source&gt;&gt;::value_type</tt> 
is valid and denotes a type (<sref ref="[temp.deduct]"/>).</ins>
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
