<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4007" status="New">
<title>Mystic prohibition of calling a <tt>volatile</tt>-qualified perfect forwarding call wrapper</title>
<section><sref ref="[func.require]"/></section>
<submitter>Jiang An</submitter>
<date>05 Nov 2023</date>
<priority>99</priority>

<discussion>
<p>
<sref ref="[func.require]"/>/4 says:
</p>
<blockquote><p>
[&hellip;] This forwarding step delivers a state entity of type <tt>T</tt> as <i>cv</i> <tt>T&amp;</tt> 
when the call is performed on an lvalue of the call wrapper type and as <i>cv</i> <tt>T&amp;&amp;</tt> 
otherwise, where <i>cv</i> represents the cv-qualifiers of the call wrapper and where <i>cv</i> shall 
be neither <tt>volatile</tt> nor <tt>const volatile</tt>.
</p></blockquote>
<p>
The "shall" seemingly indicates a requirement for user codes that calling a volatile perfect forwarding 
call wrapper is undefined behavior. Such requirement seems to be combined with requirements for 
implementations in an unusual way.
<p/>
Moreover, it is unclear whether UB is intended here. Perhaps we only want calling such a <tt>volatile</tt> 
wrapper to be conditionally-supported. E.g. when the <tt>operator()</tt> happens to be implementable as a 
static member function, calling a <tt>volatile</tt> wrapper can be naturally supported and have expected 
behavior.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4964"/>.
</p>

<ol>

<li><p>Modify <sref ref="[func.require]"/> as indicated:</p>

<blockquote>
<p>
4 A <i>perfect forwarding call wrapper</i> is an argument forwarding call wrapper that forwards its state entities
to the underlying call expression. This forwarding step delivers a state entity of type <tt>T</tt> as 
<i>cv</i> <tt>T&amp;</tt> when the call is performed on an lvalue of the call wrapper type and as <i>cv</i> 
<tt>T&amp;&amp;</tt> otherwise, where <i>cv</i> represents the cv-qualifiers of the call wrapper <del>and where 
<i>cv</i> shall be neither <tt>volatile</tt> nor <tt>const volatile</tt></del><ins>, except that if <i>cv</i> 
is either <tt>volatile</tt> or <tt>const volatile</tt>, it is unspecified whether the call is well-formed</ins>.
</p>
</blockquote>

</li>

</ol>
</resolution>

</issue>
