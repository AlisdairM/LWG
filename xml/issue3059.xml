<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3059" status="New">
<title>Wrong requirements for map-like associative container assignment?</title>
<section><sref ref="[container.requirements]"/></section>
<submitter>Richard Smith</submitter>
<date>5 Feb 2018</date>
<priority>99</priority>

<discussion>
<p>
What are the requirements for
</p>
<blockquote><pre>
a = b;
</pre></blockquote>
<p>
... where <tt>a</tt> and <tt>b</tt> are of map-like associative container type (<tt>map</tt>, 
<tt>multimap</tt>, <tt>unordered_map</tt>, <tt>unordered_multimap</tt>)?
<p/>
The general container requirements say just:
</p>
<blockquote><pre>
r = a  <i>// Postconditions: r == a</i>
</pre></blockquote>
<p>
(Incidentally, earlier in the table, there is a clear error: the general container requirements permit 
"<tt>a = rv</tt>" for assignment from an rvalue, but "<tt>a</tt>" here is a potentially-const container. 
Oops.) Oddly. there are no requirements at all on <tt>T</tt> here.
<p/>
The allocator-aware container requirements add:
</p>
<blockquote><pre>
a = t  <i>// Requires: T is CopyInsertable into X and CopyAssignable.</i>
</pre></blockquote>
<p>
... where <tt>T</tt> is the container's <tt>value_type</tt>, that is, <tt>pair&lt;const key_type, 
mapped_type&gt;</tt>. Note that such a pair is not <tt>CopyAssignable</tt> for "normal" key types 
that disallow assignment to <tt>const</tt> objects. They also add:
</p>
<blockquote><pre>
a = rv  <i>// Requires: if !POCMA, T is MoveInsertable into X and MoveAssignable.</i>
</pre></blockquote>
<p>
... which has the same problem in the !POCMA case.
<p/>
The associative container requirements and unordered associative container requirements have a similar problem for assignment from an initializer list:
</p>
<blockquote><pre>
a = il  <i>// Requires: value_type is CopyInsertable into X and CopyAssignable.</i>
</pre></blockquote>
<p>
Presumably these assignments are intended to actually work, but what are the intended constraints? 
Do we wish to allow implementations to perform node reuse for these map-like containers? 
Presumably yes, and if so, the <tt>key_type</tt> portion of the node must be assigned as well as the 
<tt>value_type</tt> portion (for instance, with whatever implementation technique is used to power 
<tt>node_handle</tt>) as we cannot assume that key equivalence (or, for <tt>unordered_*map</tt>, 
even key equality) implies substitutability.
<p/>
I think, then, that the associative container requirements and unordered associative container requirements should specify different requirements for the "<tt>a = t</tt>", "<tt>a = rv</tt>", and "<tt>a = il</tt>" for the map-like containers; specifically:
</p>
<ul>
<li><p>for "<tt>a = t</tt>" and "<tt>a = il</tt>", we should require that <tt>value_type</tt> is 
<tt>CopyInsertable</tt> into <tt>X</tt>, and <tt>key_type</tt> and <tt>mapped_type</tt> are 
<tt>CopyAssignable</tt></p></li>
<li><p>for "<tt>a = rv</tt>", if !POCMA, we should require that <tt>value_type</tt> is 
<tt>MoveInsertable</tt> into <tt>X</tt> and <tt>key_type</tt> and <tt>mapped_type</tt> are 
<tt>MoveAssignable</tt></p></li>
</ul>
<p>
(And we should fix the general container requirements to constrain "<tt>r = rv</tt>", not "<tt>a = rv</tt>".)
<p/>
<b>Daniel:</b>
<p/>
The "<tt>a = rv</tt>" problematic is already handled by LWG <iref ref="3028"/>.
</p>
</discussion>

<resolution>
</resolution>

</issue>
