<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3502" status="New">
<title><tt>elements_view</tt> should not be allowed to return dangling references</title>
<section><sref ref="[range.elements.iterator]"/></section>
<submitter>Tim Song</submitter>
<date>18 Nov 2020</date>
<priority>2</priority>

<discussion>
<p>
This compiles but the resulting view is full of dangling references:
</p>
<blockquote><pre>
std::vector&lt;int&gt; vec = {42};
auto r = vec | std::views::transform([](auto c) { return std::make_tuple(c, c); })
             | std::views::keys;
</pre></blockquote>
<p>
This is because <tt>elements_view::iterator::operator*</tt> is specified as
</p>
<blockquote><pre>
constexpr decltype(auto) operator*() const { return get&lt;N&gt;(*<i>current_</i>); }
</pre></blockquote>
<p>
Here <tt>*<i>current_</i></tt> is a prvalue, and so the <tt>get&lt;N&gt;</tt> produces a reference
into the materialized temporary that becomes dangling as soon as <tt>operator*</tt> returns.
<p/>
We should either ban this case altogether, or make <tt>operator*</tt> (and <tt>operator[]</tt>) return by
value when <tt>*<i>current_</i></tt> is a prvalue and the corresponding tuple element is not a reference 
(since this <tt>get</tt> is <tt>std::get</tt>, we need not worry about weird user-defined overloads.)
</p>

<note>2020-11-29; Reflector prioritization</note>
<p>
Set priority to 2 during reflector discussions.
</p>

<note>2021-01-31 Tim adds PR</note>
</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4878">N4878</a>.
</p>

<ol>
<li><p>Modify <sref ref="[range.elements.view]"/>, as indicated:</p>

<blockquote>
<pre>
namespace std::ranges {
  template&lt;class T, size_t N&gt;
    concept <i>has-tuple-element</i> =                   // exposition only
      requires(T t) {
        typename tuple_size&lt;T&gt;::type;
        requires N &lt; tuple_size_v&lt;T&gt;;
        typename tuple_element_t&lt;N, T&gt;;
        { get&lt;N&gt;(t) } -&gt; convertible_to&lt;const tuple_element_t&lt;N, T&gt;&amp;&gt;;
      };
    
<ins>  template&lt;class T, size_t N&gt;
  concept <i>returnable-element</i> = is_reference_v&lt;T&gt; || move_­constructible&lt;tuple_element_t&lt;N, T&gt;&gt;;</ins>

  template&lt;input_range V, size_t N&gt;
    requires view&lt;V&gt; &amp;&amp; <i>has-tuple-element</i>&lt;range_value_t&lt;V&gt;, N&gt; &amp;&amp;
             <i>has-tuple-element</i>&lt;remove_reference_t&lt;range_reference_t&lt;V&gt;&gt;, N&gt; <ins>&amp;&amp;</ins>
             <ins><i>returnable-element</i>&lt;range_reference_t&lt;V&gt;, N&gt;</ins>
  class elements_view : public view_interface&lt;elements_view&lt;V, N&gt;&gt; {
    [&hellip;]
  };
}
</pre>
</blockquote>
</li>
<li><p>Modify <sref ref="[range.elements.iterator]"/> as indicated:</p>
<blockquote>
<blockquote>
<pre>
namespace std::ranges {
  template&lt;input_range V, size_t N&gt;
    requires view&lt;V&gt; &amp;&amp; <i>has-tuple-element</i>&lt;range_value_t&lt;V&gt;, N&gt; &amp;&amp;
             <i>has-tuple-element</i>&lt;remove_reference_t&lt;range_reference_t&lt;V&gt;&gt;, N&gt; <ins>&amp;&amp;</ins>
             <ins><i>returnable-element</i>&lt;range_reference_t&lt;V&gt;, N&gt;</ins>
  template&lt;bool Const&gt;
  class elements_view&lt;V, N&gt;::<i>iterator</i> {                 // exposition only
    using <i>Base</i> = <i>maybe-const</i>&lt;Const, V&gt;;                 // exposition only

    iterator_t&lt;<i>Base</i>&gt; <i>current_</i> = iterator_t&lt;<i>Base</i>&gt;();<ins>     // exposition only</ins>
   
<ins>    static constexpr decltype(auto) <i>get-element</i>(const iterator_t&lt;<i>Base</i>&gt;&amp; i);    // exposition only</ins>
  public:
    [&hellip;]
    constexpr decltype(auto) operator*() const
    { return <del>get&lt;N&gt;</del><ins><i>get-element</i></ins>(<del>*</del><i>current_</i>); }

    [&hellip;]
    constexpr decltype(auto) operator[](difference_type n) const
    requires random_­access_­range&lt;<i>Base</i>&gt;
    { return <del>get&lt;N&gt;</del><ins><i>get-element</i></ins>(<del>*(</del><i>current_</i> + n<del>)</del>); }
  };
}
</pre>
</blockquote>
<pre>
<ins>static constexpr decltype(auto) <i>get-element</i>(const iterator_t&lt;<i>Base</i>&gt;&amp; i);    // exposition only</ins>
</pre>
<blockquote>
<p>
<ins>-?- <i>Effects:</i> Equivalent to:</ins>
</p>
<blockquote>
<pre>
<ins>
if constexpr (is_reference_v&lt;range_reference_t&lt;Base&gt;&gt;) {
  return get&lt;N&gt;(*i);
}
else {
  using E = remove_cv_t&lt;tuple_element_t&lt;N, range_reference_t&lt;Base&gt;&gt;&gt;;
  return static_cast&lt;E&gt;(get&lt;N&gt;(*i));
}
</ins>
</pre>
</blockquote>
</blockquote>
</blockquote>
</li>

    
<li><p>Modify <sref ref="[range.elements.sentinel]"/> as indicated:</p>
<blockquote>
<blockquote>
<pre>
namespace std::ranges {
  template&lt;input_range V, size_t N&gt;
    requires view&lt;V&gt; &amp;&amp; <i>has-tuple-element</i>&lt;range_value_t&lt;V&gt;, N&gt; &amp;&amp;
             <i>has-tuple-element</i>&lt;remove_reference_t&lt;range_reference_t&lt;V&gt;&gt;, N&gt; <ins>&amp;&amp;</ins>
             <ins><i>returnable-element</i>&lt;range_reference_t&lt;V&gt;, N&gt;</ins>
  template&lt;bool Const&gt;
  class elements_view&lt;V, N&gt;::<i>sentinel</i> {                 // exposition only
    [&hellip;]
  };
}
</pre>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
