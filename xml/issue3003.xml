<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3003" status="LEWG">
<title><tt>&lt;future&gt;</tt> still has type-erased allocators in <tt>promise</tt></title>
<section><sref ref="[futures.promise]"/></section>
<submitter>Billy O'Neal III</submitter>
<date>16 Jul 2017</date>
<priority>2</priority>

<discussion>
<p>
In Toronto Saturday afternoon LWG discussed LWG <iref ref="2976"/> which finishes the job of removing allocator
support from <tt>packaged_task</tt>. LWG confirmed that, despite the removal of <tt>packaged_task</tt> allocators
"because it looks like <tt>std::function</tt>" was incorrect, they wanted to keep the allocator removals anyway,
in large part due to this resolution being a response to an NB comment.
<p/>
If we don't want the type erased allocator situation at all, then we should remove them from the remaining place
they exist in <tt>&lt;future&gt;</tt>, namely, in <tt>promise</tt>.
<p/>
This change also resolves potential implementation divergence on whether <tt>allocator::construct</tt> is intended
to be used on elements constructed in the shared state, and allows the emplace-construction-in-<tt>future</tt> paper,
<paper num="p0319"/>, to be implemented without potential problems there.
</p>

<note>28-Nov-2017 Mailing list discussion - set priority to P2</note>
<p>Lots of people on the ML feel strongly about this; the suggestion was made that a paper would be welcomed laying out the rationale for removing allocator support here (and in other places).</p>

<note>2018-1-26 issues processing telecon</note>
<p>Status to 'Open'; Billy to write a paper.</p>

<note>2019-06-03</note>
<p>Jonathan observes that this resolution conflicts with <iref ref="2095"/>.</p>

<note>Varna 2023-06-13; Change status to "LEWG"</note>
<superseded>
<p>This resolution is relative to <a href="https://wg21.link/n4659">N4659</a>.</p>

<ol>
<li><p>Edit <sref ref="[futures.promise]"/>, class template <tt>promise</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
template&lt;class R&gt;
class promise {
public:
  promise();
  <del>template &lt;class Allocator&gt;
    promise(allocator_arg_t, const Allocator&amp; a);</del>
  [&hellip;]
};
template &lt;class R&gt;
  void swap(promise&lt;R&gt;&amp; x, promise&lt;R&gt;&amp; y) noexcept;
<del>template &lt;class R, class Alloc&gt;
  struct uses_allocator&lt;promise&lt;R&gt;, Alloc&gt;;</del>
</pre>
[&hellip;]
<pre>
<del>template &lt;class R, class Alloc&gt;
  struct uses_allocator&lt;promise&lt;R&gt;, Alloc&gt;
    : true_type { };</del>
</pre>
<blockquote>
<p>
<del>-3- <i>Requires:</i> <tt>Alloc</tt> shall be an Allocator (<sref ref="[allocator.requirements]"/>).</del>
</p>
</blockquote>
<pre>
promise();
<del>template &lt;class Allocator&gt;
  promise(allocator_arg_t, const Allocator&amp; a);</del>
</pre>
<blockquote>
<p>
-4- <i>Effects:</i> constructs a <tt>promise</tt> object and a shared state. <del>The second constructor uses the allocator a
to allocate memory for the shared state.</del>
</p>
</blockquote>
</blockquote>
</li>
</ol>
</superseded>

<note>2024-09-19; Jonathan provides improved wording</note>
<p>
In July 2023 LEWG  considered this and LWG issue <iref ref="2095"/>
and requested a new proposed resolution that kept the existing constructor
(which is useful for controlling how the shared state is allocated)
but removed the `uses_allocator` specialization that makes `promise`
incorrectly claim to be allocator-aware.
Some of the rationale in <paper num="P2787R1"/> is applicable here too.
</p>
<p>
Without the `uses_allocator` specialization, there's no reason to provide
an allocator-extended move constructor, resolving issue <iref ref="2095"/>.
</p>
<p>
And if we're going to continue supporting `std::promise` construction
with an allocator, we could restore that for `std::packaged_task` too.
That was removed by issue <iref ref="2921"/>, but issue <iref ref="2976"/>
argues that there was no good reason to do that. Removing `uses_allocator`
for `packaged_task` would have made sense (as proposed below for `promise`)
but 2921 didn't do that (which is why 2976 was needed).
We can restore the `packaged_task` constructor that takes an allocator,
and just not restore the `uses_allocator` specialization that implies
it should be fully allocator-aware.
Finally, if we restore that `packaged_task` constructor then we need to
fix `reset()` as discussed in issue <iref ref="2245"/>.
</p>
<p>In summary:
<ul>
<li>Keep support for using an allocator for shared state of a `promise`.</li>
<li>Remove `uses_allocator` specialization for `promise`.</li>
<li>Restore support for using an allocator for the shared state of `packaged_task`.</li>
<li>Do not restore `uses_allocator` specialization for `packaged_task`.</li>
<li>Update `packaged_task::reset()` to deal with allocators.</li>
</ul>
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4988"/>.
</p>
<ol>
<li><p>Modify <sref ref="[futures.promise]"/> as indicated:</p>
<blockquote>
<pre>
<del>template &lt;class R, class Alloc&gt;
  struct uses_allocator&lt;promise&lt;R&gt;, Alloc&gt;;</del>
</pre>
[&hellip;]
<pre>
<del>template &lt;class R, class Alloc&gt;
  struct uses_allocator&lt;promise&lt;R&gt;, Alloc&gt;
    : true_type { };</del>
</pre>
<blockquote>
<p>
<del>-4- <i>Preconditions:</i> <tt>Alloc</tt> meets the <i>Cpp17Allocator</i> (<sref ref="[allocator.requirements.general]"/>).</del>
</p>
</blockquote>
</blockquote>
</li>
<li><p>Modify <sref ref="[futures.task.general]"/> as indicated:</p>
<blockquote>
<pre>
  template&lt;class R, class... ArgTypes&gt;
  class packaged_task&lt;R(ArgTypes...)&gt; {
  public:
    // construction and destruction
    packaged_task() noexcept;
    template&lt;class F&gt;
      explicit packaged_task(F&amp;&amp; f);
<ins>    template&lt;class F, class Allocator&gt;
      explicit packaged_task(allocator_arg_t, const Allocator&amp; a, F&amp;&amp; f);</ins>
    ~packaged_task();
</pre>
</blockquote>
</li>
<li><p>Modify <sref ref="[futures.task.members]"/> as indicated:</p>
<blockquote>
<pre>template&lt;class F&gt;
  explicit packaged_task(F&amp;&amp; f);
</pre>
<p><ins>-?- <i>Effects</i>: Equivalent to
<code>packaged_task(allocator_arg, std::allocator&lt;int&gt;(), std::forward&lt;F&gt;(f))</code>.
</ins>
</p>
<blockquote class="note">
[<i>Drafting note</i>:
Uses of <code>std::allocator&lt;int&gt;</code> and
<code>std::allocator&lt;<i>unspecified</i>&gt;</code> are not observable
so this constructor can be implemented without delegating to the
other constructor and without using `std::allocator`.]
</blockquote>
<pre><ins>template&lt;class F, class Allocator&gt;
  packaged_task(allocator_arg_t, const Allocator&amp; a, F&amp;&amp; f);</ins>
</pre>
<p>-2- <i>Constraints</i>:
<code>remove_cvref_t&lt;F&gt;</code> is not the same type as
<code>packaged_task&lt;R(ArgTypes...)&gt;</code>.
</p>
<p>-3- <i>Mandates</i>:
<code>is_invocable_r_v&lt;R, F&amp;, ArgTypes...&gt;</code> is <code>true</code>.
</p>
<blockquote class="note">
[<i>Drafting note</i>:
Issue <iref ref="4154"/> alters these <i>Mandates</i>: and <i>Effects</i>:
but the two edits should combine cleanly.]
</blockquote>
<p>-4- <i>Preconditions</i>:
Invoking a copy of `f` behaves the same as invoking `f`.
<ins>
`Allocator` meets the <i>Cpp17Allocator</i> requirements
(<sref ref="[allocator.requirements.general]"/>).
</ins>
</p>
<p>-5- <i>Effects</i>:
<ins>Let `A2` be
<code>allocator_traits&lt;Allocator&gt;::rebind_alloc&lt;<i>unspecified</i>&gt;</code>
and let `a2` be an lvalue of type `A2` initialized with `A2(a)`.
</ins>
Creates a shared state and initializes
the object's stored task with <code>std::forward&lt;F&gt;(f)</code>.
<ins>
Uses `a2` to allocate storage for the shared state
and stores a copy of `a2` in the shared state.
</ins>
</p>
<p>-6- <i>Throws</i>:
<del>
Any exceptions thrown by the copy or move constructor of `f`,
or bad_alloc if memory for the internal data structures cannot be allocated.
</del>
<ins>
Any exceptions thrown by the initialization of the stored task.
If storage for the shared state cannot be allocated,
any exception thrown by `A2::allocate`.
</ins>
</p>
<p> &hellip; </p>
<pre>
void reset();
</pre>
<p>-26- <i>Effects</i>:
<del>As if</del>
<ins>Equivalent to:</ins>
<pre>
<ins>if (!valid())
  throw future_error(future_errc::no_state);</ins>
*this = packaged_task(<ins>allocator_arg, a,</ins> std::move(f));
</pre>
where `f` is the task stored in `*this`
<ins>and `a` is the allocator stored in the shared state</ins>.
</p>
<p>
[<i>Note 2</i>: This constructs a new shared state for `*this`.
The old state is abandoned (<sref ref="[futures.state]"/>).
&mdash; <i>end note</i>]
</p>
<p>-27- <i>Throws</i>:
<ol style="list-style-type: none">
<li><del>(27.1) &mdash; bad_alloc if memory for the new shared state cannot be allocated.</del> </li>
<li>(27.2) &mdash; Any exception thrown by the
<ins>`packaged_task` constructor</ins>
<del>move constructor of the task stored in the shared state</del>. </li>
<li>(27.3) &mdash; `future_error` with an error condition of `no_state` if `*this` has no shared state. </li>
</ol>
</p>
</blockquote>
</li>
</ol>

</resolution>
</issue>
