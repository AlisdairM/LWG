<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3003" status="Open">
<title><tt>&lt;future&gt;</tt> still has type-erased allocators in <tt>promise</tt></title>
<section><sref ref="[futures.promise]"/></section>
<submitter>Billy O'Neal III</submitter>
<date>16 Jul 2017</date>
<priority>2</priority>

<discussion>
<p>
In Toronto Saturday afternoon LWG discussed LWG <iref ref="2976"/> which finishes the job of removing allocator 
support from <tt>packaged_task</tt>. LWG confirmed that, despite the removal of <tt>packaged_task</tt> allocators 
"because it looks like <tt>std::function</tt>" was incorrect, they wanted to keep the allocator removals anyway, 
in large part due to this resolution being a response to an NB comment.
<p/>
If we don't want the type erased allocator situation at all, then we should remove them from the remaining place 
they exist in <tt>&lt;future&gt;</tt>, namely, in <tt>promise</tt>.
<p/>
This change also resolves potential implementation divergence on whether <tt>allocator::construct</tt> is intended 
to be used on elements constructed in the shared state, and allows the emplace-construction-in-<tt>future</tt> paper, 
<a href="http://wg21.link/p0319">P0319</a>, to be implemented without potential problems there.
</p>

<note>28-Nov-2017 Mailing list discussion - set priority to P2</note>
<p>Lots of people on the ML feel strongly about this; the suggestion was made that a paper would be welcomed laying out the rationale for removing allocator support here (and in other places).</p>

<note>2018-1-26 issues processing telecon</note>
<p>Status to 'Open'; Billy to write a paper.</p>

<note>2019-06-03</note>
<p>Jonathan observes that this resolution conflicts with <iref ref="2095"/>.</p>
</discussion>

<resolution>
<p>This resolution is relative to <a href="http://wg21.link/n4659">N4659</a>.</p>

<ol>
<li><p>Edit <sref ref="[futures.promise]"/>, class template <tt>promise</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
template&lt;class R&gt; 
class promise {
public:
  promise();
  <del>template &lt;class Allocator&gt;
    promise(allocator_arg_t, const Allocator&amp; a);</del>
  [&hellip;]
};
template &lt;class R&gt;
  void swap(promise&lt;R&gt;&amp; x, promise&lt;R&gt;&amp; y) noexcept;
<del>template &lt;class R, class Alloc&gt;
  struct uses_allocator&lt;promise&lt;R&gt;, Alloc&gt;;</del>
</pre>
[&hellip;]
<pre>
<del>template &lt;class R, class Alloc&gt;
  struct uses_allocator&lt;promise&lt;R&gt;, Alloc&gt;
    : true_type { };</del>
</pre>
<blockquote>
<p>
<del>-3- <i>Requires:</i> <tt>Alloc</tt> shall be an Allocator (<sref ref="[allocator.requirements]"/>).</del>
</p>
</blockquote>
<pre>
promise();
<del>template &lt;class Allocator&gt;
  promise(allocator_arg_t, const Allocator&amp; a);</del>
</pre>
<blockquote>
<p>
-4- <i>Effects:</i> constructs a <tt>promise</tt> object and a shared state. <del>The second constructor uses the allocator a
to allocate memory for the shared state.</del>
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>
</issue>
