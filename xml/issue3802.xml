<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3802" status="New">
<title><tt>flat_<i>foo</i></tt> allocator-extended constructors lack move semantics</title>
<section><sref ref="[flat.map]"/><sref ref="[flat.multimap]"/>
<sref ref="[flat.set]"/><sref ref="[flat.multiset]"/></section>
<submitter>Arthur O'Dwyer</submitter>
<date>25 Oct 2022</date>
<priority>2</priority>

<discussion>
<p>
Compare <sref ref="[priqueue.cons]"/>'s overload set
</p>
<blockquote><pre>
priority_queue(const Compare&amp;, const Container&amp;);
priority_queue(const Compare&amp;, Container&amp;&amp;);
template&lt;class Alloc&gt; priority_queue(const Compare&amp;, const Container&amp;, const Alloc&amp;);
template&lt;class Alloc&gt; priority_queue(const Compare&amp;, Container&amp;&amp;, const Alloc&amp;);
</pre></blockquote>
<p>
against <sref ref="[flat.map]"/>'s overload set
</p>
<blockquote><pre>
flat_map(key_container_type, mapped_container_type);
template&lt;class Allocator&gt; flat_map(const key_container_type&amp;, const mapped_container_type&amp;, const Allocator&amp; a);
</pre></blockquote>
<p>
I see two issues here:
</p>
<ol style="list-style-type: none">
<li><p>(A) The allocator-extended ctor of <tt>flat_map</tt> always copies the <tt>key_container</tt> and <tt>value_container</tt>, 
when it should be move-enabled.</p></li>
<li><p>(B) Almost certainly the <tt>Allocator</tt> parameter should be named <tt>Alloc</tt> instead, and there should be a 
separate "Constructors with allocators" section with wording similar to <sref ref="[priqueue.cons.alloc]"/> explaining that 
these ctors don't participate in overload resolution unless 
<tt>uses_allocator_v&lt;KeyContainer, Alloc&gt; &amp;&amp; uses_allocator_v&lt;MappedContainer, Alloc&gt;</tt>.</p></li>
</ol>
<p>
I suggest this overload set to replace the two overloads above:
</p>
<blockquote><pre>
flat_map(key_container_type, mapped_container_type);
template&lt;class Alloc&gt; flat_map(const key_container_type&amp;, const mapped_container_type&amp;, const Alloc&amp; a);
template&lt;class Alloc&gt; flat_map(const key_container_type&amp;, mapped_container_type&amp;&amp;, const Alloc&amp; a);
template&lt;class Alloc&gt; flat_map(key_container_type&amp;&amp;, const mapped_container_type&amp;, const Alloc&amp; a);
template&lt;class Alloc&gt; flat_map(key_container_type&amp;&amp;, mapped_container_type&amp;&amp;, const Alloc&amp; a);
</pre></blockquote>
<p>
This preserves the apparent assumption that <tt>KeyContainer(std::move(kc))</tt> is always efficient but 
<tt>KeyContainer(std::move(kc), otheralloc)</tt> might not be. Similar wording changes would have to be made to all the 
<tt>flat_<i>foo</i></tt> containers.
<p/>
Tony Table:
</p>
<blockquote><pre>
template&lt;class T, class Comp = std::less&lt;T&gt;, class Container = std::pmr::vector&lt;T&gt;&gt;
using pmr_flat_set = std::flat_set&lt;T, Comp, Container&gt;;

std::pmr::vector&lt;pmr_flat_set&lt;int&gt;&gt; vs;
std::pmr::vector&lt;int&gt; data = {1,2,3};

vs.reserve(1);
vs.emplace_back(std::move(data));
  // constructs-in-place with the argument list (std::move(data), get_allocator())
  // BEFORE: copies (causes heap traffic)
  // AFTER: moves (no heap traffic)
</pre></blockquote>

<note>2022-11-04; Reflector poll</note>
<p>
Set priority to 2 after reflector poll.
</p>

<note>2023-06-14 Varna</note>
<p>Mentioned in <paper num="P2767R0"/>, but not resolved by it.</p>

</discussion>

<resolution>
</resolution>

</issue>
