<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3995" status="New">
<title>Issue with custom index conversion in <tt>&lt;mdspan&gt;</tt></title>
<section><sref ref="[views.multidim]"/></section>
<submitter>Hewill Kang</submitter>
<date>11 Oct 2023</date>
<priority>99</priority>

<discussion>
<p>
Currently, <tt>std::layout_<i>meow</i>::mapping::operator()</tt> has the following definition (<sref ref="[mdspan.layout.left.obs]"/>):
</p>
<blockquote>
<pre>
template&lt;class... Indices&gt;
  constexpr index_type operator()(Indices... i) const noexcept;</pre>
<blockquote>
<p>
-2- <i>Constraints</i>:
</p>
<ol style="list-style-type: none">
<li><p>(2.1) &mdash; <tt>sizeof...(Indices) == extents_type::rank()</tt> is <tt>true</tt>,</p></li>
<li><p>(2.2) &mdash; <tt>(is_convertible_v&lt;Indices, index_type&gt; &amp;&amp; ...)</tt> is <tt>true</tt>, and</p></li>
<li><p>(2.3) &mdash; <tt>(is_nothrow_constructible_v&lt;index_type, Indices&gt; &amp;&amp; ...)</tt> is <tt>true</tt>.</p></li>       
</ol>
<p>
<i>Preconditions</i>: <tt>extents_type::<i>index-cast</i>(i)</tt> is a multidimensional index in <tt><i>extents_</i></tt> 
(<sref ref="[mdspan.overview]"/>).
<p/>
<i>Effects</i>: Let <tt>P</tt> be a parameter pack such that
</p>
<blockquote><pre>
is_same_v&lt;index_sequence_for&lt;Indices...&gt;, index_sequence&lt;P...&gt;&gt;
</pre></blockquote>
<p>  
is <tt>true</tt>. Equivalent to:
</p>
<blockquote><pre>
return ((static_cast&lt;index_type&gt;(i) * stride(P)) + ... + 0);
</pre></blockquote>
</blockquote>
</blockquote>
<p>
Above, <tt>is_convertible_v&lt;Indices, index_type&gt;</tt> implies that <tt>index_type</tt> can be constructed through 
rvalue-qualified conversion operators. However, we cast the lvalue <tt>i</tt> in the return statement, which makes the 
expression possibly ill-formed. The same goes for <tt>extents_type::<i>index-cast(i)</i></tt>.
</p>
<p>
However, if we use <tt>std::move</tt> before casting, this will result in the rvalue-qualified conversion operator 
being called in <i>Preconditions</i> via <tt>extents_type::<i>index-cast(i)</i></tt> before the mapping index is actually calculated,
so that the expression may no longer be valid. And such an issue already exists in <tt>mdspan::operator[]</tt>.
</p>
<p>
In addition, the variadic version of <tt>mdspan::operator[]</tt> constraints 
<tt>is_convertible_v&lt;OtherIndexTypes, index_type&gt;</tt>, but its <tt>array</tt>/<tt>span</tt> version constraints 
<tt>is_convertible_v&lt;const OtherIndexType&amp;, index_type&gt;</tt>.
<p/>
This seems to bring inconsistency as <tt>mdspan[arr]</tt> may not necessarily guarantee <tt>mdspan[arr[i]...]</tt>.
</p>
<p>
I think we should unanimously require that custom indexes can be converted to <tt>index_type</tt> via <tt>const</tt> 
lvalue references, which eliminates the worry of conversion expiration.
</p>
</discussion>

<resolution>
</resolution>

</issue>
