<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3552" status="New">
<title>Parallel specialized memory algorithms should require forward iterators</title>
<section><sref ref="[memory.syn]"/></section>
<submitter>Tim Song</submitter>
<date>16 May 2021</date>
<priority>99</priority>

<discussion>
<p>
The parallel versions of <tt>uninitialized_{copy,move}{,_n}</tt> are currently
depicted as accepting input iterators for their source range. Similar to the 
non-uninitialized versions, they should require the source range to be at least forward.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4885">N4885</a>.
</p>

<ol>
<li><p>Modify <sref ref="[memory.syn]"/>, header <tt>&lt;memory&gt;</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
  [&hellip;]
namespace std {
  [&hellip;]

  template&lt;class InputIterator, class NoThrowForwardIterator&gt;
    NoThrowForwardIterator uninitialized_copy(InputIterator first, InputIterator last,
                                              NoThrowForwardIterator result);
  template&lt;class ExecutionPolicy, class <del>Input</del><ins>Forward</ins>Iterator, class NoThrowForwardIterator&gt;
    NoThrowForwardIterator uninitialized_copy(ExecutionPolicy&amp;&amp; exec, <i>// see <sref ref="[algorithms.parallel.overloads]"/></i>
                                              <del>Input</del><ins>Forward</ins>Iterator first, <del>Input</del><ins>Forward</ins>Iterator last,
                                              NoThrowForwardIterator result);
  template&lt;class InputIterator, class Size, class NoThrowForwardIterator&gt;
    NoThrowForwardIterator uninitialized_copy_n(InputIterator first, Size n,
                                                NoThrowForwardIterator result);
  template&lt;class ExecutionPolicy, class <del>Input</del><ins>Forward</ins>Iterator, class Size, class NoThrowForwardIterator&gt;
    NoThrowForwardIterator uninitialized_copy_n(ExecutionPolicy&amp;&amp; exec, <i>// see <sref ref="[algorithms.parallel.overloads]"/></i>
                                                <del>Input</del><ins>Forward</ins>Iterator first, Size n,
                                                NoThrowForwardIterator result);  
  [&hellip;]

  template&lt;class InputIterator, class NoThrowForwardIterator&gt;
    NoThrowForwardIterator uninitialized_move(InputIterator first, InputIterator last,
                                              NoThrowForwardIterator result);
  template&lt;class ExecutionPolicy, class <del>Input</del><ins>Forward</ins>Iterator, class NoThrowForwardIterator&gt;
    NoThrowForwardIterator uninitialized_move(ExecutionPolicy&amp;&amp; exec, <i>// see <sref ref="[algorithms.parallel.overloads]"/></i>
                                              <del>Input</del><ins>Forward</ins>Iterator first, <del>Input</del><ins>Forward</ins>Iterator last,
                                              NoThrowForwardIterator result);
  template&lt;class InputIterator, class Size, class NoThrowForwardIterator&gt;
    pair&lt;InputIterator, NoThrowForwardIterator&gt;
      uninitialized_move_n(InputIterator first, Size n, NoThrowForwardIterator result);
  template&lt;class ExecutionPolicy, class <del>Input</del><ins>Forward</ins>Iterator, class Size, class NoThrowForwardIterator&gt;
    pair&lt;<del>Input</del><ins>Forward</ins>Iterator, NoThrowForwardIterator&gt;
      uninitialized_move_n(ExecutionPolicy&amp;&amp; exec, <i>// see <sref ref="[algorithms.parallel.overloads]"/></i>
                           <del>Input</del><ins>Forward</ins>Iterator first, Size n, NoThrowForwardIterator result);

  [&hellip;]
}
</pre>
</blockquote>

</li>
</ol>
</resolution>

</issue>
