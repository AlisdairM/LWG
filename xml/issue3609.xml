<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3609" status="New">
<title><tt>std::ranges::iota_view&lt;int, long&gt;</tt> has non-subtractable <tt><i>iterator</i></tt> and 
<tt><i>sentinel</i></tt> types</title>
<section><sref ref="[range.iota.sentinel]"/></section>
<submitter>Jiang An</submitter>
<date>25 Sep 2021</date>
<priority>3</priority>

<discussion>
<p>
Currently <tt>std::ranges::iota_view&lt;int, long&gt;</tt> uses its special <tt><i>sentinel</i></tt> type, as its 
<tt>W</tt> and <tt>Bound</tt> are different types and <tt>Bound</tt> is not <tt>std::unreachable_sentinel_t</tt>. 
However, as <tt>W</tt> (<tt>int</tt>) is not an iterator type, the iterator and sentinel types don't satisfy 
<tt>std::sized_sentinel_for</tt>, and thus not subtractable.
<p/>
IMO we should handle <tt>operator-</tt> overloads for <tt>iota_view::<i>iterator</i></tt> and <tt>iota_view::<i>sentinel</i></tt> 
like <tt>iota_view::size</tt> and <tt>operator-</tt> for <tt>iota_view::<i>iterator</i></tt>.
</p>

<note>2021-10-14; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
</p>
<note>Tim Song commented:</note>
<p>
We might be able to simplify the <code>(y_value > x.value_)</code> conditional
since we know that we are working with an iterator and its sentinel.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4892">N4892</a>.
</p>

<ol>
<li><p>Modify <sref ref="[range.iota.sentinel]"/> as indicated:</p>

<blockquote>
<blockquote>
<pre>
namespace std::ranges {
  template&lt;weakly_incrementable W, semiregular Bound&gt;
    requires <i>weakly-equality-comparable-with</i>&lt;W, Bound&gt; &amp;&amp; copyable&lt;W&gt;
  struct iota_view&lt;W, Bound&gt;::<i>sentinel</i> {
  private:
    Bound <i>bound_</i> = Bound(); <i>// exposition only</i>
  public:
    <i>sentinel</i>() = default;
    constexpr explicit <i>sentinel</i>(Bound bound);
    
    friend constexpr bool operator==(const <i>iterator</i>&amp; x, const <i>sentinel</i>&amp; y);
    
    friend constexpr <del>iter_difference_t&lt;W&gt;</del><ins><i>IOTA-DIFF-T</i>(W)</ins> operator-(const <i>iterator</i>&amp; x, const <i>sentinel</i>&amp; y)
      requires <ins>(<i>is-integer-like</i>&lt;W&gt; &amp;&amp; <i>is-integer-like</i>&lt;Bound&gt;) ||</ins> sized_sentinel_for&lt;Bound, W&gt;;

    friend constexpr <del>iter_difference_t&lt;W&gt;</del><ins><i>IOTA-DIFF-T</i>(W)</ins> operator-(const <i>sentinel</i>&amp; x, const <i>iterator</i>&amp; y)
      requires <ins>(<i>is-integer-like</i>&lt;W&gt; &amp;&amp; <i>is-integer-like</i>&lt;Bound&gt;) ||</ins> sized_sentinel_for&lt;Bound, W&gt;;
  };
}
</pre>
</blockquote>
<p>
[&hellip;]
</p>
<pre>
friend constexpr <del>iter_difference_t&lt;W&gt;</del><ins><i>IOTA-DIFF-T</i>(W)</ins> operator-(const <i>iterator</i>&amp; x, const <i>sentinel</i>&amp; y)
  requires <ins>(<i>is-integer-like</i>&lt;W&gt; &amp;&amp; <i>is-integer-like</i>&lt;Bound&gt;) ||</ins> sized_sentinel_for&lt;Bound, W&gt;;
</pre>
<blockquote>
<p>
-3- <i>Effects:</i> Equivalent to: <del><tt>return x.<i>value_</i> - y.<i>bound_</i>;</tt></del>
</p>
<blockquote><pre>
<ins>using D = <i>IOTA-DIFF-T</i>(W);
if constexpr (<i>is-integer-like</i>&lt;W&gt;) {
  auto y_value = W(y.<i>bound_</i>);
  if constexpr (<i>is-signed-integer-like</i>&lt;W&gt;) {
    return D(D(x.<i>value_</i>) - D(y_value));
  } else {
    return (y_value > x.<i>value_</i>)
      ? D(-D(y_value - x.<i>value_</i>))
      : D(x.<i>value_</i> - y_value);
  }
} else {
  return x.<i>value_</i> - y.<i>bound_</i>;
}</ins>
</pre></blockquote>
</blockquote>
<pre>
friend constexpr <del>iter_difference_t&lt;W&gt;</del><ins><i>IOTA-DIFF-T</i>(W)</ins> operator-(const <i>sentinel</i>&amp; x, const <i>iterator</i>&amp; y)
  requires <ins>(<i>is-integer-like</i>&lt;W&gt; &amp;&amp; <i>is-integer-like</i>&lt;Bound&gt;) ||</ins> sized_sentinel_for&lt;Bound, W&gt;;
</pre>
<blockquote>
<p>
-4- <i>Effects:</i> Equivalent to: <tt>return -(y - x);</tt>
</p>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
