<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2579" status="New">
<title>Inconsistency wrt Allocators in <tt>basic_string</tt> assignment vs. <tt>basic_string::assign</tt></title>
<section><sref ref="[string::assign]"/></section>
<submitter>Marshall Clow</submitter>
<date>5 Jan 2016</date>
<priority>99</priority>

<discussion>
<p>
In issue <iref ref="2063"/>, we changed the <i>Effects</i> of <tt>basic_string::assign(basic_string&amp;&amp;)</tt> to match the 
behavior of <tt>basic_string::operator=(basic_string&amp;&amp;)</tt>, making them consistent.
<p/>
We did not consider <tt>basic_string::assign(const basic_string&amp;)</tt>, and its <i>Effects</i> differ from 
<tt>operator=(const basic_string&amp;)</tt>.
<p/>
Given the following definition:
</p>
<blockquote><pre>
typedef std::basic_string&lt;char, std::char_traits&lt;char&gt;, MyAllocator&lt;char&gt;&gt; MyString;

MyAllocator&lt;char&gt; alloc1, alloc2;
MyString string1("Alloc1", alloc1);
MyString string2(alloc2);
</pre></blockquote>
<p>
the following bits of code are not equivalent:
</p>
<blockquote><pre>
string2 = string1;       // (a) calls operator=(const MyString&amp;)
string2.assign(string1); // (b) calls MyString::assign(const MyString&amp;)
</pre></blockquote>
<p>
What is the allocator for <tt>string2</tt> after each of these calls?
</p>
<ol style="list-style-type:lower-alpha">
<li><p>If <tt>MyAllocator&lt;char&gt;::propagate_on_container_copy_assignment</tt> is true, then it should be <tt>alloc2</tt>, 
otherwise it should be <tt>alloc1</tt>.</p></li>
<li><p><tt>alloc2</tt></p></li>
</ol>
<p>	
<sref ref="[string::assign]"/>/1 says that (b) is equivalent to <tt>assign(string1, 0, npos)</tt>, which eventually calls 
<tt>assign(str.data() + pos, rlen)</tt>. No allocator transfer there.
</p>
</discussion>

<resolution>
<p>
This wording is relative to N4567.
</p>

<ol>
<li><p>Modify <sref ref="[string::assign]"/> p.1 as indicated:</p>

<blockquote>
<pre>
basic_string&amp; assign(const basic_string&amp; str);
</pre>
<blockquote>
<p>
-1- <i>Effects</i>: Equivalent to <tt><ins>*this = str</ins><del>assign(str, 0, npos)</del></tt>.
<p/>
-2- <i>Returns</i>: <tt>*this</tt>.
</p>
</blockquote>
</blockquote>

</li>
</ol>
</resolution>

</issue>
