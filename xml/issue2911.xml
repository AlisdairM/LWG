<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2911" status="New">
<title>An <tt>is_aggregate</tt> type trait is needed</title>
<section><sref ref="[meta.unary.prop]"/></section>
<submitter>United States</submitter>
<date>3 Feb 2017</date>
<priority>99</priority>

<discussion>
<b>Addresses US 143</b>

<p>An <tt>is_aggregate</tt> type trait is needed. The emplace idiom is now common throughout the library, but typically relies 
on direct non-list initalization, which does not work for aggregates. With a suitable type trait, we could extend direct non-list-initlaization to perform aggregate-initalization on aggregate types.</p>
<p>Proposed change:</p>
<p>
Add a new row to Table 38:
</p>
<blockquote>
<pre>
template &lt;class T&gt;
struct is_aggregate;
</pre>
<p>
<tt>T</tt> is an aggregate type ([dcl.init.aggr])
<p/>
<tt>remove_all_extents_t&lt;T&gt;</tt> shall be a complete type, 
an array type, or (possibly <i>cv</i>-qualified) <tt>void</tt>.
</p>
</blockquote>

<note>2017-02-26, Daniel comments and completes wording</note>
<p>
The proposed wording is incomplete, since it doesn't update the <tt>&lt;type_traits&gt;</tt> header synopsis, also
ensuring that the corresponding <tt>is_aggregate_v</tt> variable template is defined.
</p>

<note>2017-03-01, Daniel comments and adjusts wording</note>
<p>
There is only one minor change performed, namely to mark the constant in the <tt>is_aggregate_v</tt> variable 
template as <tt>inline</tt> following the LWG preferences for "full inline" bullet list (B2) from
<a href="http://wg21.link/p0607r0">P0607R0</a>.
</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4640">N4640</a>.</p>
<ol>
<li><p>Modify <sref ref="[meta.type.synop]"/>, <tt>&lt;type_traits&gt;</tt> header synopsis, as indicated:</p>

<blockquote><pre>
<i>// 20.15.4.3, type properties</i>
[&hellip;]
template &lt;class T&gt; struct is_final;
<ins>template &lt;class T&gt; struct is_aggregate;</ins>

[&hellip;]
<i>// 20.15.4.3, type properties</i>
[&hellip;]
template &lt;class T&gt; constexpr bool is_final_v
  = is_final&lt;T&gt;::value;
<ins>template &lt;class T&gt; inline constexpr bool is_aggregate_v
  = is_aggregate&lt;T&gt;::value;</ins>
[&hellip;]
</pre></blockquote>
</li>

<li><p>Add a new row to Table 42 &mdash; "Type property predicates":</p>
<blockquote><pre>
<ins>template &lt;class T&gt; struct is_aggregate;</ins>
</pre>
<p>
<ins><tt>T</tt> is an aggregate type (<sref ref="[dcl.init.aggr]"/>)</ins>
<p/>
<ins><tt>remove_all_extents_t&lt;T&gt;</tt> shall be a complete type, an array type, or (possibly <i>cv</i>-qualified) <tt>void</tt>.</ins>
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
