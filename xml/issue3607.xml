<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3607" status="New">
<title><tt>contiguous_iterator</tt> should not be allowed to have custom <tt>iter_move</tt> and <tt>iter_swap</tt> behavior</title>
<section><sref ref="[iterator.concept.contiguous]"/></section>
<submitter>Tim Song</submitter>
<date>28 Sep 2021</date>
<priority>99</priority>

<discussion>
<p>
The <tt>iter_move</tt> and <tt>iter_swap</tt> customization points were introduced
primarily for proxy iterators. Whatever their application to non-proxy
iterators in general, they should not be allowed to have custom
behavior for contiguous iterators &mdash; this new iterator category was
introduced in large part to permit better optimizations, and allowing
custom <tt>iter_move/iter_swap</tt> prevents such optimizations for a wide
variety of algorithms that are specified to call them.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4892">N4892</a>.
</p>

<ol>
<li><p>Modify <sref ref="[iterator.concept.contiguous]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class I&gt;
  concept contiguous_iterator =
    random_access_iterator&lt;I&gt; &amp;&amp;
    derived_from&lt;<i>ITER_CONCEPT</i>(I), contiguous_iterator_tag&gt; &amp;&amp;
    is_lvalue_reference_v&lt;iter_reference_t&lt;I&gt;&gt; &amp;&amp;
    same_as&lt;iter_value_t&lt;I&gt;, remove_cvref_t&lt;iter_reference_t&lt;I&gt;&gt;&gt; &amp;&amp;
    requires(const I&amp; i) {
      { to_address(i) } -&gt; same_as&lt;add_pointer_t&lt;iter_reference_t&lt;I&gt;&gt;&gt;;
    };
</pre>
<blockquote>
<p>
-2- Let <tt>a</tt> and <tt>b</tt> be dereferenceable iterators and <tt>c</tt> be a non-dereferenceable 
iterator of type <tt>I</tt> such that <tt>b</tt> is reachable from <tt>a</tt> and <tt>c</tt> is 
reachable from <tt>b</tt>, and let <tt>D</tt> be <tt>iter_difference_t&lt;I&gt;</tt>. The type <tt>I</tt> 
models <tt>contiguous_iterator</tt> only if
</p>
<ol style="list-style-type: none">
<li><p>(2.1) &mdash; <tt>to_address(a) == addressof(*a)</tt>,</p></li>
<li><p>(2.2) &mdash; <tt>to_address(b) == to_address(a) + D(b - a)</tt>, <del>and</del></p></li>
<li><p>(2.3) &mdash; <tt>to_address(c) == to_address(a) + D(c - a)</tt><del>.</del><ins>,</ins></p></li>
<li><p><ins>(2.?) &mdash; <tt>ranges::iter_move(a)</tt> has the same type, value category, and effects as 
<tt>std::move(*a)</tt>, and</ins></p></li>
<li><p><ins>(2.?) &mdash; if <tt>ranges::iter_swap(a, b)</tt> is well-formed, it has effects
equivalent to <tt>ranges::swap(*a, *b)</tt>.</ins></p></li>
</ol>
</blockquote>
</blockquote>
</li>

</ol></resolution>

</issue>
