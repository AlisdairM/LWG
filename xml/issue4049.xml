<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4049" status="New">
<title>C <tt>&lt;<i>foo</i>.h&gt;</tt> headers not in freestanding</title>
<section><sref ref="[organization]"/></section>
<submitter>Ben Craig</submitter>
<date>26 Jan 2024</date>
<priority>3</priority>

<discussion>
<p>
There are many C-ish <tt>&lt;c<i>foo</i>&gt;</tt> headers in freestanding. There isn't anything that 
requires the matching C <tt>&lt;<i>foo</i>.h&gt;</tt> headers to be in freestanding.
</p>

<note>2024-08-21; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
Some discomfort requiring `errno.h` and `wchar.h` to be freestanding in C++
when they are not in C23. `string.h` is not freestanding in C17, but is in C23
(but C++ is still based on C17).
`stdlib.h` is "conditionally partially freestanding" in C23, but not in C17.
Suggestion to incorporate this into <paper num="P3348"/>.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4971"/>.
</p>

<ol>
<li><p>Modify <sref ref="[headers]"/> as indicated:</p>

<blockquote>
<p>
-9- <sref ref="[support.c.headers]"/>, C standard library headers, describes the effects of using the 
<tt><i>name</i>.h</tt> (C header) form in a C++ program. <ins>The <tt><i>name</i>.h</tt> form is the 
<i>corresponding C header form</i>.</ins>
</p>
</blockquote>
</li>

<li><p>Modify <sref ref="[compliance]"/> as indicated:</p>

<blockquote>
<p>
-2- A freestanding implementation has an implementation-defined set of headers. This set shall include at least
the headers shown in Table 27 <ins>and the corresponding C header form (<sref ref="[headers]"/>) of each of the 
C++ headers for C library facilities (Table 25) included in Table 27</ins>.
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
