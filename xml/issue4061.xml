<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4061" status="WP">
<title>Should <tt>std::basic_format_context</tt> be default-constructible/copyable/movable?</title>
<section><sref ref="[format.context]"/></section>
<submitter>Jiang An</submitter>
<date>24 Mar 2024</date>
<priority>99</priority>

<discussion>
<p>
Per <sref ref="[format.context]"/>, it seems that <tt>std::basic_format_context</tt> has a default 
constructor that is effectively defaulted, which means that it is default constructible if and only 
if <tt>OutIt</tt> is default constructible. Currently only libstdc++ makes it conditionally default 
constructible, while libc++ and MSVC STL (together with fmtlib) make it never default constructible.
<p/>
It seems that <tt>basic_format_context</tt> objects are supposed to be created by the implementation 
in some internal way, and user codes are only supposed to modify existing <tt>basic_format_context</tt> 
objects during formatting.
</p>

<note>2024-05-08; Reflector poll</note>
<p>
Set status to Tentatively Ready after six votes in favour during reflector poll.
</p>

<note>St. Louis 2024-06-29; Status changed: Voting &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4971"/>.
</p>

<ol>
<li><p>Modify <sref ref="[format.context]"/> as indicated:</p>

<blockquote>
<pre>
namespace std {
  template&lt;class Out, class charT&gt;
  class basic_format_context {
    basic_format_args&lt;basic_format_context&gt; args_; // <i>exposition only</i>
    Out out_;                                      // <i>exposition only</i>

    <ins>basic_format_context(const basic_format_context&amp;) = delete;
    basic_format_context&amp; operator=(const basic_format_context&amp;) = delete;</ins>
  public:
    using iterator = Out;
    using char_type = charT;
    template&lt;class T&gt; using formatter_type = formatter&lt;T, charT&gt;;
    
    basic_format_arg&lt;basic_format_context&gt; arg(size_t id) const noexcept;
    std::locale locale();
    
    iterator out();
    void advance_to(iterator it);
  };
}
</pre>
</blockquote>
</li>
</ol>
</resolution>

</issue>
