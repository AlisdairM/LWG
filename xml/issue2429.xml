<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2429" status="NAD">
<title><tt>std::basic_ostringstream</tt> is missing an allocator-extended constructor</title>
<section><sref ref="[ostringstream]"/></section>
<submitter>Markus Kemp</submitter>
<date>3 Sep 2014</date>
<priority>99</priority>

<discussion>
<p>
I initially brought this issue up on <a href="http://stackoverflow.com/questions/23955828/how-to-use-basic-ostringstream-with-stateful-custom-allocator-c11">Stack Overflow</a>, 
where I was then told to make a topic about this problem on <a href="https://groups.google.com/a/isocpp.org/d/msg/std-discussion/kAQFOWz47m0/cOXSHa5Iwg4J">std-discussion</a>, 
where I was then in turn asked to report the issue.
<p/>
The problem: The <tt>std::basic_ostringstream</tt> class template can be instantiated with an allocator type, but none of the 
constructors provided accept an allocator argument, which means it's impossible to use <tt>std::basic_ostringstream</tt> with 
stateful allocators. The C++ Standard Library Defect Report List seems to already mention a similar issue (<iref ref="2210"/>).
</p>
</discussion>

<note>2014-11 Urbana</note>
<p>Closed as NAD</p>
<p>
This is not a rejection of the suggestion, but an observation that simply adding an allocator-aware
constructor is only part of the problem.  <tt>stringstream</tt> returns the <tt>string</tt> assembled
in its buffer by value, as the result of a call to <tt>str</tt>, and typically this will not use the
same allocator as would be supplied at construction.
</p>
<p>
The appropriate way to make progress on this issue, if motivated, is to submit a paper to LEWG
addressing the larger design concerns in addition to 'just' adding an (optional) allocator to
the constructors.
</p>

<resolution>
</resolution>

</issue>
