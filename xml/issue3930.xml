<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3930" status="New">
<title>Simplify type trait wording</title>
<section><sref ref="[meta]"/></section>
<submitter>Alisdair Meredith</submitter>
<date>01 May 2023</date>
<priority>99</priority>

<discussion>
<p>
There are many traits that have a requirement that they are instantiated only if
"<tt>T</tt> shall be a complete type, <i>cv</i> <tt>void</tt>, or an array of unknown bound."
<p/>
Breaking down what this means, by supporting <i>cv</i>-<tt>void</tt> and arrays of unknown
bound (almost) the only remaining type-category is incomplete class types.
<p/>
The remaining edge case is incomplete enumerations, but they are required to
have a known fixed-base, so act as complete types, they can be copied,
assigned, etc., without knowing the names of their enumerators.
<p/>
Hence, I suggest clearer wording would be:
"<tt>T</tt> shall not be an incomplete class type."
<p/>
This is easier to understand, as we do not need to mentally enumerate every
type against a list to check it qualifies; it is a simpler test for the library to
check if we were to mandate these restrictions.
<p/>
There are a very small number of traits with subtly different wording, where
incomplete unions are supported, or arrays of unknown bound are not a
concern due to invoking <tt>remove_all_extents</tt> first. The bulk of the changes
can be made to traits with only the precise wording above though, and then
we can review whether any of the remaining restrictions deserve a wording
update of their own.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4944"/>.
</p>

<ol>
<li>
<p>
Throughout <sref ref="[meta]"/> replace all occurrences of
</p>
<blockquote><p>
<tt>T</tt> shall be a complete type, <i>cv</i> <tt>void</tt>, or an array of unknown bound.
</p></blockquote>
<p>
by
</p>
<blockquote><p>
<tt>T</tt> shall not be an incomplete class type.
</p></blockquote>

</li>

</ol>
</resolution>

</issue>
