<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3398" status="New">
<title><tt>tuple_element_t</tt> is also wrong for <tt>const subrange</tt></title>
<section><sref ref="[ranges.syn]"/></section>
<submitter>Casey Carter</submitter>
<date>13 Feb 2019</date>
<priority>99</priority>

<discussion>
<p>
As currently specified, it uses the <i>cv</i>-qualified partial specialization, which incorrectly
adds <i>cv</i>-qualification to the element type.
</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4849">N4849</a>.</p>

<ol>
<li><p>Modify <sref ref="[ranges.syn]"/>, header <tt>&lt;ranges&gt;</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
[&hellip;]
namespace std {
  namespace views = ranges::views;

  template&lt;class I, class S, ranges::subrange_kind K&gt;
  struct tuple_size&lt;ranges::subrange&lt;I, S, K&gt;&gt;
    : integral_constant&lt;size_t, 2&gt; {};
  template&lt;class I, class S, ranges::subrange_kind K&gt;
  struct tuple_element&lt;0, ranges::subrange&lt;I, S, K&gt;&gt; {
    using type = I;
  };
  template&lt;class I, class S, ranges::subrange_kind K&gt;
  struct tuple_element&lt;1, ranges::subrange&lt;I, S, K&gt;&gt; {
    using type = S;
  };
  <ins>template&lt;class I, class S, ranges::subrange_kind K&gt;</ins>
  <ins>struct tuple_element&lt;0, const ranges::subrange&lt;I, S, K&gt;&gt; {</ins>
    <ins>using type = I;</ins>
  <ins>};</ins>
  <ins>template&lt;class I, class S, ranges::subrange_kind K&gt;</ins>
  <ins>struct tuple_element&lt;1, const ranges::subrange&lt;I, S, K&gt;&gt; {</ins>
    <ins>using type = S;</ins>
  <ins>};</ins>
}
</pre>
</blockquote>
</li>

<li><p>Add the following wording to Annex D:</p>

<blockquote>
<p>
<ins><b>D.? Deprecated <tt>subrange</tt> tuple interface [depr.ranges.syn]</b></ins>
<p/>
<ins>1 The header <tt>&lt;ranges&gt;</tt> (<sref ref="[ranges.syn]"/>) has the following additions:</ins>
</p>
<blockquote><pre>
<ins>namespace std {</ins>
  <ins>template&lt;size_t X, class I, class S, ranges::subrange_kind K&gt;</ins>
  <ins>struct tuple_element&lt;X, volatile ranges::subrange&lt;I, S, K&gt;&gt; {};</ins>
  <ins>template&lt;size_t X, class I, class S, ranges::subrange_kind K&gt;</ins>
  <ins>struct tuple_element&lt;X, const volatile ranges::subrange&lt;I, S, K&gt;&gt; {};</ins>
<ins>}</ins>
</pre></blockquote>
</blockquote>
</li>

</ol>
</resolution>
</issue>
