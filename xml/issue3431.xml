<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3431" status="WP">
<title><tt>&lt;=&gt;</tt> for containers should require <tt>three_way_comparable&lt;T&gt;</tt> instead of <tt>&lt;=&gt;</tt></title>
<section><sref ref="[container.opt.reqmts]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>17 Apr 2020</date>
<priority>2</priority>

<discussion>
<p>
The precondition for <tt>&lt;=&gt;</tt> on containers is:
<p/>
"Either <tt>&lt;=&gt;</tt> is defined for values of type (possibly <tt>const</tt>) <tt>T</tt>, 
or <tt>&lt;</tt> is defined for values of type (possibly <tt>const</tt>) <tt>T</tt> and 
<tt>&lt;</tt> is a total ordering relationship."
<p/>
I don't think <tt>&lt;=&gt;</tt> is sufficient, because <tt><i>synth-three-way</i></tt> won't 
use <tt>&lt;=&gt;</tt> unless <tt>three_way_comparable&lt;T&gt;</tt> is satisfied, which requires
<tt><i>weakly-equality-comparable-with</i>&lt;T, T&gt;</tt> as well as <tt>&lt;=&gt;</tt>.
<p/>
So to use <tt>&lt;=&gt;</tt> I think the type also requires <tt>==</tt>, or more precisely, it
must satisfy <tt>three_way_comparable</tt>.
<p/>
The problem becomes clearer with the following example:
</p>
<blockquote><pre>
#include &lt;compare&gt;
#include &lt;vector&gt;

struct X
{
  friend std::strong_ordering operator&lt;=&gt;(X, X) { return std::strong_ordering::equal; }
};

std::vector&lt;X&gt; v(1);
std::strong_ordering c = v &lt;=&gt; v;
</pre></blockquote>
<p>
This doesn't compile, because despite <tt>X</tt> meeting the preconditions for <tt>&lt;=&gt;</tt> in 
[tab:container.opt], <tt><i>synth-three-way</i></tt> will return <tt>std::weak_ordering</tt>.
<p/>
Here is another example:
</p>
<blockquote><pre>
#include &lt;compare&gt;
#include &lt;vector&gt;

struct X
{
  friend bool operator&lt;(X, X) { return true; } // <i>The return value is intentional, see below</i>
  friend std::strong_ordering operator&lt;=&gt;(X, X) { return std::strong_ordering::equal; }
};

std::vector&lt;X&gt; v(1);
std::weak_ordering c = v &lt;=&gt; v;
</pre></blockquote>
<p>
This meets the precondition because it defines <tt>&lt;=&gt;</tt>, but the result of <tt>&lt;=&gt;</tt> 
on <tt>vector&lt;X&gt;</tt> will be nonsense, because <tt><i>synth-three-way</i></tt> will use 
<tt>operator&lt;</tt> not <tt>operator&lt;=&gt;</tt> and that defines a broken ordering.
<p/>
So we're stating a precondition which implies "if you do this, you don't get garbage results" and 
then we give garbage results anyway.
<p/>
The proposed resolution is one way to fix that, by tightening the precondition so that it matches 
what <tt><i>synth-three-way</i></tt> actually does.
</p>

<note>2020-04-25 Issue Prioritization</note>
<p>Priority to 2 after reflector discussion.</p>

<p>
<strong>Previous resolution [SUPERSEDED]:</strong>
</p>
<blockquote class="note">
<p>
This wording is relative to <paper num="N4861"/>.
</p>

<ol>
<li><p>Modify <sref ref="[container.requirements.general]"/>, Table [tab:container.opt], as indicated:</p>

<blockquote>
<table border="1">
<caption>Table 75: Optional container operations [tab:container.opt]</caption>
<tr>
<th align="center">Expression</th>
<th align="center">Return type</th>
<th align="center">Operational<br/>semantics</th>
<th align="center">Assertion/note<br/>pre-/post-condition</th>
<th align="center">Complexity</th>
</tr>

<tr>
<td colspan="5" align="center">
<tt>&hellip;</tt>
</td>
</tr>

<tr>
<td>
<tt>a &lt;=&gt; b</tt>
</td>
<td>
<tt><i>synth-three-way-result</i>&lt;value_type&gt;</tt>
</td>
<td>
<tt>lexicographical_compare_three_way(<br/>
a.begin(), a.end(), b.begin(), b.end(),<br/>
<i>synth-three-way</i>)</tt>
</td>
<td>
<i>Preconditions:</i> Either
<del><tt>&lt;=&gt;</tt> is defined for<br/>
values of type (possibly <tt>const</tt>)</del><br/>
<tt>T</tt> <ins>satisfies <tt>three_way_comparable</tt></ins>,<br/>
or <tt>&lt;</tt> is defined for values of type<br/>
(possibly <tt>const</tt>) <tt>T</tt> and<br/> 
<tt>&lt;</tt> is a total ordering relationship.
</td>
<td>
linear
</td>
</tr>

<tr>
<td colspan="5" align="center">
<tt>&hellip;</tt>
</td>
</tr>
</table>

</blockquote>
</li>
</ol>
</blockquote>

<note>2022-04-24; Daniel rebases wording on <paper num="N4910"/></note>
<superseded>
<p>
This wording is relative to <paper num="N4910"/>.
</p>

<ol>
<li><p>Modify <sref ref="[container.opt.reqmts]"/> as indicated:</p>

<blockquote>
<pre>
a &lt;=&gt; b
</pre>
<blockquote>
<p>
-2- <i>Result:</i> <tt><i>synth-three-way-result</i>&lt;X::value_type&gt;</tt>.
<p/>
-3- <i>Preconditions:</i> Either <del><tt>&lt;=&gt;</tt> is defined for values of type (possibly <tt>const</tt>)</del> 
<tt>T</tt> <ins>satisfies <tt>three_way_comparable</tt></ins>, or <tt>&lt;</tt> is defined for values of type 
(possibly <tt>const</tt>) <tt>T</tt> and <tt>&lt;</tt> is a total ordering relationship.
<p/>
-4- <i>Returns:</i> <tt>lexicographical_compare_three_way(a.begin(), a.end(), b.begin(), b.end(),
<i>synth-three-way</i>)</tt>
<p/>
[<i>Note 1</i>: The algorithm <tt>lexicographical_compare_three_way</tt> is defined in Clause 27. &mdash; <i>end note</i>]
<p/>
-5- <i>Complexity:</i> Linear.
</p>
</blockquote>
</blockquote>

</li>
</ol>
</superseded>

<note>2023-06-13; Varna</note>
<p>
The group liked the previously suggested wording but would prefer to say "models" instead of "satisfies"
in preconditions.
</p>
<note>2023-06-14 Varna; Move to Ready</note>
<note>Kona 2023-11-11; Status changed: Voting &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4950"/>.
</p>

<ol>
<li><p>Modify <sref ref="[container.opt.reqmts]"/> as indicated:</p>

<blockquote>
<pre>
a &lt;=&gt; b
</pre>
<blockquote>
<p>
-2- <i>Result:</i> <tt><i>synth-three-way-result</i>&lt;X::value_type&gt;</tt>.
<p/>
-3- <i>Preconditions:</i> Either <del><tt>&lt;=&gt;</tt> is defined for values of type (possibly <tt>const</tt>)</del> 
<tt>T</tt> <ins>models <tt>three_way_comparable</tt></ins>, or <tt>&lt;</tt> is defined for values of type 
(possibly <tt>const</tt>) <tt>T</tt> and <tt>&lt;</tt> is a total ordering relationship.
<p/>
-4- <i>Returns:</i> <tt>lexicographical_compare_three_way(a.begin(), a.end(), b.begin(), b.end(),
<i>synth-three-way</i>)</tt>
<p/>
[<i>Note 1</i>: The algorithm <tt>lexicographical_compare_three_way</tt> is defined in Clause 27. &mdash; <i>end note</i>]
<p/>
-5- <i>Complexity:</i> Linear.
</p>
</blockquote>
</blockquote>

</li>
</ol>
</resolution>
</issue>
