<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3264" status="New">
<title><tt>sized_range</tt> and <tt>ranges::size</tt> redundantly use <tt>disable_sized_range</tt></title>
<section><sref ref="[range.sized]"/></section>
<submitter>Casey Carter</submitter>
<date>26 Aug 2019</date>
<priority>99</priority>

<discussion>
<p>
<tt>disable_sized_range</tt> (<sref ref="[range.sized]"/>) is an opt-out trait that users may
specialize when their <tt>range</tt> type conforms to the syntax of <tt>sized_range</tt> but not its
semantics, or when the type is so poorly suited to the Standard Library that even testing the
validity of the expressions <tt>r.size()</tt> or <tt>size(r)</tt> for a range <tt>r</tt> is
impossible. The library inspects <tt>disable_sized_range</tt> in two places. (1) In the definition of
the <tt>sized_range</tt> concept:
<blockquote><pre>
template&lt;class T&gt;
  concept sized_range =
    range&lt;T&gt; &amp;&amp;
    !disable_sized_range&lt;remove_cvref_t&lt;T&gt;&gt; &amp;&amp;
    requires(T&amp; t) { ranges::size(t); };
</pre></blockquote>
If the pertinent specialization of <tt>disable_sized_range</tt> is <tt>true</tt>, we avoid checking
the validity of the expression <tt>ranges::size(t)</tt> in the <i>requires-expression</i>.
(2) In the definition of the <tt>ranges::size</tt> CPO itself (<sref ref="[range.prim.size]"/>),
the validity of the expressions <tt><i>decay-copy</i>(E.size())</tt> and
<tt><i>decay-copy</i>(size(E))</tt> is not checked if the pertinent specialization of
<tt>disable_sized_range</tt> is <tt>true</tt>.
</p><p>
<tt>disable_sized_range</tt> is effectively checked <em>twice</em> when evaluating
<tt>sized_range</tt>. This redundancy could be forgiven, if it did not permit the existence of
non-<tt>sized_range</tt>s for which <tt>ranges::size</tt> returns a valid size:
<blockquote><pre>
struct mytype {};
using A = mytype[42];

template &lt;&gt;
constexpr bool std::ranges::disable_sized_range&lt;A&gt; = true;

static_assert(std::ranges::range&lt;A&gt;);
static_assert(!std::ranges::sized_range&lt;A&gt;);
static_assert(std::ranges::size(A{}) == 42);

struct myrange {
    constexpr int* begin() const { return nullptr; }
    constexpr int* end() const { return nullptr; }
};

template &lt;&gt;
constexpr bool std::ranges::disable_sized_range&lt;myrange&gt; = true;

static_assert(std::ranges::range&lt;myrange&gt;);
static_assert(!std::ranges::sized_range&lt;myrange&gt;);
static_assert(std::ranges::size(myrange{}) == 0);
</pre></blockquote>
We should remove this gap between <tt>ranges::size</tt> and <tt>sized_range</tt> by checking
<tt>disable_sized_range</tt> only in the definition of <tt>ranges::size</tt>, and continuing to rely
on the validity of <tt>ranges::size</tt> in the <tt>sized_range</tt> concept.
</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4830">N4830</a>.</p>

<ol>
<li><p>Modify <sref ref="[range.sized]"/> as follows:</p>

<blockquote><pre>
template&lt;class T&gt;
  concept sized_range =
    range&lt;T&gt; &amp;&amp;
    <del>!disable_sized_range&lt;remove_cvref_t&lt;T&gt;&gt; &amp;&amp;</del>
    requires(T&amp; t) { ranges::size(t); };
</pre></blockquote>
</li>
</ol>

</resolution>
</issue>
