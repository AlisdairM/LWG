<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3606" status="New">
<title>Missing <tt>regex_traits::locale_type</tt> requirements</title>
<section><sref ref="[re.req]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>28 Sep 2021</date>
<priority>99</priority>

<discussion>
<p>
Why is <tt>locale_type</tt> part of the regular expression traits requirements in <sref ref="[re.req]"/>? 
When would <tt>locale_type</tt> not be <tt>std::locale</tt>? What are the requirements on the type? 
Does it have to provide exactly the same interface as <tt>std::locale</tt>, or just some unspecified 
interface that a custom regex traits type needs from it? Why is none of this specified?
<p/>
Currently the only requirement on <tt>locale_type</tt> in the standard is that it's copy constructible. 
Clearly it needs to be default constructible as well, otherwise you can't construct a <tt>basic_regex</tt>, 
since none of them allows passing in a locale, so they have to default construct it (see also LWG <iref ref="2431"/>).
<p/>
The other requirements on <tt>locale_type</tt> are a mystery. Why do we allow custom locale types, 
but not say anything about what they should do? Can we just require <tt>locale_type</tt> to be <tt>std::locale</tt>? 
Is anybody really going to use <tt>boost::locale</tt> with <tt>std::basic_regex</tt>, when they 
could just use <tt>boost::basic_regex</tt> instead?
<p/>
Why does the regular expression traits requirements table say that <tt>imbue</tt> and <tt>getloc</tt> 
talk about the locale used, "if any". How would there not be one already?
<p/>
Why is imbuing a locale into a <tt>basic_regex</tt> a separate operation from compiling the regular expression 
pattern? Is the following supposed to change the compiled regex?
</p>
<blockquote><pre>
std::regex r("[a-z]");
r.imbue(std::locale("en_GB.UTF-8"));
</pre></blockquote>
<p>
Hasn't the regex constructor already made use of the locale to compile the <tt>"[a-z]"</tt> pattern, 
and so changing the locale is too late? So do we need to do the following to compile the regex with 
a specific locale?
</p>
<blockquote><pre>
std::regex r;
r.imbue(std::locale("en_GB.UTF-8"));
r.assign("[a-z]");
</pre></blockquote>
<p>
Why require two-stage initialization like this, is it just so that we appear consistent with the 
<tt>imbue</tt>/<tt>getloc</tt> API of <tt>std::ios_base</tt>? It works for <tt>ios_base</tt>, 
because the new locale is effective after imbuing it, but for <tt>basic_regex</tt> the pattern 
has already been compiled using the old locale and imbuing a new one can't change that. Is the 
<tt>basic_regex</tt> supposed to store the pattern and recompile it after <tt>imbue</tt>, or is 
this just an inappropriate API for <tt>basic_regex</tt>?
</p>
</discussion>

<resolution>
</resolution>

</issue>
