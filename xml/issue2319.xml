<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2319" status="Voting">
<title><tt>basic_string</tt>'s move constructor should not be <tt>noexcept</tt></title>
<section><sref ref="[string.cons]"/></section>
<submitter>Stephan T. Lavavej</submitter>
<date>21 Sep 2013</date>
<priority>1</priority>

<discussion>
<p>
In debugging implementations, containers (including <tt>basic_string</tt>) may need to own dynamically allocated helper objects at 
all times, including in their default-constructed and moved-from states. This means that their default constructors and move 
constructors may throw exceptions. Therefore, the Standard should not mark them as <tt>noexcept</tt>. (Other implementations will 
still be permitted to add <tt>noexcept</tt>.)
</p>

<note>2014-02, Issaquah : move to Ready</note>
<p>
The issue discussion was highly controversial: The arguments in favour was that implementations exist that always need to allocate
memory even for the move operations (similar as for some other containers) and that this cleans up an inconsistency between <tt>std::string</tt>
and other container types. Counter arguments were that potentially throwing move operations reduce much of the advantages of move-support,
e.g. in <tt>vector&lt;string&gt;</tt>.
</p>
<p>
straw poll: accept wording in the issue<br/>
SF 4 WF 4 N 0 WA 1 SA 1 
</p>
<p>
straw poll: 14 or 17?<br/>
C++14: 4 C++17: 4 
</p>
<p>
Move to Ready for C++17, as too close to 14 DIS without strong consensus.
</p>
<p>
It was suggested to introduce a special library vocabulary that specifies a "normative encouragement to not throw exceptions" for 
functions like these. 
</p>
<p>
NJ: I offer to write a proposal to add encouragement for not throwing ... "<tt>noexcept</tt> in italics means should not throw" 
</p>
</discussion>

<resolution>
<p>This wording is relative to N3691.</p>

<ol>
<li><p>In <sref ref="[basic.string]"/>/5, class template <tt>basic_string</tt> synopsis, and <sref ref="[string.cons]"/>/2 
change as indicated:</p>

<blockquote><pre>
basic_string(basic_string&amp;&amp; str) <del>noexcept</del>;
</pre></blockquote>
</li>

<li><p>Edit <sref ref="[string.cons]"/>/17 as indicated:</p>

<blockquote><pre>
basic_string(const basic_string&amp; str, const Allocator&amp; alloc);
basic_string(basic_string&amp;&amp; str, const Allocator&amp; alloc);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
<del>-17- <i>Throws:</i> The second form throws nothing if <tt>alloc == str.get_allocator()</tt>.</del>.
</p>
</blockquote>
</blockquote>
</li>

</ol>

</resolution>

</issue>
