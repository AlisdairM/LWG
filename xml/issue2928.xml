<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2928" status="Resolved">
<title><tt>is_callable</tt> is not a good name</title>
<section><sref ref="[meta.type.synop]"/><sref ref="[meta.rel]"/></section>
<submitter>United States</submitter>
<date>3 Feb 2017</date>
<priority>99</priority>

<discussion>
<b>Addresses US 86</b>

<p><tt>is_callable</tt> is not a good name because it implies <tt>F(A...)</tt> instead of <tt><i>INVOKE</i>(F, A...)</tt></p>

<p>
Proposed change: Rename <tt>is_callable</tt> to <tt>is_invocable</tt> and rename <tt>is_nothrow_callable</tt> to 
<tt>is_nothrow_invocable</tt>.
</p>

<note>2017-02-22, Daniel comments and provides concrete wording</note>
<p>
I'm strongly in favour for this change to possibly allow for a future "pure" <tt>is_callable</tt> trait that solely 
describes function call-like expressions.
</p>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>
This wording is relative to <a href="http://wg21.link/n4640">N4640</a>.
</p>

<ol>
<li><p>Modify <sref ref="[meta.type.synop]"/>, header <tt>&lt;type_traits&gt;</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
[&hellip;]
<i>// 20.15.6, type relations</i>
[&hellip;]

template &lt;class, class R = void&gt; struct is_<ins>invocable</ins><del>callable</del>; // not defined
template &lt;class Fn, class... ArgTypes, class R&gt;
struct is_<ins>invocable</ins><del>callable</del>&lt;Fn(ArgTypes...), R&gt;;

template &lt;class, class R = void&gt; struct is_nothrow_<ins>invocable</ins><del>callable</del>; // not defined
template &lt;class Fn, class... ArgTypes, class R&gt;
struct is_nothrow_<ins>invocable</ins><del>callable</del>&lt;Fn(ArgTypes...), R&gt;;

[&hellip;]

<i>// 20.15.6, type relations</i>
[&hellip;]
template &lt;class T, class R = void&gt; constexpr bool is_<ins>invocable</ins><del>callable</del>_v
= is_<ins>invocable</ins><del>callable</del>&lt;T, R&gt;::value;
template &lt;class T, class R = void&gt; constexpr bool is_nothrow_<ins>invocable</ins><del>callable</del>_v
= is_nothrow_<ins>invocable</ins><del>callable</del>&lt;T, R&gt;::value;
[&hellip;]
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[meta.rel]"/>, Table 44 &mdash; "Type relationship predicates", as indicated:</p>

<blockquote>
<table border="1">
<caption>Table 44 &mdash; Type relationship predicates</caption>

<tr>
<td colspan="3" align="center">
<tt>[&hellip;]</tt>
</td>
</tr>

<tr>
<td>
<tt>template &lt;class Fn, class...<br/> 
ArgTypes, class R&gt;<br/> 
struct is_<ins>invocable</ins><del>callable</del>&lt;<br/> 
Fn(ArgTypes...), R&gt;;</tt>
</td>
<td>
[&hellip;]
</td>
<td>
[&hellip;]
</td>
</tr>

<tr>
<td>
<tt>template &lt;class Fn, class...<br/> 
ArgTypes, class R&gt;<br/> 
struct is_nothrow_<ins>invocable</ins><del>callable</del>&lt;<br/> 
Fn(ArgTypes...), R&gt;;</tt>
</td>
<td>
<tt>is_<ins>invocable</ins><del>callable</del>_v&lt;<br/>
Fn(ArgTypes...), R&gt;</tt> is<br/>
<tt>true</tt> [&hellip;]
</td>
<td>
[&hellip;]
</td>
</tr>

</table>
</blockquote>
</li>
</ol>
</blockquote>

<note>2017-02-24, Daniel comments</note>
<p>
I suggest to apply the paper d0604r0 instead, available on the Kona LWG wiki.
</p>

<note>2017-03-12, post-Kona</note>
<p>Resolved by p0604r0.</p>
</discussion>

<resolution>
</resolution>

</issue>

