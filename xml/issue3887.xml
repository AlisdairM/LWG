<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3887" status="New">
<title>Version macro for <tt>allocate_at_least</tt></title>
<section><sref ref="[version.syn]"/></section>
<submitter>Alisdair Meredith</submitter>
<date>14 Feb 2023</date>
<priority>99</priority>

<discussion>
<p>
In Issaquah, we just adopted <paper num="P2652R0"/>, forbidding user specialization of <tt>allocator_traits</tt>. 
<p/>
It looks like we did not deem that worthy of a feature macro.
<p/>
However, it also changed the interface of the C++23 addition, <tt>allocate_at_least</tt>, which is covered by the macro 
<tt>__cpp_lib_allocate_at_least</tt>.
<p/>
I believe we should have updated that macro for this significant change in how that function is accessed 
(from free function to a member of <tt>allocator_traits</tt>). Unfortunately, there are no more meetings 
to process a comment to that effect, and I suspect this rises beyond the purview of an editorial change, 
although I live in hope (as the original paper left the value of the macro to the editor, although we 
approved existing working papers where that macro does have a value, i.e., status quo).
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4928"/>.
</p>

<ol>
<li><p>Modify <sref ref="[version.syn]"/>, header <tt>&lt;version&gt;</tt> synopsis, as indicated and replace
the placeholder <tt>YYYYMM</tt> by the year and month of adoption of <paper num="P2652R0"/>:</p>

<blockquote>
<pre>
[&hellip;]
#define __cpp_lib_algorithm_iterator_requirements  202207L
  // <i>also in &lt;algorithm&gt;, &lt;numeric&gt;, &lt;memory&gt;</i>
#define __cpp_lib_allocate_at_least                <del>202106</del><ins>YYYYMM</ins>L // <i>also in &lt;memory&gt;</i>
#define __cpp_lib_allocator_traits_is_always_equal 201411L
  // <i>also in [&hellip;]</i>
[&hellip;]
</pre>
</blockquote>

</li>

</ol>
</resolution>

</issue>
