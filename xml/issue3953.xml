<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3953" status="Tentatively Ready">
<title><tt>iter_move</tt> for <tt>common_iterator</tt> and <tt>counted_iterator</tt> should return <tt>decltype(auto)</tt></title>
<section><sref ref="[common.iter.cust]"/><sref ref="[counted.iter.cust]"/></section>
<submitter>Hewill Kang</submitter>
<date>30 Jun 2023</date>
<priority>99</priority>

<discussion>
<p>
Although the customized <tt>iter_move</tt> of both requires the underlying iterator <tt>I</tt> to be <tt>input_iterator</tt>, 
they still explicitly specify the return type as <tt>iter_rvalue_reference_t&lt;I&gt;</tt>,
which makes it always instantiated.
</p>
<p>
From the point of view that its validity is only specified in the <tt>input_iterator</tt> concept, it would be better to remove such 
unnecessary type instantiation, which does not make much sense for an <tt>output_iterator</tt> even if it is still valid.
</p>

<note>2023-10-27; Reflector poll</note>
<p>
Set status to Tentatively Ready after six votes in favour during reflector poll.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4950"/>.
</p>

<ol>
<li><p>Modify <sref ref="[common.iterator]"/>, class template <tt>common_iterator</tt> synopsis, as indicated:</p>


<blockquote>
<pre>
namespace std {
  template&lt;input_or_output_iterator I, sentinel_for&lt;I&gt; S&gt;
    requires (!same_as&lt;I, S&gt; &amp;&amp; copyable&lt;I&gt;)
  class common_iterator {
  public:
    [&hellip;]
    friend constexpr <del>iter_rvalue_reference_t&lt;I&gt;</del><ins>decltype(auto)</ins> iter_move(const common_iterator&amp; i)
      noexcept(noexcept(ranges::iter_move(declval&lt;const I&amp;&gt;())))
        requires input_iterator&lt;I&gt;;
    [&hellip;]
  };
  [&hellip;]
}
</pre>
</blockquote>

</li>

<li><p>Modify <sref ref="[common.iter.cust]"/> as indicated:</p>

<blockquote>
<pre>
friend constexpr <del>iter_rvalue_reference_t&lt;I&gt;</del><ins>decltype(auto)</ins> iter_move(const common_iterator&amp; i)
  noexcept(noexcept(ranges::iter_move(declval&lt;const I&amp;&gt;())))
    requires input_iterator&lt;I&gt;;
</pre>
<blockquote>
<p>
-1- <i>Preconditions</i>: [&hellip;]
<p/>
-2- <i>Effects</i>: Equivalent to: <tt>return ranges::iter_move(get&lt;I&gt;(i.v_));</tt>
</p>
</blockquote>
</blockquote>

</li>

<li><p>Modify <sref ref="[counted.iterator]"/>, class template <tt>counted_iterator</tt> synopsis, as indicated:</p>


<blockquote>
<pre>
namespace std {
  template&lt;input_or_output_iterator I&gt;
  class counted_iterator {
  public:
    [&hellip;]
    friend constexpr <del>iter_rvalue_reference_t&lt;I&gt;</del><ins>decltype(auto)</ins> iter_move(const counted_iterator&amp; i)
      noexcept(noexcept(ranges::iter_move(i.current)))
        requires input_iterator&lt;I&gt;;
    [&hellip;]
  };
  [&hellip;]
}
</pre>
</blockquote>

</li>

<li><p>Modify <sref ref="[counted.iter.cust]"/> as indicated:</p>

<blockquote>
<pre>
friend constexpr <del>iter_rvalue_reference_t&lt;I&gt;</del><ins>decltype(auto)</ins> 
  iter_move(const counted_iterator&amp; i)
    noexcept(noexcept(ranges::iter_move(i.current)))
    requires input_iterator&lt;I&gt;;
</pre>
<blockquote>
<p>
-1- <i>Preconditions</i>: [&hellip;]
<p/>
-2- <i>Effects</i>: Equivalent to: <tt>return ranges::iter_move(i.current);</tt>
</p>
</blockquote>
</blockquote>

</li>

</ol>
</resolution>

</issue>
