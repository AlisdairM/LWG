<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3197" status="New">
<title><tt>std::prev</tt> should not require <tt>BidirectionalIterator</tt></title>
<section><sref ref="[iterator.operations]"/></section>
<submitter>Billy O'Neal III</submitter>
<date>3 Apr 2019</date>
<priority>3</priority>

<discussion>
<p>
MSVC++ (and apparently libc++) have asserts that <tt>std::prev</tt> only accepts <tt>BidirectionalIterator</tt>s, 
because it's declared in the standard as accepting only <tt>BidirectionalIterator</tt>. libc++ changed their tests 
(in <a href="https://github.com/llvm/llvm-project/commit/f51ee632475654a396f93da9d36841989e1c7742">this commit</a>), 
apparently from a bug report from Ville and Jonathan, saying that one could theoretically call <tt>std::prev</tt> 
with a negative number.
<p/>
The standardese in [iterator.operations] strongly indicates that <tt>prev</tt> requires a <tt>BidirectionalIterator</tt>, 
but I don't see the usual wording that connects template type parameters of that name to the <tt>&lt;algorithm&gt;</tt> 
requirements or similar. So perhaps one could argue that the name <tt>Bidirectional</tt> there has no meaning. Even 
if that is the case, that's a defect in the other direction.
</p>

<note>2019-06-12 Priority set to 3 after reflector discussion</note>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4810">N4810</a>.</p>

<blockquote class="note">
<p>
[<i>Drafting Note:</i> Three mutually exclusive options are prepared, depicted below by <b>Option A</b>, 
<b>Option B</b>, and <b>Option C</b>, respectively.]
</p>
</blockquote>

<p><b>Option A</b></p>

<ol>
<li><p>NAD, the name <tt>BidirectionalIterator</tt> actually means that <tt>prev</tt> requires bidirectional iterators, in which 
case this change to libcxx is incorrect.</p>
</li>
</ol>

<p><b>Option B</b></p>

<ol>
<li><p>Modify <sref ref="[iterator.synopsis]"/>, header <tt>&lt;iterator&gt;</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
<i>// <sref ref="[iterator.operations]"/>, iterator operations</i>
[&hellip;]
template&lt;class <del>Bidirectional</del><ins>Input</ins>Iterator&gt;
  constexpr <del>Bidirectional</del><ins>Input</ins>Iterator prev(<del>Bidirectional</del><ins>Input</ins>Iterator x,
    typename iterator_traits&lt;<del>Bidirectional</del><ins>Input</ins>Iterator&gt;::difference_type n = 1);
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[iterator.operations]"/> as indicated:</p>

<blockquote><pre>
template&lt;class <del>Bidirectional</del><ins>Input</ins>Iterator&gt;
  constexpr <del>Bidirectional</del><ins>Input</ins>Iterator prev(<del>Bidirectional</del><ins>Input</ins>Iterator x,
    typename iterator_traits&lt;<del>Bidirectional</del><ins>Input</ins>Iterator&gt;::difference_type n = 1);
</pre>
<blockquote>
<p>
-7- <i>Effects:</i> Equivalent to: <tt>advance(x, -n); return x;</tt>
</p>
</blockquote>
</blockquote>
</li>
</ol>

<p><b>Option C</b></p>

<ol>
<li><p>The intent of the wording is that the template parameters apply requirements, and the defect is that they do not. 
We should add a requirement in <sref ref="[iterator.operations]"/>/1 to the effect that the template parameter names 
impose said requirements.</p>
</li>
</ol>

</resolution>
</issue>
