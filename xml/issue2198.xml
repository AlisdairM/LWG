<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2198" status="Open">
<title><tt>max_load_factor(z)</tt> makes no strong guarantees, but bans useful behavior</title>
<section><sref ref="[unord.req]"/></section>
<submitter>Alisdair Meredith</submitter>
<date>09 Oct 2012</date>
<priority>3</priority>

<discussion>

<p>
The user cannot specify a <tt>max_load_factor</tt> for their unordered container
at construction, it must be supplied after the event, when the container is
potentially not empty.  The contract for this method is deliberately vague, not
guaranteeing to use the value supplied by the user, and any value actually used
will be used as a ceiling that the container will <i>attempt</i> to respect.
</p>
<p>
The only guarantee we have is that, if user requests a <tt>max_load_factor</tt>
that is less than the current <tt>load_factor</tt>, then the operation will take
constant time, thus outlawing an implementation that chooses to rehash and so
preserve as a class invariant that <tt>load_factor &lt; max_load_factor</tt>.
</p>
<p>
Reasonable options conforming to the standard include ignoring the user's request
if the requested value is too low, or deferring the rehash to the next <tt>insert</tt>
operation and allowing the container to have a strange state (wrt <tt>max_load_factor</tt>)
until then - and there is still the question of rehashing if the next <tt>insert</tt>
is for a duplicate key in a unique container.
</p>
<p>
Given the deliberate vagueness of the current wording, to support a range of reasonable
(but not <i>perfect</i>) behaviors, it is not clear why the equally reasonable rehash
to restore the constraint should be outlawed.  It is not thought that this is a performance
critical operation, where users will be repeatedly setting low load factors on populated
containers, in a tight or (less unlikely) an instant response scenario.
</p>

<note>2013-03-15 Issues Teleconference</note>
<p>
Moved to Open.
</p>
<p>
Alisdair to provide wording.
</p>
<note>2016-11-12, Issaquah</note>
<p>Sat PM: Howard to provide wording</p>

<note>2016-11-17 Howard provided wording.</note>

<blockquote>
<p>
The provided wording is consistent with LWG discussion in Issaquah.  An implementation
of the proposed wording would be setting <tt>max_load_factor()</tt> to
<tt>max(z, load_factor())</tt>.  This preserves the container invariant:
</p>
<blockquote><pre>
load_factor() &lt;= max_load_factor()
</pre></blockquote>
<p>
And it preserves the existing behavior that no rehash is done by this operation.
</p>
<p>
If it is desired to change the <tt>max_load_factor()</tt> to something smaller than
the current <tt>load_factor()</tt> that can be done by <i>first reducing</i> the
current <tt>load_factor()</tt> by either increasing <tt>bucket_count()</tt> (via
<tt>rehash</tt> or <tt>reserve</tt>), or decreasing <tt>size()</tt> (e.g.
<tt>erase</tt>), <i>and then</i> changing <tt>max_load_factor()</tt>.
</p>

<p>
This resolution reaffirms that <tt>load_factor() &lt;= max_load_factor()</tt> is a
container invariant which can <i>never</i> be violated.
</p>
</blockquote>

</discussion>

<resolution>

<p>
Modify Table 87 as follows:
</p>

<table border="1">
<caption>Table 87 &mdash; Unordered associative container requirements</caption>

<tr>
<th>
Expression
</th>
<th>
Return type
</th>
<th>
Assertion/note pre-/post-condition
</th>
<th>
Complexity
</th>
</tr>

<tr>
<td>
<tt>a.max_load_factor(z)</tt>
</td>
<td>
<tt>void</tt>
</td>
<td>
<p>
Pre: <tt>z</tt> shall be positive.  May change the container's maximum
load factor, uing <tt>z</tt> as a hint.
</p>
<p>
<ins>Post: <tt>a.load_factor() &lt;= a.max_load_factor()</tt></ins>
</p>
<p>
<ins><i>Note:</i> <tt>a.load_factor()</tt> is not modified by this operation.</ins>
</p>
</td>
<td>
Constant
</td>
</tr>

</table>

</resolution>

</issue>
