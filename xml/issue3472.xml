<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3472" status="Tentatively Ready">
<title><tt>counted_iterator</tt> is missing preconditions</title>
<section><sref ref="[iterators.counted]"/></section>
<submitter>Michael Schellenberger Costa</submitter>
<date>29 Jul 2020</date>
<priority>99</priority>

<discussion>
<p>
C++20 introduces a new iterator <tt>counted_iterator</tt> that keeps track of the end of its range via an 
additional exposition only member <tt>length</tt>.  
<p/>
Consequently, there are several preconditions for many member functions of <tt>counted_iterator</tt>, but 
it seems some are missing:
</p>
<ol>
<li><p><b><tt>operator*</tt></b>
<p/>
Here we have no precondition regarding <tt>length</tt>. However, given that <tt>length</tt> denotes the 
distance to the end of the range it should be invalid to dereference a <tt>counted_iterator</tt> with 
<tt>length 0</tt>.
<p/>
Moreover, <tt>operator[]</tt> has a precondition of "<tt>n &lt; length</tt>". Consider the following code snippet:
</p>
<blockquote><pre>
int some_ints[] = {0,1,2};
counted_iterator&lt;int*&gt; i{some_ints, 0};
</pre></blockquote>
<p>
Here "<tt>i[0]</tt>" would be invalid due to the precondition "<tt>n &lt; length</tt>". However, "<tt>*i</tt>" 
would be a valid expression. This violates the definition of <tt>operator[]</tt> which states according to 
<sref ref="[expr.sub]"/> p1:
</p>
<blockquote><p>
[&hellip;] The expression <tt>E1[E2]</tt> is identical (by definition) to <tt>*((E1)+(E2))</tt> [&hellip;]
</p></blockquote>
<p>
Substituting <tt>E2-&gt;0</tt> we get  
</p>
<blockquote><p>
[&hellip;] The expression <tt>E1[0]</tt> is identical (by definition) to <tt>*(E1)</tt> [&hellip;]
</p></blockquote>
<p>
With the current wording <tt>counted_iterator</tt> violates that definition and we should add to <tt>operator*</tt>:
</p>
<blockquote><p>
<i>Preconditions:</i> <tt>length &gt; 0</tt>.
</p></blockquote></li>
<li><p><b><tt>iter_move</tt></b>
<p/>
This is a similar case. We have only the <i>Effects</i> element:
</p>
<blockquote><p>
<i>Effects:</i> Equivalent to: <tt>return ranges::iter_move(i.current);</tt>
</p></blockquote>
<p>
However, looking at the requirements of <tt>ranges::iter_move</tt> we have in <sref ref="[iterator.cust.move]"/> p2:
</p>
<blockquote><p>
If <tt>ranges::iter_move(E)</tt> is not equal to <tt>*E</tt>, the program is ill-formed, no diagnostic required.
</p></blockquote>
<p>
This clearly requires that for <tt>counted_iterator::iter_move</tt> to be well-formed,  we need 
<tt>counted_iterator::operator*</tt> to be well formed. Consequently we should also add the same precondition to 
<tt>counted_iterator::iter_move</tt>:
</p>
<blockquote><p>
<i>Preconditions:</i> <tt>length &gt; 0</tt>.
</p></blockquote></li>
<li><p><b><tt>iter_swap</tt></b>
<p/>
This is essentially the same arguing as for <tt>counted_iterator::iter_move</tt>. The essential observation is that 
<tt>ranges::iter_swap</tt> is defined in terms of <tt>ranges::iter_move</tt> (see <sref ref="[iterator.cust.swap]"/>) 
so it must have the same preconditions and we should add:
</p>
<blockquote><p>
<i>Preconditions:</i> <tt>length &gt; 0</tt>.
</p></blockquote></li>
</ol>
<note>2020-08-21 Issue processing telecon: moved to Tentatively Ready.</note>
</discussion>

<resolution>
<p>
This wording is relative to <a href="http://wg21.link/n4861">N4861</a>.
</p>

<ol>
<li><p>Modify <sref ref="[counted.iter.elem]"/> as indicated:</p>

<blockquote>
<pre>
constexpr decltype(auto) operator*();
constexpr decltype(auto) operator*() const
  requires <i>dereferenceable</i>&lt;const I&gt;;
</pre>
<blockquote>
<p>
<ins>-?- <i>Preconditions:</i> <tt>length &gt; 0</tt>.</ins>
<p/>
-1- <i>Effects:</i> Equivalent to: <tt>return *current;</tt>
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[counted.iter.cust]"/> as indicated:</p>

<blockquote>
<pre>
friend constexpr iter_rvalue_reference_t&lt;I&gt;
  iter_move(const counted_iterator&amp; i)
    noexcept(noexcept(ranges::iter_move(i.current)))
    requires input_iterator&lt;I&gt;;
</pre>
<blockquote>
<p>
<ins>-?- <i>Preconditions:</i> <tt>i.length &gt; 0</tt>.</ins>
<p/>
-1- <i>Effects:</i> Equivalent to: <tt>return ranges::iter_move(i.current);</tt>
</p>
</blockquote>
<pre>
template&lt;indirectly_swappable&lt;I&gt; I2&gt;
  friend constexpr void
    iter_swap(const counted_iterator&amp; x, const counted_iterator&lt;I2&gt;&amp; y)
      noexcept(noexcept(ranges::iter_swap(x.current, y.current)));
</pre>
<blockquote>
<p>
<ins>-?- <i>Preconditions:</i> <tt>x.length &gt; 0</tt> and <tt>y.length &gt; 0</tt>.</ins>
<p/>
-1- <i>Effects:</i> Equivalent to: <tt>return ranges::iter_swap(x.current, y.current);</tt>
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
