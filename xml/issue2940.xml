<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2940" status="WP">
<title><tt>result_of</tt> specification also needs a little cleanup</title>
<section><sref ref="[depr.meta.types]"/></section>
<submitter>Daniel Kr&uuml;gler</submitter>
<date>4 Mar 2017</date>
<priority>3</priority>

<discussion>
<p>
<a href="http://wg21.link/p0604r0">P0604R0</a> missed a similar adjustment that was performed for the
deprecated type trait templates <tt>is_literal_type</tt> and <tt>is_literal_type_v</tt> via LWG <iref ref="2838"/>: 
<p/>
Moving the <tt>result_of</tt> to Annex D means that the general prohibition against specializing type traits 
in [meta.type.synop]/1 does no longer exist, so should be explicitly spelled out. Wording will be provided
after publication of the successor of <a href="http://wg21.link/n4640">N4640</a>.
</p>

<note>2017-03-04, Kona</note>
<p>Set priority to 3</p>

<note>2017-04-24, Daniel provides wording</note>
<p>
Instead of enumerating all the templates where adding a specialization is valid, a general exclusion rule is provided.
Albeit currently not needed for the templates handled by this sub-clause, a potential exception case is constructed
to ensure correctness for the first deprecated trait template that would permit specializations by the user.
</p>

<note>2017-06-10, Moved to Tentatively Ready after 6 positive votes on c++std-lib</note>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4659">N4659</a>.</p>

<ol>
<li><p>Change <sref ref="[depr.meta.types]"/> as indicated:</p>
<blockquote>
<p>
-4- The behavior of a program that adds specializations for <ins>any of the templates defined in this subclause</ins> 
<del><tt>is_literal_type</tt> or <tt>is_literal_type_v</tt></del> is undefined<ins>, unless explicitly permitted by the
specification of the corresponding template</ins>.
</p>
</blockquote>
</li>
</ol>

</resolution>

</issue>

