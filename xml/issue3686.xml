<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3686" status="New">
<title>In <tt>lazy_split_view</tt>, comparing a default-constructed <tt><i>outer-iterator</i></tt> or 
<tt><i>inner-iterator</i></tt> with <tt>std::default_sentinel</tt> results in null pointer dereference</title>
<section><sref ref="[range.lazy.split.outer]"/><sref ref="[range.lazy.split.inner]"/></section>
<submitter>Konstantin Varlamov</submitter>
<date>23 Mar 2022</date>
<priority>99</priority>

<discussion>
<p>
The internal iterator types <tt><i>outer-iterator</i></tt> and <tt><i>inner-iterator</i></tt> of 
<tt>lazy_split_view</tt> are default-constructible, but trying to compare a default-constructed 
instance of either of these classes to <tt>std::default_sentinel</tt> results in null pointer 
dereference (and, in all likelihood, a crash), as demonstrated in this 
<a href="https://godbolt.org/z/cGs9jW1c6">demo link</a>:
</p>
<blockquote><pre>
// Assuming `OuterIter` is an alias for `outer-iterator` of
// some `lazy_split_view` instantiation.
OuterIter o;
o == std::default_sentinel; // Null pointer dereference

InnerIter i; // Similar to `OuterIter` above.
i == std::default_sentinel; // Null pointer dereference
</pre></blockquote>
<p>
This is due to unchecked pointer access in the implementation of <tt><i>outer-iterator</i></tt> 
(<sref ref="[range.lazy.split.outer]"/> p8):
</p>
<blockquote><pre>
return x.<i>current</i> == ranges::end(x.<i>parent_</i>-&gt;<i>base_</i>) &amp;&amp; !x.<i>trailing_empty_</i>;
</pre></blockquote>
<p>
(<tt><i>parent_</i></tt> is null for a default-constructed iterator <tt>x</tt>, making the access 
to <tt><i>base_</i></tt> invalid)
<p/>
And similarly for <tt><i>inner-iterator</i></tt> (<sref ref="[range.lazy.split.inner]"/> p7):
</p>
<blockquote><pre>
auto [pcur, pend] = subrange{x.<i>i_</i>.<i>parent_</i>-&gt;<i>pattern_</i>};
</pre></blockquote>
<p>
(For a default-constructed <tt><i>inner-iterator</i> x</tt>, <tt><i>i_</i></tt> is a default-constructed 
<tt><i>outer-iterator</i></tt> member variable and <tt><i>i_</i>.<i>parent_</i></tt> is null, making the 
access to <tt><i>pattern_</i></tt> invalid)
<p/>
It seems a reasonable expectation for users to expect comparing a default-constructed iterator to 
<tt>std::default_sentinel</tt> to be a well-defined operation that returns <tt>true</tt>. Alternatively, 
the corresponding <tt>operator==</tt> functions should add a non-normative note stating that the 
iterator cannot be default-constructed.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4910"/>.
</p>

<ol>
<li><p>Modify <sref ref="[range.lazy.split.outer]"/> as indicated:</p>

<blockquote>
<pre>
friend constexpr bool operator==(const <i>outer-iterator</i>&amp; x, default_sentinel_t);
</pre>
<blockquote>
<p>
-8- <i>Effects:</i> Equivalent to:
</p>
<blockquote><pre>
<ins>if (!x.<i>parent_</i>) return true;</ins>
return x.<i>current</i> == ranges::end(x.<i>parent_</i>-&gt;<i>base_</i>) &amp;&amp; !x.<i>trailing_empty_</i>;
</pre></blockquote>
</blockquote>
</blockquote>
</li>


<li><p>Modify <sref ref="[range.lazy.split.inner]"/>, as indicated:</p>

<blockquote>
<pre>
friend constexpr bool operator==(const <i>inner-iterator</i>&amp; x, default_sentinel_t);
</pre>
<blockquote>
<p>
-7- <i>Effects:</i> Equivalent to:
</p>
<blockquote><pre>
<ins>if (!x.<i>i_</i>.<i>parent_</i>) return true;</ins>
auto [pcur, pend] = subrange{x.<i>i_</i>.<i>parent_</i>-&gt;<i>pattern_</i>};
[&hellip;]
</pre></blockquote>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
