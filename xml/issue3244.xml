<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3244" status="WP">
<title>Constraints for <tt>Source</tt> in &sect;[fs.path.req] insufficiently constrainty</title>
<section><sref ref="[fs.path.req]"/></section>
<submitter>Casey Carter</submitter>
<date>02 Aug 2019</date>
<priority>0</priority>

<discussion>
<p>
<tt>std::filesystem::path</tt> has a number of functions - notably including a conversion
constructor template (<sref ref="[fs.path.construct]"/>) and assignment operator template
(<sref ref="[fs.path.assign]"/>) - that accept <tt>const Source&amp;</tt>. Per
<sref ref="[fs.path.req]"/> paragraph 2:
</p><blockquote><p>
-2- Functions taking template parameters named <tt>Source</tt> shall not participate in overload
resolution unless either
</p><p>
(2.1) &mdash; <tt>Source</tt> is a specialization of <tt>basic_string</tt> or
<tt>basic_string_view</tt>, or
</p><p>
(2.2) &mdash; the <i>qualified-id</i>
<tt>iterator_traits&lt;decay_t&lt;Source&gt;&gt;::value_type</tt> is valid and denotes a possibly
<tt>const</tt> encoded character type.
</p></blockquote><p>
<tt>iterator_traits&lt;decay_t&lt;path&gt;&gt;::value_type</tt> is not valid in C++17, so this
specification was sufficient to guard against the conversion constructor template (respectively
assignment operator template) "pretending" to be copy constructor (respectively copy assignment
operator). <a href="https://wg21.link/p0896r4">P0896R4 "The One Ranges Proposal"</a>, however,
altered the definition of <tt>iterator_traits</tt> in the working draft. It now has some convenient
default behaviors for types that meet (roughly) the syntax of the <i><tt>Cpp17InputIterator</tt></i>
requirements. Notably those requirements include copy construction and copy assignment.
</p><p>
In the working draft, to determine the copyability of <tt>std::filesystem::path</tt> we must perform
overload resolution to determine if we can initialize a <tt>path</tt> from a constant lvalue of type
<tt>path</tt>. The conversion constructor template that accepts <tt>const Source&amp;</tt> is a
candidate, since its second argument is defaulted, so
we must perform template argument deduction to see if this constructor is viable. <tt>Source</tt> is
deduced to <tt>path</tt> and we then must check the constraint from <sref ref="[fs.path.req]"/>
paragraph 2.2 (above). Checking the constraint requires us to specialize
<tt>iterator_traits&lt;path&gt;</tt>, which (per <sref ref="[iterator.traits]"/> paragraph 3.2)
requires us to determine if <tt>path</tt> satisfies the exposition-only
<i><tt>cpp17-input-iterator</tt></i> concept, which requires <tt>path</tt> to be copyable.
</p><p>
We've completed a cycle: determining if <tt>path</tt> is copyable requires us to first determine if
<tt>path</tt> is copyable. This unfortunate constraint recursion can be broken by explicitly
specifying that <tt>path</tt> is not a valid <tt>Source</tt>.
</p>

<note>2019-08-17 Issue Prioritization</note>
<p>Status to Tentatively Ready and priority to 0 after seven positive votes on the reflector.</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4830">N4830</a>.</p>

<ol>
<li><p>Modify <sref ref="[fs.path.req]"/> as indicated:</p>
<blockquote><p>
-2- Functions taking template parameters named <tt>Source</tt> shall not participate in overload
resolution unless <ins><tt>Source</tt> denotes a type other than <tt>path</tt>, and</ins> either
</p><p>
[&hellip;]
</p></blockquote>
</li>
</ol>

</resolution>
</issue>
