<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2762" status="Open">
<title><tt>unique_ptr operator*()</tt> should be <tt>noexcept</tt></title>
<section><sref ref="[unique.ptr.single.observers]"/></section>
<submitter>Ville Voutilainen</submitter>
<date>04 Aug 2016</date>
<priority>3</priority>

<discussion>
<p>
See LWG <iref ref="2337"/>. Since we aren't removing <tt>noexcept</tt> from <tt>shared_ptr</tt>'s 
<tt>operator*</tt>, we should consider adding <tt>noexcept</tt> to <tt>unique_ptr</tt>'s <tt>operator*</tt>.
</p>

<note>2016-08 &mdash; Chicago</note>
<p>Thurs PM: P3, and status to 'LEWG'</p>

<note>2016-08-05 Chicago</note>
<p>
Ville provides an initial proposed wording.
</p>

<note>LEWG Kona 2017</note>
<p>->Open: Believe these should be noexcept for consistency. We like these. We agree with the proposed resolution. operator->() already has noexcept.</p>
<p>Also adds optional::operator*</p>
<p>Alisdair points out that fancy pointers might intentionally throw from operator*, and we don't want to prohibit that.</p>
<p>Go forward with conditional <tt>noexcept(noexcept(*decltype()))</tt>.</p>
</discussion>

<resolution>
<p>This wording is relative to N4606.</p>

<blockquote class="note">
<p>
[Drafting note: since this issue is all about consistency, <tt>optional</tt>'s pointer-like operators 
are additionally included.]
</p>
</blockquote>

<ol>
<li><p>In <sref ref="[unique.ptr.single]"/> synopsis, edit as follows:</p>

<blockquote>
<pre>
add_lvalue_reference_t&lt;T&gt; operator*() const <ins>noexcept</ins>;
</pre>
</blockquote>
</li>

<li><p>Before <sref ref="[unique.ptr.single.observers]"/>/1, edit as follows:</p>

<blockquote>
<pre>
add_lvalue_reference_t&lt;T&gt; operator*() const <ins>noexcept</ins>;
</pre>
</blockquote>
</li>

<li><p>In <sref ref="[optional.optional]"/> synopsis, edit as follows:</p>

<blockquote>
<pre>
constexpr T const *operator-&gt;() const <ins>noexcept</ins>;
constexpr T *operator-&gt;() <ins>noexcept</ins>;
constexpr T const &amp;operator*() const &amp; <ins>noexcept</ins>;
constexpr T &amp;operator*() &amp; <ins>noexcept</ins>;
constexpr T &amp;&amp;operator*() &amp;&amp; <ins>noexcept</ins>;
constexpr const T &amp;&amp;operator*() const &amp;&amp; <ins>noexcept</ins>;
</pre>
</blockquote>
</li>

<li><p>Before <sref ref="[optional.object.observe]"/>/1, edit as follows:</p>

<blockquote>
<pre>
constexpr T const* operator-&gt;() const <ins>noexcept</ins>;
constexpr T* operator-&gt;() <ins>noexcept</ins>;
</pre>
</blockquote>
</li>

<li><p>Before <sref ref="[optional.object.observe]"/>/5, edit as follows:</p>

<blockquote>
<pre>
constexpr T const&amp; operator*() const &amp; <ins>noexcept</ins>;
constexpr T&amp; operator*() &amp; <ins>noexcept</ins>;
</pre>
</blockquote>
</li>

<li><p>Before <sref ref="[optional.object.observe]"/>/9, edit as follows:</p>

<blockquote>
<pre>
constexpr T&amp;&amp; operator*() &amp;&amp; <ins>noexcept</ins>;
constexpr const T&amp;&amp; operator*() const &amp;&amp; <ins>noexcept</ins>;
</pre>
</blockquote>
</li>

</ol>
</resolution>

</issue>
