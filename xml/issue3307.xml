<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3307" status="WP">
<title><tt>std::allocator&lt;void&gt;().allocate(n)</tt></title>
<section><sref ref="[default.allocator]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>25 Oct 2019</date>
<priority>0</priority>

<discussion>
<p>
In C++20 the <tt>std::allocator&lt;void&gt;</tt> explicit specialization is gone, which means it uses the 
primary template, which has allocate and deallocate members.
<p/>
Although it's implied by the use of <tt>sizeof(T)</tt>, <tt>std::allocator&lt;T&gt;::allocate</tt> 
doesn't have an explicit precondition that the value type is complete.
</p>

<note>2019-11 Status to 'Ready' in Monday issue prioritization in Belfast</note>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4835">N4835</a>.</p>

<ol>
<li><p>Modify <sref ref="[allocator.members]"/> as indicated:</p>

<blockquote>
<pre>
[[nodiscard]] constexpr T* allocate(size_t n);
</pre>
<p>
<ins>-?- <i>Mandates:</i> <tt>T</tt> is not an incomplete type (<sref ref="[basic.types]"/>).</ins>
<p/>
-2- <i>Returns:</i> A pointer to the initial element of an array of storage of size 
<tt>n * sizeof(T)</tt>, aligned appropriately for objects of type <tt>T</tt>.
<p/>
[&hellip;]
</p>
</blockquote>
</li>
</ol>

</resolution>
</issue>
