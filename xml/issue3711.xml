<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3711" status="C++23">
<title>Missing preconditions for <tt>slide_view</tt> constructor</title>
<section><sref ref="[range.slide.view]"/></section>
<submitter>Hewill Kang</submitter>
<date>10 Jun 2022</date>
<priority>99</priority>

<discussion>
<p>
It doesn't make sense for <tt>slide_view</tt> when <tt>n</tt> is not positive, 
we should therefore add a precondition for its constructor just like we did for 
<tt>chunk_view</tt>.
<p/>
<i>Daniel:</i>
<p/>
Indeed the accepted paper describes the intention in
<a href="https://wg21.link/p2442r1#slide">P2442R1 Section 4.2</a> by saying that 
"It is a precondition that <tt>N</tt> is positive" in the design wording
but omitted to add a normative precondition in the proposed wording.
</p>

<note>2022-06-21; Reflector poll</note>
<p>
Set status to Tentatively Ready after six votes in favour during reflector poll.
</p>

<note>2022-07-15; LWG telecon: move to Ready</note>

<note>2022-07-25 Approved at July 2022 virtual plenary. Status changed: Ready &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4910"/>.
</p>

<ol>
<li><p>Modify <sref ref="[range.slide.view]"/> as indicated:</p>

<blockquote>
<pre>
constexpr explicit slide_view(V base, range_difference_t&lt;V&gt; n);
</pre>
<blockquote>
<p>
<ins>-?- <i>Preconditions</i>: <tt>n &gt; 0</tt> is <tt>true</tt>.</ins>
<p/>
-1- <i>Effects</i>: Initializes <tt><i>base_</i></tt> with <tt>std::move(base)</tt> and <tt><i>n_</i></tt> with <tt>n</tt>.
</p>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
