<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2446" status="LEWG">
<title>Unspecialized <tt>std::tuple_size</tt> should be defined</title>
<section><sref ref="[tuple.general]"/></section>
<submitter>Nevin Liber</submitter>
<date>10 Oct 2014</date>
<priority>99</priority>

<discussion>
<p>
In <sref ref="[tuple.general]"/> paragraph 2, the unspecialized <tt>std::tuple_size</tt> is undefined. It would 
be a lot more useful with SFINAE if it were defined as an empty struct; that way, it can be used with <tt>enable_if</tt> 
for determining whether or not it is valid to use <tt>tuple_size</tt>, <tt>tuple_element</tt> and get on the 
corresponding data structure.
</p>

<note>2014-11 Urbana</note>
<p>Moved to LEWG 42.</p>
<p>
This request goes beyond simply making an API respond well to SFINAE, but coupling that with an
implication for other tuple APIs.  The proper place for such design discussions is LEWG.
</p>
</discussion>

<resolution>
<p>
This wording is relative to N3936.
</p>

<ol>
<li><p>Change <sref ref="[tuple.general]"/> p2, header <tt>&lt;tuple&gt;</tt> synopsis, as indicated</p>
<blockquote>
<pre>
[&hellip;]
// <i>20.4.2.5, tuple helper classes</i>:
template &lt;class T&gt; class tuple_size; <del>// undefined</del>
[&hellip;]
</pre>
</blockquote>
</li>

<li><p>Change <sref ref="[tuple.helper]"/> as indicated</p>
<blockquote>
<pre>
[&hellip;]
template &lt;class T&gt; struct tuple_size <ins>{ }</ins>;
[&hellip;]
</pre>
</blockquote>
</li>
</ol>
</resolution>

</issue>
