<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2491" status="New">
<title><tt>std::less&lt;T*&gt;</tt> in constant expression</title>
<section><sref ref="[comparisons]"/></section>
<submitter>Agust&iacute;n K-ballo Berg&eacute;</submitter>
<date>1 Apr 2015</date>
<priority>3</priority>

<discussion>
<p>
It is not entirely clear if and when the specializations of <tt>std::less</tt> (and friends) for pointer types 
can be used in a constant expression. Consider the following code:
</p>
<blockquote><pre>
#include &lt;functional&gt;

struct foo {};
foo x, y;
constexpr bool b = std::less&lt;foo*&gt;{}(&amp;x, &amp;y); // [1]

foo z[] = {{}, {}};
constexpr bool ba = std::less&lt;foo*&gt;{}(&amp;z[0], &amp;z[1]); // [2]
</pre></blockquote>
<p>
Comparing the address of unrelated objects is not a constant expression since the result is unspecified, so 
it could be expected for [1] to fail and [2] to succeed. However, <tt>std::less</tt> specialization for pointer 
types is well-defined and yields a total order, so it could just as well be expected for [1] to succeed. Finally, 
since the implementation of such specializations is not mandated, [2] could fail as well (This could happen, if
an implementation would provide such a specialization and if that would use built-in functions that would not be
allowed in constant expressions, for example). In any case, the standard should be clear so as to avoid 
implementation-defined <tt>constexpr</tt>-ness.
</p>

<note>2017-01-22, Jens provides rationale and proposed wording</note>
<p>
<tt>std::less&lt;T*&gt;</tt> is required to deliver a total order on pointers.
However, the layout of global objects is typically determined
by the linker, not the compiler, so requiring <tt>std::less&lt;T*&gt;</tt> to
provide an ordering at compile-time that is consistent with
run-time would need results from linking to feed back to
the compiler, something that C++ has traditionally not required.
</p>

<strong>Previous resolution [SUPERSEDED]:</strong>
<blockquote class="note">
<p>This wording is relative to <a href="https://wg21.link/n4618">N4618</a>.</p>

<ol>
<li><p>Add at the end of <sref ref="[comparisons]"/>:</p>
<blockquote>
<p>
-2- For templates <tt>less</tt>, <tt>greater</tt>, <tt>less_equal</tt>, and <tt>greater_equal</tt>, [&hellip;], 
if the call operator calls a built-in operator comparing pointers, the call operator yields a strict total order 
that is consistent among those specializations and is also consistent with the partial order imposed by those 
built-in operators. <ins>Relational comparisons of pointer values are not required to be usable as constant expressions.</ins>
</p>
</blockquote>
</li>
</ol>
</blockquote>

<note>2021-04-05; Jiang An comments and provides alternative wording</note>
<p>
The libc++ and MSVC STL implementations only support flat address spaces, and always use comparison operators. 
The libstdc++ implementation casts pointer values to <tt>uintptr_t</tt> if the direct comparison result is unusable 
in constant evaluation.
<p/>
So, I think that we can specify that the implementation-defined strict total order (<sref ref="[defns.order.ptr]"/>) 
generates a core constant expression if and only if the corresponding underlying comparison expression comparing 
pointer values is a core constant expression. No any other case should be a core constant expression, otherwise 
we should also make the underlying comparison expression a core constant expression.
<p/>
IMO the proposed resolution is already implemented in libc++, libstdc++, and MSVC STL, and implementable on compilers 
that either support flat address spaces only or have implemented intrinsics needed for transparent comparison operators 
and <tt>std::is_constant_evaluated</tt>.
</p>

</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4885">N4885</a>.</p>

<ol>
<li><p>Add at the end of <sref ref="[comparisons]"/> p2:</p>
<blockquote>
<p>
-2- For templates <tt>less</tt>, <tt>greater</tt>, <tt>less_equal</tt>, and <tt>greater_equal</tt>, the specializations 
for any pointer type yield a result consistent with the implementation-defined strict total order over pointers 
(<sref ref="[defns.order.ptr]"/>). [<i>Note 1</i>: If <tt>a &lt; b</tt> is well-defined for pointers <tt>a</tt> and 
<tt>b</tt> of type <tt>P</tt>, then <tt>(a &lt; b) == less&lt;P&gt;()(a, b)</tt>, <tt>(a &gt; b) == greater&lt;P&gt;()(a, b)</tt>, 
and so forth. &mdash; <i>end note</i>] For template specializations <tt>less&lt;void&gt;</tt>, <tt>greater&lt;void&gt;</tt>, 
<tt>less_equal&lt;void&gt;</tt>, and <tt>greater_equal&lt;void&gt;</tt>, if the call operator calls a built-in operator 
comparing pointers, the call operator yields a result consistent with the implementation-defined strict total order over 
pointers. <ins>A comparison result of pointer values is a core constant expression if and only if the corresponding 
built-in comparison expression is a core constant expression.</ins>
</p>
</blockquote>
</li>

<li><p>Add at the end of <sref ref="[range.cmp]"/> (3.1):</p>
<blockquote>
<p>
-3- <i>Effects:</i>
</p>
<ol style="list-style-type: none">
<li><p>(3.1) &mdash; If the expression <tt>std::forward&lt;T&gt;(t) == std::forward&lt;U&gt;(u)</tt> results in a call 
to a built-in operator <tt>==</tt> comparing pointers: returns <tt>false</tt> if either (the converted value of) <tt>t</tt> 
precedes <tt>u</tt> or <tt>u</tt> precedes <tt>t</tt> in the implementation-defined strict total order over pointers 
(<sref ref="[defns.order.ptr]"/>) and otherwise <tt>true</tt>. <ins>The result is a core constant expression if and only 
if <tt>std::forward&lt;T&gt;(t) == std::forward&lt;U&gt;(u)</tt> is a core constant expression.</ins></p></li>
<li><p>(3.2) &mdash; Otherwise, equivalent to: <tt>return std::forward&lt;T&gt;(t) == std::forward&lt;U&gt;(u);</tt></p></li>
</ol>
</blockquote>
</li>

<li><p>Add at the end of <sref ref="[range.cmp]"/> (7.1):</p>
<blockquote>
<p>
-7- <i>Effects:</i>
</p>
<ol style="list-style-type: none">
<li><p>(7.1) &mdash; If the expression <tt>std::forward&lt;T&gt;(t) &lt; std::forward&lt;U&gt;(u)</tt> results in a call 
to a built-in operator <tt>&lt;</tt> comparing pointers: returns <tt>true</tt> if (the converted value of) <tt>t</tt> 
precedes <tt>u</tt> in the implementation-defined strict total order over pointers (<sref ref="[defns.order.ptr]"/>) and 
otherwise <tt>false</tt>. <ins>The result is a core constant expression if and only 
if <tt>std::forward&lt;T&gt;(t) &lt; std::forward&lt;U&gt;(u)</tt> is a core constant expression.</ins></p></li>
<li><p>(7.2) &mdash; Otherwise, equivalent to: <tt>return std::forward&lt;T&gt;(t) &lt; std::forward&lt;U&gt;(u);</tt></p></li>
</ol>
</blockquote>
</li>

<li><p>Add at the end of <sref ref="[comparisons.three.way]"/> (3.1):</p>
<blockquote>
<p>
-3- <i>Effects:</i>
</p>
<ol style="list-style-type: none">
<li><p>(3.1) &mdash; If the expression <tt>std::forward&lt;T&gt;(t) &lt;=&gt; std::forward&lt;U&gt;(u)</tt> results in a call 
to a built-in operator <tt>&lt;=&gt;</tt> comparing pointers: returns <tt>strong_ordering::less</tt> if (the converted value 
of) <tt>t</tt> precedes <tt>u</tt> in the implementation-defined strict total order over pointers (<sref ref="[defns.order.ptr]"/>), 
<tt>strong_ordering::greater</tt> if <tt>u</tt> precedes <tt>t</tt>, and otherwise <tt>strong_ordering::equal</tt>. 
<ins>The result is a core constant expression if and only if <tt>std::forward&lt;T&gt;(t) &lt;=&gt; std::forward&lt;U&gt;(u)</tt> 
is a core constant expression.</ins></p></li>
<li><p>(3.2) &mdash; Otherwise, equivalent to: <tt>return std::forward&lt;T&gt;(t) &lt;=&gt; std::forward&lt;U&gt;(u);</tt></p></li>
</ol>
</blockquote>
</li>
</ol>
</resolution>

</issue>
