<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2491" status="New">
<title><tt>std::less&lt;T*&gt;</tt> in constant expression</title>
<section><sref ref="[comparisons]"/></section>
<submitter>Agust&iacute;n K-ballo Berg&eacute;</submitter>
<date>1 Apr 2015</date>
<priority>99</priority>

<discussion>
<p>
It is not entirely clear if and when the specializations of <tt>std::less</tt> (and friends) for pointer types 
can be used in a constant expression. Consider the following code:
</p>
<blockquote><pre>
#include &lt;functional&gt;

struct foo {};
foo x, y;
constexpr bool b = std::less&lt;foo const*&gt;{}(&amp;x, &amp;y); // [1]

foo z[] = {0, 0};
constexpr bool ba = std::less&lt;foo const*&gt;{}(&amp;z[0], &amp;z[1]); // [2]
</pre></blockquote>
<p>
Comparing the address of unrelated objects is not a constant expression since the result is unspecified, so 
it could be expected for [1] to fail and [2] to succeed. However, <tt>std::less</tt> specialization for pointer 
types is well-defined and yields a total order, so it could just as well be expected for [1] to succeed. Finally, 
since the implementation of such specializations is not mandated, [2] could fail as well. In any case, the 
standard should be clear so as to avoid implementation-defined <tt>constexpr</tt>-ness.
</p>

</discussion>

<resolution>
</resolution>

</issue>
