<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2206" status="Open">
<title>Inaccuracy in <tt>initializer_list</tt> constructor requirements</title>
<section><sref ref="[sequence.reqmts]"/> <sref ref="[associative.reqmts]"/> 
<sref ref="[unord.req]"/> <sref ref="[rand.req.seedseq]"/></section>
<submitter>Jeffrey Yasskin</submitter>
<date>21 Oct 2012</date>
<priority>3</priority>

<discussion>

<p>
In <sref ref="[sequence.reqmts]"/> p3, we have "<tt>il</tt> designates an object of type
<tt>initializer_list&lt;value_type&gt;</tt>", and then several functions that take
'<tt>il</tt>' as an argument. However, an expression like <tt>{1, 2, 'a'}</tt> is <em>not</em>
an object of type <tt>initializer_list&lt;int&gt;</tt> unless it's used to initialize
an explicitly-typed variable of that type. I believe we want:
</p>
<blockquote><pre>
std::vector&lt;int&gt; v;
v = {1, 2, 'a'};
</pre></blockquote>
<p>
to compile portably, so we should say something different when defining '<tt>il</tt>'. The 
same phrasing happens in <sref ref="[associative.reqmts]"/>, <sref ref="[unord.req]"/>, and 
<sref ref="[rand.req.seedseq]"/>.
<p/>
This may just be an editorial issue because the actual class synopses declare the functions 
to take <tt>initializer_list&lt;exact_type&gt;</tt>.
</p>

<note>2013-03-15 Issues Teleconference</note>
<p>
Moved to Open.
</p>
<p>
This is definitely not NAD
</p>
<p>
Should copy the suggested wording as the proposed resolution.
</p>

<note>2019-03-24; Daniel comments and provides wording</note>
<p>
The 2013-03-15 comment is confusing, since it recommends to "copy the suggested wording as the proposed resolution". 
I couldn't find such wording in the issue nor in the associated wiki, so I provided that wording out of myself.
The tricky part is to define which kind of <i>braced-init-list</i> we want to allow. The below suggested wording 
restricts that to every initializer list that can be used to copy-list-initialize an object of type 
<tt>std::initializer_list&lt;value_type&gt;</tt> by saying:
</p>
<blockquote><p>
"<tt>il</tt> designates any <i>braced-init-list</i> suitable to copy-list-initialize an object of type 
<tt>initializer_list&lt;value_type&gt;</tt> (<sref ref="[dcl.init.list]"/>)"
</p></blockquote>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4810">N4810</a>.</p>

<ol>
<li><p>Modify <sref ref="[sequence.reqmts]"/> as indicated:</p>

<blockquote>
<p>
-3- In Tables 66 and 67, [&hellip;] <tt>il</tt> designates <ins>any <i>braced-init-list</i> suitable to 
copy-list-initialize</ins> an object of type <tt>initializer_list&lt;value_type&gt;</tt> 
<ins>(<sref ref="[dcl.init.list]"/>)</ins>, [&hellip;]
</p>
</blockquote>

</li>

<li><p>Modify <sref ref="[associative.reqmts]"/> as indicated:</p>

<blockquote>
<p>
-8- In Table 69, [&hellip;] <tt>il</tt> designates <ins>any <i>braced-init-list</i> suitable to 
copy-list-initialize</ins> an object of type <tt>initializer_list&lt;value_type&gt;</tt> 
<ins>(<sref ref="[dcl.init.list]"/>)</ins>, [&hellip;]
</p>
</blockquote>

</li>

<li><p>Modify <sref ref="[unord.req]"/> p11's bullet list as indicated:</p>

<blockquote>
<p>
-11- In Table 70:
</p>
<ol style="list-style-type: none">
<li><p>(11.1) &mdash; [&hellip;]</p></li>
<li><p>[&hellip;]</p></li>
<li><p>(11.14) &mdash; <tt>il</tt> denotes <del>a value</del><ins>any <i>braced-init-list</i> suitable 
to copy-list-initialize an object</ins> of type <tt>initializer_list&lt;value_type&gt;</tt> 
<ins>(<sref ref="[dcl.init.list]"/>)</ins>,</p></li>
<li><p>[&hellip;]</p></li>
</ol>
</blockquote>

</li>

<li><p>Modify <sref ref="[rand.req.seedseq]"/> p2's bullet list as indicated:</p>

<blockquote>
<p>
-2- A class <tt>S</tt> satisfies the requirements of a seed sequence if the expressions shown in Table 82 are 
valid and have the indicated semantics, and [&hellip;] In that Table and throughout this subclause:
</p>
<ol style="list-style-type: none">
<li><p>(2.1) &mdash; [&hellip;]</p></li>
<li><p>[&hellip;]</p></li>
<li><p>(2.6) &mdash; <tt>il</tt> <del>is a value</del><ins>denotes any <i>braced-init-list</i> suitable to 
copy-list-initialize an object</ins> of <ins>type</ins> <tt>initializer_list&lt;value_type&gt;</tt> 
<ins>(<sref ref="[dcl.init.list]"/>)</ins>.</p></li>
</ol>
</blockquote>

</li>
</ol>
</resolution>

</issue>
