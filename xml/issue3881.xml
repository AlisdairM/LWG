<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3881" status="New">
<title>Incorrect formatting of container adapters backed by <tt>std::string</tt></title>
<section><sref ref="[container.adaptors.format]"/></section>
<submitter>Victor Zverovich</submitter>
<date>10 Feb 2023</date>
<priority>99</priority>

<discussion>
<p>
According to <sref ref="[container.adaptors.format]"/> container adapters such as <tt>std::stack</tt> are 
formatted by forwarding to the underlying container:
</p>
<blockquote><pre>
template&lt;class FormatContext&gt;
  typename FormatContext::iterator
    format(<i>maybe-const-adaptor</i>&amp; r, FormatContext&amp; ctx) const;
</pre>
<blockquote>
<p>
<i>Effects</i>: Equivalent to: <tt>return <i>underlying_</i>.format(r.c, ctx);</tt>
</p>
</blockquote>
</blockquote>
<p>
This gives expected results for <tt>std::stack&lt;T&gt;</tt> and most types of underlying container:
</p>
<blockquote><pre>
auto s = std::format("{}", std::stack(std::deque{'a', 'b', 'c'}));
// s == "['a', 'b', 'c']"
</pre></blockquote>
<p>
However, when the underlying container is <tt>std::string</tt> the output is:
</p>
<blockquote><pre>
auto s = std::format("{}", std::stack{std::string{"abc"}});
// s == "abc"
</pre></blockquote>
<p>
This is clearly incorrect because <tt>std::stack</tt> itself is not a string (it is only backed by a string) 
and inconsistent with formatting of ranges where non-string range types are formatted as comma-separated values 
delimited by <tt>'['</tt> and <tt>']'</tt>. The correct output in this case would be <tt>['a', 'b', 'c']</tt>.
<p/>
Here is an illustration of this issue on godbolt using {fmt} and an implementation of the formatter for container 
adapters based on the one from the standard: <a href="https://godbolt.org/z/P1nrM1986">https://godbolt.org/z/P1nrM1986</a>.
<p/>
A simple fix is to wrap the underlying container in <tt>std::views::all(_t)</tt> 
(<a href="https://godbolt.org/z/8MT1be838">https://godbolt.org/z/8MT1be838</a>).
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="n4928"/>.
</p>

<ol>
<li><p>Modify <sref ref="[container.adaptors.format]"/> as indicated:</p>

<blockquote>
<p>
-1- For each of <tt>queue</tt>, <tt>priority_queue</tt>, and <tt>stack</tt>, the library provides the following formatter specialization
where <tt><i>adaptor-type</i></tt> is the name of the template:
</p>
<blockquote>
<pre>
namespace std {
  template&lt;class charT, class T, formattable&lt;charT&gt; Container, class... U&gt;
  struct formatter&lt;<i>adaptor-type</i>&lt;T, Container, U...&gt;, charT&gt; {
  private:
    using <i>maybe-const-adaptor</i> =                       // <i>exposition only</i>
      <i>fmt-maybe-const</i>&lt;<i>adaptor-type</i>&lt;T, Container, U...&gt;, charT&gt;;
    formatter&lt;Container, charT&gt; <i>underlying_</i>;          // <i>exposition only</i>

  public:
    template&lt;class ParseContext&gt;
      constexpr typename ParseContext::iterator
        parse(ParseContext&amp; ctx);

    template&lt;class FormatContext&gt;
      typename FormatContext::iterator
        format(<i>maybe-const-adaptor</i>&amp; r, FormatContext&amp; ctx) const;
  };
}
</pre>
</blockquote>
[&hellip;]
<pre>
template&lt;class FormatContext&gt;
  typename FormatContext::iterator
    format(<i>maybe-const-adaptor</i>&amp; r, FormatContext&amp; ctx) const;
</pre>
<blockquote>
<p>
-3- <i>Effects</i>: Equivalent to: <tt>return <i>underlying_</i>.format(r.c, ctx);</tt>
</p>
</blockquote>
</blockquote>

</li>

</ol>
</resolution>

</issue>
