<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4052" status="New">
<title>Bogus requirements for <code>piecewise_linear_distribution</code></title>
<section>
<sref ref="[rand.dist.samp.pconst]"/>
<sref ref="[rand.dist.samp.plinear]"/>
</section>
<submitter>Jonathan Wakely</submitter>
<date>05 Feb 2024</date>
<priority>4</priority>

<discussion>
<p>
In the second constructor of <sref ref="[rand.dist.samp.plinear]"/>,
<paper num="P1719R2"/> replaced:

<blockquote>
<pre><code>
template&lt;class InputIteratorB, class InputIteratorW&gt;
  piecewise_linear_distribution(InputIteratorB firstB, InputIteratorB lastB,
                                InputIteratorW firstW);
</code></pre>
<p>
<em>Effects</em>: [...] Moreover, the <em>id-expressions</em>
<code>iterator_traits&lt;InputIteratorB&gt;::value_type</code>
and
<code>iterator_traits&lt;InputIteratorW&gt;::value_type</code>
shall each denote a type that is convertible to
<code>double</code>.
</p>
</blockquote>
with
<blockquote>
<pre><code>
template&lt;class InputIteratorB, class InputIteratorW&gt;
  piecewise_linear_distribution(InputIteratorB firstB, InputIteratorB lastB,
                                InputIteratorW firstW);
</code></pre>
<p>
<em>Mandates</em>: 
<code>is_invocable_r_v&lt;double, UnaryOperation&amp;, double&gt;</code>
is <code>true</code>.
</p>
<p><em>Preconditions</em>: [...]</p>
<p><em>Effects</em>: [...]</p>

</blockquote>
</p>
<p>
This was a copy &amp; paste error from the next constructor,
and was obviously not intended. There is no <code>UnaryOperation</code>
in that constructor.
</p>
<p>A less obviously wrong issue is the use of <code>double</code> there
in the first place. Shouldn't it be <code>RealType</code> instead?
That seems to be incorrect throughout both
<sref ref="[rand.dist.samp.pconst]"/>
and
<sref ref="[rand.dist.samp.plinear]"/>,
and was only partially fixed by LWG <iref ref="1439"/>.
</p>

<p>
Finally, the  preconditions also say:
</p>
<blockquote>
<em>Preconditions</em>: [...]
If <code>firstB == lastB</code> or <code>++firstB == lastB</code>,
let <em>n</em> = 1, <em>ρ</em><sub>0</sub> = <em>ρ</em><sub>1</sub> = 1,
<em>b</em><sub>0</sub> = 0, and <em>b</em><sub>1</sub> = 1.
Otherwise, [<code>firstB</code>, <code>lastB</code>)
forms a sequence <em>b</em> of length <em>n</em> + 1,
the length of the sequence <em>w</em> starting
from <code>firstW</code> is at least <em>n</em>,
and any <em>w<sub>k</sub></em> for <em>k</em> ≥ <em>n</em>
are ignored by the distribution.
</blockquote>
<p>
These are not preconditions. I think it is trying to say something like:
</p>
<blockquote>
<p>
<em>Preconditions</em>: [...]
[<code>firstB</code>, <code>lastB</code>) is a valid range and
[<code>firstW</code>, <code>firstW + (lastB - firstB)</code>)
is a valid range.
</p>
<p>
<em>Effects</em>:
If <code>firstB == lastB</code> or <code>++firstB == lastB</code>,
let <em>n</em> = 1, <em>ρ</em><sub>0</sub> = <em>ρ</em><sub>1</sub> = 1,
<em>b</em><sub>0</sub> = 0, and <em>b</em><sub>1</sub> = 1.
Otherwise, let [<code>firstB</code>, <code>lastB</code>) form a sequence
<em>b</em><sub>0</sub>, &hellip;, <em>b</em><sub>n</sub>,
and let <em>w<sub>k</sub></em> = <code>*firstW++</code>
for <em>k</em> = 0, &hellip;, <em>n</em>.
</p>
</blockquote>

<p>
The equivalent constructor for <code>piecewise_constant_distribution</code>
has similar problems with its preconditions in terms of <em>n</em> + 1.
</p>

<note>2024-03-12; Reflector poll</note>
<p>
Set priority to 4 after reflector poll.
The copy &amp; paste error was
<a href="https://github.com/cplusplus/draft/pull/6794">fixed editorially</a>.
</p>

</discussion>

<resolution>
<p>
</p>
</resolution>

</issue>
