<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2893" status="NAD">
<title>Parsing Hexadecimally in P0067R4</title>
<section><sref ref="[utilities]"/></section>
<submitter>Great Britain</submitter>
<date>3 Feb 2017</date>
<priority>99</priority>

<discussion>
<b>Addresses GB 45</b>

<p>If <a href="http://wg21.link/p0067r4">P0067R4</a> is applied consider how to parse hexadecimally:</p>
<blockquote>
<p><tt>to_chars(beg, end, 42, 16);</tt> 16 for hex</p>
<p><tt>to_chars(beg, end, 4.2, true);</tt> true means hex</p>
<p><tt>to_chars(beg, end, 4.2, chars_format::hex);</tt></p>
<p><tt>to_chars(beg, end, 4.2, chars_format::hex, 2);</tt></p>
</blockquote>

<p>That is: We have 3 different formats to specify hex depending on value types and whether to use precision.
Which application programmer should remember this?</p>

<p>May be even worse (I am not sure):</p>
<blockquote><tt>to_chars(beg, end, 4.2, 16);</tt></blockquote>
<p>would silently convert 4.2 to 4 and</p>
<blockquote><tt>to_chars(beg, end, 4, chars_format::hex);</tt></blockquote>
<p>would silently convert 4 to 4.000000.</p>

<p>Proposed change: The various options should be harmonized, possibly by use of an extended enum approach, having the values:
dec, hex, scientific, fixed, general
with dec (new!) as default for integral values and general for floats</p>

<note>2017-02-23, Jens Maurer comments</note>
<p>
This issue is NAD; the facility was redesigned with these considerations
in mind before it went into the working draft.
</p>

<note>
2017-06-26 Moved to Tentatively NAD after 5 positive votes on c++std-lib.
</note>
</discussion>

<resolution>
<p>
</p>
</resolution>

</issue>


