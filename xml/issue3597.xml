<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3597" status="C++23">
<title>Unsigned integer types don't model <tt><i>advanceable</i></tt></title>
<section><sref ref="[range.iota.view]"/></section>
<submitter>Jiang An</submitter>
<date>23 Sep 2021</date>
<priority>3</priority>

<discussion>
<p>
Unsigned integer types satisfy <tt><i>advanceable</i></tt>, but don't model it, since
</p>
<blockquote><p>
every two values of an unsigned integer type are reachable from each other, and
modular arithmetic is performed on unsigned integer types,
</p></blockquote>
<p>
which makes the last three bullets of the semantic requirements of <tt><i>advanceable</i></tt> 
(<sref ref="[range.iota.view]"/>/5) can't be satisfied, and some (if not all) uses of 
<tt>iota_view</tt>s of unsigned integer types ill-formed, no diagnostic required.
<p/>
Some operations that are likely to expect the semantic requirements of <tt><i>advanceable</i></tt> 
behave incorrectly for unsigned integer types. E.g. according to <sref ref="[range.iota.view]"/>/6 
and <sref ref="[range.iota.view]"/>/16, <tt>std::ranges::iota_view&lt;std::uint8_t, std::uint8_t&gt;(std::uint8_t(1)).size()</tt> 
is well-defined IMO, because
</p>
<blockquote><p>
<tt>Bound()</tt> is <tt>std::uint8_t(0)</tt>, which is reachable from <tt>std::uint8_t(1)</tt>, and
not modeling <tt><i>advanceable</i></tt> shouldn't affect the validity, as both <tt>W</tt> and 
<tt>Bound</tt> are integer types.
</p></blockquote>
<p>
However, it returns <tt>unsigned(-1)</tt> on common implementations (where <tt>sizeof(int) &gt; sizeof(std::uint8_t))</tt>, 
which is wrong.
<p/>
Perhaps the semantic requirements of <tt><i>advanceable</i></tt> should be adjusted, 
and a refined definition of reachability in <sref ref="[range.iota]"/> is needed to avoid reaching 
<tt>a</tt> from <tt>b</tt> when <tt>a &gt; b</tt> (the iterator type is also affected).
</p>

<note>2021-10-14; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
</p>
<note>Tim Song commented:</note>
<p>
The advanceable part of the issue is NAD.
This is no different from NaN and <code>totally_ordered</code>,
see <sref ref="[structure.requirements]"/>/8.
</p>
<p>
The part about <code>iota_view&lt;uint8_t, uint8_t&gt;(1)</code> is simply this:
when we added "When <code>W</code> and <code>Bound</code> model ..." to
<sref ref="[range.iota.view]"/>/8,
we forgot to add its equivalent to the single-argument constructor.
We should do that.
</p>

<note>2022-10-12; Jonathan provides wording</note>

<note>2022-10-19; Reflector poll</note>
<p>
Set status to "Tentatively Ready" after seven votes in favour in reflector poll.
</p>

<note>2022-11-12 Approved at November 2022 meeting in Kona. Status changed: Voting &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4917"/>.
</p>

<ol>
<li>
<p>Modify <sref ref="[range.iota.view]"/> as indicated:</p>
<blockquote>
<pre>constexpr explicit iota_view(W value);</pre>
<blockquote>
<p>-6-
<i>Preconditions</i>: <tt>Bound</tt> denotes <tt>unreachable_sentinel_t</tt>
or <tt>Bound()</tt> is reachable from <tt>value</tt>.
<ins>
When <tt>W</tt> and <tt>Bound</tt> model <tt>totally_ordered_with</tt>,
then <tt>bool(value &lt;= Bound())</tt> is <tt>true</tt>.
</ins>
</p>
<p>-7-
<i>Effects</i>: Initializes <tt><i>value_</i></tt> with <tt>value</tt>.
</p>
</blockquote>

<pre>constexpr iota_view(type_identity_t&lt;W&gt; value, type_identity_t&lt;Bound&gt; bound);</pre>
<blockquote>
<p>-8-
<i>Preconditions</i>: <tt>Bound</tt> denotes <tt>unreachable_sentinel_t</tt>
or <tt>bound</tt> is reachable from <tt>value</tt>.
When <tt>W</tt> and <tt>Bound</tt> model <tt>totally_ordered_with</tt>,
then <tt>bool(value &lt;= bound)</tt> is <tt>true</tt>.
</p>
<p>-9-
<i>Effects</i>: Initializes <tt><i>value_</i></tt> with <tt>value</tt>
and <tt><i>bound_</i></tt> with <tt>bound</tt>.
</p>
</blockquote>

</blockquote>
</li>

</ol>

</resolution>

</issue>
