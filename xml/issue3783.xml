<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3783" status="New">
<title><tt>views::common</tt> may not be a range adaptor object</title>
<section><sref ref="[common.iterator]"/><sref ref="[range.common.view]"/></section>
<submitter>Hewill Kang</submitter>
<date>18 Sep 2022</date>
<priority>99</priority>

<discussion>
<p>
<paper num="P2325R3"/> makes <tt>input_or_output_iterator</tt> no longer require <tt>default_initializable</tt>, 
which means that the template parameter <tt>I</tt> of <tt>common_iterator</tt> no longer requires 
<tt>default_initializable</tt>.
<p/>
In this case, since <tt>common_iterator</tt> itself cannot be default-constructed, it can never be a valid 
sentinel even if it can be compared to itself. Furthermore, this also makes <tt>views::common</tt> return a 
non-<tt>range</tt> even if it is well-formed (<a href="https://godbolt.org/z/dn4c7M57W">online example</a>):
</p>
<blockquote><pre>
#include &lt;ranges&gt;
#include &lt;vector&gt;

int main() {
  std::vector&lt;int&gt; v;
  auto r = std::views::counted(std::back_inserter(v), 3);
  auto cr = r | std::views::common;
  static_assert(std::ranges::range&lt;decltype(cr)&gt;); // <span style="color:red;font-weight:bolder">failed</span>
}
</pre></blockquote>
<p>
which causes <tt>views::common</tt> to be unable to convert a <tt>range</tt> into a <tt>view</tt>, 
making it not a valid range adaptor.
<p/>
I think requiring <tt>common_iterator</tt> to be <tt>default_initializable</tt> should be mandatory, 
which makes it eligible to be a legitimate sentinel.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4910"/>.
</p>

<ol>

<li><p>Modify <sref ref="[iterator.synopsis]"/>, header <tt>&lt;iterator&gt;</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
#include &lt;compare&gt;              // <i>see <sref ref="[compare.syn]"/></i>
#include &lt;concepts&gt;             // <i>see <sref ref="[concepts.syn]"/></i>

namespace std {
  [&hellip;]
  // <i><sref ref="[iterators.common]"/>, common iterators</i>
  template&lt;input_or_output_iterator I, sentinel_for&lt;I&gt; S&gt;
    requires (!same_as&lt;I, S&gt; &amp;&amp; <ins>semiregular</ins><del>copyable</del>&lt;I&gt;)
      class common_iterator;                                                        // <i>freestanding</i>
  [&hellip;]
}
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[common.iterator]"/>, class template <tt>common_iterator</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
namespace std {
  template&lt;input_or_output_iterator I, sentinel_for&lt;I&gt; S&gt;
    requires (!same_as&lt;I, S&gt; &amp;&amp; <ins>semiregular</ins><del>copyable</del>&lt;I&gt;)
  class common_iterator {
  public:
    constexpr common_iterator() <del>requires default_initializable&lt;I&gt;</del> = default;
    [&hellip;]
  };
  [&hellip;]
}
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[ranges.syn]"/>, header <tt>&lt;ranges&gt;</tt> synopsis, as indicated:</p>
<blockquote>
<pre>
#include &lt;compare&gt;              // <i>see <sref ref="[compare.syn]"/></i>
#include &lt;initializer_list&gt;     // <i>see <sref ref="[initializer.list.syn]"/></i>
#include &lt;iterator&gt;             // <i>see <sref ref="[iterator.synopsis]"/></i>

namespace std::ranges {
  [&hellip;]
  // <i><sref ref="[range.common]"/>, common view</i>
  template&lt;view V&gt;
    requires (!common_range&lt;V&gt; &amp;&amp; <ins>semiregular</ins><del>copyable</del>&lt;iterator_t&lt;V&gt;&gt;)
  class common_view;                                                                // <i>freestanding</i>
  [&hellip;]
}
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.common.view]"/>, class template <tt>common_view</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
namespace std::ranges {
  template&lt;view V&gt;
    requires (!common_range&lt;V&gt; &amp;&amp; <ins>semiregular</ins><del>copyable</del>&lt;iterator_t&lt;V&gt;&gt;)
  class common_view : public view_interface&lt;common_view&lt;V&gt;&gt; {
  private:
    V <i>base_</i> = V(); // <i>exposition only</i>
  public:
    common_view() requires default_initializable&lt;V&gt; = default;

    [&hellip;]
  };
  [&hellip;]
}
</pre>
</blockquote>
</li>

</ol>
</resolution>

</issue>
