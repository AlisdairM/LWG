<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3783" status="New">
<title><tt>views::common</tt> may not be a range adaptor object</title>
<section><sref ref="[common.iterator]"/><sref ref="[common.iter.cmp]"/></section>
<submitter>Hewill Kang</submitter>
<date>18 Sep 2022</date>
<priority>3</priority>

<discussion>
<p>
<paper num="P2325R3"/> makes <tt>input_or_output_iterator</tt> no longer require <tt>default_initializable</tt>, 
which means that the template parameter <tt>I</tt> of <tt>common_iterator</tt> no longer requires 
<tt>default_initializable</tt>.
<p/>
In this case, since <tt>common_iterator</tt> itself cannot be default-constructed, it can never be a valid 
sentinel even if it can be compared to itself. Furthermore, this also makes <tt>views::common</tt> return a 
non-<tt>range</tt> even if it is well-formed (<a href="https://godbolt.org/z/dn4c7M57W">online example</a>):
</p>
<blockquote><pre>
#include &lt;ranges&gt;
#include &lt;vector&gt;

int main() {
  std::vector&lt;int&gt; v;
  auto r = std::views::counted(std::back_inserter(v), 3);
  auto cr = r | std::views::common;
  static_assert(std::ranges::range&lt;decltype(cr)&gt;); // <span style="color:red;font-weight:bolder">failed</span>
}
</pre></blockquote>
<p>
which causes <tt>views::common</tt> to be unable to convert a <tt>range</tt> into a <tt>view</tt>, 
making it not a valid range adaptor.
<p/>
I think <tt>common_iterator</tt> should always be <tt>default_initializable</tt>, 
which makes it eligible to be a legitimate sentinel.
<p/>
The proposed resolution provides a default constructor for <tt>common_iterator</tt> when <tt>I</tt> is 
not <tt>default_initializable</tt>, in which case constructs the <tt>variant</tt> with an alternative type 
of <tt>S</tt>.
</p>

<note>2022-09-28; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
</p>
<p>
"The P/R means that sometimes the variant containers an iterator and sometimes
contains a sentinel, depending on whether the iterator is default constructible.
Always constructing a sentinel would be more consistent."
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4917"/>.
</p>

<ol>

<li><p>Modify <sref ref="[common.iterator]"/>, class template <tt>common_iterator</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
namespace std {
  template&lt;input_or_output_iterator I, sentinel_for&lt;I&gt; S&gt;
    requires (!same_as&lt;I, S&gt; &amp;&amp; copyable&lt;I&gt;)
  class common_iterator {
  public:
    constexpr common_iterator() requires default_initializable&lt;I&gt; = default;
    <ins>constexpr common_iterator();</ins>
    [&hellip;]
  };
  [&hellip;]
}
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[common.iter.const]"/> as indicated:</p>

<blockquote>
<pre>
<ins>constexpr common_iterator();</ins>
</pre>
<blockquote>
<p>
<ins>-?- <i>Effects</i>: Initializes <tt>v_</tt> as if by <tt>v_{in_place_type&lt;S&gt;}</tt>.</ins>
</p>
</blockquote>
<pre>
constexpr common_iterator(I i);
</pre>
<blockquote>
<p>
-1- <i>Effects</i>: Initializes <tt>v_</tt> as if by <tt>v_{in_place_type&lt;I&gt;, std::move(i)}</tt>.
</p>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
