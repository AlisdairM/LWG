<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3075" status="New">
<title><tt>basic_string</tt> needs deduction guides from <tt>basic_string_view</tt></title>
<section><sref ref="[basic.string]"/><sref ref="[string.cons]"/></section>
<submitter>Stephan T. Lavavej</submitter>
<date>3 Mar 2018</date>
<priority>99</priority>

<discussion>
<p>
The Proposed Resolution for LWG <iref ref="2946"/> appears to be correct and we've implemented it in MSVC, 
but it worsens a pre-existing problem with basic_string class template argument deduction.
<p/>
The following <tt>s1</tt> and <tt>s2</tt> compiled in C++17 before LWG 2946's PR, fail 
to compile after LWG 2946's PR, and are fixed by my PR:</p>
<blockquote><pre>
basic_string s1("cat"sv);
basic_string s2("cat"sv, alloc);
</pre></blockquote>
<p>
The following s4 failed to compile in C++17, and is fixed by my PR:
</p>
<blockquote><pre>
// basic_string s3("cat"sv, 1, 1);
basic_string s4("cat"sv, 1, 1, alloc);
</pre></blockquote>
<p>
(s3 failed to compile in C++17, and would be fixed by my PR, but it is affected by a pre-existing and 
unrelated ambiguity which I am not attempting to fix here.)
<p/>
As C++17 and LWG 2946's PR introduced templated constructors for <tt>basic_string</tt> from 
<tt>basic_string_view</tt>, we need to add corresponding deduction guides.
<p/>
The constructors take <tt>const T&amp;</tt> that's convertible to <tt>basic_string_view</tt> (the 
additional constraint about not converting to <tt>const charT*</tt> is irrelevant here). However, CTAD 
can't deduce <tt>charT</tt> and <tt>traits</tt> from arbitrary user-defined types, so the deduction guides 
need <tt>T</tt> to be exactly <tt>basic_string_view</tt>.
<p/>
Additionally, we need to handle the <tt>size_type</tt> parameters in the same way that the unordered 
containers do. This PR has been implemented in MSVC.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <a href="http://wg21.link/n4727">N4727</a>.
</p>

<ol>
<li>
<p>Edit <sref ref="[basic.string]"/>, class template <tt>basic_string</tt> synopsis, as indicated:</p>
<blockquote>
<blockquote>
<pre>
[&hellip;]

template&lt;class InputIterator,
         class Allocator = allocator&lt;typename iterator_traits&lt;InputIterator&gt;::value_type&gt;&gt;
  basic_string(InputIterator, InputIterator, Allocator = Allocator())
    -&gt; basic_string&lt;typename iterator_traits&lt;InputIterator&gt;::value_type,
                    char_traits&lt;typename iterator_traits&lt;InputIterator&gt;::value_type&gt;,
                     Allocator&gt;;
<ins>
template&lt;class T,
         class Allocator = allocator&lt;typename T::value_type&gt;&gt;
  explicit basic_string(const T&amp;, const Allocator&amp; = Allocator())
    -&gt; basic_string&lt;typename T::value_type, typename T::traits_type, Allocator&gt;;

template&lt;class T,
         class Allocator = allocator&lt;typename T::value_type&gt;&gt;
  basic_string(const T&amp;, typename <i>see below</i>::size_type, typename <i>see below</i>::size_type, 
               const Allocator&amp; = Allocator())
    -&gt; basic_string&lt;typename T::value_type, typename T::traits_type, Allocator&gt;;
</ins>                     
}                     
</pre></blockquote>
<p>
<ins>-?- A <tt>size_type</tt> parameter type in a <tt>basic_string</tt> deduction guide refers to the 
<tt>size_type</tt> member type of the type deduced by the deduction guide.</ins>
</p>
</blockquote>
</li>

<li>
<p>Edit <sref ref="[string.cons]"/> as indicated:</p>
<blockquote>
<pre>
template&lt;class InputIterator,
         class Allocator = allocator&lt;typename iterator_traits&lt;InputIterator>::value_type&gt;&gt;
  basic_string(InputIterator, InputIterator, Allocator = Allocator())
    -&gt; basic_string&lt;typename iterator_traits&lt;InputIterator&gt;::value_type,
                    char_traits&lt;typename iterator_traits&lt;InputIterator&gt;::value_type&gt;,
                     Allocator&gt;;
</pre>
<blockquote>
<p>
-25- <i>Remarks:</i> Shall not participate in overload resolution if <tt>InputIterator</tt> is a type 
that does not qualify as an input iterator, or if <tt>Allocator</tt> is a type that does not qualify as an allocator (<sref ref="[container.requirements.general]"/>).
</p>
</blockquote>
<pre>
<ins>template&lt;class T,
         class Allocator = allocator&lt;typename T::value_type&gt;&gt;
  explicit basic_string(const T&amp;, const Allocator&amp; = Allocator())
    -&gt; basic_string&lt;typename T::value_type, typename T::traits_type, Allocator&gt;;

template&lt;class T,
         class Allocator = allocator&lt;typename T::value_type&gt;&gt;
  basic_string(const T&amp;, typename <i>see below</i>::size_type, typename <i>see below</i>::size_type, 
               const Allocator&amp; = Allocator())
    -&gt; basic_string&lt;typename T::value_type, typename T::traits_type, Allocator&gt;;</ins>                     
</pre>
<blockquote>
<p>
<ins>-?- <i>Remarks:</i> Shall not participate in overload resolution if <tt>T</tt> is a type that is 
not a specialization of <tt>basic_string_view</tt>, or if <tt>Allocator</tt> is a type that does not 
qualify as an allocator (<sref ref="[container.requirements.general]"/>).</ins>
</p>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
