<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3308" status="New">
<title><tt>vector</tt> and <tt>deque</tt> iterator <tt>erase</tt> invalidates elements even when no change occurs</title>
<section><sref ref="[deque.modifiers]"/><sref ref="[vector.modifiers]"/></section>
<submitter>Billy O'Neal III</submitter>
<date>29 Oct 2019</date>
<priority>3</priority>

<discussion>
<p>
It seems incorrect that a container would invalidate anything as a result of being asked to erase 0 elements. 
This came up in a recent customer bug report against Visual Studio, where given a <tt>vector v</tt>, 
<tt>v.erase(v.begin(), v.begin())</tt> triggered a self-assignment of all the elements in the vector. 
<p/>
<tt>deque</tt> has language enumerating erasures of the first and last element which invalidate fewer 
iterators, and a fallback that says all iterators are invalidated, which seems to intend to be talking about middle-of-container erasures. However, erasing 0 elements isn't really a middle of container erasure.
<p/>
<tt>vector</tt> says that iterators and references are invalidated after the 'point of the erase', but when 0 
elements are erased it's unclear what that even means.
<p/>
We should say that erasures that erase 0 elements are no ops and be clearer about which elements are 
invalidated for <tt>vector</tt>.
</p>

<note>2019-11 Priority to 3 during Monday issue prioritization in Belfast</note>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4835">N4835</a>.</p>

<ol>
<li><p>Modify <sref ref="[deque.modifiers]"/> as indicated:</p>

<blockquote>
<pre>
iterator erase(const_iterator position);
iterator erase(const_iterator first, const_iterator last);
void pop_front();
void pop_back();
</pre>
<blockquote>
<p>
-4- <i>Effects:</i> <ins>Erases elements as indicated in Table 75 [tab:container.seq.req].</ins> 
An erase operation that erases the last element of a deque invalidates only the past-the-end 
iterator and all iterators and references to the erased elements. An erase operation that erases 
the first element of a deque but not the last element invalidates only iterators and references 
to the erased elements. An erase operation that erases <ins>any elements, but</ins> neither the 
first element nor the last element of a deque invalidates the past-the-end iterator and all 
iterators and references to all the elements of the deque. <del>[<i>Note:</i> <tt>pop_front</tt> 
and <tt>pop_back</tt> are erase operations. &mdash; <i>end note</i>]</del>
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[vector.modifiers]"/> as indicated:</p>

<blockquote>
<pre>
constexpr iterator erase(const_iterator position);
constexpr iterator erase(const_iterator first, const_iterator last);
constexpr void pop_back();
</pre>
<blockquote>
<p>
-3- <i>Effects:</i> <ins>Erases elements as indicated in Table 75 [tab:container.seq.req].</ins> 
Invalidates iterators and references at or after the <del>point of the erase.</del><ins>first erased 
element. [<i>Note:</i> For the second overload of <tt>erase</tt>, if <tt>first == last</tt>, no 
elements are erased, and no iterators or references are invalidated. &mdash; <i>end note</i>]</ins>
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>
</ol>

</resolution>
</issue>
