<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3170" status="New">
<title><tt>is_always_equal</tt> added to <tt>std::allocator</tt> makes the standard library treat 
derived types as always equal</title>
<section><sref ref="[default.allocator]"/></section>
<submitter>Billy O'Neal III</submitter>
<date>29 Nov 2018</date>
<priority>2</priority>

<discussion>
<p>
I (Billy O'Neal) attempted to change MSVC++'s standard library to avoid instantiating allocators' <tt>operator==</tt> 
for allocators that are declared <tt>is_always_equal</tt> to reduce the number of template instantiations emitted into .objs.
<p/>
In so doing I introduced an unrelated bug related to POCMA handling, but it brought my attention to 
<a href="https://github.com/boostorg/poly_collection/blob/5ed5d5e99336130783bdb33126d8629890235aed/test/test_utilities.hpp#L324">this 
allocator</a>. This allocator doesn't meet the allocator requirements because it is getting <tt>std::allocator</tt>'s 
<tt>operator==</tt> and <tt>operator!=</tt> which don't compare the root member. However, if this had been a conforming C++14 
allocator with its own <tt>==</tt> and <tt>!=</tt> we would still be treating it as <tt>is_always_equal</tt>, as it picks that 
up by deriving from <tt>std::allocator</tt>.
<p/>
<tt>std::allocator</tt> doesn't actually need <tt>is_always_equal</tt> because the defaults provided by <tt>allocator_traits</tt> 
will say <tt>true_type</tt> for it, since implementers don't make <tt>std::allocator</tt> stateful.
<p/>
Billy O'Neal thinks this is NAD on the grounds that we need to be able to add things or change the behavior of standard library types.
<p/>
Stephan T Lavavej thinks we should resolve this anyway because we don't know of an implementation for which this would change 
the default answer provided by <tt>allocator_traits</tt>.
</p>

<note>2019-02 Priority set to 2 after reflector discussion</note>

<strong>Previous resolution [SUPERSEDED]:</strong>
<blockquote class="note">
<p>This wording is relative to <a href="https://wg21.link/n4778">N4778</a>.</p>

<ol>
<li><p>Modify <sref ref="[default.allocator]"/> as follows:</p>

<blockquote>
<p>
-1- All specializations of the default allocator satisfy the allocator completeness requirements (<sref ref="[allocator.requirements.completeness]"/>).
</p>
<pre>
namespace std {
  template&lt;class T&gt; class allocator {
  public:
    using value_type = T;
    using size_type = size_t;
    using difference_type = ptrdiff_t;
    using propagate_on_container_move_assignment = true_type;
    <del>using is_always_equal = true_type;</del>
    constexpr allocator() noexcept;
    constexpr allocator(const allocator&amp;) noexcept;
    template&lt;class U&gt; constexpr allocator(const allocator&lt;U&gt;&amp;) noexcept;
    ~allocator();
    allocator&amp; operator=(const allocator&amp;) = default;
    [[nodiscard]] T* allocate(size_t n);
    void deallocate(T* p, size_t n);
  };
}
</pre>
<p>
<ins>-?- <tt>allocator_traits&lt;allocator&lt;T&gt;&gt;::is_always_equal::value</tt> is <tt>true</tt> for any <tt>T</tt>.</ins>
</p>
</blockquote>
</li>
</ol>
</blockquote>

<note>2019-07 Cologne</note>
<p>
Jonathan provides updated wording.
</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4820">N4820</a>.</p>

<ol>
<li><p>Modify <sref ref="[default.allocator]"/> as follows:</p>

<blockquote>
<p>
-1- All specializations of the default allocator satisfy the allocator completeness requirements (<sref ref="[allocator.requirements.completeness]"/>).
</p>
<pre>
namespace std {
  template&lt;class T&gt; class allocator {
  public:
    using value_type = T;
    using size_type = size_t;
    using difference_type = ptrdiff_t;
    using propagate_on_container_move_assignment = true_type;
    <del>using is_always_equal = true_type;</del>
    constexpr allocator() noexcept;
    constexpr allocator(const allocator&amp;) noexcept;
    template&lt;class U&gt; constexpr allocator(const allocator&lt;U&gt;&amp;) noexcept;
    ~allocator();
    allocator&amp; operator=(const allocator&amp;) = default;
    [[nodiscard]] T* allocate(size_t n);
    void deallocate(T* p, size_t n);
  };
}
</pre>
<p>
<ins>-?- <tt>allocator_traits&lt;allocator&lt;T&gt;&gt;::is_always_equal::value</tt> is <tt>true</tt> for any <tt>T</tt>.</ins>
</p>
</blockquote>
</li>

<li><p>Add a new subclause in Annex D after <sref ref="[depr.str.strstreams]"/>:</p>

<blockquote>
<p>
<b><ins>D.? The default allocator  [depr.default.allocator]</ins></b>
<p/>
<ins>-?- The following member is defined in addition to those specified in <sref ref="[default.allocator]"/>:</ins>
</p>
<pre>
<ins>namespace std {
  template &lt;class T&gt; class allocator {
  public:
    using is_always_equal = true_type;
  };
}</ins>
</pre>
</blockquote>
</li>
</ol>
</resolution>

</issue>
