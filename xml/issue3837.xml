<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3837" status="New">
<title><tt>operator==</tt> should accept <tt>generator&lt;R, V, A&gt;::<i>iterator</i></tt> by const reference</title>
<section><sref ref="[coro.generator.iterator]"/></section>
<submitter>Tomasz Kami&nacute;ski</submitter>
<date>05 Dec 2022</date>
<priority>99</priority>

<discussion>
<p>
Currently the <tt>opeator==</tt> for <tt>generator&lt;R, V, A&gt;::<i>iterator</i></tt> is
specified to accept the move-only <tt><i>iterator</i></tt> by value.
This make it impossible to use it without consuming the iterator, and makes the iterator
unusable in most of the cases (it could be used when number of elements it know externally).
We should change the signature to accept <tt>const <i>iterator</i>&amp;</tt> instead.
</p>
</discussion>

<resolution>
<p>This wording is relative to <paper num="N4917"/>.</p>

<ol>
<li><p>Modify <sref="[coro.generator.iterator]"/> as indicated:</p>
<blockquote>
<pre>
template&lt;class Ref, class V, class Allocator&gt;
class generator&lt;Ref, V, Allocator&g7;::<i>iterator</i> {
  [&hellip;]
  friend bool operator==(<ins>const </ins><i>iterator</i><ins>&amp;</ins> i, default_sentinel_t);	
  [&hellip;]
};
</pre>
</blockquote>

<blockquote>
<p>
[&hellip;]
</p>
<pre>
friend bool operator==(<ins>const </ins><i>iterator</i><ins>&amp;</ins> i, default_sentinel_t);	
</pre>
<p>
-10- <i>Effects</i>: Equivalent to: <tt>return i.<i>coroutine_</i>.done();</tt>
</p>
</blockquote>

</li>
</ol>

</resolution>
</issue>
