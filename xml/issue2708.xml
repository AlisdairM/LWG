<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2708" status="New">
<title><tt>recursive_directory_iterator::recursion_pending()</tt> is incorrectly specified</title>
<section><sref ref="[rec.dir.itr.members]"/></section>
<submitter>Eric Fiselier</submitter>
<date>9 May 2016</date>
<priority>2</priority>

<discussion>
<p>
The current specification of <tt>recursion_pending()</tt> says (<sref ref="[rec.dir.itr.members]"/>/24):
</p>
<blockquote><p>
<i>Returns</i>: <tt>true</tt> if <tt>disable_recursion_pending()</tt> has not been called subsequent to the prior construction 
or increment operation, otherwise <tt>false</tt>.
</p></blockquote>
<p>
This language does not take into account cases where the prior construction was a copy construction from a iterator, 
<tt>it</tt>, where <tt>it.recursion_pending() == false</tt>. 
</p>
</discussion>

<resolution>
<p>
This wording is relative to N4582.
</p>

<ol>
<li><p>Change <sref ref="[rec.dir.itr.members]"/> as indicated:</p>

<blockquote>
<pre>
explicit recursive_directory_iterator(const path&amp; p);
recursive_directory_iterator(const path&amp; p, directory_options options);
recursive_directory_iterator(const path&amp; p, directory_options options, error_code&amp; ec) noexcept;
recursive_directory_iterator(const path&amp; p, error_code&amp; ec) noexcept;
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-3- <i>Postcondition</i>: <del><tt>options() == options</tt> for the signatures with a <tt>directory_options</tt> argument, 
otherwise <tt>options() == directory_options::none</tt>.</del>
</p>
<ul>
<li><p><ins><tt>options() == options</tt> for the signatures with a <tt>directory_options</tt> argument, otherwise 
<tt>options() == directory_options::none</tt>.</ins></p></li>
<li><p><ins><tt>recursion_pending() == true</tt>.</ins></p></li>
</ul>
<p>
[&hellip;]
</p>
</blockquote>
<blockquote class="note">
<p>
[<i>Drafting note</i>: The following changes the specification of <tt>recursion_pending()</tt> seemingly recursive. 
Perhaps it would be easier to specify <tt>recursion_pending()</tt> in terms of a exposition only member in 
<tt>recursive_directory_iterator</tt>.]
</p>
</blockquote>
<pre>
bool recursion_pending() const;
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-24- <i>Returns</i>: <del><tt>true</tt> if <tt>disable_recursion_pending()</tt> has not been called subsequent to the 
prior construction or increment operation, otherwise <tt>false</tt></del><ins><tt>false</tt> if 
<tt>disable_recursion_pending()</tt> has been called subsequent to the prior construction or increment operation, 
otherwise the value of <tt>recursion_pending()</tt> set by that operation</ins>.
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
recursive_directory_iterator&amp; operator++();
recursive_directory_iterator&amp; increment(error_code&amp; ec) noexcept;
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-27- <i>Effects</i>: As specified by Input iterators (24.2.3), except that: [&hellip;]
<p/>
<ins>-?- <i>Postcondition</i>: <tt>recursion_pending() == true</tt>.</ins>
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
