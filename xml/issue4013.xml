<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4013" status="Tentatively Ready">
<title><tt>lazy_split_view::<i>outer-iterator</i>::value_type</tt> should not provide default constructor</title>
<section><sref ref="[range.lazy.split.outer.value]"/></section>
<submitter>Hewill Kang</submitter>
<date>11 Nov 2023</date>
<priority>99</priority>

<discussion>
<p>
After <paper num="P2325"/>, there is no reason for <tt>lazy_split_view::<i>outer-iterator</i>::value_type</tt> 
to provide a default constructor, which only leads to <a href="https://godbolt.org/z/rM4WdMz79">unexpected behavior</a>:
</p>
<blockquote><pre>
#include &lt;ranges&gt;

constexpr int arr[] = {42};
constexpr auto split = arr | std::views::lazy_split(0);
static_assert(!std::ranges::range_value_t&lt;decltype(split)&gt;{});  // <span style="color:red;font-weight:bolder">UB, dereferencing a null pointer</span>
</pre></blockquote>
<p>
Also, the other constructor should be private because it makes no sense for the user to construct it arbitrarily, 
which is not the intention.
</p>

<note>2024-03-11; Reflector poll</note>
<p>
Set status to Tentatively Ready after five votes in favour during reflector poll.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4964"/>.
</p>

<ol>

<li><p>Modify <sref ref="[range.lazy.split.outer.value]"/>, class <tt>split_view::<i>outer-iterator</i>::value_type</tt> synopsis, 
as indicated:</p>

<blockquote><pre>
namespace std::ranges {
  template&lt;input_range V, forward_range Pattern&gt;
    requires view&lt;V&gt; &amp;&amp; view&lt;Pattern&gt; &amp;&amp;
             indirectly_comparable&lt;iterator_t&lt;V&gt;, iterator_t&lt;Pattern&gt;, ranges::equal_to&gt; &amp;&amp;
             (forward_range&lt;V&gt; || <i>tiny-range</i>&lt;Pattern&gt;)
  template&lt;bool Const&gt;
  struct lazy_split_view&lt;V, Pattern&gt;::<i>outer-iterator</i>&lt;Const&gt;::value_type
    : view_interface&lt;value_type&gt; {
  private:
    <i>outer-iterator i_</i> = <i>outer-iterator</i>();               <i>// exposition only</i>
  
    <ins>constexpr explicit value_type(<i>outer-iterator</i> i);    <i>// exposition only</i></ins>

  public:
    <del>value_type() = default;</del>
    <del>constexpr explicit value_type(<i>outer-iterator</i> i);</del>

    constexpr <i>inner-iterator</i>&lt;Const&gt; begin() const;
    constexpr default_sentinel_t end() const noexcept;
  };
}
</pre></blockquote>

</li>

</ol>
</resolution>

</issue>
