<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2532" status="New">
<title>Satisfying a <tt>promise</tt> at thread exit</title>
<section><sref ref="[futures.promise]"/></section>
<submitter>Agust&iacute;n K-ballo Berg&eacute;</submitter>
<date>3 Sep 2015</date>
<priority>99</priority>

<discussion>
<p>
<tt>promise::set_value_at_thread_exit</tt> and <tt>promise::set_exception_at_thread_exit</tt> operate on a shared state 
at thread exit, without making the thread participate in the ownership of such shared state.
<p/>
Consider the following snippet:
</p>
<blockquote><pre>
std::promise&lt;int&gt;{}.set_value_at_thread_exit(42);
</pre></blockquote>
<p>
Arguably, since the <tt>promise</tt> abandons its shared state without actually making it ready, a <tt>broken_promise</tt> 
error condition should be stored in the shared state. Implementations diverge, they either crash at thread exit by 
dereferencing an invalid pointer, or keep the shared state around until thread exit.
</p>
</discussion>

<resolution>
</resolution>

</issue>
