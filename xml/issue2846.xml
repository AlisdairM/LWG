<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2846" status="New">
<title>Undefined phrase "effectively cast"</title>
<section><sref ref="[cmplx.over]"/><sref ref="[cmath.syn]"/></section>
<submitter>Jens Maurer</submitter>
<date>15 Dec 2016</date>
<priority>3</priority>

<discussion>
<p>
In [cmplx.over] and [cmath.syn], when talking about "sufficient additional overloads", we use the phrase
"effectively cast", but that is not a defined term.
<p/>
A hostile interpretation could read "<tt>reinterpret_cast</tt>" here.
<p/>
Likely we mean "apply floating-point promotions, floating-integral
conversions, and floating-point conversions", but that should be
spelled out somewhere, e.g. in the library definitions section.
<p/>
(Source: <a href="https://github.com/cplusplus/draft/issues/1248">Editorial issue #1248</a>)
</p>

<note>2017-01-27 Telecon</note>
<p>Priority 3</p>

<note>2019-03-16; Daniel comments and provides wording</note>
<p>
I decided to use the form "implicitly converted" and to refer to <sref ref="[conv]"/> for <sref ref="[cmath.syn]"/> and
<sref ref="[cmplx.over]"/>, because those conversions can all be done implicitly. This also holds for the 
<tt>pow</tt> specification <sref ref="[cmplx.over]"/> p3, because the described conversions of
<tt>complex&lt;T&gt;</tt> to <tt>complex&lt;U&gt;</tt> involve only the need of non-explicit constructors.
</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4810">N4810</a>.</p>

<ol>
<li><p>Change <sref ref="[cmplx.over]"/>, as indicated:</p>

<blockquote>
<p>
-2- The additional overloads shall be sufficient to ensure:
<blockquote>
<ol style="list-style-type: none">
<li><p>(2.1) &mdash; If the argument has type <tt>long double</tt>, then it is 
<del>effectively cast</del><ins>implicitly converted (<sref ref="[conv]"/>)</ins> to <tt>complex&lt;long double&gt;</tt>.</p></li>
<li><p>(2.2) &mdash; Otherwise, if the argument has type <tt>double</tt> or an integer type, then it is 
<del>effectively cast</del><ins>implicitly converted</ins> to <tt>complex&lt;double&gt;</tt>.</p></li>
<li><p>(2.3) &mdash; Otherwise, if the argument has type <tt>float</tt>, then it is 
<del>effectively cast</del><ins>implicitly converted</ins> to <tt>complex&lt;float&gt;</tt>.</p></li>
</ol>
</blockquote>
<p/>
-3 Function template <tt>pow</tt> shall have additional overloads sufficient to ensure, for a call with at least one argument
of type <tt>complex&lt;T&gt;</tt>:
<blockquote>
<ol style="list-style-type: none">
<li><p>(3.1) &mdash; If either argument has type <tt>complex&lt;long double&gt;</tt> or type <tt>long double</tt>, 
then both arguments are <del>effectively cast</del><ins>implicitly converted (<sref ref="[conv]"/>)</ins> to 
<tt>complex&lt;long double&gt;</tt>.</p></li>
<li><p>(3.2) &mdash; Otherwise, if either argument has type <tt>complex&lt;double&gt;</tt>, <tt>double</tt>, 
or an integer type, then both arguments are <del>effectively cast</del><ins>implicitly converted</ins> 
to <tt>complex&lt;double&gt;</tt>.</p></li>
<li><p>(3.3) &mdash; Otherwise, if either argument has type <tt>complex&lt;float&gt;</tt> or <tt>float</tt>, 
then both arguments are <del>effectively cast</del><ins>implicitly converted</ins> to 
<tt>complex&lt;float&gt;</tt>.</p></li>
</ol>
</blockquote>
</p>
</blockquote>

</li>

<li><p>Change <sref ref="[cmath.syn]"/>, as indicated:</p>

<blockquote>
<p>
-2- For each set of overloaded functions within <tt>&lt;cmath&gt;</tt>, with the exception of <tt>abs</tt>, there 
shall be additional overloads sufficient to ensure:
<blockquote>
<ol>
<li><p>If any argument of arithmetic type corresponding to a <tt>double</tt> parameter has type <tt>long double</tt>, then
all arguments of arithmetic type (<sref ref="[basic.fundamental]"/>) corresponding to <tt>double</tt> parameters are 
<del>effectively cast</del><ins>implicitly converted (<sref ref="[conv]"/>)</ins> to <tt>long double</tt>.</p></li>
<li><p>Otherwise, if any argument of arithmetic type corresponding to a <tt>double</tt> parameter has type <tt>double</tt>
or an integer type, then all arguments of arithmetic type corresponding to <tt>double</tt> parameters are
<del>effectively cast</del><ins>implicitly converted</ins> to <tt>double</tt>.</p></li>
<li><p>Otherwise, all arguments of arithmetic type corresponding to <tt>double</tt> parameters have type <tt>float</tt>.</p></li>
</ol>
</blockquote>
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
