<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3084" status="New">
<title>Termination in C++ is unclear</title>
<section><sref ref="[support.start.term]"/><sref ref="[exception.terminate]"/></section>
<submitter>JF Bastien </submitter>
<date>15 Mar 2018</date>
<priority>3</priority>

<discussion>
<p>
It's unclear how different termination facilities in C++ interact (and how they interact with the C 
termination facilities). Individually some of these functions try to handle corner cases, but hilarity 
ensues when combined with each other. As a simple example, can an <tt>atexit</tt> handler call <tt>exit</tt>? 
If not, can it call <tt>quick_exit</tt>, and can then <tt>at_quick_exit</tt> handler call <tt>exit</tt>? 
Is it possible to install an <tt>atexit</tt> handler from an <tt>at_quick_exit</tt>, without strongly 
happens before, while handling a separate <tt>atexit</tt> handler (and what happens then)?
<p/>
The termination handlers and termination conditions I collected:
</p>
<ul>
<li><p>returning from <tt>main</tt> calls <tt>atexit</tt> handlers.</p></li>
<li><p><tt>atexit</tt> / <tt>exit</tt></p></li>
<li><p><tt>at_quick_exit</tt> / <tt>quick_exit</tt></p></li>
<li><p><tt>set_terminate</tt></p></li>
<li><p>violating <tt>noexcept</tt> and other things that call <tt>std::terminate</tt> (see 
<tt>[except.terminate]</tt>)</p></li>
<li><p>violating exception specification</p></li>
<li><p>parallel algorithms leaving with uncaught exception</p></li>
<li><p>some <tt>std::signal</tt> such as <tt>SIGTERM</tt>, <tt>SIGSEGV</tt>, <tt>SIGINT</tt>, 
<tt>SIGILL</tt>, <tt>SIGABRT</tt>, and (maybe?) <tt>SIGFPE</tt>.</p></li>
<li><p><tt>set_unexpected</tt> (now a zombie)</p></li>
<li><p><tt>unexpected_handler</tt> (now a zombie)</p></li>
</ul>
<p>
What's unclear is:
</p>
<ul>
<li><p>Is termination handling a DAG?</p></li>
<li><p>Which thread(s) are termination handlers called on?</p></li>
<li><p>Is program termination Turing complete?</p></li>
</ul>
<p>
I've written a sample program which exercises some of this, see 
<a href="https://github.com/jfbastien/terminator/blob/master/terminator.cc">here</a>.
</p>

<note>2018-04-02, Jens comments</note>
<p>
Any potential wording should carefully take [basic.start] into account, and maybe should actually be integrated 
into the core wording, not the library wording.
</p>

<note>2018-04-02 Priority set to 3 after discussion on the reflector.</note>

<note>2024-07-26; Jonathan comments</note>
<p>
In C89 and C99 the spec for `exit` in C said
"If more than one call to the exit function is executed by a program,
the behavior is undefined."
Since C11 that was updated to also talk about `at_quick_exit`, saying
"If a program calls the `exit` function more than once,
or calls the `quick_exit` function in addition to the `exit` function,
the behavior is undefined." The spec for `quick_exit` is similar.
</p>
<p>
That answers most of the questions here. An `atexit` or `at_quick_exit`
handler cannot call `exit` or `quick_exit`, because if a handler is running
then it means that `exit` or `quick_exit` has already been called,
and calling either of them again would be undefined.
It doesn't matter whether an `atexit` handler installs an `at_quick_exit`
handler, because once `exit` handlers start running
it would be undefined to call `quick_exit`, and vice versa. So you should never
have a situation where both sets of handlers are running.
</p>
<p>
There is a <a href="https://austingroupbugs.net/view.php?id=1845">suggestion</a>
to relax this in POSIX so that calling `exit` or `quick_exit` again from other
threads would not be UB but would just block until the process exits,
which should happen eventually assuming exit handlers make forward progress
(calling `exit` or `quick_exit` from a handler would still be UB).
</p>
<p>
Why does C++ not make it undefined to call `exit` twice? Can we change that?
</p>
</discussion>

<resolution>
</resolution>

</issue>
