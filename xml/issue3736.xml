<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3736" status="New">
<title><tt>move_iterator</tt> missing <tt>disable_sized_sentinel_for</tt> specialization</title>
<section><sref ref="[iterator.synopsis]"/></section>
<submitter>Hewill Kang</submitter>
<date>14 Jul 2022</date>
<priority>99</priority>

<discussion>
<p>
Since <tt>reverse_iterator::operator-</tt> is not constrained, the standard adds a 
<tt>disable_sized_sentinel_for</tt> specialization for it to avoid situations where the 
underlying iterator can be subtracted making <tt>reverse_iterator</tt> accidentally model 
<tt>sized_sentinel_for</tt>.
<p/>
However, given that <tt>move_iterator::operator-</tt> is also unconstrained and the standard 
does not have the <tt>disable_sized_sentinel_for</tt> specialization for it, this makes 
<tt>subrange&lt;move_iterator&lt;I&gt;, move_iterator&lt;I&gt;&gt;</tt> unexpectedly satisfy 
<tt>sized_range</tt> and incorrectly use <tt>I::operator-</tt> to get size when <tt>I</tt> 
can be subtracted but not modeled <tt>sized_sentinel_for&lt;I&gt;</tt>.
<p/>
In addition, since <paper num="P2520"/> makes <tt>move_iterator</tt> no longer just <tt>input_iterator</tt>, 
<tt>ranges::size</tt> can get the size of the range by subtracting two <tt>move_iterator</tt> pairs,
this also makes <tt>r | views::as_rvalue</tt> may satisfy <tt>sized_range</tt> when neither <tt>r</tt> nor 
<tt>r | views::reverse</tt> is <tt>sized_range</tt>.
<p/>
We should add a <tt>move_iterator</tt> version of the <tt>disable_sized_sentinel_for</tt> 
specialization to the standard to avoid the above situation.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4910"/>.
</p>

<ol>

<li><p>Modify <sref ref="[iterator.synopsis]"/>, header <tt>&lt;iterator&gt;</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
namespace std::ranges {
  [&hellip;]
  template&lt;class Iterator&gt;
    constexpr move_iterator&lt;Iterator&gt; make_move_iterator(Iterator i);

  <ins>template&lt;class Iterator1, class Iterator2&gt;
      requires (!sized_sentinel_for&lt;Iterator1, Iterator2&gt;)
    inline constexpr bool disable_sized_sentinel_for&lt;move_iterator&lt;Iterator1&gt;,
                                                     move_iterator&lt;Iterator2&gt;&gt; = true;</ins>

  [&hellip;]
}
</pre>
</blockquote>
</li>
</ol>
</resolution>

</issue>
