<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3728" status="New">
<title>Can't make neither head nor tail of the description of <tt>operator&lt;=&gt;(tuple, tuple)</tt></title>
<section><sref ref="[tuple.rel]"/></section>
<submitter>Corentin Jabot</submitter>
<date>28 Jun 2022</date>
<priority>99</priority>

<discussion>
<p>
The specification of <tt>operator&lt;=&gt;(tuple, tuple)</tt> (<sref ref="[tuple.rel]"/>) is described in 
terms of imaginary tuples (<tt>t<sub>tail</sub></tt>, <tt>u<sub>tail</sub></tt>, <tt>r<sub>tail</sub></tt>) 
which is a bit confusing. Indeed, It is not clear that these imaginary tuples need to respect the order of 
elements of <tt>u</tt> and <tt>t</tt>, nor whether the value category of the elements in these imaginary 
tuples can or should be conserved. It is possible to reformulate and simplify that description so that  
no imaginary tuple is involved.
<p/>
The remark is copied from the similar wording of operator==
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4910"/>.
</p>

<ol>
<li><p>Modify <sref ref="[reverse.iter.elem]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class... TTypes, class... UTypes&gt;
  constexpr common_comparison_category_t&lt;<i>synth-three-way-result</i>&lt;TTypes, UTypes&gt;...&gt;
    operator&lt;=&gt;(const tuple&lt;TTypes...&gt;&amp; t, const tuple&lt;UTypes...&gt;&amp; u);
</pre>
<blockquote>
<p>
-4- <i><del>Effects</del><ins>Returns</ins></i>: <ins><tt><i>synth-three-way</i>(get&lt;i&gt;(t), get&lt;i&gt;(u))</tt> 
for the first <tt>i</tt> for which the result of expression is not equal to <tt>0</tt>. If no such <tt>i</tt> 
exists, <tt>strong_ordering::equal</tt>.</ins><del>Performs a lexicographical comparison between <tt>t</tt> and <tt>u</tt>. 
For any two zero-length tuples <tt>t</tt> and <tt>u</tt>, <tt>t &lt;=&gt; u</tt> returns 
<tt>strong_ordering::equal</tt>. Otherwise, equivalent to:</del>
</p>
<blockquote><pre>
<del>if (auto c = <i>synth-three-way</i>(get&lt;0&gt;(t), get&lt;0&gt;(u)); c != 0) return c;
return t<sub>tail</sub> &lt;=&gt; u<sub>tail</sub>;</del>
</pre></blockquote>
<p>
<del>where <tt>r<sub>tail</sub></tt> for some tuple <tt>r</tt> is a tuple containing all but the first 
element of <tt>r</tt>.</del>
<p/>
<ins>-?- <i>Remarks</i>: The elementary comparisons are performed in order from the zeroth index upwards. 
No comparisons or element accesses are performed after the first comparison that evaluates to <tt>0</tt>.</ins>
<p/>
<del>-5- [<i>Note 1</i>: The above definition does not require <tt>t<sub>tail</sub></tt> (or <tt>u<sub>tail</sub></tt>) 
to be constructed. It might not even be possible, as <tt>t</tt> and <tt>u</tt> are not required to be copy 
constructible. Also, all comparison operator functions are short circuited; they do not perform element 
accesses beyond what is required to determine the result of the comparison. &mdash; <i>end note</i>]</del>
</p>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
