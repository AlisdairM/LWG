<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3579" status="NAD">
<title>Complexity guarantees for <tt>resize()</tt> and <tt>append()</tt> functions across the library</title>
<section><sref ref="[string.capacity]"/><sref ref="[deque.capacity]"/><sref ref="[list.capacity]"/>
<sref ref="[vector.capacity]"/><sref ref="[forward.list.modifiers]"/><sref ref="[valarray.members]"/>
<sref ref="[string.append]"/><sref ref="[fs.path.append]"/></section>
<submitter>Louis Dionne</submitter>
<date>11 Aug 2021</date>
<priority>3</priority>

<discussion>
<p>
This issue requests to clarify the complexity requirements for <tt>resize</tt> and <tt>append</tt> 
member functions across the library. Currently, none of them have complexity requirements associated to them, 
which means that implementations are free to use a geometric growth approach or not. A geometric growth 
approach (like what's required by <tt>push_back</tt>) implies that calling <tt>resize/append</tt> with 
successively larger sizes will have amortized <tt>&#x1d4aa;(<i>N</i>)</tt> complexity, whereas using a 
<tt>resize</tt>-exactly approach makes that pattern <tt>&#x1d4aa;(<i>N</i><sup>2</sup>)</tt>.
<p/>
I believe the Standard should either specify that those member functions are required to have behavior that 
is consistent with <tt>push_back</tt>, or explicitly mention that implementations are allowed to use whatever 
growth strategy they want. If we do the former, users could start relying on this guarantee in a portable manner. 
If we do the latter, it would make it clear to users that they should not rely on the amortized 
<tt>&#x1d4aa;(<i>N</i>)</tt> guarantee if they want their code to be portable.
<p/>
The following classes have a <tt>resize()</tt> member function and also a <tt>push_back()</tt> member function:
</p>
<ul>
<li><p><sref ref="[string.capacity]"/></p></li>
<li><p><sref ref="[deque.capacity]"/></p></li>
<li><p><sref ref="[list.capacity]"/></p></li>
<li><p><sref ref="[vector.capacity]"/></p></li>
</ul>
<p>
The following classes have a <tt>resize()</tt> member function but do not support <tt>push_back()</tt>:
</p>
<ul>
<li><p><sref ref="[forward.list.modifiers]"/></p></li>
<li><p><sref ref="[valarray.members]"/></p></li>
</ul>
<p>
The following classes have an <tt>append()</tt> member function:
</p>
<ul>
<li><p><sref ref="[string.append]"/></p></li>
<li><p><sref ref="[fs.path.append]"/></p></li>
</ul>
<p>
None of them specify a complexity requirement. I think we should update all of them to describe 
what is expected or permitted in an implementation.
</p>

<note>2021-08-20; Reflector poll</note>
<p>
Set priority to 3 and status to "LEWG" after reflector poll.
</p>

<note>2022-02-22 LEWG telecon;  Status changed: LEWG &rarr; Tentatively NAD.</note>
<p>
A paper would be needed.
Such a paper would need to include discussion on whether
<code>allocate_at_least</code> (new for C++23) has an impact.
</p>

<note>2022-08-23 Status changed: Tentatively NAD &rarr; NAD.</note>
</discussion>

<resolution>
</resolution>

</issue>
