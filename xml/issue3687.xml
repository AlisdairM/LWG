<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3687" status="WP">
<title><tt>expected&lt;<i>cv</i> void, E&gt;</tt> move constructor should move</title>
<section><sref ref="[expected.void.assign]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>23 Mar 2022</date>
<priority>99</priority>

<discussion>
<p>
For <tt>expected&lt;<i>cv</i> void&gt;::operator=(expected&amp;&amp;)</tt> we have this 
in the last bullet of the <i>Effects</i> element:
</p>
<blockquote><p>
Otherwise, equivalent to <tt><i>unex</i> = rhs.error()</tt>.
</p></blockquote>
<p>
That should be a move assignment, not a copy assignment.
</p>

<note>2022-05-17; Reflector poll</note>
<p>
Set status to Tentatively Ready after eight votes in favour during reflector poll.
</p>

<note>2022-07-15; LWG telecon: move to Ready</note>

<note>2022-07-25 Approved at July 2022 virtual plenary. Status changed: Ready &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4910"/>.
</p>

<ol>
<li><p>Modify <sref ref="[expected.void.assign]"/> as indicated:</p>

<blockquote>
<pre>
constexpr expected&amp; operator=(expected&amp;&amp; rhs) noexcept(<i>see below</i>);
</pre>
<blockquote>
<p>
-4- <i>Effects:</i>
</p>
<ol style="list-style-type:none">
<li><p>(4.1) &mdash; If <tt>this-&gt;has_value() &amp;&amp; rhs.has_value()</tt> is <tt>true</tt>, no effects.</p></li>
<li><p>(4.2) &mdash; Otherwise, if <tt>this-&gt;has_value()</tt> is <tt>true</tt>, equivalent to:</p>
<blockquote><pre>
construct_at(addressof(<i>unex</i>), std::move(rhs.<i>unex</i>));
<i>has_val</i> = false;
</pre></blockquote>
</li>
<li><p>(4.3) &mdash; Otherwise, if <tt>rhs.has_value()</tt> is <tt>true</tt>, destroys <tt><i>unex</i></tt> 
and sets <tt><i>has_val</i></tt> to <tt>true</tt>.</p></li>
<li><p>(4.4) &mdash; Otherwise, equivalent to <tt><i>unex</i> = <ins>std::move(</ins>rhs.error()<ins>)</ins></tt>.</p></li>
</ol>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
