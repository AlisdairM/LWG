<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3460" status="New">
<title>Unimplementable <tt>noop_coroutine_handle</tt> guarantees</title>
<section><sref ref="[coroutine.handle.noop.resumption]"/></section>
<submitter>Casey Carter</submitter>
<date>1 Jul 2020</date>
<priority>99</priority>

<discussion>
<p>
<sref ref="[coroutine.handle.noop.resumption]"/>/2 states "<i>Remarks:</i> If <tt>noop_coroutine_handle</tt> 
is converted to <tt>coroutine_handle&lt;&gt;</tt>, calls to <tt>operator()</tt>, <tt>resume</tt> and 
<tt>destroy</tt> on that handle will also have no observable effects." This suggests that e.g. in this function:
</p>
<blockquote><pre>
void f(coroutine_handle&lt;&gt; meow) 
{
  auto woof = noop_coroutine();
  static_cast&lt;coroutine_handle&lt;&gt;&amp;&gt;(woof) = meow;
  static_cast&lt;coroutine_handle&lt;&gt;&amp;&gt;(woof).resume();
}
</pre></blockquote>
<p>
the final call to <tt>coroutine_handle&lt;&gt;::resume</tt> must have no effect regardless of what 
coroutine (if any) <tt>meow</tt> refers to, contradicting the specification of 
<tt>coroutine_handle&lt;&gt;::resume</tt>. Even absent this contradiction, implementing the specification 
requires <tt>coroutine_handle&lt;&gt;::resume</tt> to determine if <tt>*this</tt> is a base subobject of a 
<tt>noop_coroutine_handle</tt>, which seems pointlessly expensive to implement.
<p/>
<sref ref="[coroutine.handle.noop.address]"/>/2 states "<i>Remarks:</i> A <tt>noop_coroutine_handle</tt>'s 
<tt>ptr</tt> is always a non-null pointer value." Similar to the above case, a slicing assignment of a 
default-initialized <tt>coroutine_handle&lt;&gt;</tt> to a <tt>noop_coroutine_handle</tt> must result in 
<tt>ptr</tt> having a null pointer value &mdash; another contradiction between the requirements of 
<tt>noop_coroutine_handle</tt> and <tt>coroutine_handle&lt;&gt;</tt>.
</p>
</discussion>

<resolution>
</resolution>

</issue>
