<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2958" status="New">
<title>Moves improperly defined as deleted</title>
<section><sref ref="[pairs.pair]"/><sref ref="[tuple.assign]"/></section>
<submitter>Casey Carter</submitter>
<date>5 May 2017</date>
<priority>2</priority>

<discussion>
<p>
LWG <iref ref="2729"/> constrained many <tt>pair</tt> &amp; <tt>tuple</tt> assignment operators to "not participate in overload resolution" and "be defined as deleted if." As discussed when LWG reviewed <iref ref="2756"/>, it is undesirable to require 
that a move constructor or assignment operator be "defined as deleted," since it is unclear whether that operation should be 
<em>implicitly</em> deleted, and therefore not participate in overload resolution, or <em>explicitly</em> deleted and therefore 
impede overload resolution for usages that would otherwise find copies.
</p>

<note>2017-07 Toronto Wed Issue Prioritization</note>
<p>Priority 2</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4659">N4659</a>.</p>

<ol>
<li><p>Edit <sref ref="[pairs.pair]"/> as indicated:</p>

<blockquote>
<pre>
pair&amp; operator=(pair&amp;&amp; p) noexcept(<i>see below</i>);
</pre>
<blockquote>
<p>
-21- <i>Effects:</i> Assigns to <tt>first</tt> with <tt>std::forward&lt;first_type&gt;(p.first)</tt> and to 
<tt>second</tt> with <tt>std::forward&lt;second_type&gt;(p.second)</tt>.
<p/>
-22- <i>Remarks:</i> This operator shall <del>be defined as deleted</del><ins>not participate in overload resolution</ins> 
unless <tt>is_move_assignable_v&lt;first_type&gt;</tt> is <tt>true</tt> and <tt>is_move_assignable_v&lt;second_type&gt;</tt> 
is <tt>true</tt>.
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>

<li><p>Edit <sref ref="[tuple.assign]"/> as indicated:</p>

<blockquote>
<pre>
tuple&amp; operator=(tuple&amp;&amp; u) noexcept(<i>see below</i>);
</pre>
<blockquote>
<p>
-5- <i>Effects:</i> For all <tt><i>i</i></tt>, assigns <tt>std::forward&lt;T<sub><i>i</i></sub>&gt;(get&lt;<i>i</i>&gt;(u))</tt> 
to <tt>get&lt;<i>i</i>&gt;(*this)</tt>.
<p/>
-6- <i>Remarks:</i> This operator shall <del>be defined as deleted</del><ins>not participate in overload resolution</ins> unless 
<tt>is_move_assignable_v&lt;T<sub><i>i</i></sub>&gt;</tt> is <tt>true</tt> for all <tt><i>i</i></tt>.
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
