<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3369" status="WP">
<title><tt>span</tt>'s deduction-guide for built-in arrays doesn't work</title>
<section><sref ref="[span.overview]"/></section>
<submitter>Stephan T. Lavavej</submitter>
<date>08 Jan 2020</date>
<priority>0</priority>

<discussion>
<p>
<a href="https://wg21.link/n4842">N4842</a> 22.7.3.1 [span.overview] depicts:
</p>
<blockquote><pre>
template&lt;class T, size_t N&gt;
span(T (&amp;)[N]) -&gt; span&lt;T, N&gt;;
</pre></blockquote> 
<p>
This isn't constrained by 22.7.3.3 [span.deduct]. Then, 22.7.3.2 [span.cons]/10 
specifies:
</p>
<blockquote><pre>
template&lt;size_t N&gt; constexpr span(element_type (&amp;arr)[N]) noexcept;
template&lt;size_t N&gt; constexpr span(array&lt;value_type, N&gt;&amp; arr) noexcept;
template&lt;size_t N&gt; constexpr span(const array&lt;value_type, N&gt;&amp; arr) noexcept;
</pre>
<blockquote>
<p>
<i>Constraints:</i>
</p>
<ul>
<li><p><tt>extent == dynamic_extent || N == extent</tt> is <tt>true</tt>, and</p></li>
<li><p><tt>remove_pointer_t&lt;decltype(data(arr))&gt;(*)[]</tt> is convertible to 
<tt>ElementType(*)[]</tt>.</p></li>
</ul>
</blockquote>
</blockquote>
<p>
Together, these cause CTAD to behave unexpectedly. Here's a minimal test case, reduced from libcxx's 
test suite:
</p>
<blockquote><pre>
C:\Temp&gt;type span_ctad.cpp
#include &lt;stddef.h&gt;
#include &lt;type_traits&gt; 

inline constexpr size_t dynamic_extent = static_cast&lt;size_t&gt;(-1);

template &lt;typename T, size_t Extent = dynamic_extent&gt;
struct span {
  template &lt;size_t Size&gt;
  requires (Extent == dynamic_extent || Extent == Size)
#ifdef WORKAROUND_WITH_TYPE_IDENTITY_T
  span(std::type_identity_t&lt;T&gt; (&amp;)[Size]) {}
#else
  span(T (&amp;)[Size]) {}
#endif
};

template &lt;typename T, size_t Extent&gt;
#ifdef WORKAROUND_WITH_REQUIRES_TRUE
requires (true)
#endif
span(T (&amp;)[Extent]) -&gt; span&lt;T, Extent&gt;;

int main() {
  int arr[] = {1,2,3};
  span s{arr};
  static_assert(std::is_same_v&lt;decltype(s), span&lt;int, 3&gt;&gt;,
    "CTAD should deduce span&lt;int, 3&gt;.");
}

C:\Temp&gt;cl /EHsc /nologo /W4 /std:c++latest span_ctad.cpp
span_ctad.cpp
span_ctad.cpp(26): error C2338: CTAD should deduce span&lt;int, 3&gt;.

C:\Temp&gt;cl /EHsc /nologo /W4 /std:c++latest /DWORKAROUND_WITH_TYPE_IDENTITY_T span_ctad.cpp
span_ctad.cpp

C:\Temp&gt;cl /EHsc /nologo /W4 /std:c++latest /DWORKAROUND_WITH_REQUIRES_TRUE span_ctad.cpp
span_ctad.cpp

C:\Temp&gt;
</pre></blockquote> 
<p>
(MSVC and GCC 10 demonstrate this behavior. Clang is currently affected by 
<a href="https://bugs.llvm.org/show_bug.cgi?id=44484">LLVM#44484</a>.)
<p/>
Usually, when there's an explicit deduction-guide, we can ignore any corresponding constructor, 
because the overload resolution tiebreaker 12.4.3 [over.match.best]/2.10 prefers deduction-guides. 
However, this is a mental shortcut only, and it's possible for guides generated from constructors 
to out-compete deduction-guides during CTAD. That's what's happening here.
<p/>
Specifically, the constructor is constrained, while the deduction-guide is not constrained. This 
activates the "more specialized" tiebreaker first (12.4.3 [over.match.best]/2.5 is considered before 
/2.10 for deduction-guides). That goes through 13.7.6.2 [temp.func.order]/2 and 13.5.4 [temp.constr.order] 
to prefer the more constrained overload.
<p/>
(In the test case, this results in <tt>span&lt;int, dynamic_extent&gt;</tt> being deduced. That's 
because the constructor allows <tt>T</tt> to be deduced to be <tt>int</tt>. The constructor's <tt>Size</tt> 
template parameter is deduced to be 3, but that's unrelated to the class's <tt>Extent</tt> parameter. 
Because <tt>Extent</tt> has a default argument of <tt>dynamic_extent</tt>, CTAD succeeds and deduces 
<tt>span&lt;int, dynamic_extent&gt;</tt>.)
<p/>
There are at least two possible workarounds: we could alter the constructor to prevent it from 
participating in CTAD, or we could constrain the deduction-guide, as depicted in the test case. Either 
way, we should probably include a Note, following the precedent of 21.3.2.2 [string.cons]/12.
<p/>
Note that there are also deduction-guides for span from <tt>std::array</tt>. However, the constructors 
take <tt>array&lt;value_type, N&gt;</tt> with <tt>using value_type = remove_cv_t&lt;ElementType&gt;;</tt> 
so that prevents the constructors from interfering with CTAD.
<p/>
I'm currently proposing to alter the constructor from built-in arrays. An alternative resolution to 
constrain the deduction-guide would look like: "<i>Constraints:</i> <tt>true</tt>. [<i>Note:</i> This 
affects class template argument deduction. &mdash; <i>end note</i>]"
</p>

<note>2020-01-25 Status set to Tentatively Ready after seven positive votes on the reflector.</note>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4842">N4842</a>.</p>

<ol>
<li><p>Modify <sref ref="[span.overview]"/>, class template <tt>span</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
namespace std {
template&lt;class ElementType, size_t Extent = dynamic_extent&gt;
class span {
public:
  [&hellip;]
  <i>// <sref ref="[span.cons]"/>, constructors, copy, and assignment</i>
  constexpr span() noexcept;
  [&hellip;]
  template&lt;size_t N&gt;
  constexpr span(<ins>type_identity_t&lt;</ins>element_type<ins>&gt;</ins> (&amp;arr)[N]) noexcept;
  [&hellip;]
};
[&hellip;]
</pre>
</blockquote>

</li>

<li><p>Modify <sref ref="[span.cons]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;size_t N&gt; constexpr span(<ins>type_identity_t&lt;</ins>element_type<ins>&gt;</ins> (&amp;arr)[N]) noexcept;
template&lt;size_t N&gt; constexpr span(array&lt;value_type, N&gt;&amp; arr) noexcept;
template&lt;size_t N&gt; constexpr span(const array&lt;value_type, N&gt;&amp; arr) noexcept;
</pre>
<blockquote>
<p>
-10- <i>Constraints:</i>
<ol style="list-style-type: none">
<li><p>(10.1) &mdash; <tt>extent == dynamic_extent || N == extent</tt> is <tt>true</tt>, and</p></li>
<li><p>(10.2) &mdash; <tt>remove_pointer_t&lt;decltype(data(arr))&gt;(*)[]</tt> is convertible to 
<tt>ElementType(*)[]</tt>.</p></li>
</ol>
<p/>
-11- <i>Effects:</i> Constructs a <tt>span</tt> that is a view over the supplied array. <ins>[<i>Note:</i> 
<tt>type_identity_t</tt> affects class template argument deduction. &mdash; <i>end note</i>]</ins>
<p/>
-12- <i>Postconditions:</i> <tt>size() == N &amp;&amp; data() == data(arr)</tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
