<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2678" status="C++17">
<title><tt>std::filesystem</tt> enum classes overspecified</title>
<section><sref ref="[fs.enum.file_type]"/><sref ref="[fs.enum.copy.opts]"/><sref ref="[fs.enum.dir.opts]"/></section>
<submitter>Richard Smith</submitter>
<date>19 Mar 2016</date>
<priority>3</priority>

<discussion>
<p>
The enum class <tt>std::filesystem::file_type</tt> specifies a collection of enumerators for describing the type of 
a file, but also specifies (1) the numeric values of the enumerators, and (2) that an implementation cannot extend the 
list with additional types known to it (and by extension, the standard cannot extend the list in future versions without 
breakage).
</p>
<p>
These both seem like mistakes in the design. I would suggest we remove the 
specification of numerical values, and maybe also
</p>
<ul>
  <li><p>we allow implementations to add new implementation-defined value</p></li>
  <li><p>we replace <tt>std::filesystem::file_type::unknown</tt> with a value that <em>only</em> 
  means &quot;exists but type could not be determined&quot; and use 
  implementation-specific values for other possibilities.</p></li>
</ul>
 <p>
 Similar overspecification exists for <tt>std::filesystem::copy_options</tt> and 
 <tt>std::filesystem::directory_options</tt>, where again precise numerical values are specified.
 </p>

<note>2016-08 Chicago</note>
<p>Wed AM: Move to Tentatively Ready</p>
</discussion>

<resolution>
<ol>
<li>
<p>
Strike the "Value" column from:
</p>
<ul>
  <li><p><sref ref="[fs.enum.file_type]"/>, Table 145 Enum class <code>file_type</code> </p></li>
  <li><p><sref ref="[fs.enum.copy.opts]"/>, Table 146 Enum class <code>copy_options</code> </p></li>
  <li><p><sref ref="[fs.enum.dir.opts]"/>, Table 148 Enum class <code>enum.directory_options</code>.</p></li>
</ul>
</li>

<li><p>Change <sref ref="[fs.enum.file_type]"/> Table 145 Enum class <code>file_type</code> as indicated:</p>

<blockquote>
 <table border="1" cellpadding="5" cellspacing="0" style="border-collapse: collapse">
    <tr>
      <td><b>Constant</b></td>
      <td><b>Meaning</b></td>
    </tr>
    <tr>
      <td><code>none</code></td>
      <td>The type of the file has not been determined or an error occurred 
      while trying to determine the type.</td>
    </tr>
    <tr>
      <td><code>not_found</code></td>
      <td>Pseudo-type indicating the file was not found. [ <i>Note:</i>
      The file not being
      found is not considered an error while determining the type of a file. 
      <i>â€”end note</i> ]</td>
    </tr>
    <tr>
      <td><code>regular</code></td>
      <td>Regular file</td>
    </tr>
    <tr>
      <td><code>directory</code></td>
      <td>Directory file</td>
    </tr>
    <tr>
      <td><code>symlink</code></td>
      <td>Symbolic link file</td>
    </tr>
    <tr>
      <td><code>block</code></td>
      <td>Block special file</td>
    </tr>
    <tr>
      <td><code>character</code></td>
      <td>Character special file</td>
    </tr>
    <tr>
      <td><code>fifo</code></td>
      <td>FIFO or pipe file</td>
    </tr>
    <tr>
      <td><code>socket</code></td>
      <td>Socket file</td>
    </tr>
    <tr>
      <td><ins>implementation-<br/>defined</ins></td>
      <td><ins>Implementations that support file systems having file types
      in addition to the above file_type types shall supply
      implementation-defined <code>file_type</code> 
      constants to separately identify each of those additional
      file types</ins></td>
    </tr>
    <tr>
      <td><code>unknown</code></td>
      <td><del>The file does exist, but is of an operating system dependent type not 
      covered by any of the other cases or the process does not have permission to query
      the file type</del> <ins>The file exists but the type could not be determined</ins></td>
    </tr>
  </table>
</blockquote>
</li>
</ol>

</resolution>

</issue>
