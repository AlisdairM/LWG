<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3599" status="New">
<title>The <tt>const</tt> overload of <tt>lazy_split_view::begin</tt> should be constrained by <tt>const Pattern</tt></title>
<section><sref ref="[range.lazy.split.view]"/></section>
<submitter>Hewill Kang</submitter>
<date>23 Sep 2021</date>
<priority>99</priority>

<discussion>
<p>
 Consider the following code snippet:
</p>
<blockquote>
<pre>
#include &lt;ranges&gt;

int main() {
  auto p = std::views::iota(0)
         | std::views::take(1)
         | std::views::reverse;
  auto r = std::views::single(42)
         | std::views::lazy_split(p);
  auto f = r.front();
}
</pre>
</blockquote>
<p>
<tt>r.front()</tt> is ill-formed even if <tt>r</tt> is a <tt>forward_range</tt>.
</p>
<p>
This is because the <tt>const</tt> overload of <tt>lazy_split_view::begin</tt> is not constrained by the
<tt>const Pattern</tt>, which makes it still well-formed in such cases. When the <tt>const</tt> overload 
of <tt>view_interface&lt;lazy_split_view&lt;V, Pattern&gt;&gt;::front</tt> is instantiated, the 
<tt>subrange{parent_-&gt;pattern_}</tt> inside <tt>lazy_split_view::<i>outer-iterator</i>&lt;true&gt;::operator++()</tt> 
will cause a hard error since <tt>const Pattern</tt> is not a <tt>range</tt>.
</p>

<note>2021-09-24; Daniel comments</note>
<p>
This issue is related to LWG <iref ref="3592"/>.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4892">N4892</a>.
</p>

<ol>
<li><p>Modify <sref ref="[range.lazy.split.view]"/>, class template <tt>lazy_split_view</tt> synopsis, as indicated:</p>

<blockquote>
<blockquote>
<pre>
namespace std::ranges {

  [&hellip;]

  template&lt;input_range V, forward_range Pattern&gt;
    requires view&lt;V&gt; &amp;&amp; view&lt;Pattern&gt; &amp;&amp;
             indirectly_comparable&lt;iterator_t&lt;V&gt;, iterator_t&lt;Pattern&gt;, ranges::equal_to&gt; &amp;&amp;
            (forward_range&lt;V&gt; || <i>tiny-range</i>&lt;Pattern&gt;)
  class lazy_split_view : public view_interface&lt;lazy_split_view&lt;V, Pattern&gt;&gt; {
  private:
    [&hellip;]
  public:
    [&hellip;]

    constexpr auto begin() {
      [&hellip;]
    }
    
    constexpr auto begin() const requires forward_range&lt;V&gt; &amp;&amp; forward_range&lt;const V&gt; <ins>&amp;&amp;
                                          forward_range&lt;const Pattern&gt;</ins>{
      return <i>outer-iterator</i>&lt;true&gt;{*this, ranges::begin(<i>base_</i>)};
    }
    
    constexpr auto end() requires forward_range&lt;V&gt; &amp;&amp; common_range&lt;V&gt; {
      [&hellip;]
    }

    constexpr auto end() const {
      if constexpr (forward_range&lt;V&gt; &amp;&amp; forward_range&lt;const V&gt; &amp;&amp; common_range&lt;const V&gt; <ins>&amp;&amp;
                    forward_range&lt;const Pattern&gt;</ins>)
        return <i>outer-iterator</i>&lt;true&gt;{*this, ranges::end(<i>base_</i>)};
      else
        return default_sentinel;
    }
  };
  
  [&hellip;]
  
}
</pre>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
