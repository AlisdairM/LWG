<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY hellip "&#x2026;">
  <!ENTITY mdash  "&#x2014;">
] >

<issue num="2506" status="New">
<title>Underspecification of atomics</title>
<section><sref ref="[intro.multithread]"/>,<sref ref="[atomics.types.generic]"/>,<sref ref="[support.runtime]"/></section>
<submitter>Geoffrey Romer</submitter>
<date>29 May 2015</date>
<priority>99</priority>

<discussion>
<p>
The concurrency libraries specified in clauses 29 and 30 do not adequately specify how they relate to the concurrency model 
specified in <sref ref="[intro.multithread]"/>. In particular:
<p/>
<sref ref="[intro.multithread]"/> specifies "atomic objects" as having certain properties. I can only assume that instances 
of the classes defined in Clause 29 are intended to be "atomic objects" in this sense, but I can't find any wording to 
specify that, and it's genuinely unclear whether Clause 30 objects are atomic objects. In fact, on a literal reading the 
C++ Standard doesn't appear to provide <em>any</em> portable way to create an atomic object, or even determine whether an 
object is an atomic object.
<p/>
(It's not clear if the term "atomic object" is actually needed, given that atomic objects can have non-atomic operations, 
and non-atomic objects can have atomic operations. But even if the term itself goes away, there still needs to be some 
indication that Clause 29 objects have the properties currently attributed to atomic objects).
<p/>
Similarly, <sref ref="[intro.multithread]"/> uses "atomic operation" as a term of art, but the standard never unambiguously 
identifies any operation as an "atomic operation" (although in one case it unambiguously identifies an operation that is 
<em>not</em> atomic). It does come close in a few cases, but not close enough:
</p>
<ul>
<li><p><sref ref="[intro.multithread]"/>/p7 could be read to imply that "synchronization operations" in Clauses 29 and 30 
are also atomic operations. However, that's vague and indirect, and somewhat belied by <sref ref="[thread.mutex.requirements.mutex]"/>/p5, 
which specifies that mutex lock and unlock operations "behave as atomic operations", but only "for purposes of determining 
the existence of a data race". Furthermore, not a single operation in Clause 29 explicitly identifies itself as a 
"synchronization operation".</p></li>
<li><p><sref ref="[atomics.types.generic]"/>/p4 states in part that "There shall be a specialization <tt>atomic&lt;bool&gt;</tt> 
which provides the general atomic operations as specified in 29.6.1", but read in context, "general atomic operations" 
appears to be a loose synonym for "general operations on atomic types" as defined in <sref ref="[atomics.types.operations.general]"/>, 
rather than a use of "atomic object" as Words of Power. Incidentally, "atomic type" is never satisfactorily defined either 
(although the <tt>&lt;atomic&gt;</tt> synopsis comes close).</p></li>
<li><p><sref ref="[support.runtime]"/>/p10 specifies exactly which operations are "plain lock-free atomic operations", but 
in a standard where an "integral constant expression" isn't necessarily a "constant expression", I do not feel safe assuming 
that a "plain lock-free atomic operation" is an "atomic operation".</p></li>
<li><p>Hans Boehm tells me the operations with "atomically" in the Effects element are intended to be atomic operations, 
but since "atomic operation" is a term of art (e.g. in <sref ref="[intro.multithread]"/>/p27.4), I think this needs to be 
spelled out rather than assumed. Furthermore, this does not help with <sref ref="[atomics.fences]"/>, or anything in Clause 30.</p></li>
</ul>

</discussion>

<resolution>
</resolution>

</issue>
