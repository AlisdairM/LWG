<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2551" status="New">
<title>[fund.ts.v2] "Exception safety" cleanup in library fundamentals required</title>
<section><sref ref="[memory.smartptr.shared.const]"/></section>
<submitter>Daniel Kr&uuml;gler</submitter>
<date>24 Oct 2015</date>
<priority>99</priority>

<discussion>
<p><b>Addresses: fund.ts.v2</b></p>
<p>
Similar to LWG <iref ref="2495"/>, the current library fundamentals working paper refers to several "Exception safety" elements
without providing a definition for this element type.
</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4529.html">N4529</a>.</p>

<ol>
<li><p>Change <sref ref="[memory.smartptr.shared.const]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class Y&gt; explicit shared_ptr(Y* p);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-3- <i>Effects</i>: When <tt>T</tt> is not an array type, constructs a <tt>shared_ptr</tt> object that <em>owns</em> the pointer 
<tt>p</tt>. Otherwise, constructs a <tt>shared_ptr</tt> that <em>owns</em> <tt>p</tt> and a deleter of an unspecified type that 
calls <tt>delete[] p</tt>. <ins>If an exception is thrown, <tt>delete p</tt> is called when <tt>T</tt> is not an array type, 
<tt>delete[] p</tt> otherwise.</ins>
<p/>
[&hellip;]
<p/>
<del>-6- <i>Exception safety</i>: If an exception is thrown, <tt>delete p</tt> is called when <tt>T</tt> is not an array type, 
<tt>delete[] p</tt> otherwise.</del>
</p>
</blockquote>
<pre>
template&lt;class Y, class D&gt; shared_ptr(Y* p, D d);
template&lt;class Y, class D, class A&gt; shared_ptr(Y* p, D d, A a);
template &lt;class D&gt; shared_ptr(nullptr_t p, D d);
template &lt;class D, class A&gt; shared_ptr(nullptr_t p, D d, A a);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-9- <i>Effects</i>: Constructs a <tt>shared_ptr</tt> object that <em>owns</em> the object <tt>p</tt> and the deleter <tt>d</tt>. 
The second and fourth constructors shall use a copy of <tt>a</tt> to allocate memory for internal use. <ins>If an exception is thrown, 
<tt>d(p)</tt> is called.</ins>
<p/>
[&hellip;]
<p/>
<del>-12- <i>Exception safety</i>: If an exception is thrown, <tt>d(p)</tt> is called.</del>
</p>
</blockquote>
<p>
[&hellip;]
</p>
<pre>
template&lt;class Y&gt; explicit shared_ptr(const weak_ptr&lt;Y&gt;&amp; r);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-28- <i>Effects</i>: Constructs a <tt>shared_ptr</tt> object that <em>shares ownership</em> with <tt>r</tt> and stores a copy of 
the pointer stored in <tt>r</tt>. <ins>If an exception is thrown, the constructor has no effect.</ins>
<p/>
[&hellip;]
<p/>
<del>-31- <i>Exception safety</i>: If an exception is thrown, the constructor has no effect.</del>
</p>
</blockquote>
<pre>
template &lt;class Y, class D&gt; shared_ptr(unique_ptr&lt;Y, D&gt;&amp;&amp; r);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-34- <i>Effects</i>: Equivalent to <tt>shared_ptr(r.release(), r.get_deleter())</tt> when <tt>D</tt> is not a reference type, 
otherwise <tt>shared_ptr(r.release(), ref(r.get_deleter()))</tt>. <ins>If an exception is thrown, the constructor has no effect.</ins>
<p/>
<del>-35- <i>Exception safety</i>: If an exception is thrown, the constructor has no effect.</del>
</p>
</blockquote>
</blockquote>

</li>
</ol>
</resolution>

</issue>
