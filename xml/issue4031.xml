<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4031" status="New">
<title><tt>bad_expected_access&lt;void&gt;</tt> member functions should be <tt>noexcept</tt></title>
<section><sref ref="[expected.bad.void]"/></section>
<submitter>Cassio Neri</submitter>
<date>24 Dec 2023</date>
<priority>99</priority>

<discussion>
<p>
According to <sref ref="[exception]"/>/2:
</p>
<blockquote>
<p>
Each standard library class <tt>T</tt> that derives from class <tt>exception</tt> has the following 
publicly accessible member functions, each of them having a non-throwing exception specification (14.5):
</p>
<ol style="list-style-type: none">
<li><p>(2.1) &mdash; default constructor (unless the class synopsis shows other constructors)</p></li>
<li><p>(2.2) &mdash; copy constructor</p></li>
<li><p>(2.3) &mdash; copy assignment operator</p></li>
</ol>
</blockquote>
<p>
For good reasons, <tt>bad_expected_access&lt;void&gt;</tt> overrules from this general rule by 
protecting its special member functions. However, there's no reason these functions should not be 
<tt>noexcept</tt>.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4971"/>.
</p>

<ol>

<li><p>Modify <sref ref="[expected.bad.void]"/> as indicated:</p>

<blockquote>
<pre>
namespace std {
  template&lt;&gt;
  class bad_expected_access&lt;void&gt; : public exception {
  protected:
    bad_expected_access() noexcept;
    bad_expected_access(const bad_expected_access&amp;) <ins>noexcept</ins>;
    bad_expected_access(bad_expected_access&amp;&amp;) <ins>noexcept</ins>;
    bad_expected_access&amp; operator=(const bad_expected_access&amp;) <ins>noexcept</ins>;
    bad_expected_access&amp; operator=(bad_expected_access&amp;&amp;) <ins>noexcept</ins>;
    ~bad_expected_access();
  public:
    const char* what() const noexcept override;
  };
}
</pre>
</blockquote>

</li>

</ol>


</resolution>

</issue>
