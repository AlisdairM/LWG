<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3019" status="New">
<title>Presentation of "program defined classes derived from <tt>error_category</tt>" [syserr.errcat.derived] unclear and contains mistakes</title>
<section><sref ref="[syserr.errcat.derived]"/></section>
<submitter>Thomas K&ouml;ppe</submitter>
<date>20 Sep 2017</date>
<priority>3</priority>

<discussion>
<p>
The presentation of section [syserr.errcat.derived] is currently somewhat problematic:
</p>
<ul>
<li><p>
It is not clear why this section exists and what it is specifying. Presumably, it is the subject of the phrase 
"in this subclause" of the sibling section [syserr.errcat.overview], but that's confusing (because this would require the 
interpretation of "this subclause" as the containing superclause). It would be an improvement to say "shall behave 
as specified in [syserr.errcat.derived]" in the introduction.
</p></li>
<li><p>
The current wording of [syserr.errcat.derived] requires that derived classes keep the <tt>name</tt> member function pure-virtual, 
making it impossible to have non-abstract derived classes. This appears to be an editorial error. Surely <tt>name</tt> should 
just not be required to be pure-virtual.
</p></li>
<li><p>
There seems to be no requirement concerning the <tt>message</tt> virtual member function.
</p></li>
<li><p>
We should use <tt>override</tt> rather than <tt>virtual</tt>.
</p></li>
<li><p>
I would welcome a short, introductory paragraph in [syserr.errcat.derived] that states (non-redundantly) that the following 
are requirements on users' derived classes.
</p></li>
</ul>
<p>
Partial wording proposal:
</p>
<ol>
<li><p>In <sref ref="[syserr.errcat.overview]"/> p1, change:</p>
<blockquote>
<p>
-1- The class <tt>error_category</tt> serves as a base class for types used to identify the source and encoding of a
particular category of error code. Classes may be derived from <tt>error_category</tt> to support categories of
errors in addition to those defined in this International Standard. Such classes shall behave as specified in
<del>this subclause</del><ins><sref ref="[syserr.errcat.derived]"/></ins>. [<i>Note:</i> <tt>error_category</tt> objects 
are passed by reference, and two such objects are equal if they have the same address. This means that applications 
using custom <tt>error_category</tt> types should create a single object of each such type. &mdash; <i>end note</i>]
</p>
</blockquote>
</li>

<li><p>In <sref ref="[syserr.errcat.derived]"/>, change:</p>
<blockquote>
<pre>
<del>virtual</del> const char* name() const noexcept <ins>override</ins> <del> = 0</del>;
</pre>
<blockquote>
<p>
-1- <i>Returns:</i> A string naming the error category.
</p>
</blockquote>
<pre>
<del>virtual</del> error_condition default_error_condition(int ev) const noexcept <ins>override</ins>;
</pre>
<blockquote>
<p>
-2- <i>Returns:</i> An object of type <tt>error_condition</tt> that corresponds to <tt>ev</tt>.
</p>
</blockquote>
<pre>
<del>virtual</del> bool equivalent(int code, const error_condition&amp; condition) const noexcept <ins>override</ins>;
</pre>
<blockquote>
<p>
-3- <i>Returns:</i> <tt>true</tt> if, for the category of error represented by <tt>*this</tt>, <tt>code</tt> is considered 
equivalent to <tt>condition</tt>; otherwise, <tt>false</tt>.
</p>
</blockquote>
<pre>
<del>virtual</del> bool equivalent(const error_code&amp; code, int condition) const noexcept <ins>override</ins>;
</pre>
<blockquote>
<p>
-4- <i>Returns:</i> <tt>true</tt> if, for the category of error represented by <tt>*this</tt>, <tt>code</tt> is considered 
equivalent to condition; otherwise, <tt>false</tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>

<note>2017-11 Albuquerque Wednesday night issues processing</note>
<p>Priority set to 3.</p>
<p>Jonathan to talk to Chris K and Walter about writing a paper describing the use of <tt>error_code</tt>, <tt>error_condition</tt> and defining your own.</p>
</discussion>

<resolution>
</resolution>

</issue>
