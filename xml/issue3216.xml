<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3216" status="New">
<title>Rebinding the allocator before calling <tt>construct</tt>/<tt>destroy</tt> in <tt>allocate_shared</tt></title>
<section><sref ref="[util.smartptr.shared.create]"/></section>
<submitter>Billy O'Neal III</submitter>
<date>11 Jun 2019</date>
<priority>3</priority>

<discussion>
<p>
The new <tt>allocate_shared</tt> wording says we need to rebind the allocator back to <tt>T</tt>'s
type before we can call <tt>construct</tt> or <tt>destroy</tt>, but this is suboptimal (might make
extra unnecessary allocator copies), and is inconsistent with the containers' behavior, which call
allocator <tt>construct</tt> on whatever <tt>T</tt> they want. (For example,
<tt>std::list&lt;T, alloc&lt;T&gt;&gt;</tt> rebinds to <tt>alloc&lt;_ListNode&lt;T&gt;&gt;</tt>,
but calls <tt>construct(T*)</tt> without rebinding back)
<p/>
It seems like we should be consistent with the containers and not require a rebind here. PR would
look something like this, relative to N4810; I'm still not super happy with this wording because
it looks like it might be saying a copy of the allocator must be made we would like to avoid&hellip;
</p>

<note>2019-07 Issue Prioritization</note>
<p>Priority to 3 after discussion on the reflector.</p>
<superseded>
<p>This wording is relative to <a href="https://wg21.link/n4810">N4810</a>.</p>

<ol>
<li><p>Modify <sref ref="[util.smartptr.shared.create]"/> as indicated:</p>

<blockquote class="note">
<p>
[<i>Drafting note:</i> The edits to change <tt>pv</tt> to <tt>pu</tt> were suggested by Jonathan
Wakely (thanks!). This wording also has the <tt>remove_cv_t</tt> fixes specified by LWG <iref ref="3210"/>
&mdash; if that change is rejected some of those have to be stripped here.]
</p>
</blockquote>

<blockquote>
<pre>
template&lt;class T, ...&gt;
  shared_ptr&lt;T&gt; make_shared(<i>args</i>);
template&lt;class T, class A, ...&gt;
  shared_ptr&lt;T&gt; allocate_shared(const A&amp; a, <i>args</i>);
template&lt;class T, ...&gt;
  shared_ptr&lt;T&gt; make_shared_default_init(<i>args</i>);
template&lt;class T, class A, ...&gt;
  shared_ptr&lt;T&gt; allocate_shared_default_init(const A&amp; a, <i>args</i>);
</pre>
<blockquote>
<p>
-2- <i>Requires:</i> [&hellip;]
<p/>
[&hellip;]
<p/>
-7- <i>Remarks:</i>
</p>
<ol style="list-style-type: none">
<li><p>(7.1) &mdash; [&hellip;]</p></li>
<li><p>[&hellip;]</p></li>
<li><p>(7.5) &mdash; When a (sub)object of a non-array type <tt>U</tt> is specified to have an initial
value of <tt>v</tt>, or <tt>U(l...)</tt>, where <tt>l...</tt> is a list of constructor arguments,
<tt>allocate_shared</tt> shall initialize this (sub)object via the expression
</p>
<ol style="list-style-type: none">
<li><p>(7.5.1) &mdash; <tt>allocator_traits&lt;A2&gt;::construct(a2, p<del>v</del><ins>u</ins>, v)</tt> or</p></li>
<li><p>(7.5.2) &mdash; <tt>allocator_traits&lt;A2&gt;::construct(a2, p<del>v</del><ins>u</ins>, l...)</tt></p></li>
</ol>
<p>
respectively, where <tt>p<del>v</del><ins>u</ins></tt> <ins>is a pointer of type
<tt>remove_cv_t&lt;U&gt;*</tt></ins> point<del>s</del><ins>ing</ins> to storage suitable to hold
an object of type <tt><ins>remove_cv_t&lt;</ins>U<ins>&gt;</ins></tt> and <tt>a2</tt> of type
<tt>A2</tt> is a <ins>potentially</ins> rebound copy of the allocator <tt>a</tt>
passed to <tt>allocate_shared</tt> <del>such that its <tt>value_type</tt> is <tt>remove_cv_t&lt;U&gt;</tt></del>.
</p>
</li>
<li><p>(7.6) &mdash; [&hellip;]</p></li>
<li><p>(7.7) &mdash; When a (sub)object of non-array type <tt>U</tt> is specified to have a default
initial value, <tt>allocate_shared</tt> <del>shall</del> initialize<ins>s</ins> this (sub)object via
the expression <tt>allocator_traits&lt;A2&gt;::construct(a2, p<del>v</del><ins>u</ins>)</tt>, where
<tt>p<del>v</del><ins>u</ins></tt> <ins>is a pointer of type <tt>remove_cv_t&lt;U&gt;*</tt></ins>
point<del>s</del><ins>ing</ins> to storage suitable to hold an object of type
<tt><ins>remove_cv_t&lt;</ins>U<ins>&gt;</ins></tt> and <tt>a2</tt> of type <tt>A2</tt> is a
<ins>potentially</ins> rebound copy of the allocator <tt>a</tt> passed to <tt>allocate_shared</tt>
<del>such that its <tt>value_type</tt> is <tt>remove_cv_t&lt;U&gt;</tt></del>.</p></li>
<li><p>[&hellip;]</p></li>
<li><p>(7.12) &mdash; When a (sub)object of non-array type <tt>U</tt> that was initialized by
<tt>allocate_shared</tt> is to be destroyed, it is destroyed via the expression
<tt>allocator_traits&lt;A2&gt;::destroy(a2, p<del>v</del><ins>u</ins>)</tt> where
<tt>p<del>v</del><ins>u</ins></tt> <ins>is a pointer of type <tt>remove_cv_t&lt;U&gt;*</tt></ins>
point<del>s</del><ins>ing</ins> to that object of type <tt>remove_cv_t&lt;U&gt;</tt> and
<tt>a2</tt> of type <tt>A2</tt> is a <ins>potentially</ins> rebound copy of the
allocator <tt>a</tt> passed to <tt>allocate_shared</tt> <del>such that its <tt>value_type</tt> is
<tt>remove_cv_t&lt;U&gt;</tt></del>.</p></li>
</ol>
</blockquote>
</blockquote>
</li>
</ol>
</superseded>

<note>2024-08-23; Jonathan provides updated wording</note>
<p>
`make_shared_default_init` and `allocate_shared_default_init` were renamed
by <paper num="P1973R1"/> so this needs a rebase.
Accepting this proposed resolution would also resolve issue <iref ref="3210"/>.
</p>

</discussion>

<resolution>
<p>This wording is relative to <paper num="N4988"/>.</p>

<ol>
<li><p>Modify <sref ref="[util.smartptr.shared.create]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class T, ...&gt;
  shared_ptr&lt;T&gt; make_shared(<i>args</i>);
template&lt;class T, class A, ...&gt;
  shared_ptr&lt;T&gt; allocate_shared(const A&amp; a, <i>args</i>);
template&lt;class T, ...&gt;
  shared_ptr&lt;T&gt; make_shared_for_overwrite(<i>args</i>);
template&lt;class T, class A, ...&gt;
  shared_ptr&lt;T&gt; allocate_shared_for_overwrite(const A&amp; a, <i>args</i>);
</pre>
<blockquote>
<p>
-2- <i>Preconditions:</i> [&hellip;]
<p/>
[&hellip;]
<p/>
-7- <i>Remarks:</i>
</p>
<ol style="list-style-type: none">
<li><p>(7.1) &mdash; [&hellip;]</p></li>
<li><p>[&hellip;]</p></li>
<li><p>(7.5) &mdash; When a (sub)object of a non-array type <tt>U</tt> is specified to have an initial
value of <tt>v</tt>, or <tt>U(l...)</tt>, where <tt>l...</tt> is a list of constructor arguments,
<tt>allocate_shared</tt> shall initialize this (sub)object via the expression
</p>
<ol style="list-style-type: none">
<li><p>(7.5.1) &mdash; <tt>allocator_traits&lt;A2&gt;::construct(a2, p<del>v</del><ins>u</ins>, v)</tt> or</p></li>
<li><p>(7.5.2) &mdash; <tt>allocator_traits&lt;A2&gt;::construct(a2, p<del>v</del><ins>u</ins>, l...)</tt></p></li>
</ol>
<p>
respectively, where <tt>p<del>v</del><ins>u</ins></tt> <ins>is a pointer of type
<tt>remove_cv_t&lt;U&gt;*</tt></ins> point<del>s</del><ins>ing</ins> to storage suitable to hold
an object of type <tt><ins>remove_cv_t&lt;</ins>U<ins>&gt;</ins></tt> and <tt>a2</tt> of type
<tt>A2</tt> is a <ins>potentially</ins> rebound copy of the allocator <tt>a</tt>
passed to <tt>allocate_shared</tt> <del>such that its <tt>value_type</tt> is <tt>remove_cv_t&lt;U&gt;</tt></del>.
</p>
</li>
<li><p>(7.6) &mdash; [&hellip;]</p></li>
<li><p>(7.7) &mdash; When a (sub)object of non-array type <tt>U</tt> is specified to have a default
initial value, <tt>allocate_shared</tt> <del>shall</del> initialize<ins>s</ins> this (sub)object via
the expression <tt>allocator_traits&lt;A2&gt;::construct(a2, p<del>v</del><ins>u</ins>)</tt>, where
<tt>p<del>v</del><ins>u</ins></tt> <ins>is a pointer of type <tt>remove_cv_t&lt;U&gt;*</tt></ins>
point<del>s</del><ins>ing</ins> to storage suitable to hold an object of type
<tt><ins>remove_cv_t&lt;</ins>U<ins>&gt;</ins></tt> and <tt>a2</tt> of type <tt>A2</tt> is a
<ins>potentially</ins> rebound copy of the allocator <tt>a</tt> passed to <tt>allocate_shared</tt>
<del>such that its <tt>value_type</tt> is <tt>remove_cv_t&lt;U&gt;</tt></del>.</p></li>
<li><p>[&hellip;]</p></li>
<li><p>(7.12) &mdash; When a (sub)object of non-array type <tt>U</tt> that was initialized by
<tt>allocate_shared</tt> is to be destroyed, it is destroyed via the expression
<tt>allocator_traits&lt;A2&gt;::destroy(a2, p<del>v</del><ins>u</ins>)</tt> where
<tt>p<del>v</del><ins>u</ins></tt> <ins>is a pointer of type <tt>remove_cv_t&lt;U&gt;*</tt></ins>
point<del>s</del><ins>ing</ins> to that object of type <tt>remove_cv_t&lt;U&gt;</tt> and
<tt>a2</tt> of type <tt>A2</tt> is a <ins>potentially</ins> rebound copy of the
allocator <tt>a</tt> passed to <tt>allocate_shared</tt> <del>such that its <tt>value_type</tt> is
<tt>remove_cv_t&lt;U&gt;</tt></del>.</p></li>
</ol>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>
</issue>
