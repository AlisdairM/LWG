<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3440" status="New">
<title>Aggregate-paren-init breaks direct-initializing a <tt>tuple</tt> or <tt>optional</tt> from <tt>{<i>aggregate-member-value</i>}</tt></title>
<section><sref ref="[tuple.cnstr]"/><sref ref="[optional.ctor]"/></section>
<submitter>Ville Voutilainen</submitter>
<date>01 May 2020</date>
<priority>99</priority>

<discussion>
<p>
For reference, see <a href="https://gcc.gnu.org/bugzilla/show_bug.cgi?id=94890">this gcc bug report</a>.
<p/>
Constructing a <tt>tuple</tt> or <tt>optional</tt> from an element value of an aggregate
is broken in C++20. <tt>tuple&lt;c&gt; t({val});</tt> and <tt>optional&lt;c&gt; t({val});</tt> 
invoked a non-forwarding constructor before, but now the perfect-forwarding converting
constructors are a match, because the element is constructible from <tt>{val}</tt>. But 
it's not convertible, so overload resolution chooses the explicit constructor, and the 
initialization fails.
<p/>
Tim Song explains the overload resolution in <a href="https://lists.isocpp.org/lib/2020/05/16131.php">
this reflector discussion</a>.
<p/>
Now that we understand that C++17 called the non-forwarding conversion constructor, 
and C++20 tries to use the forwarding conversion constructor, we have the solution. 
SFINAE away the forwarding conversion constructor when it would convert an aggregate.
<p/>
This also means that <tt>tuple&lt;c&gt; t(0);</tt> won't work, which is unfortunate
because <tt>tuple&lt;c&gt;/optional&lt;c&gt;</tt> no longer mirrors what <tt>c</tt> can do.
That's okay; in this LWG issue, we first restore feature parity with C++17, and later, 
as an extension, enable such initializations so that <tt>tuple</tt>/<tt>optional</tt> 
mirrors what <tt>c</tt> can do in C++20.
<p/>
The proposed wording below has been implemented and tested.
</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4861">N4861</a>.</p>

<ol>
<li><p>Modify <sref ref="[tuple.cnstr]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class... UTypes&gt; constexpr explicit(<i>see below</i>) tuple(UTypes&amp;&amp;... u);
</pre>
<blockquote>
<p>
-11- <i>Constraints:</i> <tt>sizeof...(Types)</tt> equals <tt>sizeof...(UTypes)</tt> and 
<tt>sizeof...(Types) &ge; 1</tt> and <tt>is_constructible_v&lt;T<sub><i>i</i></sub>, U<sub><i>i</i></sub>&gt;</tt> 
is <tt>true</tt> for all <tt><i>i</i></tt> <ins>and <tt>conjunction_v&lt;is_aggregate&lt;T<sub><i>i</i></sub>&gt;,
negation&lt;is_same&lt;T<sub><i>i</i></sub>, remove_reference_t&lt;U<sub><i>i</i></sub>&gt;&gt;&gt;&gt;</tt> is 
<tt>false</tt> for all <tt><i>i</i></tt></ins>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[optional.ctor]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class U = T&gt; constexpr explicit(<i>see below</i>) optional(U&amp;&amp; v);
</pre>
<blockquote>
<p>
-22- <i>Constraints:</i> <tt>is_constructible_v&lt;T, U&gt;</tt> is <tt>true</tt>, 
<tt>is_same_v&lt;remove_cvref_t&lt;U&gt;, in_place_t&gt;</tt> is <tt>false</tt>, <del>and</del>
<tt>is_same_v&lt;remove_cvref_t&lt;U&gt;, optional&gt;</tt> is <tt>false</tt> <ins>and 
<tt>conjunction_v&lt;is_aggregate&lt;T&gt;, negation&lt;is_same&lt;T, 
remove_reference_t&lt;U&gt;&gt;&gt;&gt;</tt> is <tt>false</tt></ins>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>
</issue>
