<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2970" status="WP">
<title>Return type of <tt>std::visit</tt> misspecified</title>
<section><sref ref="[variant.visit]"/></section>
<submitter>Tim Song</submitter>
<date>31 May 2017</date>
<priority>2</priority>

<discussion>
<p>
[variant.visit]/1 correctly uses "type and value category", but then
p3 describes the return type of <tt>visit</tt> to be "the common type of all
possible <tt><i>INVOKE</i></tt> expressions of the <i>Effects:</i> element." 
The type of an expression is never a reference type, due to [expr]/5 removing the
referenceness "prior to any further analysis", so this wording as
written says that <tt>visit</tt> always returns a non-reference type, which is
presumably not the intent.
</p>

<note>2017-07 Toronto Monday issue prioritization</note>
<p>Priority 2; Matt to provide wording</p>

<note>2018-01-11, Thomas K&ouml;ppe comments and suggests wording</note>
<p>
The return type of <tt>std::visit</tt> (originating by <a href="https://wg21.link/p0088r3">P0088R3</a> 
accepted during the Oulo 2016 meeting) is currently misspecified and refers only to the common 
<em>type</em> of all the possible visitation calls, without attention to the value category. This 
seems unintended, and we should preserve the value category.
</p>

<note>2017-01-24, Daniel comments</note>
<p>
This issue should be reviewed in common with LWG <iref ref="3052"/>.
</p>

<note>
2018-02-23 Moved to Tentatively Ready after 6 positive votes on c++std-lib.
</note>

<note>2018-06 Rapperswil: Adopted</note>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4727">N4727</a>.</p>

<ol>
<li><p>Modify <sref ref="[variant.visit]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class Visitor, class... Variants&gt;
  constexpr <i>see below</i> visit(Visitor&amp;&amp; vis, Variants&amp;&amp;... vars);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-3- <i>Returns:</i> <tt><i>e</i>(<i>m</i>)</tt>, where <tt><i>m</i></tt> is the pack for which 
<tt><i>m<sub>i</sub></i></tt> is <tt>vars<i><sub>i</sub></i>.index()</tt> for all 
<tt>0 &lt;= i &lt; n</tt>. The return type is <del>the type of 
<tt><i>e</i>(<i>m</i>)</tt></del><ins><tt>decltype(<i>e</i>(<i>m</i>))</tt></ins>.
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
