<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3677" status="Open">
<title>Is a <i>cv</i>-qualified <tt>pair</tt> specially handled in uses-allocator construction?</title>
<section><sref ref="[allocator.uses.construction]"/></section>
<submitter>Jiang An</submitter>
<date>16 Feb 2022</date>
<priority>2</priority>

<discussion>
<p>
It seems unclear whether <i>cv</i>-qualified <tt>pair</tt> specializations are considered as 
specializations of <tt>pair</tt> in <sref ref="[allocator.uses.construction]"/>.
<p/>
Currently MSVC STL only considered <i>cv</i>-unqualified pair types as such specializations, 
while libstdc++ accept both <i>cv</i>-unqualified and <tt>const</tt>-qualified pair types as 
such specializations. The resolution of LWG <iref ref="3525"/> uses <tt>remove_cv_t</tt>,
which possibly imply that the specialization of pair may be <i>cv</i>-qualified.
<p/>
The difference can be observed via the following program:
</p>
<blockquote><pre>
#include &lt;utility&gt;
#include &lt;memory&gt;
#include &lt;vector&gt;
#include &lt;cassert&gt; 

template&lt;class T&gt;
class payload_ator {

  int payload{};
    
public:
  payload_ator() = default;

  constexpr explicit payload_ator(int n) noexcept : payload{n} {}

  template&lt;class U&gt;
  constexpr explicit payload_ator(payload_ator&lt;U&gt; a) noexcept : payload{a.payload} {}   

  friend bool operator==(payload_ator, payload_ator) = default;

  template&lt;class U&gt;
  friend constexpr bool operator==(payload_ator x, payload_ator&lt;U&gt; y) noexcept
  {
    return x.payload == y.payload;
  }   

  using value_type = T;

  constexpr T* allocate(std::size_t n) { return std::allocator&lt;T&gt;{}.allocate(n); }

  constexpr void deallocate(T* p, std::size_t n) { return std::allocator&lt;T&gt;{}.deallocate(p, n); }   

  constexpr int get_payload() const noexcept { return payload; }
};

bool test()
{
  constexpr int in_v = 42;
  using my_pair_t = std::pair&lt;int, std::vector&lt;int, payload_ator&lt;int&gt;&gt;&gt;;
  auto out_v = std::make_obj_using_allocator&lt;const my_pair_t&gt;(payload_ator&lt;int&gt;{in_v}).second.get_allocator().get_payload();
  return in_v == out_v;
}

int main()
{
  assert(test()); // <span style="color:red;font-weight:bolder">passes only if a const-qualified pair specialization is considered as a pair specialization</span>
}
</pre></blockquote>

<note>2022-03-04; Reflector poll</note>
<p>
Set priority to 2 after reflector poll.
</p>

<note>2022-08-24; LWG telecon</note>
<p>Change every <code>T</code> to <code>remove_cv_t&lt;T&gt;</code>.</p>

<note>2022-08-25; Jonathan Wakely provides wording</note>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>
This wording is relative to <paper num="N4910"/>.
</p>

<ul>
<li><p>Modify <sref ref="[allocator.uses.construction]"/> as indicated,
using <code>remove_cv_t</code> in every <i>Constraints</i>: element:</p>

<blockquote>
<p><i>Constraints</i>:
<code><ins>remove_cv_t&lt;</ins>T<ins>&gt;</ins></code> [is|is not]
a specialization of <code>pair</code>
</p>
</blockquote>
</li>
</ul>

</blockquote>

<note>2022-09-23; Jonathan provides improved wording</note>

</discussion>

<resolution>

<p>
This wording is relative to <paper num="N4910"/>.
</p>

<ol>
<li><p>Modify <sref ref="[allocator.uses.construction]"/> as indicated,
using <code>remove_cv_t</code> in every <i>Constraints</i>: element:</p>

<blockquote>
<p><i>Constraints</i>:
<code><ins>remove_cv_t&lt;</ins>T<ins>&gt;</ins></code> [is|is not]
a specialization of <code>pair</code>
</p>
</blockquote>
</li>

<li>
<p>Add <tt>remove_cv_t</tt> in paragraph 5:</p>

<blockquote>
<p>-5- <i>Returns</i>: A <code>tuple</code> value determined as follows: </p>
<p>(5.1) &mdash; If
<code>uses_allocator_v&lt;<ins>remove_cv_t&lt;</ins>T<ins>&gt;</ins>, Alloc&gt;</code>
is <code>false</code> and [...]
</p>
</blockquote>
</li>

<li>
<p>Rephrase paragraph 7 in terms of the pair member types:</p>

<blockquote>
<p>
<ins> -?-
Let <code>T1</code> be <code>T::first_type</code>.
Let <code>T2</code> be <code>T::second_type</code>.
</ins>
</p>

<p>-6- <i>Constraints</i>:
<code><ins>remove_cv_t&lt;</ins>T<ins>&gt;</ins></code> is
a specialization of <code>pair</code>
</p>
<p>-7- <i>Effects:</i>:
<del>
For <code>T</code> specified as <code>pair&lt;T1, T2&gt;</code>, equivalent
</del>
<ins>Equivalent</ins>
to:
</p>
</blockquote>
</li>

</ol>

</resolution>

</issue>
