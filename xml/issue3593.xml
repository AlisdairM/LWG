<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3593" status="C++23">
<title>Several iterators' <tt>base() const &amp;</tt> and <tt>lazy_split_view::<i>outer-iterator</i>::value_type::end()</tt> missing <tt>noexcept</tt></title>
<section><sref ref="[move.iterators]"/><sref ref="[iterators.counted]"/><sref ref="[range.filter.iterator]"/>
<sref ref="[range.transform.iterator]"/><sref ref="[range.lazy.split.outer.value]"/><sref ref="[range.lazy.split.inner]"/>
<sref ref="[range.elements.iterator]"/></section>
<submitter>Hewill Kang</submitter>
<date>14 Sep 2021</date>
<priority>99</priority>

<discussion>
<p>
LWG <iref ref="3391"/> and <iref ref="3533"/> changed some iterators' <tt>base() const &amp;</tt> from returning value to 
returning <tt>const</tt> reference, which also prevents them from throwing exceptions, we should add <tt>noexcept</tt> for them. 
Also, <tt>lazy_split_view::<i>outer-iterator</i>::value_type::end()</tt> can be <tt>noexcept</tt> since it only returns 
<tt>default_sentinel</tt>.
</p>

<note>2021-09-24; Reflector poll</note>
<p>
Set status to Tentatively Ready after seven votes in favour during reflector poll.
</p>

<note>2021-10-14 Approved at October 2021 virtual plenary. Status changed: Voting &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4892">N4892</a>.
</p>

<ol>
<li><p>Modify <sref ref="[move.iterators]"/>, class template <tt>move_iterator</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
[&hellip;]
constexpr const iterator_type&amp; base() const &amp; <ins>noexcept</ins>;
constexpr iterator_type base() &amp;&amp;;
[&hellip;]
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[move.iter.op.conv]"/> as indicated:</p>

<blockquote>
<pre>
constexpr const Iterator&amp; base() const &amp; <ins>noexcept</ins>;
</pre>
<blockquote>
<p>
-1- <i>Returns:</i> <tt>current</tt>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[counted.iterator]"/>, class template <tt>counted_iterator</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
[&hellip;]
constexpr const I&amp; base() const &amp; <ins>noexcept</ins>;
constexpr I base() &amp;&amp;;
[&hellip;]
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[counted.iter.access]"/> as indicated:</p>

<blockquote>
<pre>
constexpr const I&amp; base() const &amp; <ins>noexcept</ins>;
</pre>
<blockquote>
<p>
-1- <i>Effects:</i> Equivalent to: <tt>return current;</tt>
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.filter.iterator]"/> as indicated:</p>

<blockquote>
<blockquote>
<pre>
[&hellip;]
constexpr const iterator_t&lt;V&gt;&amp; base() const &amp; <ins>noexcept</ins>;
constexpr iterator_t&lt;V&gt; base() &amp;&amp;;
[&hellip;]
</pre>
</blockquote>
[&hellip;]
<pre>
constexpr const iterator_t&lt;V&gt;&amp; base() const &amp; <ins>noexcept</ins>;
</pre>
<blockquote>
<p>
-5- <i>Effects:</i> Equivalent to: <tt>return <i>current_</i>;</tt>
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.transform.iterator]"/> as indicated:</p>

<blockquote>
<blockquote>
<pre>
[&hellip;]
constexpr const iterator_t&lt;<i>Base</i>&gt;&amp; base() const &amp; <ins>noexcept</ins>;
constexpr iterator_t&lt;<i>Base</i>&gt; base() &amp;&amp;;
[&hellip;]
</pre>
</blockquote>
[&hellip;]
<pre>
constexpr const iterator_t&lt;<i>Base</i>&gt;&amp; base() const &amp; <ins>noexcept</ins>;
</pre>
<blockquote>
<p>
-5- <i>Effects:</i> Equivalent to: <tt>return <i>current_</i>;</tt>
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.lazy.split.outer.value]"/> as indicated:</p>

<blockquote>
<blockquote>
<pre>
[&hellip;]
constexpr <i>inner-iterator</i>&lt;Const&gt; begin() const;
constexpr default_sentinel_t end() const <ins>noexcept</ins>;
[&hellip;]
</pre>
</blockquote>
[&hellip;]
<pre>
constexpr default_sentinel_t end() const <ins>noexcept</ins>;
</pre>
<blockquote>
<p>
-3- <i>Effects:</i> Equivalent to: <tt>return default_sentinel;</tt>
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.lazy.split.inner]"/> as indicated:</p>

<blockquote>
<blockquote>
<pre>
[&hellip;]
constexpr const iterator_t&lt;<i>Base</i>&gt;&amp; base() const &amp; <ins>noexcept</ins>;
constexpr iterator_t&lt;<i>Base</i>&gt; base() &amp;&amp;;
[&hellip;]
</pre>
</blockquote>
[&hellip;]
<pre>
constexpr const iterator_t&lt;<i>Base</i>&gt;&amp; base() const &amp; <ins>noexcept</ins>;
</pre>
<blockquote>
<p>
-3- <i>Effects:</i> Equivalent to: <tt>return <i>i_</i>.<i>current</i>;</tt>
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.elements.iterator]"/> as indicated:</p>

<blockquote>
<blockquote>
<pre>
[&hellip;]
constexpr const iterator_t&lt;<i>Base</i>&gt;&amp; base() const&amp; <ins>noexcept</ins>;
constexpr iterator_t&lt;<i>Base</i>&gt; base() &amp;&amp;;
[&hellip;]
</pre>
</blockquote>
[&hellip;]
<pre>
constexpr const iterator_t&lt;<i>Base</i>&gt;&amp; base() const&amp; <ins>noexcept</ins>;
</pre>
<blockquote>
<p>
-6- <i>Effects:</i> Equivalent to: <tt>return <i>current_</i>;</tt>
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
