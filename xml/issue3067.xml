<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3067" status="Tentatively Ready">
<title><tt>recursive_directory_iterator::pop</tt> must invalidate</title>
<section><sref ref="[fs.rec.dir.itr.members]"/></section>
<submitter>Casey Carter</submitter>
<date>25 Feb 2018</date>
<priority>0</priority>

<discussion>
<p>
<tt>recursive_directory_iterator::pop</tt> is effectively a "supercharged" <tt>operator++</tt>: it
advances the iterator forward as many steps as are necessary to reach the next entry in the parent
directory. Just as is the case for <tt>operator++</tt>, <tt>pop</tt> must be allowed to invalidate
iterator copies to allow efficient implementation. The most efficient fix seems to be borrowing the
invalidation wording from <sref ref="[input.iterators]"/> Table 87's specification for the required
<tt>++r</tt> expression for input iterators.
</p>

<note>
2018-03-06 Moved to Tentatively Ready after 5 positive votes on c++std-lib.
</note>
</discussion>

<resolution>
<p>
This wording is relative to <a href="http://wg21.link/n4727">N4727</a>.
</p>

<ol>
<li><p>Change <sref ref="[fs.rec.dir.itr.members]"/> as indicated:</p>
<blockquote>
<pre>
void pop();
void pop(error_code&amp; ec);
</pre>
<blockquote>
<p>
-26- <i>Effects</i>: If <tt>depth() == 0</tt>, set <tt>*this</tt> to
<tt>recursive_directory_iterator()</tt>. Otherwise, cease iteration of the directory currently being
iterated over, and continue iteration over the parent directory.
</p>
<p>
<ins>-?- <i>Postconditions</i>: Any copies of the previous value of <tt>*this</tt> are no longer
required either to be dereferenceable or to be in the domain of <tt>==</tt>.</ins>
</p>
<p>
-27- <i>Throws</i>: As specified in <sref ref="[fs.err.report]"/>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
