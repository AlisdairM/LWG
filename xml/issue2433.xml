<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2433" status="Ready">
<title><tt>uninitialized_copy()</tt>/etc. should tolerate overloaded <tt>operator&amp;</tt></title>
<section><sref ref="[specialized.algorithms]"/></section>
<submitter>Stephan T. Lavavej</submitter>
<date>1 Oct 2014</date>
<priority>0</priority>

<discussion>
<p>
This restriction isn't necessary anymore. In fact, this is the section that defines <tt>addressof()</tt>.
</p>
<p>
(Editorial note: We can depict these algorithms as calling <tt>addressof()</tt> instead of <tt>std::addressof()</tt> 
thanks to <sref ref="[contents]"/>/3 "Whenever a name <tt>x</tt> defined in the standard library is mentioned, the name 
<tt>x</tt> is assumed to be fully qualified as <tt>::std::x</tt>, unless explicitly described otherwise.")
</p>

<note>Urbana 2014-11-07: Move to Ready</note>

</discussion>

<resolution>
<p>
This wording is relative to N3936.
</p>

<ol>
<li><p>Change <sref ref="[specialized.algorithms]"/> p1 as depicted:</p>

<blockquote>
<p>
-1- <del>All the iterators that are used as formal template parameters in the following algorithms are required to
have their <tt>operator*</tt> return an object for which <tt>operator&amp;</tt> is defined and returns a pointer to 
<tt>T</tt>.</del> In the algorithm <tt>uninitialized_copy</tt>, the formal template parameter <tt>InputIterator</tt> 
is required to satisfy the requirements of an input iterator (24.2.3). In all of the following algorithms, the formal 
template parameter <tt>ForwardIterator</tt> is required to satisfy the requirements of a forward iterator (24.2.5), 
and is required to have the property that no exceptions are thrown from increment, assignment, comparison, or indirection
through valid iterators. In the following algorithms, if an exception is thrown there are no effects.
</p>
</blockquote>
</li>

<li><p>Change <sref ref="[uninitialized.copy]"/> p1 as depicted:</p>
<blockquote>
<p>
-1- <i>Effects</i>:
</p>
<blockquote>
<pre>
for (; first != last; ++result, ++first)
  ::new (static_cast&lt;void*&gt;(<ins>addressof(</ins><del>&amp;</del>*result<ins>)</ins>))
    typename iterator_traits&lt;ForwardIterator&gt;::value_type(*first);
</pre>
</blockquote>
</blockquote>
</li>

<li><p>Change <sref ref="[uninitialized.copy]"/> p3 as depicted:</p>
<blockquote>
<p>
-3- <i>Effects</i>:
</p>
<blockquote>
<pre>
for (; n &gt; 0; ++result, ++first, --n) {
  ::new (static_cast&lt;void*&gt;(<ins>addressof(</ins><del>&amp;</del>*result<ins>)</ins>))
    typename iterator_traits&lt;ForwardIterator&gt;::value_type(*first);
}
</pre>
</blockquote>
</blockquote>
</li>

<li><p>Change <sref ref="[uninitialized.fill]"/> p1 as depicted:</p>
<blockquote>
<p>
-1- <i>Effects</i>:
</p>
<blockquote>
<pre>
for (; first != last; ++first)
  ::new (static_cast&lt;void*&gt;(<ins>addressof(</ins><del>&amp;</del>*first<ins>)</ins>))
    typename iterator_traits&lt;ForwardIterator&gt;::value_type(x);
</pre>
</blockquote>
</blockquote>
</li>

<li><p>Change <sref ref="[uninitialized.fill.n]"/> p1 as depicted:</p>
<blockquote>
<p>
-1- <i>Effects</i>:
</p>
<blockquote>
<pre>
for (; n--; ++first)
  ::new (static_cast&lt;void*&gt;(<ins>addressof(</ins><del>&amp;</del>*first<ins>)</ins>))
    typename iterator_traits&lt;ForwardIterator&gt;::value_type(x);
return first;
</pre>
</blockquote>
</blockquote>
</li>
</ol>

</resolution>

</issue>
