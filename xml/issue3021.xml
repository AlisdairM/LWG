<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3021" status="New">
<title>[networking.ts] Relax pointer equivalence requirement for <tt>ConstBufferSequence</tt></title>
<section><sref ref="[buffer.reqmts.constbuffersequence]"/></section>
<submitter>Vinnie Falco</submitter>
<date>20 Sep 2017</date>
<priority>3</priority>

<discussion>
<p><b>Addresses: networking.ts</b></p>
<p>
The post-condition buffer sequence requirements mandate pointer equivalence. This means that a copies of buffer sequences must 
point to the same pieces of underlying memory. While this is appropriate for <tt>MutableBufferSequence</tt>, it is unnecessary 
for <tt>ConstBufferSequence</tt> and can actually prevent useful implementation strategies such as the following constant buffer 
sequence which avoids dynamic allocations:  
</p>
<blockquote>
<pre>
/// A buffer sequence containing a chunk-encoding header
class chunk_size
{
public:
    // Storage for the longest hex string we might need
    class value_type
    {
        friend class chunk_size;

        // First byte holds the length
        char buf_[1 + 2 * sizeof(std::size_t)];

        template&lt;class = void&gt;
        void prepare(std::size_t n);

        template&lt;class OutIter&gt;
        static OutIter to_hex(OutIter last, std::size_t n)
        {
            if (n == 0)
            {
                *--last = '0';
                return last;
            }
            while (n)
            {
                *--last = "0123456789abcdef"[n &amp; 0xf];
                n >>= 4;
            }
            return last;
        }
    public:
        operator boost::asio::const_buffer() const
        {
            return {
                buf_ + sizeof(buf_) - buf_[0],
                static_cast(buf_[0])
            };
        }
    };

    using const_iterator = value_type const*;

    chunk_size(chunk_size const&amp; other) = default;

    /** Construct a chunk header

        @param n The number of octets in this chunk.
    */
    chunk_size(std::size_t n)
    {
        value_.prepare(n);
    }

    const_iterator begin() const
    {
        return &amp;value_;
    }

    const_iterator end() const
    {
        return begin() + 1;
    }

private:
    value_type value_;
};
</pre>
</blockquote>
</discussion>

<resolution>
<p>
This wording is relative to <a href="http://wg21.link/n4588">N4588</a>.
</p>

<ol>
<li>
<p>
Modify <sref ref="[buffer.reqmts.constbuffersequence]"/> Table 13 "<tt>ConstBufferSequence</tt> requirements" as indicated:
</p>
<blockquote>
<table border="1">
<caption>Table 13 &mdash; <tt>ConstBufferSequence</tt> requirements</caption>
<tr>
<th>expression</th>
<th>return type</th>
<th>assertion/note<br/>pre/post-condition</th>
</tr>
<tr>
<td colspan="3" align="center">
<tt>[&hellip;]</tt>
</td>
</tr>
<tr>
<td>
<tt>X u(x);</tt>
</td>
<td>
</td>
<td>
post:<br/>
<pre>
equal(
  net::buffer_sequence_begin(x),
  net::buffer_sequence_end(x),
  net::buffer_sequence_begin(u),
  net::buffer_sequence_end(u),
  [](const typename X::value_type&amp; v1,
     const typename X::value_type&amp; v2)
    {
      const_buffer b1(v1);
      const_buffer b2(v2);
      <del>return b1.data() == b2.data()
          &amp;&amp; b1.size() == b2.size()</del>
      <ins>return b1.size() == b2.size()
          &amp;&amp; memcmp(b1.data(), b2.data(), b1.size()) == 0</ins>;
    })
</pre>
</td>
</tr>
</table>
</blockquote>
</li>
</ol>

</resolution>

</issue>
