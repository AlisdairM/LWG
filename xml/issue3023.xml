<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3023" status="New">
<title>Clarify <i>unspecified</i> call wrappers</title>
<section><sref ref="[func.memfn]"/><sref ref="[func.not_fn]"/><sref ref="[func.bind]"/></section>
<submitter>Detlef Vollmann</submitter>
<date>7 Oct 2017</date>
<priority>3</priority>

<discussion>
<p>
Even after the discussion on the reflector, starting with
<a href="http://lists.isocpp.org/lib-ext/2017/09/4880.php">this reflector message</a>
it's not completely clear that <i>unspecified</i> as return type
of <tt>mem_fn</tt> really means 'unspecified, but always the same'.
The same problem exists for <tt>bind()</tt> and <tt>not_fn()</tt>.
<p/>
Possible solution:
<p/>
Specify in <sref ref="[func.def]"/> or <sref ref="[func.require]"/> that a call wrapper type
is always the same for forwarding call wrappers if the object is returned by a function with 
the same parameter types.
And also put into <sref ref="[func.not_fn]"/> that a <tt>call_wrapper</tt> object is a
simple call wrapper.
</p>

<note>2017-11 Albuquerque Wednesday night issues processing</note>
<p>Priority set to 3. Tomasz to write a paper that will address this issue. See also <iref ref="3015"/></p>

<note>2017-11-10, Tomasz comments and provides wording</note>
<p>
From the core language rules it is already required that same function
template specialization have the same return type. Given that the
invocation of <tt>mem_fn</tt>/<tt>bind</tt>/<tt>not_fn</tt> will always return 
the same wrapper type, if they are instantiated (called with) same parameters type.
However, the existence of this issue, shows that some library-wide
clarification note would be welcomed.
</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4700">N4700</a>.</p>

<ol>
<li><p>After section <sref ref="[expos.only.types]"/> "Exposition-only types" add the
following new section:</p>

<blockquote>
<p>
<ins>?.?.?.?.? <em>unspecified</em> types [unspecified.types]</ins>
<p/>
<ins>[<i>Note:</i> Whenever the return type of the function template component is
declared an <em>unspecified</em>, the type of the returned object depends only on the 
template arguments of the instantiation. [<i>Example:</i></ins>
</p>
<blockquote><pre>
<ins>template&lt;class T&gt; <em>unspecified</em> f(T);</ins>
</pre></blockquote>
<p>
<ins>&mdash; <i>end example</i>] The invocations of <code>f(0)</code> and <code>f(1)</code> 
returns objects of the same type. &mdash; <i>end note</i>]</ins>
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
