<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2485" status="New">
<title><tt>get()</tt> should be overloaded for <tt>const tuple&amp;&amp;</tt></title>
<section><sref ref="[tuple.elem]"/></section>
<submitter>Stephan T. Lavavej</submitter>
<date>27 Mar 2015</date>
<priority>99</priority>

<discussion>
<p>
<tt>const</tt> rvalues are weird, but they're part of the type system. Consider the following code:
</p>
<blockquote>
<pre>
#include &lt;functional&gt;
#include &lt;string&gt;
#include &lt;tuple&gt;

using namespace std; 

string str1() { return "one"; }
const string str2() { return "two"; }
tuple&lt;string&gt; tup3() { return make_tuple("three"); }
const tuple&lt;string&gt; tup4() { return make_tuple("four"); }

int main() {
  // cref(str1()); // BAD, properly rejected
  // cref(str2()); // BAD, properly rejected
  // cref(get&lt;0&gt;(tup3())); // BAD, properly rejected
  cref(get&lt;0&gt;(tup4())); // BAD, but improperly accepted!
}
</pre>
</blockquote>
<p>
As <tt>tuple</tt> is a fundamental building block (and the only convenient way to have variadic data members), it should 
not open a hole in the type system. <tt>get()</tt> should imitate <sref ref="[expr.ref]"/>'s rules for accessing data members.  
(This is especially true for <tt>pair</tt>, where both <tt>get&lt;0&gt;()</tt> and <tt>.first</tt> are available.)
<p/>
While we're in the neighborhood, we can dramatically simplify the wording here. All we need to do is follow 
<sref ref="[tuple.elem]"/>/9's example of saying "Returns: A reference to STUFF", and allow implementers to figure out how 
to achieve that with the given return types.
</p>

</discussion>

<resolution>
<p>This wording is relative to N4296.</p>

<ol>
<li><p>Change <sref ref="[utility]"/>/2 "Header <tt>&lt;utility&gt;</tt> synopsis" as depicted:</p>

<blockquote>
<pre>
[&hellip;]
template&lt;size_t I, class T1, class T2&gt;
  constexpr tuple_element_t&lt;I, pair&lt;T1, T2&gt;&gt;&amp;
    get(pair&lt;T1, T2&gt;&amp;) noexcept;
template&lt;size_t I, class T1, class T2&gt;
  constexpr tuple_element_t&lt;I, pair&lt;T1, T2&gt;&gt;&amp;&amp;
    get(pair&lt;T1, T2&gt;&amp;&amp;) noexcept;
template&lt;size_t I, class T1, class T2&gt;
  constexpr const tuple_element_t&lt;I, pair&lt;T1, T2&gt;&gt;&amp;
    get(const pair&lt;T1, T2&gt;&amp;) noexcept;
<ins>template&lt;size_t I, class T1, class T2&gt;
  constexpr const tuple_element_t&lt;I, pair&lt;T1, T2&gt;&gt;&amp;&amp;
    get(const pair&lt;T1, T2&gt;&amp;&amp;) noexcept;</ins>
template &lt;class T, class U&gt;
  constexpr T&amp; get(pair&lt;T, U&gt;&amp; p) noexcept;
template &lt;class T, class U&gt;
  constexpr const T&amp; get(const pair&lt;T, U&gt;&amp; p) noexcept;
template &lt;class T, class U&gt;
  constexpr T&amp;&amp; get(pair&lt;T, U&gt;&amp;&amp; p) noexcept;
<ins>template &lt;class T, class U&gt;
  constexpr const T&amp;&amp; get(const pair&lt;T, U&gt;&amp;&amp; p) noexcept;</ins>
template &lt;class T, class U&gt;
  constexpr T&amp; get(pair&lt;U, T&gt;&amp; p) noexcept;
template &lt;class T, class U&gt;
  constexpr const T&amp; get(const pair&lt;U, T&gt;&amp; p) noexcept;
template &lt;class T, class U&gt;
  constexpr T&amp;&amp; get(pair&lt;U, T&gt;&amp;&amp; p) noexcept;
<ins>template &lt;class T, class U&gt;
  constexpr const T&amp;&amp; get(const pair&lt;U, T&gt;&amp;&amp; p) noexcept;</ins>
[&hellip;]
</pre>
</blockquote>
</li>

<li><p>Change <sref ref="[tuple.general]"/>/2 "Header <tt>&lt;tuple&gt;</tt> synopsis" as depicted:</p>

<blockquote>
<pre>
[&hellip;]
<i>// 20.4.2.6, element access:</i>
template &lt;size_t I, class... Types&gt;
constexpr tuple_element_t&lt;I, tuple&lt;Types...&gt;&gt;&amp;
get(tuple&lt;Types...&gt;&amp;) noexcept;
template &lt;size_t I, class... Types&gt;
constexpr tuple_element_t&lt;I, tuple&lt;Types...&gt;&gt;&amp;&amp;
get(tuple&lt;Types...&gt;&amp;&amp;) noexcept;
template &lt;size_t I, class... Types&gt;
constexpr const tuple_element_t&lt;I, tuple&lt;Types...&gt;&gt;&amp;
get(const tuple&lt;Types...&gt;&amp;) noexcept;
<ins>template &lt;size_t I, class... Types&gt;
constexpr const tuple_element_t&lt;I, tuple&lt;Types...&gt;&gt;&amp;&amp;
get(const tuple&lt;Types...&gt;&amp;&amp;) noexcept;</ins>
template &lt;class T, class... Types&gt;
constexpr T&amp; get(tuple&lt;Types...&gt;&amp; t) noexcept;
template &lt;class T, class... Types&gt;
constexpr T&amp;&amp; get(tuple&lt;Types...>&amp;&amp; t) noexcept;
template &lt;class T, class... Types&gt;
constexpr const T&amp; get(const tuple&lt;Types...&gt;&amp; t) noexcept;
<ins>template &lt;class T, class... Types&gt;
constexpr const T&amp;&amp; get(const tuple&lt;Types...&gt;&amp;&amp; t) noexcept;</ins>
[&hellip;]
</pre>
</blockquote>
</li>

<li><p>Change <sref ref="[sequences.general]"/>/2 "Header <tt>&lt;array&gt;</tt> synopsis" as depicted:</p>

<blockquote>
<pre>
[&hellip;]
template &lt;size_t I, class T, size_t N&gt;
constexpr T&amp; get(array&lt;T, N&gt;&amp;) noexcept;
template &lt;size_t I, class T, size_t N&gt;
constexpr T&amp;&amp; get(array&lt;T, N&gt;&amp;&amp;) noexcept;
template &lt;size_t I, class T, size_t N&gt;
constexpr const T&amp; get(const array&lt;T, N&gt;&amp;) noexcept;
<ins>template &lt;size_t I, class T, size_t N&gt;
constexpr const T&amp;&amp; get(const array&lt;T, N&gt;&amp;&amp;) noexcept;</ins>
[&hellip;]
</pre>
</blockquote>
</li>

<li><p>Change <sref ref="[pair.astuple]"/> as depicted:</p>

<blockquote>
<pre>
template&lt;size_t I, class T1, class T2&gt;
constexpr tuple_element_t&lt;I, pair&lt;T1, T2&gt;&gt;&amp;
get(pair&lt;T1, T2&gt;&amp; p) noexcept;
template&lt;size_t I, class T1, class T2&gt;
constexpr const tuple_element_t&lt;I, pair&lt;T1, T2&gt;&gt;&amp;
get(const pair&lt;T1, T2&gt;&amp; p) noexcept;
</pre>
<blockquote>
<p>
<del>-3- <i>Returns</i>: If <tt>I == 0</tt> returns <tt>p.first</tt>; if <tt>I == 1</tt> returns <tt>p.second</tt>; 
otherwise the program is ill-formed.</del>
</p>
</blockquote>
<pre>
template&lt;size_t I, class T1, class T2&gt;
constexpr tuple_element_t&lt;I, pair&lt;T1, T2&gt;&gt;&amp;&amp;
get(pair&lt;T1, T2&gt;&amp;&amp; p) noexcept;
<ins>template&lt;size_t I, class T1, class T2&gt;
constexpr const tuple_element_t&lt;I, pair&lt;T1, T2&gt;&gt;&amp;&amp;
get(const pair&lt;T1, T2&gt;&amp;&amp; p) noexcept;</ins>
</pre>
<blockquote>
<p>
-4- <i>Returns</i>: If <tt>I == 0</tt> returns <ins>a reference to</ins> 
<tt><del>std::forward&lt;T1&amp;&amp;&gt;(</del>p.first<del>)</del></tt>; if <tt>I == 1</tt> 
returns <ins>a reference to</ins> <tt><del>std::forward&lt;T2&amp;&amp;&gt;(</del>p.second<del>)</del></tt>; 
otherwise the program is ill-formed.
</p>
</blockquote>
<pre>
template &lt;class T, class U&gt;
constexpr T&amp; get(pair&lt;T, U&gt;&amp; p) noexcept;
template &lt;class T, class U&gt;
constexpr const T&amp; get(const pair&lt;T, U&gt;&amp; p) noexcept;
</pre>
<blockquote>
<p>
<del>-5- Requires: <tt>T</tt> and <tt>U</tt> are distinct types. Otherwise, the program is ill-formed.</del>
<p/>
<del>-6- Returns: <tt>get&lt;0&gt;(p)</tt>;</del>
</p>
</blockquote>
<pre>
template &lt;class T, class U&gt;
constexpr T&amp;&amp; get(pair&lt;T, U&gt;&amp;&amp; p) noexcept;
<ins>template &lt;class T, class U&gt;
constexpr const T&amp;&amp; get(const pair&lt;T, U&gt;&amp;&amp; p) noexcept;</ins>
</pre>
<blockquote>
<p>
-7- Requires: <tt>T</tt> and <tt>U</tt> are distinct types. Otherwise, the program is ill-formed.
<p/>
-8- Returns: <ins>A reference to <tt>p.first</tt>.</ins><del><tt>get&lt;0&gt;(std::move(p))</tt>;</del>
</p>
</blockquote>
<pre>
template &lt;class T, class U&gt;
constexpr T&amp; get(pair&lt;U, T&gt;&amp; p) noexcept;
template &lt;class T, class U&gt;
constexpr const T&amp; get(const pair&lt;U, T&gt;&amp; p) noexcept;
</pre>
<blockquote>
<p>
<del>-9- Requires: <tt>T</tt> and <tt>U</tt> are distinct types. Otherwise, the program is ill-formed.</del>
<p/>
<del>-10- Returns: <tt>get&lt;1&gt;(p)</tt>;</del>
</p>
</blockquote>
<pre>
template &lt;class T, class U&gt;
constexpr T&amp;&amp; get(pair&lt;U, T&gt;&amp;&amp; p) noexcept;
<ins>template &lt;class T, class U&gt;
constexpr const T&amp;&amp; get(const pair&lt;U, T&gt;&amp;&amp; p) noexcept;</ins>
</pre>
<blockquote>
<p>
-11- Requires: <tt>T</tt> and <tt>U</tt> are distinct types. Otherwise, the program is ill-formed.
<p/>
-12- Returns: <ins>A reference to <tt>p.second</tt>.</ins><del><tt>get&lt;1&gt;(std::move(p))</tt>;</del>
</p>
</blockquote>
</blockquote>
</li>

<li><p>Change <sref ref="[tuple.elem]"/> as depicted:</p>

<blockquote>
<pre>
template &lt;size_t I, class... Types&gt;
  constexpr tuple_element_t&lt;I, tuple&lt;Types...&gt; &gt;&amp; get(tuple&lt;Types...&gt;&amp; t) noexcept;
</pre>
<blockquote>
<p>
<del>-1- <i>Requires</i>: <tt>I &lt; sizeof...(Types)</tt>. The program is ill-formed if <tt>I</tt> is out of bounds.</del>
<p/>
<del>-2- <i>Returns</i>: A reference to the <tt>I</tt>th element of <tt>t</tt>, where indexing is zero-based.</del>
</p>
</blockquote>
<pre>
template &lt;size_t I, class... Types&gt;
  constexpr tuple_element_t&lt;I, tuple&lt;Types...&gt; &gt;&amp;&amp; get(tuple&lt;Types...&gt;&amp;&amp; t) noexcept; <ins><i>// Note A</i></ins>
</pre>
<blockquote>
<p>
<del>-3- <i>Effects</i>: Equivalent to return std::forward&lt;typename tuple_element&lt;I, tuple&lt;Types...&gt; &gt;::type&amp;&amp;&gt;(get&lt;I&gt;(t));</del>
<p/>
<del>-4- <i>Note</i>: if a <tt>T</tt> in <tt>Types</tt> is some reference type <tt>X&amp;</tt>, the return type is <tt>X&amp;</tt>, not 
<tt>X&amp;&amp;</tt>. However, if the element type is a non-reference type <tt>T</tt>, the return type is <tt>T&amp;&amp;</tt>.</del>
</p>
</blockquote>
<pre>
template &lt;size_t I, class... Types&gt;
  constexpr tuple_element_t&lt;I, tuple&lt;Types...&gt; &gt; const&amp; get(const tuple&lt;Types...&gt;&amp; t) noexcept; <ins><i>// Note B</i></ins>
<ins>template &lt;size_t I, class... Types&gt;
  constexpr const tuple_element_t&lt;I, tuple&lt;Types...&gt; &gt;&amp;&amp; get(const tuple&lt;Types...&gt;&amp;&amp; t) noexcept;</ins>  
</pre>
<blockquote>
<p>
-5- <i>Requires</i>: <tt>I &lt; sizeof...(Types)</tt>. The program is ill-formed if <tt>I</tt> is out of bounds.
<p/>
-6- <i>Returns</i>: A <del>const</del> reference to the <tt>I</tt>th element of <tt>t</tt>, where indexing is zero-based.
<p/>
<ins>-?- [<i>Note A</i>: if a <tt>T</tt> in <tt>Types</tt> is some reference type <tt>X&amp;</tt>, the return type is <tt>X&amp;</tt>, 
not <tt>X&amp;&amp;</tt>. However, if the element type is a non-reference type <tt>T</tt>, the return type is <tt>T&amp;&amp;</tt>. 
&mdash; <i>end note</i>]</ins>
<p/>
-7- [<i>Note <ins>B</ins></i>: Constness is shallow. If a <tt>T</tt> in <tt>Types</tt> is some reference type <tt>X&amp;</tt>, 
the return type is <tt>X&amp;</tt>, not <tt>const X&amp;</tt>. However, if the element type is non-reference type <tt>T</tt>, 
the return type is <tt>const T&amp;</tt>. This is consistent with how constness is defined to work for member variables of 
reference type. &mdash; <i>end note</i>]
</p>
</blockquote>
<pre>
template &lt;class T, class... Types&gt;
  constexpr T&amp; get(tuple&lt;Types...&gt;&amp; t) noexcept;
template &lt;class T, class... Types&gt;
  constexpr T&amp;&amp; get(tuple&lt;Types...&gt;&amp;&amp; t) noexcept;
template &lt;class T, class... Types&gt;
  constexpr const T&amp; get(const tuple&lt;Types...&gt;&amp; t) noexcept;
<ins>template &lt;class T, class... Types&gt;
  constexpr const T&amp;&amp; get(const tuple&lt;Types...&gt;&amp;&amp; t) noexcept;</ins>
</pre>
<blockquote>
<p>
-8- <i>Requires</i>: The type <tt>T</tt> occurs exactly once in <tt>Types...</tt>. Otherwise, the program is ill-formed.
<p/>
-9- <i>Returns</i>: A reference to the element of <tt>t</tt> corresponding to the type <tt>T</tt> in <tt>Types...</tt>.
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>

<li><p>Change <sref ref="[array.tuple]"/> as depicted:</p>

<blockquote>
<pre>
template &lt;size_t I, class T, size_t N&gt;
<ins>  </ins>constexpr T&amp; get(array&lt;T, N&gt;&amp; a) noexcept;
</pre>
<blockquote>
<p>
<del>-3- <i>Requires</i>: <tt>I &lt; N</tt>. The program is ill-formed if <tt>I</tt> is out of bounds.</del>
<p/>
<del>-4- <i>Returns</i>: A reference to the <tt>I</tt>th element of <tt>a</tt>, where indexing is zero-based.</del>
</p>
</blockquote>
<pre>
template &lt;size_t I, class T, size_t N&gt;
<ins>  </ins>constexpr T&amp;&amp; get(array&lt;T, N&gt;&amp;&amp; a) noexcept;
</pre>
<blockquote>
<p>
<del>-5- <i>Effects</i>: Equivalent to <tt>return std::move(get&lt;I&gt;(a));</tt></del>
</p>
</blockquote>
<pre>
template &lt;size_t I, class T, size_t N&gt;
<ins>  </ins>constexpr const T&amp; get(const array&lt;T, N&gt;&amp; a) noexcept;
<ins>template &lt;size_t I, class T, size_t N&gt;
  constexpr const T&amp;&amp; get(const array&lt;T, N&gt;&amp;&amp; a) noexcept;</ins>
</pre>
<blockquote>
<p>
-6- <i>Requires</i>: <tt>I &lt; N</tt>. The program is ill-formed if <tt>I</tt> is out of bounds.
<p/>
-7- <i>Returns</i>: A <del>const</del> reference to the <tt>I</tt>th element of <tt>a</tt>, where indexing is zero-based.
</p>
</blockquote>
</blockquote>
</li>


</ol>

</resolution>

</issue>
