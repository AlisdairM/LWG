<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3526" status="Voting">
<title>Return types of <tt>uses_allocator_construction_args</tt> unspecified</title>
<section><sref ref="[allocator.uses.construction]"/></section>
<submitter>Casey Carter</submitter>
<date>25 Feb 2021</date>
<priority>3</priority>

<discussion>
<p>
The synopsis of <tt>&lt;memory&gt;</tt> in <sref ref="[memory.syn]"/> declares six overloads of 
<tt>uses_allocator_construction_args</tt> with return types "<i>see below</i>":
</p>
<blockquote><pre>
template&lt;class T, class Alloc, class... Args&gt;
  constexpr auto uses_allocator_construction_args(const Alloc&amp; alloc,
                                                  Args&amp;&amp;... args) noexcept -&gt; <i>see below</i>;
template&lt;class T, class Alloc, class Tuple1, class Tuple2&gt;>
  constexpr auto uses_allocator_construction_args(const Alloc&amp; alloc, piecewise_construct_t,
                                                  Tuple1&amp;&amp; x, Tuple2&amp;&amp; y)
                                                  noexcept -&gt; see below;
template&lt;class T, class Alloc&gt;
  constexpr auto uses_allocator_construction_args(const Alloc&amp; alloc) noexcept -&gt; <i>see below</i>;
template&lt;class T, class Alloc, class U, class V&gt;
  constexpr auto uses_allocator_construction_args(const Alloc&amp; alloc,
                                                  U&amp;&amp; u, V&amp;&amp; v) noexcept -&gt; <i>see below</i>;
template&lt;class T, class Alloc, class U, class V&gt;
  constexpr auto uses_allocator_construction_args(const Alloc&amp; alloc,
                                                  const pair&lt;U, V&gt;&amp; pr) noexcept -&gt; <i>see below</i>;
template&lt;class T, class Alloc, class U, class V>
  constexpr auto uses_allocator_construction_args(const Alloc&amp; alloc,
                                                  pair&lt;U, V&gt;&amp;&amp; pr) noexcept -&gt; <i>see below</i>;
</pre></blockquote>
<p>
The "<i>see below</i>s" also appear in the detailed specification of these overloaded function templates 
in <sref ref="[allocator.uses.construction]"/> para 4 through 15. Despite that the values these function 
templates return are specified therein, the return types are not. Presumably LWG wanted to specify deduced 
return types, but couldn't figure out how to do so, and just gave up?
</p>

<note>2021-02-27; Daniel comments and provides wording</note>
<p>
My interpretation is that the appearance of the <i>trailing-return-type</i> was actually unintended and that
these functions where supposed to use the return type placeholder to signal the intention that the actual
return type is deduced by the consistent sum of all return statements as they appear in the prototype specifications.
Given that at least one implementation has indeed realized this form, I suggest to simply adjust the specification
to remove the <i>trailing-return-type</i>. Specification-wise we have already existing practice for this 
approach (See e.g. <tt>to_address</tt>).
</p>

<note>2021-03-12; Reflector poll</note>
<p>
Set priority to 3 following reflector poll.
</p>


<note>2021-05-26; Reflector poll</note>
<p>
Set status to Tentatively Ready after nine votes in favour during reflector poll.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4878">N4878</a>.
</p>

<ol>
<li><p>Edit <sref ref="[memory.syn]"/>, header <tt>&lt;memory&gt;</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
namespace std {
  [&hellip;]
  <i>// <sref ref="[allocator.uses.construction]"/>, uses-allocator construction</i>
  template&lt;class T, class Alloc, class... Args&gt;
    constexpr auto uses_allocator_construction_args(const Alloc&amp; alloc,
                                                    Args&amp;&amp;... args) noexcept <del>-&gt; <i>see below</i></del>;
  template&lt;class T, class Alloc, class Tuple1, class Tuple2&gt;
    constexpr auto uses_allocator_construction_args(const Alloc&amp; alloc, piecewise_construct_t,
                                                    Tuple1&amp;&amp; x, Tuple2&amp;&amp; y)
                                                    noexcept <del>-&gt; <i>see below</i></del>;
  template&lt;class T, class Alloc&gt;
    constexpr auto uses_allocator_construction_args(const Alloc&amp; alloc) noexcept <del>-&gt; <i>see below</i></del>;
  template&lt;class T, class Alloc, class U, class V&gt;
    constexpr auto uses_allocator_construction_args(const Alloc&amp; alloc,
                                                    U&amp;&amp; u, V&amp;&amp; v) noexcept <del>-&gt; <i>see below</i></del>;
  template&lt;class T, class Alloc, class U, class V&gt;
    constexpr auto uses_allocator_construction_args(const Alloc&amp; alloc,
                                                    const pair&lt;U, V&gt;&amp; pr) noexcept <del>-&gt; <i>see below</i></del>;
  template&lt;class T, class Alloc, class U, class V&gt;
    constexpr auto uses_allocator_construction_args(const Alloc&amp; alloc,
                                                    pair&lt;U, V&gt;&amp;&amp; pr) noexcept <del>-&gt; <i>see below</i></del>;   
  [&hellip;]
}
</pre>
</blockquote>
</li>

<li><p>Edit <sref ref="[allocator.uses.construction]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class T, class Alloc, class... Args&gt;
  constexpr auto uses_allocator_construction_args(const Alloc&amp; alloc,
                                                  Args&amp;&amp;... args) noexcept <del>-&gt; <i>see below</i></del>;
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-5- <i>Returns:</i> A <tt>tuple</tt> value determined as follows:
</p>
<ol style="list-style-type: none">
<li><p>(5.1) &mdash; if [&hellip;], return <tt>forward_as_tuple(std::forward&lt;Args&gt;(args)...)</tt>.</p></li>
<li><p>(5.2) &mdash; Otherwise, if [&hellip;], return</p>
<blockquote><pre>
tuple&lt;allocator_arg_t, const Alloc&amp;, Args&amp;&amp;...&gt;(
  allocator_arg, alloc, std::forward&lt;Args&gt;(args)...)
</pre></blockquote>
</li>
<li><p>(5.3) &mdash; Otherwise, if [&hellip;], return <tt>forward_as_tuple(std::forward&lt;Args&gt;(args)..., alloc)</tt>.</p></li>
<li><p>(5.4) &mdash; Otherwise, the program is ill-formed.</p></li>
</ol>
</blockquote>
<pre>
template&lt;class T, class Alloc, class Tuple1, class Tuple2&gt;
  constexpr auto uses_allocator_construction_args(const Alloc&amp; alloc, piecewise_construct_t,
                                                  Tuple1&amp;&amp; x, Tuple2&amp;&amp; y)
                                                  noexcept <del>-&gt; <i>see below</i></del>;
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-7- <i>Effects:</i> For <tt>T</tt> specified as <tt>pair&lt;T1, T2&gt;</tt>, equivalent to:
</p>
<blockquote><pre>
return make_tuple(
  piecewise_construct,
  apply([&amp;alloc](auto&amp;&amp;... args1) {
          return uses_allocator_construction_args&lt;T1&gt;(
            alloc, std::forward&lt;decltype(args1)&gt;(args1)...);
        }, std::forward&lt;Tuple1&gt;(x)),
  apply([&amp;alloc](auto&amp;&amp;... args2) {
          return uses_allocator_construction_args&lt;T2&gt;(
            alloc, std::forward&lt;decltype(args2)&gt;(args2)...);
        }, std::forward&lt;Tuple2&gt;(y)));
</pre></blockquote>
</blockquote>
<pre>
template&lt;class T, class Alloc&gt;
  constexpr auto uses_allocator_construction_args(const Alloc&amp; alloc) noexcept <del>-&gt; <i>see below</i></del>;
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-9- <i>Effects:</i> Equivalent to:
</p>
<blockquote><pre>
return uses_allocator_construction_args&lt;T&gt;(alloc, piecewise_construct,
                                           tuple&lt;&gt;{}, tuple&lt;&gt;{});
</pre></blockquote>
</blockquote>
<pre>
template&lt;class T, class Alloc, class U, class V&gt;
  constexpr auto uses_allocator_construction_args(const Alloc&amp; alloc,
                                                  U&amp;&amp; u, V&amp;&amp; v) noexcept <del>-&gt; <i>see below</i></del>;
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-11- <i>Effects:</i> Equivalent to:
</p>
<blockquote><pre>
return uses_allocator_construction_args&lt;T&gt;(alloc, piecewise_construct,
                                           forward_as_tuple(std::forward&lt;U&gt;(u)),
                                           forward_as_tuple(std::forward&lt;V&gt;(v));
</pre></blockquote>
</blockquote>
<pre>
template&lt;class T, class Alloc, class U, class V&gt;
  constexpr auto uses_allocator_construction_args(const Alloc&amp; alloc,
                                                  const pair&lt;U, V&gt;&amp; pr) noexcept <del>-&gt; <i>see below</i></del>;
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-13- <i>Effects:</i> Equivalent to:
</p>
<blockquote><pre>
return uses_allocator_construction_args&lt;T&gt;(alloc, piecewise_construct,
                                           forward_as_tuple(pr.first),
                                           forward_as_tuple(pr.second));
</pre></blockquote>
</blockquote>
<pre>
template&lt;class T, class Alloc, class U, class V&gt;
  constexpr auto uses_allocator_construction_args(const Alloc&amp; alloc,
                                                  pair&lt;U, V&gt;&amp;&amp; pr) noexcept <del>-&gt; <i>see below</i></del>;
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-15- <i>Effects:</i> Equivalent to:
</p>
<blockquote><pre>
return uses_allocator_construction_args&lt;T&gt;(alloc, piecewise_construct,
                                           forward_as_tuple(std::move(pr).first),
                                           forward_as_tuple(std::move(pr).second));
</pre></blockquote>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
