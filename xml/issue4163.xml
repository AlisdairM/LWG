<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4163" status="Tentatively NAD">
<title>Can the overload of <tt>std::num_get::do_get</tt> for <tt>bool</tt> call the overload for <tt>long</tt>?</title>
<section><sref ref="[facet.num.get.virtuals]"/></section>
<submitter>Jiang An</submitter>
<date>29 Sep 2024</date>
<priority>99</priority>

<discussion>
<p>
<sref ref="[facet.num.get.virtuals]"/>/6 currently says:
</p>
<blockquote style="border-left: 3px solid #ccc;padding-left: 15px;">
<p>
<i>Effects</i>: If <tt>(str.flags()&amp;ios_base::boolalpha) == 0</tt> then input proceeds as it would for a 
<tt>long</tt> except that if a value is being stored into <tt>val</tt>, [&hellip;]
</p>
</blockquote>
<p>
It is unclear whether an implementation is allowed to call the overload for <tt>long</tt> in this case. 
Currently, libc++'s version calls that overload, while libstdc++ and MSVC STL's don't 
(<a href="https://godbolt.org/z/83M1hKThv">example</a>).
<p/>
As the divergence implementation strategies is observable, perhaps we should clarify on this.
</p>

<note>2025-02-07; Reflector poll: NAD</note>
<p>
I think this is just a libc++ bug.
The wording says it "proceeds as it would for `long`", which is not the same as
actually making a virtual call to `do_get` for `long`. It can either duplicate
the code from `do_get` for `long`, or make a non-virtual (i.e. qualified) call
to `num_get::do_get`.
</p>

</discussion>

<resolution>
</resolution>

</issue>
