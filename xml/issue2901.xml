<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2901" status="New">
<title>Variants cannot properly support allocators</title>
<section><sref ref="[variant.variant]"/></section>
<submitter>United States</submitter>
<date>3 Feb 2017</date>
<priority>99</priority>

<discussion>
<b>Addresses US 113</b>

<p>Variants cannot properly support allocators, as any assignment of a subsequent value throws away the allocator used at 
construction. This is not an easy problem to solve, so <tt>variant</tt> would be better served dropping the illusion of 
allocator support for now, leaving open the possibility to provide proper support once the problems are fully understood.</p>

<p>Proposed change: Strike the 8 allocator aware constructor overloads from the class definition, and strike 
20.7.2.1 [variant.ctor] p34/35. Strike clause 20.7.12 [variant.traits]. Strike the specialization of 
<tt>uses_allocator</tt> for <tt>variant</tt> in the <tt>&lt;variant&gt;</tt> header synopsis, 20.7.1 [variant.general].</p>

<note>2017-02-28, Kona, Casey provides wording</note>
<p>
</p>
</discussion>

<resolution>
<p>
This wording is relative to <a href="http://wg21.link/n4640">N4640</a>.
</p>

<ol>
<li><p>Change <sref ref="[variant.syn]"/>, header <tt>&lt;variant&gt;</tt>  synopsis, as follows:</p>

<blockquote><pre>
[&hellip;]
<del><i>// 20.7.13, allocator-related traits</i>
template &lt;class T, class Alloc&gt; struct uses_allocator;
template &lt;class... Types, class Alloc&gt; struct uses_allocator&lt;variant&lt;Types...&gt;, Alloc&gt;;</del>
</pre></blockquote>
</li>

<li><p>Change <sref ref="[variant.variant]"/>, class template <tt>variant</tt>  synopsis, as follows:</p>

<blockquote><pre>
[&hellip;]
<del><i>// allocator-extended constructors</i>
template &amp;lt;class Alloc&amp;gt;
  variant(allocator_arg_t, const Alloc&amp;);
template &amp;lt;class Alloc&amp;gt;
  variant(allocator_arg_t, const Alloc&amp;, const variant&amp;);
template &amp;lt;class Alloc&amp;gt;
  variant(allocator_arg_t, const Alloc&amp;, variant&amp;&amp;);
template &amp;lt;class Alloc, class T&amp;gt;
  variant(allocator_arg_t, const Alloc&amp;, T&amp;&amp;);
template &amp;lt;class Alloc, class T, class... Args&amp;gt;
  variant(allocator_arg_t, const Alloc&amp;, in_place_type_t&amp;lt;T&amp;gt;, Args&amp;&amp;...);
template &amp;lt;class Alloc, class T, class U, class... Args&amp;gt;
  variant(allocator_arg_t, const Alloc&amp;, in_place_type_t&amp;lt;T&amp;gt;,
          initializer_list&amp;lt;U&amp;gt;, Args&amp;&amp;...);
template &amp;lt;class Alloc, size_t I, class... Args&amp;gt;
  variant(allocator_arg_t, const Alloc&amp;, in_place_index_t&amp;lt;I&amp;gt;, Args&amp;&amp;...);
template &amp;lt;class Alloc, size_t I, class U, class... Args&amp;gt;
  variant(allocator_arg_t, const Alloc&amp;, in_place_index_t&amp;lt;I&amp;gt;,
          initializer_list&amp;lt;U&amp;gt;, Args&amp;&amp;...);</del>
</pre></blockquote>
</li>

<li><p>Modify <sref ref="[variant.ctor]"/> as indicated:</p>
<blockquote><pre>
<del>template &amp;lt;class Alloc&amp;gt;
  variant(allocator_arg_t, const Alloc&amp; a);
template &amp;lt;class Alloc&amp;gt;
  variant(allocator_arg_t, const Alloc&amp; a, const variant&amp; v);
template &amp;lt;class Alloc&amp;gt;
  variant(allocator_arg_t, const Alloc&amp; a, variant&amp;&amp; v);
template &amp;lt;class Alloc, class T&amp;gt;
  variant(allocator_arg_t, const Alloc&amp; a, T&amp;&amp; t);
template &amp;lt;class Alloc, class T, class... Args&amp;gt;
  variant(allocator_arg_t, const Alloc&amp; a, in_place_type_t&amp;lt;T&amp;gt;, Args&amp;&amp;... args);
template &amp;lt;class Alloc, class T, class U, class... Args&amp;gt;
  variant(allocator_arg_t, const Alloc&amp; a, in_place_type_t&amp;lt;T&amp;gt;,
          initializer_list&amp;lt;U&amp;gt; il, Args&amp;&amp;... args);
template &amp;lt;class Alloc, size_t I, class... Args&amp;gt;
  variant(allocator_arg_t, const Alloc&amp; a, in_place_index_t&amp;lt;I&amp;gt;, Args&amp;&amp;... args);
template &amp;lt;class Alloc, size_t I, class U, class... Args&amp;gt;
  variant(allocator_arg_t, const Alloc&amp; a, in_place_index_t&amp;lt;I&amp;gt;,
          initializer_list&amp;lt;U&amp;gt; il, Args&amp;&amp;... args);</del>

</pre>
<blockquote>
<p>
<del>-34- <i>Requires:</i> <tt>Alloc</tt> shall meet the requirements for an Allocator (17.5.3.5).</del>
<p/>
<del>-35- <i>Effects:</i> Equivalent to the preceding constructors except that the contained value is constructed with
uses-allocator construction (20.10.7.2).</del>
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[variant.traits]"/> as indicated:</p>

<blockquote>
<pre>
<del>template &lt;class... Types, class Alloc&gt;
struct uses_allocator&lt;variant&lt;Types...&gt;, Alloc&gt; : true_type { };</del>
</pre>
<blockquote>
<p>
<del>-1- <i>Requires:</i> <tt>Alloc</tt> shall be an Allocator (17.5.3.5).</del>
<p/>
<del>-2- [<i>Note:</i> Specialization of this trait informs other library components that variant can be constructed
with an allocator, even though it does not have a nested <tt>allocator_type</tt>. &mdash; <i>end note</i>]</del>
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
