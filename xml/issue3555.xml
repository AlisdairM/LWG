<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3555" status="Tentatively Ready">
<title><tt>{transform,elements}_view::<i>iterator</i>::iterator_concept</tt>
should consider const-qualification of the underlying range</title>
<section><sref ref="[range.transform.iterator]"/>
<sref ref="[range.elements.iterator]"/></section>
<submitter>Tim Song</submitter>
<date>23 May 2021</date>
<priority>99</priority>

<discussion>
<p>
<tt>transform_view::<i>iterator&lt;true&gt;</i>::iterator_concept</tt> and
<tt>elements_view::<i>iterator&lt;true&gt;</i>::iterator_concept</tt> (i.e.,
the const versions) are currently specified as looking at the properties of <tt>V</tt>
(i.e., the underlying view without const), while the actual iterator operations
are all correctly specified as using <tt><i>Base</i></tt> (which includes
the const). <tt>iterator_concept</tt> should do so too.
<p/>
The proposed resolution has been implemented and tested on top of libstdc++.
</p>

<note>2021-05-26; Reflector poll</note>
<p>
Set status to Tentatively Ready after six votes in favour during reflector poll.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4885"/>.
</p>
<ol>
<li>
<p>Modify <sref ref="[range.transform.iterator]"/> as indicated:</p>
<blockquote>
<p>-1- <tt>iterator::iterator_concept</tt> is defined as follows: </p>
<ol style="list-style-type: none">
<li><p>(1.1) &mdash; If <tt><del>V</del><ins><i>Base</i></ins></tt> models <tt>random_access_range</tt>, then
<tt>iterator_concept</tt> denotes <tt>random_access_iterator_tag</tt>.</p></li>
<li><p>(1.2) &mdash; Otherwise, if <tt><del>V</del><ins><i>Base</i></ins></tt> models <tt>bidirectional_range</tt>,
then <tt>iterator_concept</tt> denotes <tt>bidirectional_iterator_tag</tt>.</p></li>
<li><p>(1.3) &mdash; Otherwise, if <tt><del>V</del><ins><i>Base</i></ins></tt> models <tt>forward_range</tt>,
then <tt>iterator_concept</tt> denotes <tt>forward_iterator_tag</tt>.</p></li>
<li><p>(1.4) &mdash; Otherwise, <tt>iterator_concept</tt> denotes <tt>input_iterator_tag</tt>.</p></li>
</ol>
</blockquote>
</li>
<li>
<p>Modify <sref ref="[range.elements.iterator]"/> as indicated:</p>
<blockquote>
<p>-1- The member <i>typedef-name</i> <tt>iterator_concept</tt> is defined as follows: </p>
<ol style="list-style-type: none">
<li><p>(1.1) &mdash; If <tt><del>V</del><ins><i>Base</i></ins></tt> models <tt>random_access_range</tt>, then
<tt>iterator_concept</tt> denotes <tt>random_access_iterator_tag</tt>.</p></li>
<li><p>(1.2) &mdash; Otherwise, if <tt><del>V</del><ins><i>Base</i></ins></tt> models <tt>bidirectional_range</tt>,
then <tt>iterator_concept</tt> denotes <tt>bidirectional_iterator_tag</tt>.</p></li>
<li><p>(1.3) &mdash; Otherwise, if <tt><del>V</del><ins><i>Base</i></ins></tt> models <tt>forward_range</tt>,
then <tt>iterator_concept</tt> denotes <tt>forward_iterator_tag</tt>.</p></li>
<li><p>(1.4) &mdash; Otherwise, <tt>iterator_concept</tt> denotes <tt>input_iterator_tag</tt>.</p></li>
</ol>
</blockquote>
</li>
</ol>
</resolution>
</issue>
