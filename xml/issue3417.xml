<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3417" status="SG1">
<title>Missing <tt>volatile</tt> atomic deprecations</title>
<section><sref ref="[atomics.types.operations]"/></section>
<submitter>Alisdair Meredith</submitter>
<date>19 Mar 2020</date>
<priority>3</priority>

<discussion>
<p>
Paper <a href="http://wg21.link/p1831r1">P1831R1</a> aimed to deprecate all 
the atomic overloads for <tt>volatile</tt> qualified member function of 
<tt>std::atomic</tt> unless <tt>is_always_lock_free</tt> is <tt>true</tt>. 
There are a few omissions in the wording.
<p/>
First, <tt>operator++</tt> and <tt>operator--</tt> are correctly constrained, 
but the deprecated overloads are not restored in Annex D, unlike the other
member functions. I confirmed with the paper author this is an accidental 
oversight, and not an intended change of behavior for C++20.
<p/>
Secondly, the wait/notify APIs were added after the initial wording
For this paper was drafted, and the paper did not catch up. Again, I 
confirmed with the paper author that these functions should be
similarly constrained and deprecated.
</p>

<note>2020-04-04 Issue Prioritization</note>
<p>Priority to 3 after reflector discussion. The suggested wording was generally accepted, but there
were considerable doubts that it is necessary to add deprecated functions of the new <tt>wait/notify</tt>
functions instead of declaring only the non-volatile overloads. The wish was expressed that both SG1 and 
LEWG should express their opinion here.</p>
</discussion>

<resolution>
<p>
This wording is relative to <a href="http://wg21.link/n4861">N4861</a>.
</p>

<ol>
<li><p>Modify <sref ref="[atomics.types.operations]"/> as indicated:</p>

<blockquote>
<pre>
void wait(T old, memory_order order = memory_order::seq_cst) const volatile noexcept;
void wait(T old, memory_order order = memory_order::seq_cst) const noexcept;
</pre>
<blockquote>
<p>
<ins><i>Constraints:</i> For the <tt>volatile</tt> overload of this function, <tt>is_always_lock_free</tt> is <tt>true</tt>.</ins>
<p/>
-29- <i>Preconditions:</i> [&hellip;]
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
void notify_one() volatile noexcept;
void notify_one() noexcept;
</pre>
<blockquote>
<p>
<ins><i>Constraints:</i> For the <tt>volatile</tt> overload of this function, <tt>is_always_lock_free</tt> is <tt>true</tt>.</ins>
<p/>
-32- <i>Effects:</i> [&hellip;]
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
void notify_all() volatile noexcept;
void notify_all() noexcept;
</pre>
<blockquote>
<p>
<ins><i>Constraints:</i> For the <tt>volatile</tt> overload of this function, <tt>is_always_lock_free</tt> is <tt>true</tt>.</ins>
<p/>
-34- <i>Effects:</i> [&hellip;]
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[depr.atomics.volatile]"/>, annex D, as indicated:</p>

<blockquote>
<p>
If an atomic specialization has one of the following overloads, then that overload participates in overload
resolution even if <tt>atomic&lt;T&gt;::is_always_lock_free</tt> is <tt>false</tt>:
</p>
<blockquote>
<pre>
void store(T desired, memory_order order = memory_order::seq_cst) volatile noexcept;
[&hellip;]
T* fetch_<i>key</i>(ptrdiff_t operand, memory_order order = memory_order::seq_cst) volatile noexcept;
<ins>value_type operator++(int) volatile noexcept;
value_type operator--(int) volatile noexcept;
value_type operator++() volatile noexcept;
value_type operator--() volatile noexcept;
void wait(T old, memory_order order = memory_order::seq_cst) const volatile noexcept;
void notify_one() volatile noexcept;
void notify_all() volatile noexcept;</ins>
</pre>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>
</issue>
