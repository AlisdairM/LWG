<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3854" status="New">
<title>&sect;[res.on.exception.handling]/3 should not be applied to all standard library types</title>
<section><sref ref="[res.on.exception.handling]"/></section>
<submitter>Jiang An</submitter>
<date>07 Jan 2023</date>
<priority>99</priority>

<discussion>
<p>
Some standard library types, such as <tt>std::pair</tt>, <tt>std::tuple</tt>, and <tt>std::array</tt>, 
are currently allowed to have a member or element type with a destructor that is <tt>noexcept(false)</tt>. 
In order to conform to <sref ref="[res.on.exception.handling]"/>/3, these types can't always have 
implicitly declared destructors because the implicit exception specification may be <tt>noexcept(false)</tt>.
<p/>
However, it may be intentional to implement these types with implicitly declared destructors, and 
mainstream implementations (libc++, libstdc++, and MSVC STL) are already doing so.
<p/>
Furtherly, explicitly declared destructors are not allowed for algorithm result types 
(<sref ref="[algorithms.results]"/>), while currently these class templates are allowed to be instantiated 
with classes with potentially throwing destructors, which is contradictory to <sref ref="[res.on.exception.handling]"/>/3.
</p>

<note>2023-01-29; Daniel comments</note>
<p>
This issue has very much overlap with LWG <iref ref="3229"/>.
</p>
</discussion>

<resolution>
</resolution>

</issue>
