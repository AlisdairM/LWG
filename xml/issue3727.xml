<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3727" status="NAD">
<title><tt>reverse_iterator</tt>/<tt>common_iterator</tt>'s <tt>operator-&gt;</tt> should not require the underlying iterator's <tt>operator-&gt;</tt> to be a <tt>const</tt> member function</title>
<section><sref ref="[reverse.iter.elem]"/><sref ref="[common.iter.access]"/></section>
<submitter>Hewill Kang</submitter>
<date>27 Jun 2022</date>
<priority>99</priority>

<discussion>
<p>
For non-pointer types, <tt>reverse_iterator::operator-&gt;</tt> requires that the <tt>Iterator</tt> 
must have an <tt>operator-&gt;()</tt> with <tt>const</tt>-qualifier, whereas in the <i>Effects</i> clause, 
it always invokes the non-<tt>const</tt> object's <tt>operator-&gt;()</tt>.
<p/>
<tt>common_iterator::operator-&gt;</tt> also requires that <tt>I::operator-&gt;()</tt> must be 
<tt>const</tt>-qualified, which seems reasonable since the return type of <tt>get&lt;I&gt;(v_)</tt> 
is <tt>const I&amp;</tt>. However, LWG <iref ref="3672"/> makes <tt>common_iterator::operator-&gt;()</tt> 
always return a value, which makes it unnecessary to detect the constness of <tt>I::operator-&gt;()</tt>, 
because it will be invoked with a non-<tt>const</tt> returned object anyway.
<p/>
I think we should remove this constraint as I don't see the benefit of doing that.
Constraining iterator's <tt>operator-&gt;()</tt> to be <tt>const</tt> and finally invoking non-<tt>const</tt> 
overload doesn't feel right to me either. In <tt>&lt;ranges&gt;</tt>, the exposition-only constraint 
<tt><i>has-arrow</i></tt> (<sref ref="[range.utility.helpers]"/>) for <tt>operator-&gt;()</tt> does not 
require that the underlying iterator's <tt>operator-&gt;()</tt> to be <tt>const</tt>, we should make them 
consistent, and I believe this relaxation of constraints can bring some value.
<p/>
<b>Daniel:</b>
<p/>
This issue's second part of the resolution actually depends on <iref ref="3672"/> being applied. But
note that the reference wording below is still <paper num="N4910"/>.
</p>

<note>2022-08-23; Reflector poll: NAD</note>
<p>
Implicit variations apply to those <i>requires-expressions</i>,
so calling as non-const (and rvalue) is fine.
The PR actually loses that property and makes those overloads truly underconstrained.
Motivation for relaxing it is vague.
As for consistency, we should fix has-arrow instead.
</p>

<note>2022-11-30 LWG telecon. Status changed: Tentatively NAD &rarr; NAD.</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4910"/>.
</p>

<ol>
<li><p>Modify <sref ref="[reverse.iter.elem]"/> as indicated:</p>

<blockquote>
<pre>
constexpr pointer operator-&gt;() const
  requires (is_pointer_v&lt;Iterator&gt; ||
            requires(<del>const</del> Iterator i) { i.operator-&gt;(); });
</pre>
<blockquote>
<p>
-2- <i>Effects</i>:
</p>
<ol style="list-style-type: none">
<li><p>(2.1) &mdash; If <tt>Iterator</tt> is a pointer type, equivalent to: <tt>return prev(current);</tt></p></li>
<li><p>(2.2) &mdash; Otherwise, equivalent to: <tt>return prev(current).operator-&gt;();</tt></p>
</li>
</ol>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[common.iter.access]"/> as indicated:</p>

<blockquote>
<pre>
constexpr decltype(auto) operator-&gt;() const
  requires <i>see below</i>;
</pre>
  <blockquote>
  <p>
  -3- The expression in the <i>requires-clause</i> is equivalent to:
  </p>
  <blockquote><pre>
  indirectly_readable&lt;const I&gt; &amp;&amp;
  (requires(<del>const</del> I<del>&amp;</del> i) { i.operator-&gt;(); } ||
  is_reference_v&lt;iter_reference_t&lt;I&gt;&gt; ||
  constructible_from&lt;iter_value_t&lt;I&gt;, iter_reference_t&lt;I&gt;&gt;)
  </pre></blockquote>
  <p>
  -4- <i>Preconditions</i>: <tt>holds_alternative&lt;I&gt;(v_)</tt> is <tt>true</tt>.
  <p/>
  -5- <i>Effects</i>:
  </p>
  <ol style="list-style-type: none">
  <li><p>(5.1) &mdash; If <tt>I</tt> is a pointer type or if <del>the expression 
  <tt>get&lt;I&gt;(v_).operator-&gt;()</tt> is 
  well-formed</del><ins><tt>requires(I i) { i.operator-&gt;(); }</tt> is <tt>true</tt></ins>, 
  equivalent to: <tt>return get&lt;I&gt;(v_);</tt>  
  </p></li>
  <li><p>(5.2) &mdash; Otherwise, if <tt>iter_reference_t&lt;I&gt;</tt> is a reference type, equivalent to:</p>
  <blockquote><pre>
  auto&amp;&amp; tmp = *get&lt;I&gt;(v_);
  return addressof(tmp);
  </pre></blockquote>
  </li>
  <li><p>(5.3) &mdash; Otherwise, equivalent to: <tt>return <i>proxy</i>(*get&lt;I&gt;(v_));</tt> where 
  <tt><i>proxy</i></tt> is the exposition-only class:</p>
  <blockquote><pre>
  class <i>proxy</i> {
    iter_value_t&lt;I&gt; keep_;
    constexpr <i>proxy</i>(iter_reference_t&lt;I&gt;&amp;&amp; x)
      : keep_(std::move(x)) {}
  public:
    constexpr const iter_value_t&lt;I&gt;* operator-&gt;() const noexcept {
      return addressof(keep_);
    }
  };
  </pre></blockquote>
  </li>
  </ol>
  <p>
  [&hellip;]
  </p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
