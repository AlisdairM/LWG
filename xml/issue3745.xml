<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3745" status="C++23">
<title><tt>std::atomic_wait</tt> and its friends lack <tt>noexcept</tt></title>
<section><sref ref="[atomics.syn]"/></section>
<submitter>Jiang An</submitter>
<date>25 Jul 2022</date>
<priority>99</priority>

<discussion>
<p>
Currently function templates <tt>std::atomic_wait</tt>, <tt>std::atomic_wait_explicit</tt>, 
<tt>std::atomic_notify_one</tt>, and <tt>std::atomic_notify_all</tt> are not <tt>noexcept</tt> 
in the Working Draft, but the equivalent member functions are all <tt>noexcept</tt>. I think 
these function templates should be specified as <tt>noexcept</tt>, in order to be consistent 
with the <tt>std::atomic_flag_*</tt> free functions, the corresponding member functions, and 
other <tt>std::atomic_*</tt> function templates.
<p/>
Mainstream implementations (libc++, libstdc++, and MSVC STL) have already added <tt>noexcept</tt> 
to them.
</p>

<note>2022-07-30; Daniel provides wording</note>

<note>2022-08-23; Reflector poll</note>
<p>
Set status to Tentatively Ready after six votes in favour during reflector poll.
</p>
<p>
"Technically there's a difference between these and the member functions -
the pointer can be null - but we don't seem to have let that stop us
from adding noexcept to the rest of these functions."
</p>

<note>2022-11-12 Approved at November 2022 meeting in Kona. Status changed: Voting &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4910"/>.
</p>

<ol>
<li><p>Modify <sref ref="[atomics.syn]"/>, header <tt>&lt;atomic&gt;</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
[&hellip;]
template&lt;class T&gt;
  void atomic_wait(const volatile atomic&lt;T&gt;*, typename atomic&lt;T&gt;::value_type) <ins>noexcept</ins>;
template&lt;class T&gt;
  void atomic_wait(const atomic&lt;T&gt;*, typename atomic&lt;T&gt;::value_type) <ins>noexcept</ins>;
template&lt;class T&gt;
  void atomic_wait_explicit(const volatile atomic&lt;T&gt;*, typename atomic&lt;T&gt;::value_type,
                            memory_order) <ins>noexcept</ins>;
template&lt;class T&gt;
  void atomic_wait_explicit(const atomic&lt;T&gt;*, typename atomic&lt;T&gt;::value_type,
                            memory_order) <ins>noexcept</ins>;
template&lt;class T&gt;
  void atomic_notify_one(volatile atomic&lt;T&gt;*) <ins>noexcept</ins>;
template&lt;class T&gt;
  void atomic_notify_one(atomic&lt;T&gt;*) <ins>noexcept</ins>;
template&lt;class T&gt;
  void atomic_notify_all(volatile atomic&lt;T&gt;*) <ins>noexcept</ins>;
template&lt;class T&gt;
  void atomic_notify_all(atomic&lt;T&gt;*) <ins>noexcept</ins>;
[&hellip;]
</pre>
</blockquote>
</li>
</ol>
</resolution>

</issue>
