<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4121" status="New">
<title><code>ranges::to</code> constructs associative containers via <code>c.emplace(c.end(), *it)</code></title>
<section><sref ref="[range.utility.conv.general]"/></section>
<submitter>Hewill Kang</submitter>
<date>16 Jul 2024</date>
<priority>2</priority>

<discussion>
<p>
When <code>ranges::to</code> constructs an associative container, if there is no range version constructor 
for <code>C</code> and the input range is not common range, <code>ranges::to</code> will dispatch to the
bullet <sref ref="[range.utility.conv.to]"/> (2.1.4), which first default-constructs the container 
and emplaces the element through <code>c.emplace(c.end(), *it)</code>.
<p/>
However, this is not the correct way to call <code>emplace()</code> on an associative container as it does 
not expect an iterator as the first argument, and since <code>map::emplace()</code>, for instance, is not 
constrained, which turns out a hard error because we are trying to make a <code>pair</code> with 
<code>{it, pair}</code>.
<p/>
Given that libstdc++ currently does not implement the range constructor for associative containers, the following
illustrates the <a href="https://godbolt.org/z/q8MzP8bb1">issue</a>:
</p>
<blockquote><pre>
#include &lt;ranges&gt;
#include &lt;set&gt;
  
auto s = std::views::iota(0)
       | std::views::take(5)
       | std::ranges::to&lt;std::set&gt;(); // <span  style="color:#C80000;font-weight:bold">hard error</span>
</pre></blockquote>
<p>
The proposed resolution simply removes the <code>emplace()</code> branch. Although this means that we always use
<code>insert()</code> to fill associative containers, such an impact seems negligible.
</p>

<note>2024-07-23; This was caused by LWG <iref ref="4016"/>.</note>


<note>2024-08-02; Reflector poll</note>
<p>
Set priority to 2 after reflector poll.
"Would like to preserve the ability to use `emplace`. Tim suggested trying
`emplace_hint` first, then `emplace`."
"I tried it, it gets very verbose, because we might also want to try
`insert(*it)` instead of `insert(c.end(), *it)` if `emplace(*it)` is not valid
for associative containers, because `c.end()` might not be a good hint."
"It might be suboptimal, but it still works."
</p>

<superseded>
<p>
This wording is relative to <paper num="N4986"/>.
</p>

<ol>
<li><p>Modify <sref ref="[range.utility.conv.general]"/> as indicated:</p>

<blockquote>
<p>
-4- Let <code><i>container-appendable</i></code> be defined as follows:
</p>
<blockquote><pre>
template&lt;class Container, class Ref&gt;
constexpr bool <i>container-appendable</i> =         <i>// exposition only</i>
  requires(Container&amp; c, Ref&amp;&amp; ref) {
           requires (requires { c.emplace_back(std::forward&lt;Ref&gt;(ref)); } ||
                     requires { c.push_back(std::forward&lt;Ref&gt;(ref)); } ||
                     <del>requires { c.emplace(c.end(), std::forward&lt;Ref&gt;(ref)); } ||</del>
                     requires { c.insert(c.end(), std::forward&lt;Ref&gt;(ref)); });
};
</pre></blockquote>
<p>
-5- Let <code><i>container-append</i></code> be defined as follows:
</p>
<blockquote><pre>
template&lt;class Container&gt;
constexpr auto <i>container-append</i>(Container&amp; c) {     <i>// exposition only</i>
  return [&amp;c]&lt;class Ref&gt;(Ref&amp;&amp; ref) {
    if constexpr (requires { c.emplace_back(declval&lt;Ref&gt;()); })
      c.emplace_back(std::forward&lt;Ref&gt;(ref));
    else if constexpr (requires { c.push_back(declval&lt;Ref&gt;()); })
      c.push_back(std::forward&lt;Ref&gt;(ref));
    <del>else if constexpr (requires { c.emplace(c.end(), declval&lt;Ref&gt;()); })
      c.emplace(c.end(), std::forward&lt;Ref&gt;(ref));</del>
    else
      c.insert(c.end(), std::forward&lt;Ref&gt;(ref));
  };
};
</pre></blockquote>
</blockquote>

</li>
</ol>
</superseded>

<note>2025-03-13; Jonathan provides improved wording for Tim's suggestion</note>
<p>
It's true that for some cases it might be optimal to use `c.emplace(ref)`
instead of `c.emplace_hint(c.end(), ref)` but I don't think I care.
A bad hint is not expensive, it's just an extra comparison then the hint
is ignored.
And this code path isn't going to be used for `std::set` or `std::map`,
only for user-defined associative containers that don't have a `from_range_t`
constructor or a `C(Iter,Sent)` constructor.
I think just fixing the original issue is all we need,
rather than trying to handle every possible way to insert elements.
</p>
<p>
This is a simpler, portable reproducer that doesn't depend on the current
implementation status of `std::set` in libstdc++:
</p>
<blockquote><pre><code>
#include &lt;ranges&gt;
#include &lt;set&gt;
struct Set : std::set&lt;int&gt; {
  Set() { }; // No other constructors
};
int main() {
  int a[1];
  auto okay = std::ranges::to&lt;std::set&lt;int&gt;&gt;(a);
  auto ohno = std::ranges::to&lt;Set&gt;(a);
}
</code></pre></blockquote>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N5001"/>.
</p>

<ol>
<li><p>Modify <sref ref="[range.utility.conv.general]"/> as indicated:</p>

<blockquote>
<p>
-4- Let <code><i>container-appendable</i></code> be defined as follows:
</p>
<blockquote><pre>
template&lt;class Container, class Ref&gt;
constexpr bool <i>container-appendable</i> =         <i>// exposition only</i>
  requires(Container&amp; c, Ref&amp;&amp; ref) {
           requires (requires { c.emplace_back(std::forward&lt;Ref&gt;(ref)); } ||
                     requires { c.push_back(std::forward&lt;Ref&gt;(ref)); } ||
                     <ins>requires { c.emplace_hint(c.end(), std::forward&lt;Ref&gt;(ref)); } ||</ins>
                     requires { c.emplace(c.end(), std::forward&lt;Ref&gt;(ref)); } ||
                     requires { c.insert(c.end(), std::forward&lt;Ref&gt;(ref)); });
};
</pre></blockquote>
<p>
-5- Let <code><i>container-append</i></code> be defined as follows:
</p>
<blockquote><pre>
template&lt;class Container&gt;
constexpr auto <i>container-append</i>(Container&amp; c) {     <i>// exposition only</i>
  return [&amp;c]&lt;class Ref&gt;(Ref&amp;&amp; ref) {
    if constexpr (requires { c.emplace_back(declval&lt;Ref&gt;()); })
      c.emplace_back(std::forward&lt;Ref&gt;(ref));
    else if constexpr (requires { c.push_back(declval&lt;Ref&gt;()); })
      c.push_back(std::forward&lt;Ref&gt;(ref));
    <ins>else if constexpr (requires { c.emplace_hint(c.end(), declval&lt;Ref&gt;()); })
      c.emplace_hint(c.end(), std::forward&lt;Ref&gt;(ref));</ins>
    else if constexpr (requires { c.emplace(c.end(), declval&lt;Ref&gt;()); })
      c.emplace(c.end(), std::forward&lt;Ref&gt;(ref));
    else
      c.insert(c.end(), std::forward&lt;Ref&gt;(ref));
  };
};
</pre></blockquote>
</blockquote>

</li>
</ol>

</resolution>

</issue>
