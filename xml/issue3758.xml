<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3758" status="New">
<title>Element-relocating operations of <tt>std::vector</tt> and <tt>std::deque</tt> 
should conditionally require <i>Cpp17CopyInsertable</i> in their preconditions</title>
<section><sref ref="[vector.capacity]"/><sref ref="[vector.modifiers]"/>
<sref ref="[deque.capacity]"/><sref ref="[deque.modifiers]"/></section>
<submitter>Jiang An</submitter>
<date>24 Aug 2022</date>
<priority>99</priority>

<discussion>
<p>
This issue is raised from <a href="https://github.com/cplusplus/draft/issues/5776">editorial issue #5776</a>.
<p/>
In order to achieve strong exception safety, some operations of <tt>std:vector</tt> and 
<tt>std::deque</tt> may use copy insertion for relocation of old elements, if move construction 
of its element type is potentially throwing and copy insertion is available. However, currently 
only <i>Cpp17MoveInsertable</i> is mentioned in many of their Preconditions (e.g. those of 
<tt>insert</tt> for rvalues), which seemly fails to cover the cases in which copy insertion is 
formally invalid but the semantic requirements of <i>Cpp17CopyInsertable</i> are not met.
<p/>
Perhaps we should create a new named requirement for these operations, which is equivalent to 
<i>Cpp17CopyInsertable</i> when <tt>!is_nothrow_move_constructible_v&lt;T&gt; &amp;&amp; 
is_copy_constructible_v&lt;T&gt;</tt> is <tt>true</tt>, and equivalent to <i>Cpp17MoveInsertable</i> 
otherwise.
</p>
</discussion>

<resolution>
</resolution>

</issue>
