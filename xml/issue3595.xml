<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3595" status="C++23">
<title>Exposition-only classes <tt><i>proxy</i></tt> and <tt><i>postfix-proxy</i></tt> for <tt>common_iterator</tt> 
should be fully <tt>constexpr</tt></title>
<section><sref ref="[common.iter.access]"/><sref ref="[common.iter.nav]"/></section>
<submitter>Hewill Kang</submitter>
<date>18 Sep 2021</date>
<priority>99</priority>

<discussion>
<p>
LWG <iref ref="3574"/> added <tt>constexpr</tt> to all member functions and friends of <tt>common_iterator</tt> to make it 
fully <tt>constexpr</tt>, but accidentally omitted the exposition-only classes <tt><i>proxy</i></tt> and 
<tt><i>postfix-proxy</i></tt> defined for some member functions. We should make these two classes fully <tt>constexpr</tt>, too.
</p>

<note>2021-09-24; Reflector poll</note>
<p>
Set status to Tentatively Ready after seven votes in favour during reflector poll.
</p>

<note>2021-10-14 Approved at October 2021 virtual plenary. Status changed: Voting &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4892">N4892</a>.
</p>

<ol>
<li><p>Modify <sref ref="[common.iter.access]"/> as indicated:</p>

<blockquote>
<pre>
decltype(auto) operator-&gt;() const
  requires <i>see below</i>;
</pre>
<blockquote>
<p>
-3- [&hellip;]
<p/>
-4- [&hellip;]
<p/>
-5- <i>Effects:</i>
</p>
<ol style="list-style-type: none">
<li><p>(5.1) &mdash; [&hellip;]</p></li>
<li><p>(5.2) &mdash; [&hellip;]</p></li>
<li><p>(5.3) &mdash; Otherwise, equivalent to: <tt>return <i>proxy</i>(*get&lt;I&gt;(<i>v_</i>));</tt> 
where <tt><i>proxy</i></tt> is the exposition-only class:</p>
<blockquote><pre>
class <i>proxy</i> {
  iter_value_t&lt;I&gt; keep_;
  <ins>constexpr</ins> <i>proxy</i>(iter_reference_t&lt;I&gt;&amp;&amp; x)
    : keep_(std::move(x)) {}
public:
  <ins>constexpr</ins> const iter_value_t&lt;I&gt;* operator-&gt;() const <ins>noexcept</ins> {
    return addressof(keep_);
  }
};
</pre></blockquote>
</li>
</ol>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[common.iter.nav]"/> as indicated:</p>

<blockquote>
<pre>
decltype(auto) operator++(int);
</pre>
<blockquote>
<p>
-4- [&hellip;]
<p/>
-5- <i>Effects:</i> If I models forward_iterator, equivalent to:
<p/>
[&hellip;]
<p/>
Otherwise, if [&hellip;]
<p/>
[&hellip;]
<p/>
Otherwise, equivalent to:
</p>
<blockquote><pre>
<i>postfix-proxy</i> p(**this);
++*this;
return p;
</pre></blockquote>
<p>
where <tt><i>postfix-proxy</i></tt> is the exposition-only class:
</p>
<blockquote><pre>
class <i>postfix-proxy</i> {
  iter_value_t&lt;I&gt; keep_;
  <ins>constexpr</ins> <i>postfix-proxy</i>(iter_reference_t&lt;I&gt;&amp;&amp; x)
    : keep_(std::forward&lt;iter_reference_t&lt;I&gt;&gt;(x)) {}
public:
  <ins>constexpr</ins> const iter_value_t&lt;I&gt;&amp; operator*() const <ins>noexcept</ins> {
    return keep_;
  }
};
</pre></blockquote>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
