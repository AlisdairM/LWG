<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2974" status="Tentatively Ready">
<title>Diagnose out of bounds <tt>tuple_element</tt>/<tt>variant_alternative</tt></title>
<section><sref ref="[pair.astuple]"/><sref ref="[variant.helper]"/></section>
<submitter>Agust&iacute;n K-ballo Berg&eacute;</submitter>
<date>10 Jun 2017</date>
<priority>99</priority>

<discussion>
<p>
Instantiating <tt>tuple_element</tt> with an out-of-bounds index requires a diagnostic for <tt>tuple</tt> and <tt>array</tt>, 
but not for <tt>pair</tt>. The specification requires an out-of-bounds index for <tt>pair</tt> to go to the base template 
instead, which is undefined.
<p/>
Similarly, instantiating <tt>variant_alternative</tt> with an out-of-bounds index violates a requirement, but it is not 
required to be diagnosed.
</p>

<note>2017-06-12, Moved to Tentatively Ready after 5 positive votes on c++std-lib</note>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4659">N4659</a>.</p>

<ol>
<li>
<p>Modify <sref ref="[utility.syn]"/>, header <tt>&lt;utility&gt;</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
[&hellip;]

<i>// <sref ref="[pair.astuple]"/>, tuple-like access to pair</i>
template &lt;class T&gt; class tuple_size;
template &lt;size_t I, class T&gt; class tuple_element;
template &lt;class T1, class T2&gt; struct tuple_size&lt;pair&lt;T1, T2&gt;&gt;;
<ins>template &lt;size_t I, class T1, class T2&gt; struct tuple_element&lt;I, pair&lt;T1, T2&gt;&gt;;</ins>
<del>template &lt;class T1, class T2&gt; struct tuple_element&lt;0, pair&lt;T1, T2&gt;&gt;;
template &lt;class T1, class T2&gt; struct tuple_element&lt;1, pair&lt;T1, T2&gt;&gt;;</del>

[&hellip;]
</pre>
</blockquote>
</li>

<li>
<p>Modify <sref ref="[pair.astuple]"/> as indicated:</p>

<blockquote>
<pre>
<del>tuple_element&lt;0, pair&lt;T1, T2&gt;&gt;::type</del>
</pre>
<blockquote>
<p>
<del>-1- <i>Value:</i> The type <tt>T1</tt>.</del>
</p>
</blockquote>
<pre>
<del>tuple_element&lt;1, pair&lt;T1, T2&gt;&gt;::type</del>
</pre>
<blockquote>
<p>
<del>-2- <i>Value:</i> The type <tt>T2</tt>.</del>
</p>
</blockquote>
<pre>
<ins>tuple_element&lt;I, pair&lt;T1, T2&gt;&gt;::type</ins>
</pre>
<blockquote>
<p>
<ins>-?- <i>Requires:</i> <tt>I &lt; 2</tt>. The program is ill-formed if <tt>I</tt> is out of bounds.</ins>
<p/>
<ins>-?- <i>Value:</i> The type <tt>T1</tt> if <tt>I == 0</tt>, otherwise the type <tt>T2</tt>.</ins>
</p>
</blockquote>
</blockquote>
</li>

<li>
<p>Modify <sref ref="[variant.helper]"/> as indicated:</p>

<blockquote>
<pre>
variant_alternative&lt;I, variant&lt;Types...&gt;&gt;::type
</pre>
<blockquote>
<p>
-4- <i>Requires:</i> <tt>I &lt; sizeof...(Types)</tt>. <ins>The program is ill-formed if <tt>I</tt> is out of bounds.</ins>
<p/>
-5- <i>Value:</i> The type <tt>T<sub><i>I</i></sub></tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>

</resolution>

</issue>
