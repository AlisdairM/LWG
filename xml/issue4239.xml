<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4239" status="Voting">
<title>`flat_map`'s transparent comparator no longer works for string literals</title>
<section>
<sref ref="[flat.map.modifiers]"/>
</section>
<submitter>Hui Xie</submitter>
<date>29 Mar 2025</date>
<priority>99</priority>

<discussion>
<p>
According to the spec, the following code should hard error
</p>
<blockquote><pre>
std::flat_map&lt;std::string, int, std::less&lt;&gt;&gt; m;
m.try_emplace("abc", 5);  // <span style="color:red;font-weight:bolder">hard error</span>
</pre></blockquote>
<p>
The reason is that we specify in <sref ref="[flat.map.modifiers]"/> p21 the effect to be 
as if `ranges::upper_bound` is called.
</p>

<p>
`ranges::upper_bound` requires `indirect_strict_weak_order`, which requires the comparator to be 
invocable for all combinations. In this case, it requires
</p>
<blockquote><pre>
const char (&amp;)[4] &lt; const char (&amp;)[4] 
</pre></blockquote>
<p>
to be well-formed, which is no longer the case in C++26 after <paper num="P2865R6"/>.
<p/>
We should just use `std::upper_bound` instead. libstdc++ already uses `std::upper_bound`. 
libc++ uses `ranges::upper_bound` but clang has not yet implemented <paper num="P2865"/> 
properly.
</p>

<note>2025-06-13; Reflector poll</note>
<p>
Set status to Tentatively Ready after six votes in favour during reflector poll.
</p>
<p>
We should make `ranges::upper_bound` work for this case, but literals never met
its `indirect_strict_weak_order` semantic requirements anyway.
Making that work would be a new design to be seen be LEWG.
The proposed resolution solves the immediate problem here.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N5008"/>.
</p>

<ol>

<li><p>Modify <sref ref="[flat.map.modifiers]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class K, class... Args&gt;
  constexpr pair&lt;iterator, bool&gt; try_emplace(K&amp;&amp; k, Args&amp;&amp;... args);
template&lt;class K, class... Args&gt;
  constexpr iterator try_emplace(const_iterator hint, K&amp;&amp; k, Args&amp;&amp;... args);
</pre>
<blockquote>
<p>
-19- <i>Constraints</i>: [&hellip;]
<p/>
-20- <i>Preconditions</i>: [&hellip;]
<p/>
-21- <i>Effects</i>: If the map already contains an element whose key is equivalent to `k`, 
`*this` and `args...` are unchanged. Otherwise equivalent to:
</p>
<blockquote><pre>
auto key_it = <ins>upper_bound(<i>c</i>.keys.begin(), <i>c</i>.keys.end(), k, <i>compare</i>)</ins><del>ranges::upper_bound(<i>c</i>.keys, k, <i>compare</i>)</del>;
auto value_it = <i>c</i>.values.begin() + distance(<i>c</i>.keys.begin(), key_it);
<i>c</i>.keys.emplace(key_it, std::forward&lt;K&gt;(k));
<i>c</i>.values.emplace(value_it, std::forward&lt;Args&gt;(args)...);
</pre></blockquote>
</blockquote>
</blockquote>

</li>

</ol>
</resolution>

</issue>
