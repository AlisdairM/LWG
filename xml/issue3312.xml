<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3312" status="New">
<title><tt>polymorphic_allocator::allocate_object</tt> and <tt>new_object</tt> should be <tt>[[nodiscard]]</tt></title>
<section><sref ref="[mem.poly.allocator.class]"/></section>
<submitter>United States</submitter>
<date>04 Nov 2019</date>
<priority>99</priority>

<discussion>
<p><b>Addresses US 217</b></p>

<p>
Add <tt>[[nodiscard]]</tt> in front of the return type for <tt>allocate_object</tt> and <tt>new_object</tt> in class
declaration and in member-function description for <tt>polymorphic_allocator</tt> template.
</p>

<note>Daniel comments</note>
<p>
This issue is related to LWG <iref ref="3304"/>.
</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4835">N4835</a>.</p>

<ol>
<li><p>Modify <sref ref="[mem.poly.allocator.class]"/> p2, class template <tt>polymorphic_allocator</tt> synopsis, 
as indicated:</p>

<blockquote>
<pre>
<i>// <sref ref="[mem.poly.allocator.mem]"/>, member functions</i>
[[nodiscard]] Tp* allocate(size_t n);
void deallocate(Tp* p, size_t n);

void* allocate_bytes(size_t nbytes, size_t alignment = alignof(max_align_t));
void deallocate_bytes(void* p, size_t nbytes, size_t alignment = alignof(max_align_t));
template&lt;class T&gt; <ins>[[nodiscard]]</ins> T* allocate_object(size_t n = 1);
template&lt;class T&gt; void deallocate_object(T* p, size_t n = 1);
template&lt;class T, class... CtorArgs&gt; <ins>[[nodiscard]]</ins> T* new_object(CtorArgs&amp;&amp;... ctor_args);
template&lt;class T&gt; void delete_object(T* p);
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[mem.poly.allocator.mem]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class T&gt;
  <ins>[[nodiscard]]</ins> T* allocate_object(size_t n = 1);
</pre>
<blockquote>
<p>
-8- <i>Effects:</i> Allocates memory suitable for holding an array of <tt>n</tt> objects of type <tt>T</tt>, as follows:
<ol style="list-style-type: none">
<li><p>(8.1) &mdash; if <tt>SIZE_MAX / sizeof(T) &lt; n</tt>, throws <tt>length_error</tt>,</p></li>
<li><p>(8.2) &mdash; otherwise equivalent to:</p>
<blockquote><pre>
return static_cast&lt;T*&gt;(allocate_bytes(n*sizeof(T), alignof(T)));
</pre></blockquote>
</li>
</ol>
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
template&lt;class T, class CtorArgs...&gt;
  <ins>[[nodiscard]]</ins> T* new_object(CtorArgs&amp;&amp;... ctor_args);
</pre>
<blockquote>
<p>
-11- <i>Effects:</i> Allocates and constructs an object of type <tt>T</tt>, as follows.
Equivalent to:
<blockquote><pre>
T* p = allocate_object&lt;T&gt;();
try {
  construct(p, std::forward&lt;CtorArgs&gt;(ctor_args)...);
} catch (...) {
  deallocate_object(p);
  throw;
}
return p;
</pre></blockquote>
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>
</issue>
