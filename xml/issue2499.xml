<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY hellip "&#x2026;">
  <!ENTITY mdash  "&#x2014;">
] >

<issue num="2499" status="Open">
<title><tt>operator&gt;&gt;(basic_istream&amp;, CharT*)</tt> makes it hard to avoid buffer overflows</title>
<section><sref ref="[istream::extractors]"/></section>
<submitter>Richard Smith</submitter>
<date>8 May 2015</date>
<priority>2</priority>

<discussion>
<p>
We removed <tt>gets()</tt> (due to an NB comment and C11 &mdash; bastion of backwards compatibility &mdash; doing the same). 
Should we remove this too?
<p/>
Unlike <tt>gets()</tt>, there are legitimate uses:
</p>
<blockquote>
<pre>
char buffer[32];
char text[32] = // ...
ostream_for_buffer(text) &gt;&gt; buffer; // ok, can't overrun buffer
</pre>
</blockquote>
<p>
&hellip; but the risk from constructs like "<tt>std::cin &gt;&gt; buffer</tt>" seems to outweigh the benefit.
<p/>
The issue had been discussed on the library reflector starting around 
<a href="http://accu.org/cgi-bin/wg21/message?wg=lib&amp;msg=35541">c++std-lib-35541</a>.
</p>

<note>2015-06, Telecom</note>
<p>VV: Request a paper to deprecate / remove anything<br/></p>

<note>2015-10, Kona Saturday afternoon</note>
<p>STL: This overload is evil and should probably die. </p>
<p>VV: I agree with that, even though I don't care.</p>
<p>STL: Say that we either remove it outright following the gets() rationale, or at least deprecate it.</p>
<p>Move to Open; needs a paper.</p>

<note>2016-08, Chicago: Zhihao Yuan comments and provides wording</note>
<p>
Rationale:
</p>
<ol>
<li><p>I would like to keep some reasonable code working;</p></li>
<li><p>Reasonable code includes two cases:</p>
<ol style="list-style-type:lower-alpha">
<li><p><tt>width() &gt; 0</tt>, any pointer argument</p></li>
<li><p><tt>width() &gt;= 0</tt>, array argument</p></li>
</ol>
</li>
<li><p>For a), banning bad code will become a silent behavior change at runtime; 
for b), it breaks at compile time.</p></li>
</ol>
<p>
I propose to replace these signatures with references to arrays.
An implementation may want to ship the old instantiatations in the
binary without exposing the old signatures.
</p>

<note>08-2016, Chicago</note>
<p>Tues PM: General agreement on deprecating the unsafe call, but no consensus for the P/R.</p>
<p>General feeling that implementation experience would be useful.</p>
</discussion>

<resolution>
<p>
This wording is relative to N4606.
</p>
<ol>
<li><p>Modify <sref ref="[istream::extractors]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class charT, class traits<ins>, size_t N</ins>&gt;
  basic_istream&lt;charT, traits&gt;&amp; operator&gt;&gt;(basic_istream&lt;charT, traits&gt;&amp; in,
                                           <del>charT* s</del><ins>charT (&amp;s)[N]</ins>);
template&lt;class traits<ins>, size_t N</ins>&gt;
  basic_istream&lt;char, traits&gt;&amp; operator&gt;&gt;(basic_istream&lt;char, traits&gt;&amp; in,
                                          <del>unsigned char* s</del><ins>unsigned char (&amp;s)[N]</ins>);
template&lt;class traits<ins>, size_t N</ins>&gt;
  basic_istream&lt;char, traits&gt;&amp; operator&gt;&gt;(basic_istream&lt;char, traits&gt;&amp; in,
                                          <del>signed char* s</del><ins>signed char (&amp;s)[N]</ins>);
</pre>
<blockquote>
<p>
-7- <i>Effects:</i> Behaves like a formatted input member (as described in <sref ref="[istream.formatted.reqmts]"/>) 
of <tt>in</tt>. After a <tt>sentry</tt> object is constructed, <tt>operator&gt;&gt;</tt> extracts characters and 
stores them into <del>successive locations of an array whose first element is designated by</del> <tt>s</tt>. If <tt>width()</tt> 
is greater than zero, <tt>n</tt> is <tt><del>width()</del><ins>min(size_t(width()), N)</ins></tt>. Otherwise 
<tt>n</tt> is <del>the number of elements of the largest 
array of <tt>char_type</tt> that can store a terminating <tt>charT()</tt></del><ins><tt>N</tt></ins>. <tt>n</tt> is the 
maximum number of characters stored.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
