<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4154" status="New">
<title>The Mandates for <code>std::packaged_task</code>'s constructor from a callable entity should consider decaying</title>
<section><sref ref="[futures.task.members]"/></section>
<submitter>Jiang An</submitter>
<date>18 Sep 2024</date>
<priority>3</priority>

<discussion>
<p>
Currently, <sref ref="[futures.task.members]"/>/3 states:
<blockquote>
<i>Mandates</i>:
<code>is_invocable_r_v&lt;R, F&amp;, ArgTypes...&gt;</code> is `true`.
</blockquote>
where <code>F&amp;</code> can be a reference to a cv-qualified function object type.
</p>
<p>
However, in mainstream implementations (libc++, libstdc++, and MSVC STL),
the stored task object always has a cv-unqualified type,
and thus the cv-qualification is unrecognizable in `operator()`.
</p>
<p>
Since <sref ref="[func.wrap.func.con]"/> uses a decayed type,
perhaps we should also so specify for `std::packaged_task`.
</p>

<note>2024-10-02; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
</p>
<p>
"Fix preconditions, `f` doesn't need to be invocable, we only invoke the copy."
</p>

<superseded>
<p>
This wording is relative to <paper num="N4988"/>.
</p>
<ol>
<li><p>Modify <sref ref="[futures.task.members]"/> as indicated:</p>
<blockquote>
<p>
-3- <i>Mandates</i>:
<code>is_invocable_r_v&lt;R, <del>F</del><ins>decay_t&lt;F&gt;</ins>&amp;, ArgTypes...&gt;</code>
is `true`.
</p>
[...]
<p>
-5- <i>Effects</i>:
Constructs a new `packaged_task` object with a shared state and initializes
the object's stored task
<ins>of type <code>decay_t&lt;F&gt;</code></ins>
with <code>std::forward&lt;F&gt;(f)</code>.
</p>
</blockquote>
</li>
</ol>
</superseded>

<note>2024-10-02; Jonathan provides improved wording</note>
<p>Drop preconditions as suggested on reflector.</p>

<note>2024-10-02; LWG telecon</note>
<p>
Clarify that "of type <code>decay_t&lt;F&gt;</code>"
is supposed to be specifying the type of the stored task.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4988"/>.
</p>
<ol>
<li><p>Modify <sref ref="[futures.task.members]"/> as indicated:</p>
<blockquote>
<pre><code>template&lt;class F&gt;
  explicit packaged_task(F&amp;&amp; f);</code></pre>
<p>
-2- <i>Constraints</i>:
<code>remove_cvref_t&lt;F&gt;</code> is not the same type as
<code>packaged_task&lt;R(ArgTypes...)&gt;</code>.
</p>
<p>
-3- <i>Mandates</i>:
<code>is_invocable_r_v&lt;R, <del>F</del><ins>decay_t&lt;F&gt;</ins>&amp;, ArgTypes...&gt;</code>
is `true`.
</p>
<p>
<del>-4- <i>Preconditions</i>:
Invoking a copy of `f` behaves the same as invoking `f`.
</del>
</p>
<p>
-5- <i>Effects</i>:
Constructs a new `packaged_task` object with
<ins>a stored task of type <code>decay_t&lt;F&gt;</code> and</ins>
a shared state
<ins>. Initializes</ins>
<del>and initializes</del>
the object's stored task
with <code>std::forward&lt;F&gt;(f)</code>.
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
