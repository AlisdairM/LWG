<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4198" status="Voting">
<title>`schedule_from` isn't starting the schedule sender if decay-copying results throws</title>
<section><sref ref="[exec.schedule.from]"/></section>
<submitter>Eric Niebler</submitter>
<date>03 Feb 2025</date>
<priority>1</priority>

<discussion>
<p>
Imported from <a href="https://github.com/cplusplus/sender-receiver/issues/304">cplusplus/sender-receiver #304</a>.
</p>
<p>
<sref ref="[exec.schedule.from]"/>/p11 specifies `schedule_from`'s completion operation as follows:

<pre><code>
[]&lt;class Tag, class... Args&gt;(auto, auto&amp; state, auto&amp; rcvr, Tag, Args&amp;&amp;... args) noexcept
    -> void {
  using result_t = <i>decayed-tuple</i>&lt;Tag, Args...&gt;;
  constexpr bool nothrow = is_nothrow_constructible_v&lt;result_t, Tag, Args...&gt;;

  try {
    state.<i>async-result</i>.template emplace&lt;result_t&gt;(Tag(), std::forward&lt;Args&gt;(args)...);
  } catch (...) {
    if constexpr (!nothrow) {
      set_error(std::move(rcvr), current_exception());
      return;
    }
  }
  start(state.<i>op-state</i>);
};
</code></pre>

so if emplacing the result tuple throws, `set_error` is immediately called on the downstream receiver. no attempt is made to post the completion to the specified scheduler. this is probably not the right behavior.
</p>
<p><b>Suggested resolution</b></p>
<p>
The right thing, i think, is to catch the exception, emplace the `exception_ptr` into the <i>`async-result`</i> variant, and then start the schedule operation, as shown below:

<pre><code>
[]&lt;class Tag, class... Args&gt;(auto, auto&amp; state, auto&amp; rcvr, Tag, Args&amp;&amp;... args) noexcept
    -> void {
  using result_t = <i>decayed-tuple</i>&lt;Tag, Args...&gt;;
  constexpr bool nothrow = is_nothrow_constructible_v&lt;result_t, Tag, Args...&gt;;

  try {
    state.<i>async-result</i>.template emplace&lt;result_t&gt;(Tag(), std::forward&lt;Args&gt;(args)...);
  } catch(...) {
    if constexpr (!nothrow)
      state.<i>async-result</i>.template emplace&lt;tuple&lt;set_error_t, exception_ptr&gt;&gt;(set_error, current_exception());
  }

  start(state.<i>op-state</i>);
}
</code></pre>

we also need to change how we specify the variant type of
<code>state.<i>async-result</i></code>:

<blockquote>
Let `Sigs` be a pack of the arguments to the `completion_signatures`
specialization named by
<code>completion_signatures_of_t&lt;<i>child-type</i>&lt;Sndr&gt;, env_of_t&lt;Rcvr&gt;&gt;</code>.
Let <i><code>as-tuple</code></i> be an alias template
<del>
that transforms a completion signature `Tag(Args...)` into
the tuple specialization <code><i>decayed-tuple</i>&lt;Tag, Args...&gt;</code>.
</del>
<ins>
such that <code><i>as-tuple</i>&lt;Tag(Args...)&gt;</code> denotes
the tuple specialization <code><i>decayed-tuple</i>&lt;Tag, Args...&gt;</code>,
and let <code><i>is-nothrow-decay-copy-sig</i></code>
be a variable template such that
<code><i>is-nothrow-decay-copy-sig</i>&lt;Tag(Args...)&gt;</code>
is a core constant expression of type `bool const` and whose value
is `true` if the types `Args...` are all nothrow decay-copyable, and `false`
otherwise.
Let <i><code>error-completion</code></i> be a pack consisting of the type
`set_error_t(exception_ptr)` if
<code>(<i>is-nothrow-decay-copy-sig</i>&lt;Sigs&gt; &amp;&amp;...)</code>
is `false`, and an empty pack otherwise.
</ins>
Then `variant_t` denotes the type
<code>variant&lt;monostate, <i>as-tuple</i>&lt;Sigs&gt;...<ins>, <i>error-completion</i>...</ins>&gt;</code>,
except with duplicate types removed.
</blockquote>

</p>

<note>This touches the same text as LWG <iref ref="4203"/>.</note>

<note>2025-02-07; Reflector poll</note>
<p>
Set priority to 1 after reflector poll.
</p>

<note>Hagenberg 2025-02-11; LWG</note>
<p>
Direction seems right. Decay-copyable is not a defined term.
</p>

<note>2025-02-12 Tim adds PR</note>
<p>This also corrects the issue that `nothrow` is currently relying
on the unspecified exception specification of `tuple`'s constructor.</p>

<note>Hagenberg 2025-02-12; move to Ready</note>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N5001"/>.
</p>

<ol>
<li>
Modify <sref ref="[exec.schedule.from]"/> p8 as indicated:
<blockquote>
<p>
-8- Let `Sigs` be a pack of the arguments to the `completion_signatures`
specialization named by
<code>completion_signatures_of_t&lt;<i>child-type</i>&lt;Sndr&gt;, env_of_t&lt;Rcvr&gt;&gt;</code>.
Let <i><code>as-tuple</code></i> be an alias template
<del>
that transforms a completion signature `Tag(Args...)` into
the tuple specialization <code><i>decayed-tuple</i>&lt;Tag, Args...&gt;</code>.
</del>
<ins>
such that <code><i>as-tuple</i>&lt;Tag(Args...)&gt;</code> denotes
the type <code><i>decayed-tuple</i>&lt;Tag, Args...&gt;</code>,
and let <code><i>is-nothrow-decay-copy-sig</i></code>
be a variable template such that
<code>auto(<i>is-nothrow-decay-copy-sig</i>&lt;Tag(Args...)&gt;)</code>
is a constant expression of type `bool` and equal to 
<code>(is_nothrow_constructible_v&lt;decay_t&lt;Args&gt;, Args&gt; &amp;&amp; ...)</code>.
Let <i><code>error-completion</code></i> be a pack consisting of the type
`set_error_t(exception_ptr)` if
<code>(<i>is-nothrow-decay-copy-sig</i>&lt;Sigs&gt; &amp;&amp;...)</code>
is `false`, and an empty pack otherwise.
</ins>
Then `variant_t` denotes the type
<code>variant&lt;monostate, <i>as-tuple</i>&lt;Sigs&gt;...<ins>, <i>error-completion</i>...</ins>&gt;</code>,
except with duplicate types removed.
</p>
</blockquote>
</li>
<li>
<p>Modify <sref ref="[exec.schedule.from]"/> p11 as indicated:</p>
<blockquote><p>
-11- The member <code><i>impls-for</i>&lt;schedule_from_t&gt;::<i>complete</i></code> 
is initialized with a callable object equivalent to the following lambda:
</p>
<blockquote><pre><code>
[]&lt;class Tag, class... Args&gt;(auto, auto&amp; state, auto&amp; rcvr, Tag, Args&amp;&amp;... args) noexcept
    -&gt; void {
  using result_t = <i>decayed-tuple</i>&lt;Tag, Args...&gt;;
  constexpr bool nothrow = <del>is_nothrow_constructible_v&lt;result_t, Tag, Args...&gt;</del>
                           <ins>(is_nothrow_constructible_v&lt;decay_t&lt;Args&gt;, Args&gt; &amp;&amp; ...)</ins>;

  try {
    state.<i>async-result</i>.template emplace&lt;result_t&gt;(Tag(), std::forward&lt;Args&gt;(args)...);
  } catch (...) {
    if constexpr (!nothrow) <del>{</del>
      <ins>state.<i>async-result</i>.template emplace&lt;tuple&lt;set_error_t, exception_ptr&gt;&gt;(set_error, current_exception());</ins>
      <del>set_error(std::move(rcvr), current_exception());</del>
      <del>return;</del>
    <del>}</del>
  }
  start(state.<i>op-state</i>);
};
</code></pre></blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
