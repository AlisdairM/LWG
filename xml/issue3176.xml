<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3176" status="New">
<title>Underspecified behavior of unordered containers when <tt>Container::key_equal</tt> differs from <tt>Pred</tt></title>
<section><sref ref="[unord.req]"/></section>
<submitter>S. B. Tam</submitter>
<date>27 Nov 2018</date>
<priority>99</priority>

<discussion>
<p>
After acceptance of <a href="https://wg21.link/p0919r3">P0919R3</a> into the new working draft (<a href="https://wg21.link/n4791">N4791</a>), 
it is possible that an unordered container's member type <tt>key_equal</tt> is different from its template argument for <tt>Pred</tt> 
(the former being <tt>Hash::transparent_key_equal</tt> while the latter being <tt>std::equal_to&lt;Key&gt;</tt>). However, it is 
unclear which is stored in the container and used as the predicate in this case.
<p/>
In particular, [unord.req]/4 says:
</p>
<blockquote>
<p>
[&hellip;] The container's object of type <tt>Pred</tt> &mdash; denoted by <tt>pred</tt> &mdash; is called the <i>key equality 
predicate</i> of the container.
</p>
</blockquote>
<p>
In Table 70, the row for <tt>X::key_equal</tt> places requirements to <tt>Pred</tt> and not to <tt>Hash::transparent_key_equal</tt>:
</p>
<blockquote>
<p>
<i>Requires:</i> <tt>Pred</tt> is <i>Cpp17CopyConstructible</i>. <tt>Pred</tt> shall be a binary predicate that takes two arguments 
of type <tt>Key</tt>. <tt>Pred</tt> is an equivalence relation.
</p>
</blockquote>
<p>
The specification of <tt>operator==</tt> and <tt>operator!=</tt> in [unord.req]/12 uses <tt>Pred</tt>:
</p>
<blockquote>
<p>
[&hellip;] The behavior of a program that uses <tt>operator==</tt> or operator!= on unordered containers is undefined unless
the <tt>Pred</tt> function object has the same behavior for both containers and the equality comparison function for <tt>Key</tt> 
is a refinement(footnote 227) of the partition into equivalent-key groups produced by <tt>Pred</tt>.
</p>
</blockquote>
<p>
The exception safety guarantees in [unord.req.except] mentions "the container's <tt>Pred</tt> object" twice.
<p/>
The <i>noexcept-specifier</i>s of unordered containers' move assignment operator and <tt>swap</tt> member function are all in 
terms of <tt>Pred</tt>.
<p/>
I think the intent is to make <tt>Hash::transparent_key_equal</tt> override <tt>Pred</tt>. If that's true, then all the 
abovementioned uses of <tt>Pred</tt> in the specification should probably be changed to uses <tt>key_equal</tt>.
</p>
</discussion>

<resolution>
</resolution>

</issue>
