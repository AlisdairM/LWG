<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3757" status="New">
<title>What's the effect of <tt>std::forward_like&lt;void&gt;(x)</tt>?</title>
<section><sref ref="[forward]"/></section>
<submitter>Jiang An</submitter>
<date>24 Aug 2022</date>
<priority>99</priority>

<discussion>
<p>
Currently the return type of <tt>std::forward_like</tt> is specified by the following bullet:
</p>
<blockquote>
<p>
&mdash; Let <tt>V</tt> be
</p>
<blockquote><pre>
<i>OVERRIDE_REF</i>(T&amp;&amp;, <i>COPY_CONST</i>(remove_reference_t&lt;T&gt;, remove_reference_t&lt;U&gt;))
</pre></blockquote>
</blockquote>
<p>
where <tt>T&amp;&amp;</tt> is not always valid, e.g. it's invalid when <tt>T</tt> is <tt>void</tt>.
<p/>
A strait forward reading may suggest that there is a hard error when <tt>T</tt> is not referenceable 
(which is currently implemented in MSVC STL), but this seems not clarified. It is unclear to me whether 
the intent is that hard error, substitution failure, or no error is caused when <tt>T&amp;&amp;</tt> is invalid.
</p>
</discussion>

<resolution>
<p>
This wording is relative to the <a href="https://github.com/cplusplus/draft/suites/8116854514/artifacts/351119387">working 
draft snapshot from 2022-09-03</a>.
</p>

<ol>
<li><p>Modify <sref ref="[forward]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class T, class U&gt;
  [[nodiscard]] constexpr auto forward_like(U&amp;&amp; x) noexcept -> <i>see below</i>;
</pre>
<blockquote>
<p>
<ins><i>Mandates</i>: <tt>T</tt> is a referenceable type (<sref ref="[defns.referenceable]"/>).</ins>
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
