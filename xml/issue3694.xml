<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3694" status="New">
<title>Should <tt>traits_type::length</tt> be customizable?</title>
<section><sref ref="[char.traits.require]"/></section>
<submitter>Jiang An</submitter>
<date>04 May 2022</date>
<priority>99</priority>

<discussion>
<p>
MSVC STL's implementation of the <tt>std::quoted</tt> overload for <tt>const charT*</tt> calculates 
the length of the NTCTS and stores the result within the return value. Because the returned value may  
be output by <tt>std::basic_ostream</tt> specializations with different <tt>traits_type</tt>s, this 
strategy can be conforming only if all possible <tt>traits_type::length</tt> functions for the same 
<tt>char_type</tt> have equivalent return values.
<p/>
It seems not clear whether <tt>traits_type::length</tt> should be customizable. In a related PR, 
<a href="https://github.com/microsoft/STL/pull/2676#discussion_r861407001">Stephan T. Lavavej said</a> :
</p>
<blockquote style="border-left: 3px solid #ccc;padding-left: 15px;">
<p>
I argue that you've found a defect in the <tt>char_traits</tt> specification &mdash; it should say 
that whatever <tt>eq()</tt> does, it should consider <tt>charT()</tt> to be distinct from all other 
values, which aligns with the common understanding of how null-terminated strings behave.
<p/>
The original implementation and the <tt>char_traits::length</tt> change both handle arbitrary character 
types &mdash; the only difference would be for custom <tt>char_traits</tt> that consider null terminators 
to be equal to other values, which I have never seen used in practice (e.g. case-insensitive traits 
don't do this).
</p>
</blockquote>
<p>
If it is decided that <tt>traits_type::length</tt> is customizable, then the implementation in MSVC STL 
should be fixed. Otherwise, we should explicitly require in <sref ref="[char.traits.require]"/> that 
whenever <tt>c</tt> is not "equal" to <tt>char_type()</tt>, <tt>traits_type::eq(c, char_type())</tt> is 
<tt>false</tt>.
<p/>
However, equivalence of two <tt>charT</tt> values seems not easy to specify, as there may be no 
<tt>operator==</tt> for <tt>charT</tt>, or the <tt>operator==</tt> behaves pathologically. IMO possible 
way may be
</p>
<ul>
<li><p>using the equivalence relation of value representations, or</p></li>
<li><p>using <tt>==</tt> and only imposing the requirement when <tt>char_type</tt> is an encoded 
character type (or more generally, a scalar type, while treating an enum type as its underlying type).</p></li>
</ul>
</discussion>

<resolution>
</resolution>

</issue>
