<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3640" status="New">
<title>Clarify which exceptions are propagated</title>
<section><sref ref="[utility.requirements]"/></section>
<submitter>Johel Ernesto Guerrero Pe&ntilde;a</submitter>
<date>01 Nov 2021</date>
<priority>3</priority>

<discussion>
<p>
This originated from the editorial issues <a href="https://github.com/cplusplus/draft/issues/4863">#4863</a> 
and <a href="https://github.com/cplusplus/draft/issues/4869">#4869</a>.
<p/>
Some <i>Throws:</i> elements are specified to throw the exceptions an evaluation of <tt><i>E</i></tt> exits with. 
This wording excludes exceptions thrown involving the initialization and destruction of parameters 
of <tt><i>E</i></tt>, temporaries of <tt><i>E</i></tt>, and the destruction of the result of <tt><i>E</i></tt>.
<p/>
The proposed wording below fixes this with front matter. As if affects more than just <i>Throws:</i> elements, it talks 
about requirements and guarantees when <tt><i>E</i></tt> exits via an exception.
<p/>
As noted in the originating editorial issues, some LWG members prefer fixing each individual case 
of wording used to describe exception propagation rather than patching them up with front matter.
</p>

<note>2022-01-30; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
"Any throwing destructor is library UB already, so there's no
need to contort the wording to accommodate those."
</p>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>
This wording is relative to <paper num="N4901"/>.
</p>

<ol>

<li><p>Add a new subclause [exception.propagation] at the end of <sref ref="[utility.requirements]"/> (after
<sref ref="[allocator.requirements.completeness]"/>):</p>

<blockquote>
<p>
<ins><b>16.4.4.? Exception propagation requirements [exception.propagation]</b></ins>
<p/>
<ins>-?- Some functions defined in the C++ standard library impose requirements and guarantees <i>R-G</i> 
when a described evaluation <tt><i>E</i></tt> exits via an exception. Let <tt><i>F</i></tt> be an evaluation that is 
implied by evaluating <tt><i>E</i></tt> up to the complete evaluation of its enclosing full-expression. Unless 
stated otherwise, an execution of <tt><i>F</i></tt> that exits via an exception also has <i>R-G</i> imposed.
[<i>Note ?</i>: This includes when initializing and destroying parameters, evaluating default arguments, 
and destroying temporaries (including discarded-value expressions) (<sref ref="[expr.call]"/>) exit via 
an exception. &mdash; <i>end note</i>]</ins>
</p>
</blockquote>
</li>

</ol>
</blockquote>

<note>2022-09-28; Johel provides revised wording</note>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4917"/>.
</p>

<ol>

<li><p>Add a new subclause [exception.propagation] at the end of <sref ref="[utility.requirements]"/> (after
<sref ref="[allocator.requirements.completeness]"/>):</p>

<blockquote>
<p>
<ins><b>16.4.4.? Exception propagation requirements [exception.propagation]</b></ins>
<p/>
<ins>-?- Some functions defined in the C++ standard library impose requirements and guarantees <i>R-G</i> when 
a described evaluation <tt><i>E</i></tt> of a constructor or construction exits via an exception. Let 
<tt><i>F</i></tt> be the initialization denoted by <tt><i>E</i></tt>. Unless stated otherwise, <tt><i>F</i></tt> 
also has <i>R-G</i> imposed.
[<i>Note ?</i>: This includes the initialization of parameters and the evaluation of default arguments as 
part of <tt><i>F</i></tt>. &mdash; <i>end note</i>]</ins>
</p>
</blockquote>
</li>

</ol>
</resolution>

</issue>
