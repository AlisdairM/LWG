<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3100" status="WP">
<title>Unnecessary and confusing "empty <tt>span</tt>" wording</title>
<section><sref ref="[span.cons]"/></section>
<submitter>Stephan T. Lavavej</submitter>
<date>12 Apr 2018</date>
<priority>0</priority>

<discussion>
<p>
The <tt>span</tt> constructors have wording relics that mention an "empty <tt>span</tt>". It's unnecessary (the 
behavior is fully specified by the postconditions), but I left it there because I thought it was harmless. It was 
later pointed out to me that this is actually confusing. Talking about an "empty <tt>span</tt>" implies that there's just 
one such thing, but <tt>span</tt> permits <tt>empty()</tt> to be <tt>true</tt> while <tt>data()</tt> can vary 
(being null or non-null). (This behavior is very useful; consider how <tt>equal_range()</tt> behaves.)
<p/>
To avoid confusion, the "empty <tt>span</tt>" wording should simply be removed, leaving the constructor behavior unchanged. 
Editorially, there's also a missing paragraph number.
</p>

<note>
2018-04-24 Moved to Tentatively Ready after 6 positive votes on c++std-lib.
</note>

<note>2018-06 Rapperswil: Adopted</note>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4741">N4741</a>.</p>

<blockquote>
<ol>
<li>
<p>Edit <sref ref="[span.cons]"/> as indicated:</p>
<blockquote>
<pre>
constexpr span() noexcept;
</pre>
<blockquote>
<p>
<del>-1- <i>Effects:</i> Constructs an empty <tt>span</tt>.</del>
<p/>
-2- <i>Postconditions:</i> <tt>size() == 0 &amp;&amp; data() == nullptr</tt>.
<p/>
-3- <i>Remarks:</i> This constructor shall not participate in overload resolution unless <tt>Extent &lt;= 0</tt> is <tt>true</tt>.
</p>
</blockquote>
<pre>
constexpr span(pointer ptr, index_type count);
</pre>
<blockquote>
<p>
-4- <i>Requires:</i> <tt>[ptr, ptr + count)</tt> shall be a valid range. If <tt>extent</tt> is not equal to 
<tt>dynamic_extent</tt>, then <tt>count</tt> shall be equal to <tt>extent</tt>.
<p/>
-5- <i>Effects:</i> Constructs a <tt>span</tt> that is a view over the range <tt>[ptr, ptr + count)</tt>. <del>If 
<tt>count</tt> is <tt>0</tt> then an empty span is constructed.</del>
<p/>
-6- <i>Postconditions:</i> <tt>size() == count &amp;&amp; data() == ptr</tt>.
<p/>
<ins>-?-</ins> <i>Throws:</i> Nothing.
</p>
</blockquote>
<pre>
constexpr span(pointer first, pointer last);
</pre>
<blockquote>
<p>
-7- <i>Requires:</i> <tt>[first, last)</tt> shall be a valid range. If <tt>extent</tt> is not equal to 
<tt>dynamic_extent</tt>, then <tt>last - first</tt> shall be equal to <tt>extent</tt>.
<p/>
-8- <i>Effects:</i> Constructs a <tt>span</tt> that is a view over the range <tt>[first, last)</tt>. <del>If 
<tt>last - first == 0</tt> then an empty <tt>span</tt> is constructed.</del>
<p/>
-9- <i>Postconditions:</i> <tt>size() == last - first &amp;&amp; data() == first</tt>.
<p/>
-10- <i>Throws:</i> Nothing.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</blockquote>
</resolution>

</issue>
