<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3845" status="New">
<title><tt>ranges::to</tt>'s <tt>from_range_t</tt> tag branch has the wrong constraint</title>
<section><sref ref="[range.utility.conv.to]"/></section>
<submitter>Hewill Kang</submitter>
<date>06 Jan 2023</date>
<priority>99</priority>

<discussion>
<p>
In bullet (1.1.2), <tt>ranges::to</tt> checks whether the container type
<tt>C</tt> models <tt>constructible_from&lt;from_range_t, ...&gt;</tt>
and constructs it via <tt>C(from_range, ...)</tt>.
</p>
<p>
Since <tt>from_range</tt> is a <tt>constexpr</tt> variable here,
it would be more accurate to constrain <tt>C</tt> to be constructible from
a const lvalue tag rather than an rvalue tag.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4917"/>.
</p>
<ol>
<li><p>Modify <sref ref="[range.utility.conv.to]"/> as indicated:</p>

<blockquote>
<pre>
  template&lt;class C, input_range R, class... Args&gt; requires (!view&lt;C&gt;)
    constexpr C to(R&amp;&amp; r, Args&amp;&amp;... args);
</pre>
<blockquote>
  <p>
    -1- <i>Returns</i>: An object of type <tt>C</tt> constructed from the elements of <tt>r</tt> in the following manner:
    </p>
    <ol style="list-style-type:none">
    <li><p>(1.1) — If <tt>convertible_to&lt;range_reference_t&lt;R&gt;, range_value_t&lt;C&gt;&gt;</tt> is <tt>true</tt>:</p></li>
    <ol style="list-style-type:none">
    <li><p>(1.1.1) — If <tt>constructible_from&lt;C, R, Args...&gt;</tt> is <tt>true</tt>:</p></li>
    <blockquote><tt>C(std::forward&lt;R&gt;(r), std::forward&lt;Args&gt;(args)...)</tt></blockquote>
    <li><p>(1.1.2) — Otherwise, if <tt>constructible_from&lt;C, <ins>const </ins>from_range_t<ins>&amp;</ins>, R, Args...&gt;</tt> is <tt>true</tt>:</p></li>
    <blockquote><tt>C(from_range, std::forward&lt;R&gt;(r), std::forward&lt;Args&gt;(args)...)</tt></blockquote>
    […]
    </ol>
  </ol>
</blockquote>
</blockquote>
</li>
</ol>
  
</resolution>

</issue>
