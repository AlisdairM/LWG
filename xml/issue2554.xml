<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2554" status="New">
<title>Swapping multidimensional arrays is never <tt>noexcept</tt></title>
<section><sref ref="[utility.swap]"/></section>
<submitter>Orson Peters</submitter>
<date>1 Nov 2015</date>
<priority>99</priority>

<discussion>
<p>
The <tt>noexcept</tt> specification for the <tt>std::swap</tt> overload for arrays has the effect that 
all multidimensional arrays &mdash; even those of build-in types &mdash; would be considered as non-<tt>noexcept</tt> 
swapping, as described in the following 
<a href="http://stackoverflow.com/questions/26793979/why-is-swapping-multidimensional-arrays-not-noexcept">Stackoverflow article</a>.
<p/>
Consider the following example code:
</p>
<blockquote><pre>
#include &lt;utility&gt;
#include &lt;iostream&gt;

int main() 
{
  int x[2][3];
  int y[2][3];

  using std::swap;
  std::cout &lt;&lt; noexcept(swap(x, y)) &lt;&lt; "\n";
}
</pre></blockquote>
<p>
Both clang 3.8.0 and gcc 5.2.0 return <tt>0</tt>.
<p/>
The reason for this unexpected result seems to be a consequence of both core wording rules (<sref ref="[basic.scope.pdecl]"/> says
that "The point of declaration for a name is immediately after its complete declarator (Clause 8) and before its initializer (if any)"
and the exception specification is part of the declarator) and the fact that the exception-specification of the <tt>std::swap</tt> 
overload for arrays uses an expression and not a type trait. At the point where the expression is evaluated, only the non-array
<tt>std::swap</tt> overload is in scope whose <tt>noexcept</tt> specification evaluates to <tt>false</tt> since arrays are neither
move-constructible nor move-assignable.
<p/>
<b>Daniel:</b>
<p/>
The here described problem is another example for the currently broken <tt>swap</tt> exception specifications in the Standard
library as pointed out by LWG <iref ref="2456"/>. The paper 
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4511.html">N4511</a> describes a resolution that would address
this problem. If the array <tt>swap</tt> overload would be declared instead as follows,
</p>
<blockquote><pre>
template &lt;class T, size_t N&gt; 
void swap(T (&amp;a)[N], T (&amp;b)[N]) noexcept(is_nothrow_swappable&lt;T&gt;::value);
</pre></blockquote>
<p>
the expected outcome is obtained.
</p>
</discussion>

<resolution>
</resolution>

</issue>
