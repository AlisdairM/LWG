<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2939" status="New">
<title>Some type-completeness constraints of traits are overspecified</title>
<section><sref ref="[meta.type.synop]"/></section>
<submitter>Daniel Kr&uuml;gler</submitter>
<date>2 Mar 2017</date>
<priority>2</priority>

<discussion>
<p>
LWG <iref ref="2797"/> (RU 2) suggests that certain type-traits should be required to
diagnose violations of their pre-conditions. The basic idea is founded and I see no problems for
requiring this for the mentioned traits <tt>alignment_of</tt> or <tt>is_base_of</tt>,
for example. But if we want to require this diagnostics for some other traits, such as <tt>is_convertible</tt>,
<tt>is_constructible</tt> (and friends), or <tt>is_callable</tt> (and possibly some others), we really should
be sure that our current requirements are OK. 
<p/>
Unfortunately, there exists some cases, where we currently overspecify imposing complete type requirements where they
are not actually required. For example, for the following situation the answer of the trait could 
be given without ever needing the complete type of <tt>X</tt>:
</p>
<blockquote><pre>
struct X; // Never defined

static_assert(std::is_convertible_v&lt;X, const X&amp;&gt;);
</pre></blockquote>
<p>
Unfortunately we cannot <em>always</em> allow incomplete types, because most type constructions or conversions indeed
require a complete type, so <em>generally</em> relaxing the current restrictions is also not an option.
<p/>
The core language has a solution for this "small" gap of situations, where the response of the compiler <em>might</em>
depend on type completeness: Undefined behaviour. So, I believe we need a somewhat more detailled form to express the
intend here. Informally, I would suggest that the program should only be ill-formed in the situation described by 
LWG <iref ref="2797"/>, if there exists the <em>possibility</em> that the compiler would require complete types for the
considered operation. The example shown above, <tt>std::is_convertible_v&lt;X, const X&amp;&gt;</tt>, would <b>never</b>
require the need to complete <tt>X</tt>, so here no violation should exist.
<p/>
The presented example might seem a tiny one, but the Standard Library type traits are extreme fundamental tools and we should
try to not give the impression that an approximate rule of the current type constraints breaks reasonable code.
<p/>
It is correct, that above example has currently undefined behaviour due to the breakage of pre-conditions, therefore
this issue suggests to fix the current situation <em>before</em> enforcing a diagnostic for such valid situations.
</p>

<note>2017-03-04, Kona</note>
<p>Set priority to 2. Is related to <iref ref="2797"/>, but really needs an audit of the type traits.</p>

<note>2018-08 Batavia Monday issue discussion</note>
<p>Issues <iref ref="2797"/>, <iref ref="2939"/>, <iref ref="3022"/>, and <iref ref="3099"/> are all closely related. Walter to write a paper resolving them.</p>

<note>2020-02 Prague Thursday issue discussion</note>
<p>
Two of the issues (<iref ref="2797"/> and <iref ref="3022"/>) had been resolved by the
acceptance of <a href="https://wg21.link/p1285r0">P1285R0</a>.
</p>

<note>2024-05-09; Jonathan provides wording</note>
</discussion>

<resolution>
<p>This wording is relative to <paper num="n4981"/>.</p>
<blockquote>
<ol>
<li>
In <sref ref="[meta.unary.prop]"/> Table 51,
change the <b>Preconditions</b> text for
`is_constructible`, `is_trivially_constructible`, `is_nothrow_constructible`,
`is_convertible`, `is_nothrow_convertible`,
`reference_constructs_from_temporary`, and `reference_converts_from_temporary`
as indicated.
<blockquote>
<table style="border: 1px solid; border-spacing: 1.5em">
<thead style="text-align: center">
<tr><th>Template</th><th>Condition</th><th>Postconditions</th></tr>
</thead>
<tbody style="vertical-align: top">
<tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr>
<tr>
<td>
<pre><code>template&lt;class T, class... Args&gt;
struct is_constructible;</code></pre>
</td>
<td>
For a function type `T` or
for a <i>cv</i> `void` type `T`,
<code>is_constructible_v&lt;T, Args...&gt;</code>
is `false`,
otherwise <i>see below</i>
<ins>.</ins>
</td>
<td>
<ins>
Either `T` is a reference type and `Args` contains a single type that
is similar (<sref ref="[conv.qual]"/>) to
<code>remove_reference_t&lt;T&gt;</code>, or
</ins>
`T` and all types in the template parameter pack `Args` shall be complete types,
<i>cv</i> `void`, or arrays of unknown bound.
</td>
</tr>
<tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr>
<tr>
<td>
<pre><code>template&lt;class T, class... Args&gt;
struct is_trivially_constructible;</code></pre>
</td>
<td>
<code>is_constructible_v&lt;T, Args...&gt;</code>
is `true` and the variable definition for `is_constructible`,
as defined below, is known to call no operation that is not trivial
(<sref ref="[basic.types.general]"/>, <sref ref="[special]"/>).
</td>
<td>
<ins>
Either `T` is a reference type and `Args` contains a single type that
is similar (<sref ref="[conv.qual]"/>) to
<code>remove_reference_t&lt;T&gt;</code>, or
</ins>
`T` and all types in the template parameter pack `Args` shall be complete types,
<i>cv</i> `void`, or arrays of unknown bound.
</td>
</tr>
<tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr>
<tr>
<td>
<pre><code>template&lt;class T, class... Args&gt;
struct is_nothrow_constructible;</code></pre>
</td>
<td>
<code>is_constructible_v&lt;T, Args...&gt;</code>
is `true` and the variable definition for `is_constructible`,
as defined below, is known not to throw any exceptions
(<sref ref="[expr.unary.noexcept]"/>).
</td>
<td>
<ins>
Either `T` is a reference type and `Args` contains a single type that
is similar (<sref ref="[conv.qual]"/>) to
<code>remove_reference_t&lt;T&gt;</code>, or
</ins>
`T` and all types in the template parameter pack `Args` shall be complete types,
<i>cv</i> `void`, or arrays of unknown bound.
</td>
</tr>
<tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr>
<tr>
<td>
<pre><code>template&lt;class T, class U&gt;
struct reference_constructs_from_temporary;</code></pre>
</td>
<td>
`T` is a reference type, and the initialization
<code>T t(VAL&lt;U&gt;);</code>
is well-formed and binds `t` to a temporary object whose lifetime
is extended (<sref ref="[class.temporary]"/>).
Access checking is performed as if in a context unrelated to `T` and `U`.
Only the validity of the immediate context of the variable initialization
is considered.
<br/>
[<i>Note 5</i>: The initialization can result in effects such as
the instantiation of class template specializations and
function template specializations,
the generation of implicitly-defined functions, and so on.
Such effects are not in the "immediate context" and can result in
the program being ill-formed &mdash;<i>end note</i>]
</td>
<td>
<ins>
Either `T` is not a reference type, or `U`
is similar (<sref ref="[conv.qual]"/>) to
<code>remove_reference_t&lt;T&gt;</code>, or
</ins>
<del>`T` and</del>
`U` shall be <ins>a complete type</ins> <del>complete types</del>,
<i>cv</i> `void`, or <ins>an array</ins><del>arrays</del> of unknown bound.
</td>
</tr>
<tr>
<td>
<pre><code>template&lt;class T, class U&gt;
struct reference_converts_from_temporary;</code></pre>
</td>
<td>
`T` is a reference type, and the initialization
<code>T t = VAL&lt;U&gt;;</code>
is well-formed and binds `t` to a temporary object whose lifetime
is extended (<sref ref="[class.temporary]"/>).
Access checking is performed as if in a context unrelated to `T` and `U`.
Only the validity of the immediate context of the variable initialization
is considered.
<br/>
[<i>Note 6</i>: The initialization can result in effects such as
the instantiation of class template specializations and
function template specializations,
the generation of implicitly-defined functions, and so on.
Such effects are not in the "immediate context" and can result in
the program being ill-formed &mdash;<i>end note</i>]
</td>
<td>
<ins>
Either `T` is not a reference type, or `U`
is similar (<sref ref="[conv.qual]"/>) to
<code>remove_reference_t&lt;T&gt;</code>, or
</ins>
<del>`T` and</del>
`U` shall be <ins>a complete type</ins> <del>complete types</del>,
<i>cv</i> `void`, or <ins>an array</ins><del>arrays</del> of unknown bound.
</td>
</tr>
</tbody>
</table>
</blockquote>
</li>
<li>
In <sref ref="[meta.rel]"/> Table 53,
change the <b>Comments</b> text for
`is_convertible` and `is_nothrow_convertible`
as indicated.
<blockquote>
<table style="border: 1px solid; border-spacing: 1.5em">
<thead style="text-align: center">
<tr><th>Template</th><th>Condition</th><th>Comments</th></tr>
</thead>
<tbody style="vertical-align: top">
<tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr>
<tr>
<td>
<pre><code>template&lt;class From, class To&gt;
struct is_convertible;</code></pre>
</td>
<td>
<i>see below</i>
</td>
<td>
<ins>
Either `To` is a reference type and `From`
is similar (<sref ref="[conv.qual]"/>) to
<code>remove_reference_t&lt;To&gt;</code>, or
</ins>
`From` and `To` shall be complete types,
<i>cv</i> `void`, or arrays of unknown bound.
</td>
</tr>
<tr>
<td>
<pre><code>template&lt;class From, class To&gt;
struct is_nothrow_convertible;</code></pre>
</td>
<td>
<code>is_convertible_v&lt;From, To&gt;</code>
is `true` and the conversion, as defined by `is_convertible`,
is known not to throw any exceptions
(<sref ref="[expr.unary.noexcept]"/>).
</td>
<td>
<ins>
Either `To` is a reference type and `From`
is similar (<sref ref="[conv.qual]"/>) to
<code>remove_reference_t&lt;To&gt;</code>, or
</ins>
`From` and `To` shall be complete types,
<i>cv</i> `void`, or arrays of unknown bound.
</td>
</tr>
</tbody>
</table>
</blockquote>
</li>
</ol>
</blockquote>
</resolution>

</issue>

