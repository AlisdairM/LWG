<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3582" status="New">
<title>Unclear where <tt>std::async</tt> exceptions are handled</title>
<section><sref ref="[futures.async]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>23 Aug 2021</date>
<priority>3</priority>

<discussion>
<p>
<sref ref="[futures.async]"/> (3.1) says:
</p>
<blockquote>
<p>
Any exception propagated from the execution of <tt>invoke(<i>decay-copy</i>(std::forward&lt;F&gt;(f)), 
<i>decay-copy</i>(std::forward&lt;Args&gt;(args))...)</tt> is stored as the exceptional result in the 
shared state.
</p>
</blockquote>
<p>
It's not clear whether this includes the evaluation of the <tt><i>decay-copy</i></tt> calls in the calling 
thread, or only the invocation of invoke with the results of those <tt><i>decay-copy</i></tt> calls.
<p/>
A literal reading suggests that any exceptions from any part of that expression should be stored in the 
shared state. All of libstdc++, libc++ and MSVC only store exceptions from the call to <tt>invoke</tt>, not the 
calls to <tt><i>decay-copy</i></tt>. Exceptions from the <tt><i>decay-copy</i></tt> calls are propagated 
to the caller of <tt>std::async</tt>. We should clarify that that's what the standard means.
</p>

<note>2021-09-20; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4892">N4892</a>.
</p>

<ol>
<li><p>Modify <sref ref="[futures.async]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class F, class... Args&gt;
  [[nodiscard]] future&lt;invoke_result_t&lt;decay_t&lt;F&gt;, decay_t&lt;Args&gt;...&gt;&gt;
    async(F&amp;&amp; f, Args&amp;&amp;... args);
template&lt;class F, class... Args&gt;
  [[nodiscard]] future&lt;invoke_result_t&lt;decay_t&lt;F&gt;, decay_t&lt;Args&gt;...&gt;&gt;
    async(launch policy, F&amp;&amp; f, Args&amp;&amp;... args);
</pre>
<blockquote>
<p>
-2- <i>Mandates</i>: [&hellip;]
<p/>
-3- <i>Effects</i>: The first function behaves the same as a call to the second function with a <tt>policy</tt> argument of
<tt>launch::async | launch::deferred</tt> and the same arguments for <tt>F</tt> and <tt>Args</tt>. The second function
creates a shared state that is associated with the returned <tt>future</tt> object. The further behavior of the second function 
depends on the <tt>policy</tt> argument as follows (if more than one of these conditions applies, the implementation may 
choose any of the corresponding policies):
</p>
<ol style="list-style-type: none">
<li><p>(3.1) &mdash; If <tt>launch::async</tt> is set in <tt>policy</tt>, calls 
<tt>invoke(<i>decay-copy</i>(std::forward&lt;F&gt;(f)), <i>decay-copy</i>(std::forward&lt;Args&gt;(args))...)</tt> 
(<sref ref="[func.require]"/>, <sref ref="[thread.thread.constr]"/>) as if in a new thread of execution
represented by a <tt>thread</tt> object with the calls to <tt><i>decay-copy</i></tt> being evaluated 
in the thread that called <tt>async</tt>. Any return value is stored as the result in the shared state. Any 
exception propagated from the <del>execution of <tt>invoke(<i>decay-copy</i>(std::forward&lt;F&gt;(f)), 
<i>decay-copy</i>(std::forward&lt;Args&gt;(args))...)</tt></del><ins>call to <tt>invoke</tt></ins> is stored as 
the exceptional result in the shared state. <ins>[<i>Note ?:</i> Exceptions from the <tt><i>decay-copy</i></tt> 
calls are propagated to the caller. &mdash; <i>end note</i>]</ins> The <tt>thread</tt> object is stored in 
the shared state and affects the behavior of any asynchronous return objects that reference that state.</p></li>
<li><p>[&hellip;]</p></li>
</ol>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
