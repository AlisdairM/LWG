<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3922" status="New">
<title>It's unclear whether <tt>numeric_limits</tt> can be specialized by users</title>
<section><sref ref="[numeric.limits.general]"/></section>
<submitter>Christopher Di Bella</submitter>
<date>14 Apr 2023</date>
<priority>3</priority>

<discussion>
<p>
<sref ref="[namespace.std]"/>/p2 notes that "unless explicitly prohibited", a user may conditionally specialize 
any class template for program-defined types. <sref ref="[numeric.limits.general]"/>/p1 doesn't explicitly prohibit 
this, but it does create a bit of a grey area with its wording because it describes <tt>numeric_limits</tt> as a 
class template describing "the implementation's representation" of "the arithmetic types".
<p/>
Since this type is about what the implementation provides, and about arithmetic types only, it's not clear whether 
a user can specialize it for their own library type such as <tt>ns::int256</tt>. <tt>ns::int256</tt> isn't an 
arithmetic type (despite resembling one), so one can interpret <sref ref="[namespace.std]"/>/p2's (b) condition to 
mean that <tt>numeric_limits&lt;ns::int256&gt;</tt> needs to be explicitly specialized as if it were the primary 
template.
<p/>
<b>Daniel:</b>
<p/>
This issue has overlap with LWG <iref ref="3923"/>.
</p>

<note>2023-05-24; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
</p>
<p>
Several votes for Tentatively Ready with <b>Option A</b>,
but a request to consider LWG <iref ref="3923"/> first/instead of this one.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4944"/>.
</p>

<blockquote class="note">
<p>
[<i>Drafting Note:</i> Two mutually exclusive options are prepared, depicted below by <b>Option A</b> and 
<b>Option B</b>, respectively.] 
</p>
</blockquote>

<p>
<b>Option A:</b> (This assumes that the above described scenario is intended to be supported)
</p>

<ol>
<li>
<p>Add the following new paragraph at the end of <sref ref="[numeric.limits.general]"/> as indicated:</p>

<blockquote class="note">
<p>
[<i>Drafting Note:</i> The particular wording form "emulating an arithmetic type" has been borrowed from
Table 99 &mdash; <i>Cpp17Clock</i> requirements [tab:time.clock] and <sref ref="[time.duration.general]"/> p2,
respectively.] 
</p>
</blockquote>

<blockquote>
<p>
<ins>-?- The <tt>numeric_limits</tt> template may be specialized for program-defined types emulating arithmetic types.</ins>
</p>
</blockquote>
</li>
</ol>

<p>
<b>Option B:</b> (This assumes that the above described scenario is <em>not</em> intended to be supported)
</p>

<ol>
<li>
<p>Add the following new paragraph at the end of <sref ref="[numeric.limits.general]"/> as indicated:</p>

<blockquote class="note">
<p>
[<i>Drafting Note:</i> The particular wording form has been borrowed from
<sref ref="[coroutine.handle.general]"/> p2 and <sref ref="[allocator.traits.general]"/> p1, 
respectively.] 
</p>
</blockquote>

<blockquote>
<p>
<ins>-?- If a program declares an explicit or partial specialization of <tt>numeric_limits</tt>, the program 
is ill-formed, no diagnostic required.
</ins>
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
