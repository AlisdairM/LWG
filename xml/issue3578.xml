<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3578" status="New">
<title>Iterator SCARYness in the context of associative container merging</title>
<section><sref ref="[associative.reqmts.general]"/></section>
<submitter>Joaqu&iacute;n M L&oacute;pez Mu&ntilde;oz</submitter>
<date>04 Aug 2021</date>
<priority>99</priority>

<discussion>
<p>
For the expression <tt>a.merge(a2)</tt>, postconditions say that "iterators referring to the transferred elements 
[&hellip;] now behave as iterators into <tt>a</tt> [&hellip;]". When <tt>a</tt> and <tt>a2</tt> are of different 
types, this seems to imply, under the widest interpretation for "behaving as", that <tt>a</tt>- iterators and 
<tt>a2</tt>-iterators are actually of the same type, that is, that associative containers have SCARY iterators,
 which is, to the best of my knowledge, not currently mandated by the standard.
<p/>
There's (at least) three possible resolutions to this ambiguity, ordered by intrusiveness:
</p>
<ul>
<li><p>Indicate that "behaving as" only applies to the case where <tt>a</tt> and <tt>a2</tt> are of the same type.</p></li>
<li><p>Clarify what "behaving as" means. A non-SCARY interpretation is that an <tt>a2</tt>-iterator to a transferred 
element can still be dereferenced, incremented (if not past the last element of <tt>a</tt>) and decremented (if 
not pointing to the first element of <tt>a</tt>), while comparison with <tt>a</tt>-iterators and use in the 
interface of <tt>a</tt> is not guaranteed.</p></li>
<li><p>Mandate SCARY iterators by, for instance, requiring that associative containers with compatible nodes 
(<sref ref="[container.node.overview]"/>/1) have the same iterator types.</p></li>
</ul>
<p>
Note that this issue does not extend to unordered associative containers, as there (<sref ref="[unord.req.general]"/>) 
iterators to transferred elements are invalidated, which makes the point of SCARYness irrelevant. That said, 
if SCARY iterators are finally required for associative containers, it makes much sense to extend the requirement 
to unordered associative containers as well.
</p>
</discussion>

<resolution>
</resolution>

</issue>
