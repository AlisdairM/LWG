<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2856" status="Resolved">
<title><tt>std::async</tt> should be marked as <tt>[[nodiscard]]</tt></title>
<section><sref ref="[futures.async]"/></section>
<submitter>Andrey Davydov</submitter>
<date>20 Jan 2017</date>
<priority>2</priority>

<discussion>
<p>
Because the destructor of the <tt>std::future</tt> returned from the <tt>std::async</tt> blocks until 
the asynchronous operation completes, discarding the <tt>std::async</tt> return value leads to the 
synchronous code execution, which is pointless. For example, in the following code
</p>
<blockquote>
<pre>
void task1();
void task2();

void foo()
{
  std::async(std::launch::async,  task1),
  std::async(std::launch::async,  task2);
}

void bar()
{
  std::async(std::launch::async,  task1);
  std::async(std::launch::async,  task2);
}
</pre>
</blockquote>
<p>
<tt>task1</tt> and <tt>task2</tt> will be concurrently executed in the function 'foo', but sequentially in the function 'bar'.
</p>

<note>2017-01-27 Telecon</note>
<p>Priority 2; Nico to provide wording.</p>

<note>2017-03-04, Kona</note>
<p>This should be handled by Nico's paper <a href="http://wg21.link/P0600">P0600</a>.</p>
</discussion>

<resolution>
<p>Resolved by adoption of <a href="http://wg21.link/P0600">P0600</a> in Albuquerque</p>
</resolution>

</issue>
