<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3771" status="Voting">
<title>[fund.ts.v3] remove binders typedefs from <code>function</code></title>
<section><sref ref="[func.wrap.func.overview]"/></section>
<submitter>Alisdair Meredith</submitter>
<date>12 Sep 2022</date>
<priority>99</priority>

<discussion>
<p><b>Addresses: fund.ts.v3</b></p>
<p>
The LFTSv3 bases its specification for <code>experimental::function</code>
on <code>std::function</code> in the C++20 standard.
However, the wording was largely copied over from LFTSv2 which based its
wording on the C++14 standard.
</p>
<p>
For C++17, we removed the conditionally defined typedefs for the legacy binders
API, but this removal was not reflected in the TS.  We are now left with a
specification referring to unknown types, <tt>T1</tt> and <tt>T2</tt>.
</p>
<p>
 These typedefs should be excised to match the referenced standard.
</p>

<note>2022-09-23; Reflector poll</note>
<p>
Set status to Tentatively Ready after ten votes in favour during reflector poll.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4920"/>.
</p>

<ol>
<li>
<p>Modify the synopsis in <sref ref="[func.wrap.func.overview]"/>
as indicated:</p>

<blockquote><pre>
namespace std {
  namespace experimental::inline fundamentals_v3 {

    template&lt;class&gt; class function; <i>// undefined</i>

    template&lt;class R, class... ArgTypes&gt;
    class function&lt;R(ArgTypes...)&gt; {
    public:
      using result_type = R;
      <del>using argument_type = T1;</del>
      <del>using first_argument_type T1;</del>
      <del>using second_argument_type = T2;</del>

      using allocator_type = erased_type;

      // ...
  }
}
</pre></blockquote>
</li>
</ol>
</resolution>

</issue>
