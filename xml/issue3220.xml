<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3220" status="New">
<title>P0558 broke conforming C++14 uses of atomic <tt>shared_ptr</tt></title>
<section><sref ref="[atomics.syn]"/></section>
<submitter>Casey Carter</submitter>
<date>11 Jun 2019</date>
<priority>3</priority>

<discussion>
<p>
This well-formed C++14 program:
</p>
<blockquote><pre>
#include &lt;atomic&gt;
#include &lt;memory&gt;

struct Abstract { virtual void test() = 0; };
struct Concrete : Abstract { virtual void test() override {} };

int main() {
  std::shared_ptr&lt;Abstract&gt; ptr;
  std::atomic_store&lt;Abstract&gt;(&amp;ptr, std::make_shared&lt;Concrete&gt;());
}
</pre></blockquote>
<p>
is ill-formed in C++17. <a href="http://wg21.link/p0558">P0558</a> changed the non-member 
non-<tt>shared_ptr</tt> atomic functions to avoid deducing from their second argument, 
e.g. C++14 <tt>atomic_store</tt>:
</p>
<blockquote><pre>
template&lt;class T&gt; void atomic_store(atomic&lt;T&gt;*, T); <i>// #1</i>
</pre></blockquote>
<p>
became C++17 <tt>atomic_store</tt>:
</p>
<blockquote><pre>
template&lt;class T&gt; void atomic_store(atomic&lt;T&gt;*, typename atomic&lt;T&gt;::value_type); <i>// #2</i>
</pre></blockquote>
<p>
The program intends to call the "other" <tt>atomic_store</tt> from 
<sref ref="[depr.util.smartptr.shared.atomic]"/>:
</p>
<blockquote><pre>
template&lt;class T&gt; void atomic_store(shared_ptr&lt;T&gt;*, shared_ptr&lt;T&gt;); <i>// #3</i>
</pre></blockquote>
<p>
In C++14, the call expression in the sample program &mdash; 
<tt>std::atomic_store&lt;Abstract&gt;(&amp;ptr, std::make_shared&lt;Concrete&gt;())</tt> &mdash; 
selects overload <tt><i>#3</i></tt>; overload <tt><i>#1</i></tt> fails to be viable due to the 
lack of conversions from <tt>shared_ptr&lt;Abstract&gt;*</tt> to <tt>atomic&lt;Abstract&gt;*</tt> 
and from <tt>shared_ptr&lt;Concrete&gt;</tt> to <tt>Abstract</tt>. In C++17, overload 
<tt><i>#2</i></tt> doesn't get to the point of considering argument conversions: when we try to 
generate the declaration of the specialization for <tt>T = Abstract</tt> we must instantiate 
<tt>atomic&lt;Abstract&gt;</tt> in order to substitute <tt>typename atomic&lt;Abstract&gt;::value_type</tt>, 
but doing so violates the requirement in [atomics.types.generic] p1 that "The type of the template 
argument <tt>T</tt> shall be trivially copyable"
<p/>
The fix is fairly straightforward since <tt>atomic&lt;T&gt;::value_type</tt> is always an alias 
for <tt>T</tt>: for those non-member atomic functions with overloads defined in 
<sref ref="[depr.util.smartptr.shared.atomic]"/>, use a different form to require that <tt>T</tt> 
in the type of the second parameter is non-deduced.
</p>

<note>2019-07 Issue Prioritiztion</note>
<p>Priority to 3 after discussion on the reflector.</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4810">N4810</a>.</p>

<ol>
<li><p>Modify <sref ref="[atomics.syn]"/>, header <tt>&lt;atomic&gt;</tt> synopsis, as indicated:</p>

<blockquote><pre>
[&hellip;]
<i>// <sref ref="[atomics.nonmembers]"/>, non-member functions</i>
[&hellip;]
template&lt;class T&gt;
  void atomic_store(volatile atomic&lt;T&gt;*, <del>typename atomic&lt;T&gt;::value_type</del><ins>type_identity_t&lt;T&gt;</ins>) noexcept;
template&lt;class T&gt;
  void atomic_store(atomic&lt;T&gt;*, <del>typename atomic&lt;T&gt;::value_type</del><ins>type_identity_t&lt;T&gt;</ins>) noexcept;
template&lt;class T&gt;
  void atomic_store_explicit(volatile atomic&lt;T&gt;*, <del>typename atomic&lt;T&gt;::value_type</del><ins>type_identity_t&lt;T&gt;</ins>,
                             memory_order) noexcept;
template&lt;class T&gt;
  void atomic_store_explicit(atomic&lt;T&gt;*, <del>typename atomic&lt;T&gt;::value_type</del><ins>type_identity_t&lt;T&gt;</ins>,
                             memory_order) noexcept;
[&hellip;]
template&lt;class T&gt;
  T atomic_exchange(volatile atomic&lt;T&gt;*, <del>typename atomic&lt;T&gt;::value_type</del><ins>type_identity_t&lt;T&gt;</ins>) noexcept;
template&lt;class T&gt;
  T atomic_exchange(atomic&lt;T&gt;*, <del>typename atomic&lt;T&gt;::value_type</del><ins>type_identity_t&lt;T&gt;</ins>) noexcept;
template&lt;class T&gt;
  T atomic_exchange_explicit(volatile atomic&lt;T&gt;*, <del>typename atomic&lt;T&gt;::value_type</del><ins>type_identity_t&lt;T&gt;</ins>,
                             memory_order) noexcept;
template&lt;class T&gt;
  T atomic_exchange_explicit(atomic&lt;T&gt;*, <del>typename atomic&lt;T&gt;::value_type</del><ins>type_identity_t&lt;T&gt;</ins>,
                             memory_order) noexcept;
template&lt;class T&gt;
  bool atomic_compare_exchange_weak(volatile atomic&lt;T&gt;*,
                                    <del>typename atomic&lt;T&gt;::value_type</del><ins>type_identity_t&lt;T&gt;</ins>*,
                                    <del>typename atomic&lt;T&gt;::value_type</del><ins>type_identity_t&lt;T&gt;</ins>) noexcept;
template&lt;class T&gt;
  bool atomic_compare_exchange_weak(atomic&lt;T&gt;*,
                                    <del>typename atomic&lt;T&gt;::value_type</del><ins>type_identity_t&lt;T&gt;</ins>*,
                                    <del>typename atomic&lt;T&gt;::value_type</del><ins>type_identity_t&lt;T&gt;</ins>) noexcept;
template&lt;class T&gt;
  bool atomic_compare_exchange_strong(volatile atomic&lt;T&gt;*,
                                      <del>typename atomic&lt;T&gt;::value_type</del><ins>type_identity_t&lt;T&gt;</ins>*,
                                      <del>typename atomic&lt;T&gt;::value_type</del><ins>type_identity_t&lt;T&gt;</ins>) noexcept;
template&lt;class T&gt;
  bool atomic_compare_exchange_strong(atomic&lt;T&gt;*,
                                      <del>typename atomic&lt;T&gt;::value_type</del><ins>type_identity_t&lt;T&gt;</ins>*,
                                      <del>typename atomic&lt;T&gt;::value_type</del><ins>type_identity_t&lt;T&gt;</ins>) noexcept;
template&lt;class T&gt;
  bool atomic_compare_exchange_weak_explicit(volatile atomic&lt;T&gt;*,
                                             <del>typename atomic&lt;T&gt;::value_type</del><ins>type_identity_t&lt;T&gt;</ins>*,
                                             <del>typename atomic&lt;T&gt;::value_type</del><ins>type_identity_t&lt;T&gt;</ins>,
                                             memory_order, memory_order) noexcept;
template&lt;class T&gt;
  bool atomic_compare_exchange_weak_explicit(atomic&lt;T&gt;*,
                                             <del>typename atomic&lt;T&gt;::value_type</del><ins>type_identity_t&lt;T&gt;</ins>*,
                                             <del>typename atomic&lt;T&gt;::value_type</del><ins>type_identity_t&lt;T&gt;</ins>,
                                             memory_order, memory_order) noexcept;
template&lt;class T&gt;
  bool atomic_compare_exchange_strong_explicit(volatile atomic&lt;T&gt;*,
                                               <del>typename atomic&lt;T&gt;::value_type</del><ins>type_identity_t&lt;T&gt;</ins>*,
                                               <del>typename atomic&lt;T&gt;::value_type</del><ins>type_identity_t&lt;T&gt;</ins>,
                                               memory_order, memory_order) noexcept;
template&lt;class T&gt;
  bool atomic_compare_exchange_strong_explicit(atomic&lt;T&gt;*,
                                               <del>typename atomic&lt;T&gt;::value_type</del><ins>type_identity_t&lt;T&gt;</ins>*,
                                               <del>typename atomic&lt;T&gt;::value_type</del><ins>type_identity_t&lt;T&gt;</ins>,
                                               memory_order, memory_order) noexcept;
</pre></blockquote>

</li>

<li><p>Modify <sref ref="[atomics.nonmembers]"/> as indicated:</p>

<blockquote>
<p>
-1- A non-member function template whose name matches the pattern <tt>atomic_<i>f</i></tt> or the 
pattern <tt>atomic_<i>f</i>_explicit</tt> invokes the member function <tt><i>f</i></tt>, with the 
value of the first parameter as the object expression and the values of the remaining parameters 
(if any) as the arguments of the member function call, in order. An argument for a parameter of 
type <tt>atomic&lt;T&gt;::value_type*</tt> <ins>or <tt>type_identity_t&lt;T&gt;*</tt></ins> is 
dereferenced when passed to the member function call. If no such member function exists, the 
program is ill-formed.
</p>
</blockquote>

</li>
</ol>
</resolution>
</issue>
