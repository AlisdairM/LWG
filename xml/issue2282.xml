<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2282" status="Resolved">
<title>[fund.ts] Incorrect <tt>is_assignable</tt> constraint in <tt>optional::op=(U&amp;&amp;)</tt></title>
<section><sref ref="[optional.object.assign]"/></section>
<submitter>Howard Hinnant</submitter>
<date>25 Aug 2013</date>

<discussion>
<p><b>Addresses: fund.ts</b></p>

<p>
Minor wording nit in <sref ref="[optional.object.assign]"/>/p15:
</p>
<blockquote><pre>
template &lt;class U&gt; optional&lt;T&gt;&amp; operator=(U&amp;&amp; v);
</pre>
<blockquote>
<p>
-15- <i>Requires:</i> <tt>is_constructible&lt;T, U&gt;::value</tt> is true and <tt>is_assignable&lt;<span  style="color:#C80000;font-weight:bold">U, T</span>&gt;::value</tt> is true.
</p>
</blockquote></blockquote>
<p>
Should be:
</p>
<blockquote><pre>
template &lt;class U&gt; optional&lt;T&gt;&amp; operator=(U&amp;&amp; v);
</pre>
<blockquote>
<p>
-15- <i>Requires:</i> <tt>is_constructible&lt;T, U&gt;::value</tt> is true and <tt>is_assignable&lt;<span  style="color:#C80000;font-weight:bold">T&amp;, U</span>&gt;::value</tt> is true.
</p>
</blockquote></blockquote>

<note>2013-09 Chicago:</note>
<p>
Move to Deferred.  This feature will ship after C++14 and should be revisited then.
</p>

<note>2014-06-06 pre-Rapperswill</note>
<p>
This issue has been reopened as fundamentals-ts.
</p>

<note>2014-06-07 Daniel comments</note>
<p>
This issue should be set to <b>Resolved</b>, because the wording fix is already applied in the 
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4023.html#optional.object.assign">last fundamentals working draft</a>.
</p>

<note>2014-06-16 Rapperswill</note>
<p>
Confirmed that this issue is resolved in the current Library Fundamentals working paper.
</p>

</discussion>

<resolution>
<p>This wording is relative to N3691.</p>

<ol>
<li><p>Edit <sref ref="[optional.object.assign]"/> p15 as indicated:</p>

<blockquote><pre>
template &lt;class U&gt; optional&lt;T&gt;&amp; operator=(U&amp;&amp; v);
</pre>
<blockquote>
<p>
-15- <i>Requires:</i> <tt>is_constructible&lt;T, U&gt;::value</tt> is true and 
<tt>is_assignable&lt;<del>U, T</del><ins>T&amp;, U</ins>&gt;::value</tt> is true.
</p>
</blockquote></blockquote>
</li>

</ol>
</resolution>

</issue>
