<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3514" status="New">
<title><tt>stacktrace</tt> should add type alias <tt>pmr::stacktrace</tt></title>
<section><sref ref="[stacktrace.syn]"/></section>
<submitter>Hiroaki Ando</submitter>
<date>11 Jan 2021</date>
<priority>99</priority>

<discussion>
<p>
<tt>std::stacktrace</tt> is almost <tt>std::vector&lt;stacktrace_entry&gt;</tt>. This
makes it an abvious candidate to define an alias for <tt>std::polymorphic_allocator</tt>.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4878">N4878</a>. 
</p>

<ol>
<li><p>Modify <sref ref="[stacktrace.syn]"/>, header <tt>&lt;stacktrace&gt;</tt> synopsis, as indicated:</p>

<blockquote><pre>
namespace std {
  <i>// <sref ref="[stacktrace.entry]"/>, class stacktrace_entry</i>
  class stacktrace_entry;
  
  <i>// <sref ref="[stacktrace.basic]"/>, class template basic_stacktrace</i>
  template&lt;class Allocator&gt;
  class basic_stacktrace;
  
  // basic_stacktrace typedef names
  using stacktrace = basic_stacktrace&lt;allocator&lt;stacktrace_entry&gt;&gt;;

  [&hellip;]
  
  <i>// <sref ref="[stacktrace.basic.hash]"/>, hash support</i>
  template&lt;class T&gt; struct hash;
  template&lt;&gt; struct hash&lt;stacktrace_entry&gt;;
  template&lt;class Allocator&gt; struct hash&lt;basic_stacktrace&lt;Allocator&gt;&gt;;
  
  <ins>namespace pmr {
    using stacktrace = std::basic_stacktrace&lt;polymorphic_allocator&lt;stacktrace_entry&gt;&gt;;
  }</ins>
}
</pre></blockquote>
</li>
</ol>
</resolution>

</issue>
