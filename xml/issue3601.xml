<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3601" status="WP">
<title><tt>common_iterator</tt>'s <tt><i>postfix-proxy</i></tt> needs <tt>indirectly_readable</tt></title>
<section><sref ref="[common.iter.nav]"/></section>
<submitter>Casey Carter</submitter>
<date>24 Sep 2021</date>
<priority>99</priority>

<discussion>
<p>
It would appear that when <a href="https://wg21.link/p2259r1">P2259R1</a> added <tt><i>postfix-proxy</i></tt> to 
<tt>common_iterator::operator++(int)</tt> LWG missed a crucial difference between <tt>operator++(int)</tt> and 
<tt>operator-&gt;</tt> which uses a similar proxy: <tt>operator-&gt;</tt> requires the wrapped type to be 
<tt>indirectly_readable</tt>, but <tt>operator++(int)</tt> does not. Consequently, operations that read from the 
wrapped type for the <tt><i>postfix-proxy</i></tt> case in <tt>operator++(int)</tt> are not properly constrained 
to be valid.
</p>

<note>2021-10-14; Reflector poll</note>
<p>
Set status to Tentatively Ready after six votes in favour during reflector poll.
</p>

<note>2022-02-10 Approved at February 2022 virtual plenary. Status changed: Tentatively Ready &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4892">N4892</a>.
</p>

<ol>
<li><p>Modify <sref ref="[common.iter.nav]"/> as indicated:</p>

<blockquote>
<pre>
decltype(auto) operator++(int);
</pre>
<blockquote>
<p>
-4- <i>Preconditions:</i> <tt>holds_alternative&lt;I&gt;(v_)</tt> is <tt>true</tt>.
<p/>
-5- <i>Effects:</i> If <tt>I</tt> models <tt>forward_iterator</tt>, equivalent to:
</p>
<blockquote><pre>
common_iterator tmp = *this;
++*this;
return tmp;
</pre></blockquote>
<p>
Otherwise, if <tt>requires (I&amp; i) { { *i++ } -&gt; <i>can-reference</i>; }</tt> is <tt>true</tt> 
or <tt><ins>indirectly_readable&lt;I&gt; &amp;&amp;</ins> constructible_from&lt;iter_value_t&lt;I&gt;, 
iter_reference_t&lt;I&gt;&gt; &amp;&amp; move_constructible&lt;iter_value_t&lt;I&gt;&gt;</tt> is <tt>false</tt>, 
equivalent to:
</p>
<blockquote><pre>
return get&lt;I&gt;(v_)++;
</pre></blockquote>
<p>
Otherwise, equivalent to: [&hellip;]
</p>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
