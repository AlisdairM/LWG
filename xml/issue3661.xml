<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3661" status="WP">
<title><tt>constinit atomic&lt;shared_ptr&lt;T&gt;&gt; a(nullptr);</tt> should work</title>
<section><sref ref="[util.smartptr.atomic.shared]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>21 Jan 2022</date>
<priority>99</priority>

<discussion>
<p>
All the following are valid except for the last line:
</p>
<blockquote>
<pre>
constinit int i1{};
constinit std::atomic&lt;int&gt; a1{};
constinit int i2{0};
constinit std::atomic&lt;int&gt; a2{0};
constinit std::shared_ptr&lt;int&gt; i3{};
constinit std::atomic&lt;std::shared_ptr&lt;int&gt;&gt; a3{};
constinit std::shared_ptr&lt;int&gt; i4{nullptr};
constinit std::atomic&lt;std::shared_ptr&lt;int&gt;&gt; a4{nullptr}; <span style="color:red;font-weight:bolder">// error</span>
</pre>
</blockquote>
<p>
The initializer for <tt>a4</tt> will create a <tt>shared_ptr&lt;int&gt;</tt> temporary (using the same constructor 
as <tt>i4</tt>) but then try to use <tt>atomic(shared_ptr&lt;int&gt;)</tt> which is not <tt>constexpr</tt>.
<p/>
This is an unnecessary inconsistency in the API for <tt>atomic&lt;shared_ptr&lt;T&gt;&gt;</tt> that can 
easily be fixed. The proposed resolution has been implemented in libstdc++.
<p/>
There is no need to also change <tt>atomic&lt;weak_ptr&lt;T&gt;&gt;</tt> because <tt>weak_ptr</tt> doesn't have a 
constructor taking <tt>nullptr</tt>.
</p>

<note>2022-01-30; Reflector poll</note>
<p>
Set status to Tentatively Ready after seven votes in favour during reflector poll.
</p>

<note>2022-02-10 Approved at February 2022 virtual plenary. Status changed: Tentatively Ready &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4901"/>. 
</p>

<ol>
<li><p>Modify <sref ref="[util.smartptr.atomic.shared]"/>, class template partial specialization 
<tt>atomic&lt;shared_ptr&lt;T&gt;&gt;</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
[&hellip;]
constexpr atomic() noexcept;
<ins>constexpr atomic(nullptr_t) noexcept : atomic() { }</ins>
atomic(shared_ptr&lt;T&gt; desired) noexcept;
atomic(const atomic&amp;) = delete;
void operator=(const atomic&amp;) = delete;
[&hellip;]
</pre>
</blockquote>
</li>
</ol>
</resolution>

</issue>
