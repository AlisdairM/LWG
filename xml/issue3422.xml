<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3422" status="C++23">
<title>Issues of <tt>seed_seq</tt>'s constructors</title>
<section><sref ref="[rand.util.seedseq]"/></section>
<submitter>Jiang An</submitter>
<date>25 Mar 2020</date>
<priority>3</priority>

<discussion>
<p>
<sref ref="[rand.util.seedseq]"/> says that <tt>std::seed_seq</tt> has following 3 constructors:
<p/>
<ol style="list-style-type: none">
<li><p>#1: <tt>seed_seq()</tt></p></li>
<li><p>#2: <tt>template&lt;class T&gt; seed_seq(initializer_list&lt;T&gt; il)</tt></p></li>
<li><p>#3: <tt>template&lt;class InputIterator&gt; seed_seq(InputIterator begin, InputIterator end)</tt></p></li>
</ol>
<p/>
The default constructor (#1) has no precondition and does not throw, and <tt>vector&lt;result_type&gt;</tt>'s default 
constructor is already <tt>noexcept</tt> since C++17, so #1 should also be <tt>noexcept</tt>.
<p/>
Despite that the <tt>vector&lt;result_type&gt;</tt> member is exposition-only, current implementations (at least 
<a href="https://github.com/llvm-mirror/libcxx/blob/master/include/random#L3523">libc++</a>, 
<a href="https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/include/bits/random.h#L6090">libstdc++</a> and 
<a href="https://github.com/microsoft/STL/blob/master/stl/inc/random#L259">MSVC STL</a>) all hold it as the only 
data member of <tt>seed_seq</tt>, even with different names. And #1 is already <tt>noexcept</tt> in libc++ and libstdc++.
<p/>
These constructors are not constrained, so #3 would never be matched in list-initialization. Consider following code:
</p>
<blockquote><pre>
#include &lt;random&gt;
#include &lt;vector&gt;

int main()
{
  std::vector&lt;int&gt; v(32);
  std::seed_seq{std::begin(v), std::end(v)}; // error: #2 matched and T is not an integer type
  std::seed_seq(std::begin(v), std::end(v)); // OK
}
</pre></blockquote>
<p>
#3 should be made available in list-initialization by changing <i>Mandates</i> in 
<sref ref="[rand.util.seedseq]"/>/3 to <i>Constraints</i> IMO.
</p>

<note>2020-04-18 Issue Prioritization</note>
<p>Priority to 3 after reflector discussion.</p>

<note>2021-06-23; Reflector poll</note>
<p>
Set status to Tentatively Ready after five votes in favour during reflector poll.
</p>

<note>2021-10-14 Approved at October 2021 virtual plenary. Status changed: Voting &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4861">N4861</a>.
</p>

<ol>
<li><p>Modify <sref ref="[rand.util.seedseq]"/> as indicated:</p>

<blockquote>
<pre>
class seed_seq {
public:
  <i>// types</i>
  using result_type = uint_least32_t;

  <i>// constructors</i>
  seed_seq() <ins>noexcept</ins>;
  [&hellip;]
};
</pre>
</blockquote>
<blockquote>
<pre>
seed_seq() <ins>noexcept</ins>;
</pre>
<blockquote>
<p>
-1- <i>Postconditions:</i> <tt>v.empty()</tt> is <tt>true</tt>.
<p/>
<del>-2- <i>Throws:</i> Nothing.</del>
</p>
</blockquote>
<pre>
template&lt;class T&gt;
  seed_seq(initializer_list&lt;T&gt; il);
</pre>
<blockquote>
<p>
-3- <i><ins>Constraints</ins><del>Mandates</del>:</i> <tt>T</tt> is an integer type.
<p/>
-4- <i>Effects:</i> Same as <tt>seed_seq(il.begin(), il.end())</tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>
</issue>
