<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2369" status="WP">
<title><tt>constexpr max(initializer_list)</tt> vs <tt>max_element</tt></title>
<section><sref ref="[alg.min.max]"/></section>
<submitter>Marc Glisse</submitter>
<date>21 Feb 2014</date>
<priority>3</priority>

<discussion>
<p>
As part of the resolution for LWG issue <iref ref="2350"/>, <tt>max(initializer_list)</tt> was marked as <tt>constexpr</tt>. Looking 
at two implementations of this function (libstdc++ and libc++), both implement it in terms of <tt>max_element</tt>, which is <em>not</em> 
marked as <tt>constexpr</tt>. This is inconsistent and forces some small amount of code duplication in the implementation. Unless we 
remove <tt>constexpr</tt> from this overload of <tt>max</tt>, I believe we should add <tt>constexpr</tt> to <tt>max_element</tt>.
</p>

<note>2015-02 Cologne</note>
<p>
AM: Can we implement this with the C++14 <tt>constexpr</tt> rules? JM: Yes. AM: Ready? [Yes]
<p/>
Accepted.
</p>

</discussion>

<resolution>
<p>This wording is relative to N3936.</p>

<ol>
<li><p>In <sref ref="[algorithms.general]"/>, header <tt>&lt;algorithm&gt;</tt> synopsis, and <sref ref="[alg.min.max]"/>, change as 
indicated (add <tt>constexpr</tt> to every signature from the first <tt>min_element</tt> to the second <tt>minmax_element</tt>)::</p>

<blockquote>
<pre>
template&lt;class ForwardIterator&gt;
<ins>constexpr</ins> ForwardIterator min_element(ForwardIterator first, ForwardIterator last);
template&lt;class ForwardIterator, class Compare&gt;
<ins>constexpr</ins> ForwardIterator min_element(ForwardIterator first, ForwardIterator last,
                                      Compare comp);
[&hellip;]
template&lt;class ForwardIterator&gt;
<ins>constexpr</ins> ForwardIterator max_element(ForwardIterator first, ForwardIterator last);
template&lt;class ForwardIterator, class Compare&gt;
<ins>constexpr</ins> ForwardIterator max_element(ForwardIterator first, ForwardIterator last,
                                      Compare comp);
[&hellip;]
template&lt;class ForwardIterator&gt;
<ins>constexpr</ins> pair&lt;ForwardIterator, ForwardIterator&gt;
minmax_element(ForwardIterator first, ForwardIterator last);
template&lt;class ForwardIterator, class Compare&gt;
<ins>constexpr</ins> pair&lt;ForwardIterator, ForwardIterator&gt;
minmax_element(ForwardIterator first, ForwardIterator last, Compare comp);
</pre>
</blockquote>
</li>

</ol>
</resolution>

</issue>
