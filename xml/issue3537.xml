<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3537" status="New">
<title>&sect;[iterator.range] Missing <tt>noexcept</tt> for <tt>std::rbegin</tt>/<tt>rend</tt> for arrays and 
<tt>initializer_list</tt></title>
<section><sref ref="[iterator.range]"/></section>
<submitter>Jiang An</submitter>
<date>21 Mar 2021</date>
<priority>3</priority>

<discussion>
<p>
Overloads for <tt>std::rbegin</tt>/<tt>rend</tt> for built-in arrays and <tt>std::initializer_list</tt>'s has 
no preconditions and never throw exceptions, thus should be <tt>noexcept</tt>. LWG <iref ref="2280"/> 
addressed a similar issue for <tt>std::begin/end</tt>.
<p/>
Suggestion: change these declarations in <sref ref="[iterator.range]"/> (p10, 11, 12, 13) as indicated:
</p>
<blockquote>
<pre>
template&lt;class T, size_t N&gt; constexpr reverse_iterator&lt;T*&gt; rbegin(T (&amp;array)[N]) <ins>noexcept</ins>;

template&lt;class T, size_t N&gt; constexpr reverse_iterator&lt;T*&gt; rend(T (&amp;array)[N]) <ins>noexcept</ins>;

template&lt;class E&gt; constexpr reverse_iterator&lt;const E*&gt; rbegin(initializer_list&lt;E&gt; il) <ins>noexcept</ins>;

template&lt;class E&gt; constexpr reverse_iterator&lt;const E*&gt; rend(initializer_list&lt;E&gt; il) <ins>noexcept</ins>;
</pre>
</blockquote>
<p>
If this change is accepted, we may also specify <em>conditional</em> <tt>noexcept</tt> for <tt>std::crbegin/crend</tt> 
(in <sref ref="[iterator.range]"/> p14, 15), by adding <tt>noexcept(noexcept(std::rbegin/crend(c)))</tt>, like in 
LWG <iref ref="2280"/>.
<p/>
Conditional noexcept for other functions in <sref ref="[iterator.range]"/> (p2, 3, 7, 8, 16, 18, 20 22) may also be 
added for consistency.
</p>

<note>2021-03-21; Daniel comments</note>
<p>
There is intentionally no P/R provided at this point, but I'm volunteering to provide it if we got feedback whether
adding <em>conditional</em> <tt>noexcept</tt> specifiers similar to those provided by LWG <iref ref="2280"/> would
be preferred or not.
</p>

<note>2021-04-20; Reflector poll</note>
<p>
Priority set to 3.
</p>
<p>
Jonathan: This would create a strange situation where <tt>std::rbegin</tt>
and <tt>std::crbegin</tt> on an <tt>initializer_list</tt> are noexcept but
<tt>std::begin</tt> and <tt>std::cbegin</tt> aren't guaranteed to be
(because an <tt>initializer_list</tt> uses the generic <tt>std::begin</tt>
and <tt>std::cbegin</tt> overloads, which have no conditional noexcept).
</p>
<p>
Casey: I don't think we should mark these rbegin/rend overloads noexcept
without making the pertinent <tt>reverse_iterator</tt> constructors
conditionally noexcept.
</p>

<note>2025-07-01; <paper num="P3623R0"/> would resolve this</note>

</discussion>

<resolution>
</resolution>

</issue>
