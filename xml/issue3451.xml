<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3451" status="New">
<title>Inconsistently explicit deduction guides</title>
<section><sref ref="[basic.string]"/><sref ref="[range.join.view]"/></section>
<submitter>Johel Ernesto Guerrero Pe&ntilde;a</submitter>
<date>11 Jun 2020</date>
<priority>3</priority>

<discussion>
<p>
The library inconsistently marks deduction guides as <tt>explicit</tt>. <tt>join_view</tt> and <tt>basic_string</tt> 
account for the only two occurrences of unconditionally explicit deduction guides. All other deduction
guides have no <tt>explicit</tt>-specifier. Following is a list of unconditionally explicit constructors 
with their deduction guides.
</p>
<blockquote><pre>
template&lt;class Y&gt;
  explicit shared_ptr(const weak_ptr&lt;Y&gt;&amp; r);

template&lt;class T&gt;
  shared_ptr(weak_ptr&lt;T&gt;) -&gt; shared_ptr&lt;T&gt;;

template&lt;class T&gt;
  constexpr explicit basic_string(const T&amp; t, const Allocator&amp; a = Allocator());

template&lt;class charT,
         class traits,
         class Allocator = allocator&lt;charT&gt;&gt;
  explicit basic_string(basic_string_view&lt;charT, traits&gt;, const Allocator&amp; = Allocator())
    -&gt; basic_string&lt;charT, traits, Allocator&gt;;

explicit queue(const Container&amp;);
explicit queue(Container&amp;&amp;);

template&lt;class Container&gt;
  queue(Container) -&gt; queue&lt;typename Container::value_type, Container&gt;;

explicit stack(const Container&amp;);
explicit stack(Container&amp;&amp;);

template&lt;class Container&gt;
  stack(Container) -&gt; stack&lt;typename Container::value_type, Container&gt;;

constexpr explicit join_view(V base);

template&lt;class R&gt;
  explicit join_view(R&amp;&amp;) -&gt; join_view&lt;views::all_t&lt;R&gt;&gt;;

constexpr explicit common_view(V r);

template&lt;class R&gt;
  common_view(R&amp;&amp;) -&gt; common_view&lt;views::all_t&lt;R&gt;&gt;;

constexpr explicit reverse_view(V r);

template&lt;class R&gt;
  reverse_view(R&amp;&amp;) -&gt; reverse_view&lt;views::all_t&lt;R&gt;&gt;;


explicit zoned_time(TimeZonePtr z);
explicit zoned_time(string_view name);

template&lt;class TimeZonePtrOrName&gt;
  zoned_time(TimeZonePtrOrName&amp;&amp;)
    -&gt; zoned_time&lt;seconds, time-zone-representation&lt;TimeZonePtrOrName&gt;&gt;;

template&lt;class C&gt;
explicit stop_callback(const stop_token&amp; st, C&amp;&amp; cb)
    noexcept(is_nothrow_constructible_v&lt;Callback, C&gt;);
template&lt;class C&gt;
explicit stop_callback(stop_token&amp;&amp; st, C&amp;&amp; cb)
    noexcept(is_nothrow_constructible_v&lt;Callback, C&gt;);

template&lt;class Callback&gt;
  stop_callback(stop_token, Callback) -&gt; stop_callback&lt;Callback&gt;;
</pre></blockquote>

<note>2020-07-17; Priority set to 3 in telecon</note>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4861">N4861</a>.</p>

<ol>
<li>
<p>Modify <sref ref="[basic.string]"/>, class template <tt>basic_string</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
[&hellip;]
template&lt;class charT,
         class traits,
         class Allocator = allocator&lt;charT&gt;&gt;
  <del>explicit</del> basic_string(basic_string_view&lt;charT, traits&gt;, const Allocator&amp; = Allocator())
    -&gt; basic_string&lt;charT, traits, Allocator&gt;;
[&hellip;]
</pre>
</blockquote>
</li>

<li>
<p>Modify <sref ref="[string.cons]"/> as indicated:</p>

<blockquote>
<pre>
[&hellip;]
template&lt;class charT,
         class traits,
         class Allocator = allocator&lt;charT&gt;&gt;
  <del>explicit</del> basic_string(basic_string_view&lt;charT, traits&gt;, const Allocator&amp; = Allocator())
    -&gt; basic_string&lt;charT, traits, Allocator&gt;;
[&hellip;]
</pre>
<blockquote>
<p>
-22- <i>Constraints:</i> <tt>Allocator</tt> is a type that qualifies as an allocator (<sref ref="[container.requirements.general]"/>).
</p>
</blockquote>
</blockquote>
</li>

<li>
<p>Modify <sref ref="[range.join.view]"/>, class template <tt>join_view</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
[&hellip;]
template&lt;class R&gt;
  <del>explicit</del> join_view(R&amp;&amp;) -&gt; join_view&lt;views::all_t&lt;R&gt;&gt;;
[&hellip;]
</pre>
</blockquote>
</li>
</ol>
</resolution>
</issue>
