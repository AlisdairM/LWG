<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3146" status="Tentatively Ready">
<title>Excessive unwrapping in <tt>std::ref</tt>/<tt>cref</tt></title>
<section><sref ref="[refwrap.helpers]"/></section>
<submitter>Agust&iacute;n K-ballo Berg&eacute;</submitter>
<date>10 Jul 2018</date>
<priority>3</priority>

<discussion>
<p>
The overloads of <tt>std::ref</tt>/<tt>cref</tt> that take a <tt>reference_wrapper</tt> as argument are
defined as calling <tt>std::ref</tt>/<tt>cref</tt> recursively, whereas the return type is defined as
unwrapping just one level. Calling these functions with arguments of multiple level of wrapping leads
to ill-formed programs:
</p>
<blockquote><pre>
int i = 0;
std::reference_wrapper&lt;int&gt; ri(i);
std::reference_wrapper&lt;std::reference_wrapper&lt;int&gt;&gt; rri(ri);
std::ref(rri); <i>// error within 'std::ref'</i>
</pre></blockquote>
<p>
[Note: these overloads were added by issue resolution 10.29 for TR1, which can be found at
<a href="https://wg21.link/n1688">N1688</a>, at Redmond 2004]
</p>
<note>2018-08-20 Priority set to 3 after reflector discussion</note>
<note>2021-05-22 Tim syncs wording to the current working draft</note>

<note>2021-08-20; LWG telecon</note>
<p>
Set status to Tentatively Ready after telecon review.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4885"/>.
</p>

<ol>
<li>
<p>Change <sref ref="[refwrap.helpers]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class T&gt; constexpr reference_wrapper&lt;T&gt; ref(reference_wrapper&lt;T&gt; t) noexcept;
</pre>
<blockquote>
<p>
-3- <i>Returns:</i> <tt><del>ref(t.get())</del><ins>t</ins></tt>.
</p>
</blockquote>
[&hellip;]
<pre>
template&lt;class T&gt; constexpr reference_wrapper&lt;const T&gt; cref(reference_wrapper&lt;T&gt; t) noexcept;
</pre>
<blockquote>
<p>
-5- <i>Returns:</i> <tt><del>cref(t.get())</del><ins>t</ins></tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
