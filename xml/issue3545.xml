<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3545" status="New">
<title><tt>std::pointer_traits</tt> should be SFINAE-friendly</title>
<section><sref ref="[pointer.traits]"/></section>
<submitter>Glen Joseph Fernandes</submitter>
<date>20 Apr 2021</date>
<priority>99</priority>

<discussion>
<p>
<a href="https://wg21.link/p1474r1">P1474R1</a> chose to use <tt>std::to_address</tt> 
(a mechanism of converting pointer-like types to raw pointers) for contiguous iterators.
<tt>std::to_address</tt> provides an optional customization point via an optional member in 
<tt>std::pointer_traits</tt>. However all iterators are not pointers, and the primary 
template of <tt>std::pointer_traits&lt;Ptr&gt;</tt> requires that either 
<tt>Ptr::element_type</tt> is valid or <tt>Ptr</tt> is of the form 
<tt>template&lt;T, Args...&gt;</tt> or the <tt>pointer_traits</tt> specialization is
ill-formed. This requires specializing <tt>pointer_traits</tt> for those contiguous iterator 
types which is inconvenient for users. <a href="https://wg21.link/p1474">P1474</a>
should have also made <tt>pointer_traits</tt> SFINAE friendly.
</p>
</discussion>

<resolution>
</resolution>

</issue>
