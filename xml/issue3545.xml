<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3545" status="C++23">
<title><tt>std::pointer_traits</tt> should be SFINAE-friendly</title>
<section><sref ref="[pointer.traits]"/></section>
<submitter>Glen Joseph Fernandes</submitter>
<date>20 Apr 2021</date>
<priority>2</priority>

<discussion>
<p>
<a href="https://wg21.link/p1474r1">P1474R1</a> chose to use <tt>std::to_address</tt> 
(a mechanism of converting pointer-like types to raw pointers) for contiguous iterators.
<tt>std::to_address</tt> provides an optional customization point via an optional member in 
<tt>std::pointer_traits</tt>. However all iterators are not pointers, and the primary 
template of <tt>std::pointer_traits&lt;Ptr&gt;</tt> requires that either 
<tt>Ptr::element_type</tt> is valid or <tt>Ptr</tt> is of the form 
<tt>template&lt;T, Args...&gt;</tt> or the <tt>pointer_traits</tt> specialization is
ill-formed. This requires specializing <tt>pointer_traits</tt> for those contiguous iterator 
types which is inconvenient for users. <a href="https://wg21.link/p1474">P1474</a>
should have also made <tt>pointer_traits</tt> SFINAE friendly.
</p>

<note>2021-05-10; Reflector poll</note>
<p>
Priority set to 2. Send to LEWG.
Daniel: "there is no similar treatment for the <code>rebind</code> member
template and I think it should be clarified whether <code>pointer_to</code>'s
signature should exist and in which form in the offending case."
</p>

<note>2022-01-29; Daniel comments</note>
<p>
This issue has some overlap with LWG <iref ref="3665"/> in regard to the question how we should handle
the <tt>rebind_alloc</tt> member template of the <tt>allocator_traits</tt> template as specified by 
<sref ref="[allocator.traits.types]"/>/11. It would seem preferable to decide for the same approach in both 
cases.
</p>

<note>2022-02-22 LEWG telecon; Status changed: LEWG &rarr; Open</note>
<p>
No objection to unanimous consent for Jonathan's suggestion to make
<code>pointer_traits</code> an empty class when there is no
<code>element_type</code>. Jonathan to provide a paper.
</p>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>
This wording is relative to <a href="https://wg21.link/n4885">N4885</a>.
</p>

<ol>
<li><p>Modify <sref ref="[pointer.traits.types]"/> as indicated:</p>

<blockquote class="note">
<p>
As additional drive-by fix the improper usage of the term "instantiation"
has been corrected.
</p>
</blockquote>

<blockquote>
<pre>
using element_type = <i>see below</i>;
</pre>
<blockquote>
<p>
-1- <i>Type:</i> <tt>Ptr::element_type</tt> if the <i>qualified-id</i> <tt>Ptr::element_type</tt> 
is valid and denotes a type (<sref ref="[temp.deduct]"/>); otherwise, <tt>T</tt> if <tt>Ptr</tt> 
is a class template <del>instantiation</del><ins>specialization</ins> of the form 
<tt>SomePointer&lt;T, Args&gt;</tt>, where <tt>Args</tt> is zero or more type arguments; otherwise, 
<del>the specialization is ill-formed</del><ins><tt>pointer_traits</tt> has no member <tt>element_type</tt></ins>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</blockquote>

<note>2022-09-27; Jonathan provides new wording</note>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">

<p>This wording is relative to <paper num="N4917"/>.</p>

<ol>
<li>
<p>Modify <sref ref="[pointer.traits.general]"/> as indicated:</p>

<blockquote>
<p>-1-
The class template <tt>pointer_traits</tt> supplies a uniform interface to
certain attributes of pointer-like types.
</p>

<blockquote><pre>
namespace std {
  template&lt;class Ptr&gt; struct pointer_traits {
    <del>using pointer         = Ptr;</del>
    <del>using element_type    = <i>see below</i>;</del>
    <del>using difference_type = <i>see below</i>;</del>

    <del>template&lt;class U&gt; using rebind = <i>see below</i>;</del>
    <del>static pointer pointer_to(<i>see below</i> r);</del>

    <ins><i>see below</i></ins>;
  };

  template&lt;class T&gt; struct pointer_traits&lt;T*&gt; {
    using pointer         = T*;
    using element_type    = T;
    using difference_type = ptrdiff_t;

    template&lt;class U&gt; using rebind = U*;
    static constexpr pointer pointer_to(<i>see below</i> r) noexcept;
  };
}
</pre></blockquote>

</blockquote>
</li>

<li>
<p>Modify <sref ref="[pointer.traits.types]"/> as indicated:</p>

<blockquote>

<p><ins>-?-
The definitions in this subclause make use of the following
exposition-only class template and concept:
</ins></p>
<blockquote><pre><ins>
template&lt;class T&gt;
struct <i>ptr-traits-elem</i> <i>// exposition only</i>
{ };

template&lt;class T&gt; requires requires { typename T::element_type; }
struct <i>ptr-traits-elem</i>&lt;T&gt;
{ using type = typename T::element_type; };

template&lt;template&lt;class...&gt; class SomePointer, class T, class... Args&gt;
requires (!requires { typename SomePointer&lt;T, Args...&gt;::element_type; })
struct <i>ptr-traits-elem</i>&lt;SomePointer&lt;T, Args...&gt;&gt;
{ using type = T; };

template&lt;class Ptr&gt;
  concept <i>has-elem-type</i> = <i>// exposition only</i>
    requires { typename <i>ptr-traits-elem</i>&lt;Ptr&gt;::type; }
</ins></pre></blockquote>

<p><ins>-?-
If <tt>Ptr</tt> satisfies <tt><i>has-elem-type</i></tt>,
a specialization <tt>pointer_traits&lt;Ptr&gt;</tt> generated from the
<tt>pointer_traits</tt> primary template has the members described in
<sref ref="[pointer.traits.types]"/> and <sref ref="[pointer.traits.functions]"/>;
otherwise, such a specialization has no members by any of the names described
in those subclauses or in <sref ref="[pointer.traits.optmem]"/>.
</ins></p>

<pre><ins>using pointer = Ptr;</ins>
</pre>

<pre>using element_type = <del><i>see below</i></del> <ins>typename <i>ptr-traits-elem</i>&lt;Ptr&gt;::type</ins>;</pre>
<blockquote>
<p><del>-1- <i>Type</i>: <tt>Ptr::element_type</tt> if the <i>qualified-id</i>
<tt>Ptr::element_type</tt> is valid and denotes a type (<sref ref="[temp.deduct]"/>);
otherwise, <tt>T</tt> if <tt>Ptr</tt> is a class template instantiation of the
form <tt>SomePointer&lt;T, Args&gt;</tt>, where <tt>Args</tt> is zero or more
type arguments; otherwise, the
specialization is ill-formed.</del>
</p>
</blockquote>
<pre>using difference_type = <i>see below</i>;</pre>
<blockquote>
<p>-2-
<i>Type</i>: <tt>Ptr::difference_type</tt> if the <i>qualified-id</i>
<tt>Ptr::difference_type</tt> is valid and denotes a type (<sref ref="[temp.deduct]"/>);
otherwise, <tt>ptrdiff_t</tt>.
</p>
</blockquote>
<pre>template&lt;class U&gt; using rebind = <i>see below</i>;</pre>
<blockquote>
<p>-3-
<i>Alias template</i>: <tt>Ptr::rebind&lt;U&gt;</tt> if the <i>qualified-id</i>
<tt>Ptr::rebind&lt;U&gt;</tt> is valid and denotes a type (<sref ref="[temp.deduct]"/>);
otherwise, <tt>SomePointer&lt;U, Args&gt;</tt> if <tt>Ptr</tt> is a class template instantiation of the
form <tt>SomePointer&lt;T, Args&gt;</tt>, where <tt>Args</tt> is zero or more
type arguments; otherwise, the instantiation of <tt>rebind</tt> is ill-formed.
</p>
</blockquote>
</blockquote>
</li>
</ol>


</blockquote>

<note>2022-10-11; Jonathan provides improved wording</note>

<note>2022-10-19; Reflector poll</note>
<p>
Set status to "Tentatively Ready" after six votes in favour in reflector poll.
</p>

<note>2022-11-12 Approved at November 2022 meeting in Kona. Status changed: Voting &rarr; WP.</note>
</discussion>

<resolution>

<p>This wording is relative to <paper num="N4917"/>.</p>

<ol>
<li>
<p>Modify <sref ref="[pointer.traits.general]"/> as indicated:</p>

<blockquote>
<p>-1-
The class template <tt>pointer_traits</tt> supplies a uniform interface to
certain attributes of pointer-like types.
</p>

<blockquote><pre>
namespace std {
  template&lt;class Ptr&gt; struct pointer_traits {
    <del>using pointer         = Ptr;</del>
    <del>using element_type    = <i>see below</i>;</del>
    <del>using difference_type = <i>see below</i>;</del>

    <del>template&lt;class U&gt; using rebind = <i>see below</i>;</del>
    <del>static pointer pointer_to(<i>see below</i> r);</del>

    <ins><i>see below</i></ins>;
  };

  template&lt;class T&gt; struct pointer_traits&lt;T*&gt; {
    using pointer         = T*;
    using element_type    = T;
    using difference_type = ptrdiff_t;

    template&lt;class U&gt; using rebind = U*;
    static constexpr pointer pointer_to(<i>see below</i> r) noexcept;
  };
}
</pre></blockquote>

</blockquote>
</li>

<li>
<p>Modify <sref ref="[pointer.traits.types]"/> as indicated:</p>

<blockquote>

<p><ins>-?-
The definitions in this subclause make use of the following
exposition-only class template and concept:
</ins></p>
<blockquote><pre><ins>
template&lt;class T&gt;
struct <i>ptr-traits-elem</i> <i>// exposition only</i>
{ };

template&lt;class T&gt; requires requires { typename T::element_type; }
struct <i>ptr-traits-elem</i>&lt;T&gt;
{ using type = typename T::element_type; };

template&lt;template&lt;class...&gt; class SomePointer, class T, class... Args&gt;
requires (!requires { typename SomePointer&lt;T, Args...&gt;::element_type; })
struct <i>ptr-traits-elem</i>&lt;SomePointer&lt;T, Args...&gt;&gt;
{ using type = T; };

template&lt;class Ptr&gt;
  concept <i>has-elem-type</i> = <i>// exposition only</i>
    requires { typename <i>ptr-traits-elem</i>&lt;Ptr&gt;::type; }
</ins></pre></blockquote>

<p><ins>-?-
If <tt>Ptr</tt> satisfies <tt><i>has-elem-type</i></tt>,
a specialization <tt>pointer_traits&lt;Ptr&gt;</tt> generated from the
<tt>pointer_traits</tt> primary template has the following members
as well as those described in <sref ref="[pointer.traits.functions]"/>;
otherwise, such a specialization has no members by any of those names.
</ins></p>

<pre><ins>using pointer = <i>see below</i>;</ins></pre>
<blockquote>
<p><ins>-?-
<i>Type</i>: <tt>Ptr</tt>.
</ins></p>
</blockquote>

<pre>using element_type = <i>see below</i>;</pre>
<blockquote>
<p>-1- <i>Type</i>:
<ins><tt>typename <i>ptr-traits-elem</i>&lt;Ptr&gt;::type</tt>.</ins>
<del><tt>Ptr::element_type</tt> if the <i>qualified-id</i>
<tt>Ptr::element_type</tt> is valid and denotes a type (<sref ref="[temp.deduct]"/>);
otherwise, <tt>T</tt> if <tt>Ptr</tt> is a class template instantiation of the
form <tt>SomePointer&lt;T, Args&gt;</tt>, where <tt>Args</tt> is zero or more
type arguments; otherwise, the
specialization is ill-formed.</del>
</p>
</blockquote>
<pre>using difference_type = <i>see below</i>;</pre>
<blockquote>
<p>-2-
<i>Type</i>: <tt>Ptr::difference_type</tt> if the <i>qualified-id</i>
<tt>Ptr::difference_type</tt> is valid and denotes a type (<sref ref="[temp.deduct]"/>);
otherwise, <tt>ptrdiff_t</tt>.
</p>
</blockquote>
<pre>template&lt;class U&gt; using rebind = <i>see below</i>;</pre>
<blockquote>
<p>-3-
<i>Alias template</i>: <tt>Ptr::rebind&lt;U&gt;</tt> if the <i>qualified-id</i>
<tt>Ptr::rebind&lt;U&gt;</tt> is valid and denotes a type (<sref ref="[temp.deduct]"/>);
otherwise, <tt>SomePointer&lt;U, Args&gt;</tt> if <tt>Ptr</tt> is a class template instantiation of the
form <tt>SomePointer&lt;T, Args&gt;</tt>, where <tt>Args</tt> is zero or more
type arguments; otherwise, the instantiation of <tt>rebind</tt> is ill-formed.
</p>
</blockquote>
</blockquote>
</li>

<li>
<p>Modify <sref ref="[pointer.traits.optmem]"/> as indicated:</p>

<blockquote>
<p>-1-
Specializations of <tt>pointer_traits</tt> may define the member declared
in this subclause to customize the behavior of the standard library.
<ins>
A specialization generated from the <tt>pointer_traits</tt> primary template
has no member by this name.
</ins>
</p>
<pre>static element_type* to_address(pointer p) noexcept;</pre>
<blockquote>
<p>-1- <i>Returns</i>:
A pointer of type <tt>element_type*</tt> that references the same location
as the argument <tt>p</tt>.
</p>
</blockquote>
</blockquote>

</li>
</ol>

</resolution>

</issue>
