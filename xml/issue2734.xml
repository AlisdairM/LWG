<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2734" status="Resolved">
<title>Questionable specification in [fs.path.concat]</title>
<section><sref ref="[fs.path.concat]"/></section>
<submitter>Tim Song</submitter>
<date>16 Jun 2016</date>
<priority>2</priority>

<discussion>
<p>
<sref ref="[fs.path.concat]"/> specifies that the postcondition for
</p>
<blockquote>
<pre>
path&amp; operator+=(const path&amp; x);
path&amp; operator+=(const string_type&amp; x);
path&amp; operator+=(const value_type* x);
path&amp; operator+=(value_type x);
template&lt;class Source&gt;
path&amp; operator+=(const Source&amp; x);
template&lt;class EcharT&gt;
path&amp; operator+=(EcharT x);
template&lt;class Source&gt; 
path&amp; concat(const Source&amp; x); 
template&lt;class InputIterator>
path&amp; concat(InputIterator first, InputIterator last);
</pre>
</blockquote>
<p>
is
</p>
<blockquote>
<p>
<tt>native() == prior_native</tt> + <i>effective-argument</i>
</p>
</blockquote>
<p>
where <i>effective-argument</i> is
</p>
<ol>
<li>if <tt>x</tt> is present and is <tt>const path&amp;</tt>, <tt>x.native()</tt>; otherwise</li>
<li>if <tt>source</tt> is present, the effective range of <tt>source</tt> (<sref ref="[fs.path.req]"/>); otherwise,</li>
<li>if <tt>first</tt> and <tt>last</tt> are present, the range <tt>[first, last)</tt>; otherwise,</li>
<li><tt>x</tt></li>
</ol>
<p>
It also says that
</p>
<blockquote>
<p>
If the value type of <i>effective-argument</i> would not be <tt>path::value_type</tt>, the actual argument or 
argument range is first converted (<sref ref="[fs.path.type.cvt]"/>) so that <i>effective-argument</i> has value 
type <tt>path::value_type</tt>.
</p>
</blockquote>
<p>
There are several problems with this specification:
<p/>
First, there is no overload taking "<tt>source</tt>" (note the lower case); all single-argument overloads take 
"<tt>x</tt>". Second, there's nothing that defines what it means to use <tt>operator+</tt> on a string and an 
iterator range; clearly concatentation is intended but there is no wording to that effect.
Third, the final portion uses "value type", but the "value type" of a single character is not a defined concept.
<p/>
Also, the reference only to <sref ref="[fs.path.type.cvt]"/> seems to imply that any format conversion specified in 
<sref ref="[fs.path.fmt.cvt]"/> will not be performed, in seeming contradiction to the rule that <tt>native()</tt> 
is to return the native pathname format (<sref ref="[fs.path.native.obs]"/>/1). Is that intended?
</p>

<note>2016-11-10, Billy suggests wording</note>
<p>
The wording for LWG <iref ref="2798"/> resolves this issue as well.
</p>
</discussion>

<resolution>
<p>This is resolved by p0492r2.</p>
</resolution>

</issue>
