<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3913" status="New">
<title><code>ranges::const_iterator_t&lt;range R&gt;</code> fails to accept arrays of unknown bound</title>
<section><sref ref="[ranges.syn]"/></section>
<submitter>Arthur O'Dwyer</submitter>
<date>28 Mar 2023</date>
<priority>99</priority>

<discussion>
<p>
<code>ranges::iterator_t&lt;T&gt;</code> is unconstrained; but in contrast,
<code>ranges::const_iterator_t&lt;T&gt;</code> constrains <code>T</code> to be a <code>range</code>,
i.e., it must have an <code>end</code>.
<pre><code>
    static_assert(std::is_same_v&lt;std::ranges::iterator_t&lt;int(&)[2]&gt;, int*&gt;);
    static_assert(std::is_same_v&lt;std::ranges::iterator_t&lt;int(&)[]&gt;, int*&gt;);  // OK
    static_assert(std::is_same_v&lt;std::ranges::const_iterator_t&lt;int(&)[2]&gt;, const int*&gt;);
    static_assert(std::is_same_v&lt;std::ranges::const_iterator_t&lt;int(&)[]&gt;, const int*&gt;);  // hard error
</code></pre>
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4944"/>.
</p>

<ol>
<li>
<p>Modify <sref ref="[ranges.syn]"/> as indicated:</p>

<blockquote><pre><code>
  template&lt;class T&gt;
    using iterator_t = decltype(ranges::begin(declval&lt;T&&gt;()));    <i>// freestanding</i>
  template&lt;range R&gt;
    using sentinel_t = decltype(ranges::end(declval&lt;R&&gt;()));      <i>// freestanding</i>
  template&lt;<del>range</del><ins>class</ins> R&gt;
    using const_iterator_t = const_iterator&lt;iterator_t&lt;R&gt;&gt;;       <i>// freestanding</i>
  template&lt;range R&gt;
    using const_sentinel_t = const_sentinel&lt;sentinel_t&lt;R&gt;&gt;;       <i>// freestanding</i>
</code></pre></blockquote>
</li>
</ol>

</resolution>

</issue>
