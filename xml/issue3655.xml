<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3655" status="C++23">
<title>The <tt><i>INVOKE</i></tt> operation and <tt>union</tt> types</title>
<section><sref ref="[func.require]"/></section>
<submitter>Jiang An</submitter>
<date>29 Dec 2021</date>
<priority>3</priority>

<discussion>
<p>
There are two cases of the <tt><i>INVOKE</i></tt> operation specified with <tt>std::is_base_of_v</tt> 
(<sref ref="[func.require]"/> (1.1), (1,4)), which means the following code snippet is ill-formed, as 
<tt>std::is_base_of_v&lt;B, D&gt;</tt> is <tt>false</tt> when either <tt>B</tt> or <tt>D</tt> is a 
<tt>union</tt> type.
</p>
<blockquote><pre>
union Foo { int x; };
static_assert(std::is_invocable_v&lt;int Foo::*, Foo&amp;&gt;);
</pre></blockquote>
<p>
Currently libstdc++ accepts this code, because it uses slightly different conditions that handle <tt>union</tt> 
types. libc++ and MSVC STL reject this code as specified in <sref ref="[func.require]"/>.
<p/>
Should we change the conditions in <sref ref="[func.require]"/> (1.1) and (1.4) to match libstdc++ and correctly 
handle <tt>union</tt> types?
</p>

<note>2022-01-30; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
</p>

<note>2023-02-07; Jonathan adds wording</note>
<p>This is a regression introduced by LWG <iref ref="2219"/>.
In C++14 <code>std::result_of&lt;int Foo::*(Foo&amp;)&gt;::type</code>
was valid, because the <tt><i>INVOKE</i></tt> wording used to say
"<tt>f</tt> is a pointer to member data of a class <tt>T</tt>
and <tt>t1</tt> is an object of type <tt>T</tt>
or a reference to an object of type <tt>T</tt>
or a reference to an object of a type derived from <tt>T</tt>".
Since LWG 2219 we use <code>is_base_of</code> which is always false for
union types.
I don't think LWG 2219 intended to break this case, so we should fix it.
</p>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>
This wording is relative to <paper num="N4928"/>.
</p>

<ol>
<li><p>Modify <sref ref="[func.require]"/> as indicated:</p>

<blockquote>
<p>-1-
Define <tt><i>INVOKE</i>(f, t1, t2, &hellip;, tN)</tt> as follows:
</p>
<ul>
<li>(1.1) &mdash;
<tt>(t1.*f)(t2, &hellip;, tN)</tt>
when <tt>f</tt> is a pointer to a member function of a class <tt>T</tt> and
<tt>
<ins>is_same_v&lt;T, remove_cvref_t&lt;decltype(t1)&gt;&gt; ||</ins>
is_base_of_v&lt;T, remove_reference_t&lt;decltype(t1)&gt;&gt;</tt>
is <tt>true</tt>;
</li>
<li>(1.2) &mdash;
<tt>(t1.get().*f)(t2, &hellip;, tN)</tt>
when <tt>f</tt> is a pointer to a member function of a class <tt>T</tt> and
<tt>remove_cvref_t&lt;decltype(t1)&gt;</tt>
is a specialization of <tt>reference_wrapper</tt>;
</li>
<li>(1.3) &mdash;
<tt>((*t1).*f)(t2, &hellip;, tN)</tt>
when <tt>f</tt> is a pointer to a member function of a class <tt>T</tt> and
<tt>t1</tt> does not satisfy the previous two items;
</li>
<li>(1.4) &mdash;
<tt>t1.*f</tt>
when <tt>N == 1</tt> and
<tt>f</tt> is a pointer to data member of a class <tt>T</tt> and
<tt>
<ins>is_same_v&lt;T, remove_cvref_t&lt;decltype(t1)&gt;&gt; ||</ins>
is_base_of_v&lt;T, remove_reference_t&lt;decltype(t1)&gt;&gt;</tt>
is <tt>true</tt>;
</li>
<li>(1.5) &mdash;
<tt>t1.get().*f</tt>
when <tt>N == 1</tt> and
<tt>f</tt> is a pointer to data member of a class <tt>T</tt> and
<tt>remove_cvref_t&lt;decltype(t1)&gt;</tt>
is a specialization of <tt>reference_wrapper</tt>;
</li>
<li>(1.6) &mdash;
<tt>(*t1).*f</tt>
when <tt>N == 1</tt> and
<tt>f</tt> is a pointer to data member of a class <tt>T</tt> and
<tt>t1</tt> does not satisfy the previous two items;
</li>
<li>(1.7) &mdash;
<tt>f(t1, t2, &hellip;, tN)</tt> in all other cases.
</li>
</ul>
</blockquote>
</li>
</ol>

</blockquote>

<note>2023-02-07; Jonathan provides wording change requested by LWG</note>
<p>Change <tt>remove_reference_t</tt> to <tt>remove_cvref_t</tt>.
<tt>is_base_of</tt> ignores cv-qualifiers, so this isn't necessary,
but just using the same transformation in both cases seems simpler to grok.
</p>

<note>Issaquah 2023-02-07; LWG</note>
<p>Move to Immediate for C++23</p>

<note>2023-02-13 Status changed: Immediate &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4928"/>.
</p>

<ol>
<li><p>Modify <sref ref="[func.require]"/> as indicated:</p>

<blockquote>
<p>-1-
Define <tt><i>INVOKE</i>(f, t1, t2, &hellip;, tN)</tt> as follows:
</p>
<ul>
<li>(1.1) &mdash;
<tt>(t1.*f)(t2, &hellip;, tN)</tt>
when <tt>f</tt> is a pointer to a member function of a class <tt>T</tt> and
<tt>
<ins>is_same_v&lt;T, remove_cvref_t&lt;decltype(t1)&gt;&gt; ||</ins>
is_base_of_v&lt;T, remove_<del>reference</del><ins>cvref</ins>_t&lt;decltype(t1)&gt;&gt;</tt>
is <tt>true</tt>;
</li>
<li>(1.2) &mdash;
<tt>(t1.get().*f)(t2, &hellip;, tN)</tt>
when <tt>f</tt> is a pointer to a member function of a class <tt>T</tt> and
<tt>remove_cvref_t&lt;decltype(t1)&gt;</tt>
is a specialization of <tt>reference_wrapper</tt>;
</li>
<li>(1.3) &mdash;
<tt>((*t1).*f)(t2, &hellip;, tN)</tt>
when <tt>f</tt> is a pointer to a member function of a class <tt>T</tt> and
<tt>t1</tt> does not satisfy the previous two items;
</li>
<li>(1.4) &mdash;
<tt>t1.*f</tt>
when <tt>N == 1</tt> and
<tt>f</tt> is a pointer to data member of a class <tt>T</tt> and
<tt>
<ins>is_same_v&lt;T, remove_cvref_t&lt;decltype(t1)&gt;&gt; ||</ins>
is_base_of_v&lt;T, remove_<del>reference</del><ins>cvref</ins>_t&lt;decltype(t1)&gt;&gt;</tt>
is <tt>true</tt>;
</li>
<li>(1.5) &mdash;
<tt>t1.get().*f</tt>
when <tt>N == 1</tt> and
<tt>f</tt> is a pointer to data member of a class <tt>T</tt> and
<tt>remove_cvref_t&lt;decltype(t1)&gt;</tt>
is a specialization of <tt>reference_wrapper</tt>;
</li>
<li>(1.6) &mdash;
<tt>(*t1).*f</tt>
when <tt>N == 1</tt> and
<tt>f</tt> is a pointer to data member of a class <tt>T</tt> and
<tt>t1</tt> does not satisfy the previous two items;
</li>
<li>(1.7) &mdash;
<tt>f(t1, t2, &hellip;, tN)</tt> in all other cases.
</li>
</ul>
</blockquote>
</li>
</ol>
</resolution>

</issue>
