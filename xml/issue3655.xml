<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3655" status="New">
<title>The <tt><i>INVOKE</i></tt> operation and <tt>union</tt> types</title>
<section><sref ref="[func.require]"/></section>
<submitter>Jiang An</submitter>
<date>29 Dec 2021</date>
<priority>99</priority>

<discussion>
<p>
There are two cases of the <tt><i>INVOKE</i></tt> operation specified with <tt>std::is_base_of_v</tt> 
(<sref ref="[func.require]"/> (1.1), (1,4)), which means the following code snippet is ill-formed, as 
<tt>std::is_base_of_v&lt;B, D&gt;</tt> is <tt>false</tt> when either <tt>B</tt> or <tt>D</tt> is a 
<tt>union</tt> type.
</p>
<blockquote><pre>
union Foo { int x; }; 
static_assert(std::is_invocable_v&lt;int Foo::*, Foo&amp;&gt;);
</pre></blockquote>
<p>
Currently libstdc++ accepts this code, because it uses slightly different conditions that handle <tt>union</tt> 
types. libc++ and MSVC STL reject this code as specified in <sref ref="[func.require]"/>.
<p/>
Should we change the conditions in <sref ref="[func.require]"/> (1.1) and (1.4) to match libstdc++ and correctly 
handle <tt>union</tt> types?
</p>
</discussion>

<resolution>
</resolution>

</issue>
