<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2900" status="WP">
<title>The copy and move constructors of <tt>optional</tt> are not <tt>constexpr</tt></title>
<section><sref ref="[optional.optional]"/></section>
<submitter>United States</submitter>
<date>3 Feb 2017</date>
<priority>99</priority>

<discussion>
<b>Addresses US 111</b>

<p>The copy and move constructors of <tt>optional</tt> are not <tt>constexpr</tt>. However, the constructors taking a 
<tt>const T&amp;</tt> or <tt>T&amp;&amp;</tt> are <tt>constexpr</tt>, and there is a precedent for having a <tt>constexpr</tt> 
copy constructor in <sref ref="[complex]"/>. The defaulted copy and move constructors of <tt>pair</tt> and <tt>tuple</tt> 
are also conditionally <tt>constexpr</tt> (see 20.4.2 [pairs.pair] p2 and 20.5.2.1 [tuple.cnstr] p2).</p>
<p>A strong motivating use-case is <tt>constexpr</tt> functions returning optional values. This issue was discovered while 
working on a library making heavy use of such.</p>

<p>Proposed change: Add constexpr to: </p>
<blockquote><pre>
optional(const optional &amp;);
optional(optional &amp;&amp;) noexcept(<i>see below</i>);
</pre></blockquote>

<note>2017-02-23, Casey comments and suggests wording</note>
<p>
This issue corresponds to NB comment US 111, which requests that the move and copy constructors of 
<tt>std::optional</tt> be declared <tt>constexpr</tt>. The PR simply suggests adding the <tt>constexpr</tt> 
specifier to the declarations of the constructors. The PR fails to specify the most important thing &mdash; 
and this has been a failing of Library in general &mdash; under what conditions is the thing that we've 
declared constexpr actually expected to be usable in constant expression context? (I think the proper 
standardese here is "under what conditions is the full expression of an initialization that would invoke 
these constructors a constant subexpression?")
<p/>
It is, I believe, well-known that conforming implementations of <tt>optional&lt;T&gt;</tt> must store a <tt>T</tt> 
in a union to provide constexpr constructors that either do [<tt>optional(T const&amp;)</tt>] or do not 
[<tt>optional()</tt>] initialize the contained <tt>T</tt>. A general implementation of <tt>optional</tt>'s 
copy/move constructors must statically choose which union member, if any, to activate in each constructor. 
Since there is no way to change the active member of a union in a constant expression, and a constructor must 
<em>statically</em> choose a union member to activate (i.e., without being affected by the runtime state of the 
copy/move constructor's argument) it's not possible to implement a <em>general</em> constexpr copy/move constructor 
for <tt>optional</tt>.
<p/>
It is, however, possible to copy/move construct a trivially copy constructible/trivially move constructible union 
in <tt>constexpr</tt> context, which effectively copies the union's object representation, resulting in a union 
whose active member is the same as the source union's. Indeed, at least two major implementations of <tt>optional</tt> 
(MSVC and libc++) already provide that behavior as a conforming optimization when <tt>T</tt> is a trivially 
copyable type. If we are to declare <tt>optional&lt;T&gt;</tt>'s copy and move constructors <tt>constexpr</tt>, 
we should additionally specify that those constructors are only required to have the "constexpr mojo" when <tt>T</tt> 
is trivially copyable. (Note that I suggest "trivially copyable" here rather than "trivially copy constructible or 
trivially move constructible" since the simpler requirement is simpler to implement, and I don't believe the more 
complicated requirement provides any additional benefit: I've never seen a trivially copy constructible or 
trivially move constructible type outside of a test suite that was not also trivially copyable.)
</p>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>This wording is relative to <a href="http://wg21.link/N4618">N4618</a>.</p>
<ol>
<li><p>Edit <sref ref="[optional.optional]"/> as indicated:</p>
<blockquote><pre>
	<tt><ins>constexpr</ins> optional(const optional &amp;);</tt>
	<tt><ins>constexpr</ins> optional(optional &amp;&amp;) noexcept(<i>see below</i>);</tt>
</pre></blockquote>
</li>

<li><p>Edit <sref ref="[optional.ctor]"/> paragraph as indicated:</p>
<blockquote><pre>
	<tt><ins>constexpr</ins> optional(const optional &amp;);</tt>
</pre></blockquote>

<p>and </p>

<blockquote><pre>
	<tt><ins>constexpr</ins> optional(optional &amp;&amp;) noexcept(<i>see below</i>);</tt>
</pre></blockquote>
</li>
</ol>
</blockquote>

<note>2017-02-23, Marshall comments</note>
<p>
This is related to LWG <iref ref="2745"/>.
</p>

<note>2017-02-28, Kona, Casey comments and improves wording</note>
<p>
Amended PR per LWG discussion in Kona: replace the "is trivially copyable" requirement with the more specific 
<tt>is_trivially_copy/move_constructible&lt;T&gt;</tt>. LWG was concerned that <tt>tuple</tt> is a counter-example 
to the assumption that all three traits are equivalent for real-world types.
</p>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>
This wording is relative to <a href="http://wg21.link/n4640">N4640</a>.
</p>

<ol>
<li><p>Change the synopsis of class template <tt>optional</tt> in <sref ref="[optional.optional]"/> as follows:</p>

<blockquote><pre>
[&hellip;]
// 20.6.3.1, constructors
constexpr optional() noexcept;
constexpr optional(nullopt_t) noexcept;
<ins>constexpr</ins> optional(const optional&amp;);
<ins>constexpr</ins> optional(optional&amp;&amp;) noexcept(<i>see below</i>);
[&hellip;]
</pre></blockquote>
</li>

<li><p>Modify <sref ref="[optional.ctor]"/> as indicated:</p>
<blockquote><pre>
<ins>constexpr</ins> optional(const optional&amp; rhs);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-6- <i>Remarks:</i> This constructor shall be defined as deleted unless <tt>is_copy_constructible_v&lt;T&gt;</tt> 
is <tt>true</tt>. <ins>If <tt>T</tt> is a trivially copyable type, this constructor shall be a <tt>constexpr</tt> constructor.</ins>
</p>
</blockquote>
<pre>
<ins>constexpr</ins> optional(optional&amp;&amp; rhs) noexcept(<i>see below</i>);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-10- <i>Remarks:</i> The expression inside <tt>noexcept</tt> is equivalent to <tt>is_nothrow_move_constructible_v&lt;T&gt;</tt>.
This constructor shall not participate in overload resolution unless <tt>is_move_constructible_v&lt;T&gt;</tt> is
<tt>true</tt>. <ins>If <tt>T</tt> is a trivially copyable type, this constructor shall be a <tt>constexpr</tt> constructor.</ins>
</p>
</blockquote>
</blockquote>
</li>
</ol>

</blockquote>
<note>Kona 2017-02-27</note>
<p>Accepted as Immediate to resolve NB comment.</p>
</discussion>

<resolution>
<p>
This wording is relative to <a href="http://wg21.link/n4640">N4640</a>.
</p>

<ol>
<li><p>Change the synopsis of class template <tt>optional</tt> in <sref ref="[optional.optional]"/> as follows:</p>

<blockquote><pre>
[&hellip;]
// 20.6.3.1, constructors
constexpr optional() noexcept;
constexpr optional(nullopt_t) noexcept;
<ins>constexpr</ins> optional(const optional&amp;);
<ins>constexpr</ins> optional(optional&amp;&amp;) noexcept(<i>see below</i>);
[&hellip;]
</pre></blockquote>
</li>

<li><p>Modify <sref ref="[optional.ctor]"/> as indicated:</p>
<blockquote><pre>
<ins>constexpr</ins> optional(const optional&amp; rhs);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-6- <i>Remarks:</i> This constructor shall be defined as deleted unless <tt>is_copy_constructible_v&lt;T&gt;</tt> 
is <tt>true</tt>. <ins>If <tt>is_trivially_copy_constructible_v&lt;T&gt;</tt> is <tt>true</tt>, this constructor 
shall be a <tt>constexpr</tt> constructor.</ins>
</p>
</blockquote>
<pre>
<ins>constexpr</ins> optional(optional&amp;&amp; rhs) noexcept(<i>see below</i>);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-10- <i>Remarks:</i> The expression inside <tt>noexcept</tt> is equivalent to <tt>is_nothrow_move_constructible_v&lt;T&gt;</tt>.
This constructor shall not participate in overload resolution unless <tt>is_move_constructible_v&lt;T&gt;</tt> is
<tt>true</tt>. <ins>If <tt>is_trivially_move_constructible_v&lt;T&gt;</tt> is <tt>true</tt>, this constructor shall 
be a <tt>constexpr</tt> constructor.</ins>
</p>
</blockquote>
</blockquote>
</li>
</ol>

</resolution>

</issue>


