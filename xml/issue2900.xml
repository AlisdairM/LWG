<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2900" status="New">
<title>The copy and move constructors of <tt>optional</tt> are not <tt>constexpr</tt></title>
<section><sref ref="[optional.optional]"/></section>
<submitter>United States</submitter>
<date>3 Feb 2017</date>
<priority>99</priority>

<discussion>
<b>Addresses US 111</b>

<p>The copy and move constructors of <tt>optional</tt> are not <tt>constexpr</tt>. However, the constructors taking a 
<tt>const T&amp;</tt> or <tt>T&amp;&amp;</tt> are <tt>constexpr</tt>, and there is a precedent for having a <tt>constexpr</tt> 
copy constructor in <sref ref="[complex]"/>. The defaulted copy and move constructors of <tt>pair</tt> and <tt>tuple</tt> 
are also conditionally <tt>constexpr</tt> (see 20.4.2 [pairs.pair] p2 and 20.5.2.1 [tuple.cnstr] p2).</p>
<p>A strong motivating use-case is <tt>constexpr</tt> functions returning optional values. This issue was discovered while 
working on a library making heavy use of such.</p>

<p>Proposed change: Add constexpr to: </p>
<blockquote><pre>
optional(const optional &amp;);
optional(optional &amp;&amp;) noexcept(<i>see below</i>);
</pre></blockquote>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/N4618">N4618</a>.</p>
<ol>
<li><p>Edit <sref ref="[optional.optional]"/> as indicated:</p>
<blockquote><pre>
	<tt><ins>constexpr</ins> optional(const optional &amp;);</tt>
	<tt><ins>constexpr</ins> optional(optional &amp;&amp;) noexcept(<i>see below</i>);</tt>
</pre></blockquote>
</li>

<li><p>Edit <sref ref="[optional.ctor]"/> paragraph as indicated:</p>
<blockquote><pre>
	<tt><ins>constexpr</ins> optional(const optional &amp;);</tt>
</pre></blockquote>

<p>and </p>

<blockquote><pre>
	<tt><ins>constexpr</ins> optional(optional &amp;&amp;) noexcept(<i>see below</i>);</tt>
</pre></blockquote>
</li>
</ol>

<note>2017-02-23, Marshall comments</note>
<p>
This is related to <iref ref="2745"/>.
</p>
</resolution>

</issue>


