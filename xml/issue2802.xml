<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2802" status="New">
<title><tt>shared_ptr</tt> constructor requirements for a deleter</title>
<section><sref ref="[util.smartptr.shared.const]"/></section>
<submitter>Marshall Clow</submitter>
<date>9 Nov 2016</date>
<priority>2</priority>

<discussion>
<p>
<b>Addresses US 127</b>
<p/>
It should suffice for the deleter <tt>D</tt> to be nothrow move-constructible.
However, to avoid potentially leaking the pointer <tt>p</tt> if <tt>D</tt> is also 
copy-constructible when copying the argument by-value, we should continue 
to require the copy constructor does not throw if <tt>D</tt> 
is <tt>CopyConstructible</tt>.
</p>
<p>
Proposed change:
<p/>
Relax the requirement the <tt>D</tt> be <tt>CopyConstructible</tt> 
to simply require that <tt>D</tt> be <tt>MoveConstructible</tt>.  
Clarify the requirement that construction of any of the arguments 
passed by-value shall not throw exceptions. Note that we have library-wide 
wording in clause 17 that says any type supported by the 
library, not just this delete, shall not throw exceptions from its destructor, 
so that wording could be editorially removed. Similarly, the requirements 
that <tt>A</tt> shall be an allocator satisfy that neither 
constructor nor destructor for <tt>A</tt> can throw.
</p>

<note>Issues Telecom 16-Dec-2016</note>
<p>Priority 3; Jonathan to provide wording.</p>
</discussion>

<resolution>
</resolution>

</issue>
