<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3368" status="New">
<title>LWG 3264 and opting-out of <tt>sized_range</tt></title>
<section><sref ref="[range.prim.size]"/></section>
<submitter>Johel Ernesto Guerrero Pe&ntilde;a</submitter>
<date>07 Jan 2020</date>
<priority>99</priority>

<discussion>
<p>
LWG <iref ref="3264"/> removes the explicit <tt>disable_sized_range</tt> check in <tt>safe_range</tt> 
because it is subsumed by its explicit validity check of <tt>ranges::size</tt>. However, when 
<tt>ranges::size</tt>'s check of <tt>disable_sized_range</tt> is <tt>false</tt>, it evaluates to 
<tt><i>make-unsigned-like</i>(ranges::end(E) - ranges::begin(E))</tt> given some other conditions. 
The net result it not being able to opt-out of <tt>sized_range</tt>.
</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4842">N4842</a>.</p>

<ol>
<li><p>Modify <sref ref="[range.prim.size]"/> as indicated:</p>

<blockquote class="note">
<p>
[<i>Drafting note:</i> The effect of the wording change is to move the full content of bullet (1.3) 
into an additional new sub-bullet (1.2.3) of bullet (1.2). ]
</p>
</blockquote>

<blockquote>
<p>
<p>
-1- The name <tt>size</tt> denotes a customization point object (<sref ref="[customization.point.object]"/>). 
The expression <tt>ranges::size(E)</tt> for some subexpression <tt>E</tt> with type <tt>T</tt> is 
expression-equivalent to:
</p>
<ol style="list-style-type: none">
<li><p>(1.1) &mdash; [&hellip;]</p></li>
<li><p>(1.2) &mdash; Otherwise, if <tt>disable_sized_range&lt;remove_cv_t&lt;T&gt;&gt;</tt> 
(<sref ref="[range.sized]"/>) is <tt>false</tt>:</p>
<ol style="list-style-type: none">
<li><p>(1.2.1) &mdash; <tt><i>decay-copy</i>(E.size())</tt> if it is a valid expression and its type <tt>I</tt> 
is integer-like (<sref ref="[iterator.concept.winc]"/>).</p></li>
<li><p>(1.2.2) &mdash; Otherwise, <tt><i>decay-copy</i>(size(E))</tt> if it is a valid expression and its type 
<tt>I</tt> is integer-like with overload resolution performed in a context that includes the declaration:
<blockquote><pre>
template&lt;class T&gt; void size(T&amp;&amp;) = delete;
</pre></blockquote>
and does not include a declaration of <tt>ranges::size</tt>.</p></li>
<li><p><ins>(1.2.3) &mdash; Otherwise, <tt><i>make-unsigned-like</i>(ranges::end(E) - ranges::begin(E))</tt> 
(<sref ref="[range.subrange]"/>) if it is a valid expression and the types <tt>I</tt> and <tt>S</tt> of 
<tt>ranges::begin(E)</tt> and <tt>ranges::end(E)</tt> (respectively) model both
<tt>sized_sentinel_for&lt;S, I&gt;</tt> (<sref ref="[iterator.concept.sizedsentinel]"/>) and 
<tt>forward_iterator&lt;I&gt;</tt>. However, <tt>E</tt> is evaluated only once.</ins>
</p></li>
</ol>
</li>
<li><p><del>(1.3) &mdash; Otherwise, <tt><i>make-unsigned-like</i>(ranges::end(E) - ranges::begin(E))</tt> 
(<sref ref="[range.subrange]"/>) if it is a valid expression and the types <tt>I</tt> and <tt>S</tt> of 
<tt>ranges::begin(E)</tt> and <tt>ranges::end(E)</tt> (respectively) model both
<tt>sized_sentinel_for&lt;S, I&gt;</tt> (<sref ref="[iterator.concept.sizedsentinel]"/>) and 
<tt>forward_iterator&lt;I&gt;</tt>. However, <tt>E</tt> is evaluated only once.</del>
</p></li>
<li><p>(1.4) &mdash; [&hellip;]</p></li>
</ol>
</p>
</blockquote>

</li>
</ol></resolution>

</issue>
