<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2752" status="Tentatively Ready">
<title>&quot;Throws:&quot; clauses of <tt>async</tt> and <tt>packaged_task</tt> are unimplementable</title>
<section><sref ref="[futures.async]"/><sref ref="[futures.task.members]"/></section>
<submitter>Billy Robert O'Neal III</submitter>
<date>7 Jul 2016</date>
<priority>3</priority>

<discussion>
<p>
<tt>std::async</tt> is a request from the user for type erasure; as any given function gets passed to <tt>async</tt>
which returns only <tt>future&lt;ReturnType&gt;</tt>. Therefore, it needs to be able to allocate memory, as other issues
(e.g. LWG <iref ref="2202"/>) indicate. However, async's <em>Throws</em> clause doesn't allow an implementation to do
this, as it permits only <tt>future_error</tt>.
<p/>
<tt>std::packaged_task</tt>'s constructor allocates memory using a user supplied allocator. An implementation needs to
call the user's <tt>allocate</tt> to allocate such memory. The user's allocate function is not constrained to throwing
only <tt>bad_alloc</tt>; it can raise whatever it wants, but <tt>packaged_task</tt>'s constructor prohibits this.
</p>
<note>2016-07 Chicago</note>
<p>Alisdair thinks the third bullet is not quite right.</p>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<ol>
<li><p>Change <sref ref="[futures.async]"/> p6 to:</p>

<blockquote>
<p>
<em>Throws:</em> <tt>system_error</tt> if <tt>policy == launch::async</tt> and the implementation is unable to start a
new thread<ins>, or <tt>std::bad_alloc</tt> if memory for the internal data structures could not be allocated</ins>.
</p>
</blockquote>
</li>
<li><p>Change <sref ref="[futures.task.members]"/> p5 to:</p>

<blockquote>
<pre>
template &lt;class F&gt;
  packaged_task(F&amp;&amp; f);
template &lt;class F, class Allocator&gt;
  packaged_task(allocator_arg_t, const Allocator&amp; a, F&amp;&amp; f);
</pre>
<blockquote>
<p>
<em>Throws:</em>
</p>
<ol style="list-style-type: none">
<li>
<ins>(?) &mdash; A</ins><del>a</del>ny exceptions thrown by the copy or move constructor of <tt>f</tt><ins>.</ins><del>, or </del>
</li>
<li>
<ins>(?) &mdash; For the first version,</ins> <tt>std::bad_alloc</tt> if memory for the internal data structures
could not be allocated<ins>.</ins>
</li>
<li>
<ins>(?) &mdash; For the second version, any exceptions thrown by
<tt>std::allocator_traits&lt;Allocator&gt;::template rebind&lt;<em>unspecified</em>&gt;::allocate</tt></ins>.
</li>
</ol>
</blockquote>
</blockquote>
</li>
</ol>
</blockquote>

<note>2016-08 Chicago</note>
<p>Wed PM: Move to Tentatively Ready</p>
</discussion>

<resolution>
<p>This wording is relative to N4606.</p>

<ol>
<li><p>Change <sref ref="[futures.async]"/> p6 to:</p>

<blockquote>
<p>
<em>Throws:</em> <tt>system_error</tt> if <tt>policy == launch::async</tt> and the implementation is unable to start a
new thread<ins>, or <tt>std::bad_alloc</tt> if memory for the internal data structures could not be allocated</ins>.
</p>
</blockquote>
</li>
<li><p>Change <sref ref="[futures.task.members]"/> p5 to:</p>

<blockquote>
<pre>
template &lt;class F&gt;
  packaged_task(F&amp;&amp; f);
template &lt;class F, class Allocator&gt;
  packaged_task(allocator_arg_t, const Allocator&amp; a, F&amp;&amp; f);
</pre>
<blockquote>
<p>
<em>Throws:</em>
</p>
<ol style="list-style-type: none">
<li>
<ins>(?) &mdash; A</ins><del>a</del>ny exceptions thrown by the copy or move constructor of <tt>f</tt><ins>.</ins><del>, or </del>
</li>
<li>
<ins>(?) &mdash; For the first version,</ins> <tt>std::bad_alloc</tt> if memory for the internal data structures
could not be allocated<ins>.</ins>
</li>
<li>
<ins>(?) &mdash; For the second version, any exceptions thrown by
<tt>std::allocator_traits&lt;Allocator&gt;::template rebind_traits&lt;<em>unspecified</em>&gt;::allocate</tt></ins>.
</li>
</ol>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
