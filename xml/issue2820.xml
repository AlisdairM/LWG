<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2820" status="New">
<title>Clarify <tt>&lt;cstdint&gt;</tt> macros</title>
<section><sref ref="[cstdint]"/></section>
<submitter>Thomas Koeppe</submitter>
<date>12 Nov 2016</date>
<priority>3</priority>

<discussion>
<p>
I would like clarification from LWG regarding the various limit macros like <tt>INT_8_MIN</tt> in <tt>&lt;cstdint&gt;</tt>, 
in pursuit of editorial cleanup of this header's synopsis. I have two questions:
</p>
<ol>
<li><p>At present, macros like <tt>INT_8_MIN</tt> that correspond to the optional type <tt>int8_t</tt> are required 
(unconditionally), whereas the underlying type to which they appertain is only optional. Is this deliberate? 
Should the macros also be optional?</p></li>
<li><p>Is it deliberate that C++ only specifies sized aliases for the sizes 8, 16, 32 and 64, whereas the corresponding 
C header allows type aliases and macros for arbitrary sizes for implementations that choose to provide extended integer 
types? Is the C++ wording more restrictive by accident?</p></li>
</ol>

<note>2017-01-27 Telecon</note>
<p>Priority 3</p>

<note>2017-03-04, Kona</note>
<p>C11 ties the macro names to the existence of the types. Marshall to research the second question.</p>
<p>Close <ref iref="2764"/> as a duplicate of this issue.</p>
</discussion>

<resolution>
</resolution>

</issue>
