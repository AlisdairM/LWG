<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2807" status="WP">
<title><tt>std::invoke</tt> should use <tt>std::is_nothrow_callable</tt></title>
<section><sref ref="[func.invoke]"/></section>
<submitter>Great Britain</submitter>
<date>9 Nov 2016</date>
<priority>3</priority>

<discussion>
<p>
<b>Addresses GB 53</b>
</p>
<p>
<tt>std::invoke</tt> can be made trivially <tt>noexcept</tt> 
using the new <tt>std::is_nothrow_callable</tt> trait:
</p>
<p>
Proposed change:
<p/>
Add the exception specifier <tt>noexcept(is_nothrow_callable_v&lt;F&amp;&amp;(Args&amp;&amp;...)&gt;)</tt> 
to <tt>std::invoke</tt>.
</p>

<note>Issues Telecon 16-Dec-2016</note>
<p>Priority 3</p>

<note>2017-02-28, Daniel comments and provides wording</note>
<p>
The following wording <em>assumes</em> that D0604R0 would be accepted, therefore uses <tt>is_nothrow_invocable_v</tt>
instead of the suggested current trait <tt>is_nothrow_callable_v</tt>
</p>

<note>Kona 2017-03-01</note>
<p>Accepted as Immediate to resolve NB comment.</p>
</discussion>

<resolution>
<p>
This wording is relative to <a href="http://wg21.link/n4640">N4640</a>.
</p>

<ol>
<li><p>Change <sref ref="[functional.syn]"/>, header <tt>&lt;functional&gt;</tt> synopsis, as indicated:</p>

<blockquote><pre>
<i>// 20.14.4, invoke</i>
template &lt;class F, class... Args&gt;
  <ins>invoke_result_t&lt;F, Args...&gt;</ins><del>result_of_t&lt;F&amp;&amp;(Args&amp;&amp;...)&gt;</del> invoke(F&amp;&amp; f, Args&amp;&amp;... args) <ins>noexcept(is_nothrow_invocable_v&lt;F, Args...&gt;)</ins>;
</pre></blockquote>
</li>

<li><p>Change <sref ref="[func.invoke]"/> as indicated:</p>

<blockquote><pre>
template &lt;class F, class... Args&gt;
  <ins>invoke_result_t&lt;F, Args...&gt;</ins><del>result_of_t&lt;F&amp;&amp;(Args&amp;&amp;...)&gt;</del> invoke(F&amp;&amp; f, Args&amp;&amp;... args) <ins>noexcept(is_nothrow_invocable_v&lt;F, Args...&gt;)</ins>;</pre></blockquote>
</li>

</ol>
</resolution>

</issue>
