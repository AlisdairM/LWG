<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2742" status="New">
<title>Inconsistent <tt>string</tt> interface taking <tt>string_view</tt></title>
<section><sref ref="[string.cons]"/></section>
<submitter>Richard Smith</submitter>
<date>6 Jul 2016</date>
<priority>1</priority>

<discussion>
<p>
Generally, <tt>basic_string</tt> has a constructor matching each <tt>assign</tt> function and vice versa (except the 
constructor takes an allocator where <tt>assign</tt> does not). <a href="http://wg21.link/p0254r2">P0254R2</a> violates 
this by adding an <tt>assign(basic_string_view, size_type pos, size_type n = npos)</tt> but no corresponding constructor.
</p>

<note>2016-08-04 Chicago LWG</note>
<p>
Robert Douglas provides initial wording.
<p/>
We decided against another constructor overload to avoid the semantic confusion between:
</p>
<blockquote><pre>
basic_string(char const*, size_type length, Allocator = Allocator())
</pre></blockquote>
<p>
and
</p>
<blockquote><pre>
template&lt;class T, class Foo = is_convertible_v&lt;T const&amp;, basic_string_view&lt;charT, traits&gt;&gt;
basic_string(T const&amp;, size_type pos, Allocator = Allocator())
</pre></blockquote>
<p>
where someone might call:
</p>
<blockquote><pre>
basic_string("HelloWorld", 5, 5);
</pre></blockquote>
<p>
and get "World", but then call
</p>
<blockquote><pre>
basic_string("HelloWorld", 5);
</pre></blockquote>
<p>
and instead get "Hello". The second parameter changes between length and position. 
</p>
</discussion>

<resolution>
<p>
This wording is relative to N4606.
</p>

<ol>
<li><p>In <sref ref="[basic.string]"/> add the following constructor overload:</p>

<blockquote><pre>
[&hellip;]
basic_string(const basic_string&amp; str, size_type pos,
             const Allocator&amp; a = Allocator());
basic_string(const basic_string&amp; str, size_type pos, size_type n,
             const Allocator&amp; a = Allocator());
<ins>template&lt;class T&gt;
basic_string(const T&amp; t, size_type pos, size_type n, const Allocator&amp; a = Allocator());</ins>
explicit basic_string(basic_string_view&lt;charT, traits&gt; sv,
                      const Allocator&amp; a = Allocator());
[&hellip;]
</pre></blockquote>
</li>

<li><p>In <sref ref="[string.cons]"/> add the following ctor definition:</p>

<blockquote>
<pre>
<ins>template&lt;class T&gt;
basic_string(const T&amp; t, size_type pos, size_type n, const Allocator&amp; a = Allocator());</ins>
</pre>
<blockquote>
<p>
<ins>-?- <i>Effects:</i> Creates a variable, <tt>sv</tt>, as if by <tt>basic_string_view&lt;charT, traits&gt; sv = t;</tt> 
and then behaves the same as:</ins>
<blockquote>
<pre>
<ins>basic_string(sv.substr(pos, n), a)</ins>
</pre>
</blockquote>
<p/>
<ins>-?- <i>Remarks:</i> This constructor shall not participate in overload resolution unless 
<tt>is_convertible_v&lt;const T&amp;, basic_string_view&lt;charT, traits&gt;&gt;</tt> is <tt>true</tt>.</ins>
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
