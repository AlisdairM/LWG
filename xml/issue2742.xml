<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2742" status="New">
<title>Inconsistent <tt>string</tt> interface taking <tt>string_view</tt></title>
<section><sref ref="[string.cons]"/></section>
<submitter>Richard Smith</submitter>
<date>6 Jul 2016</date>
<priority>1</priority>

<discussion>
<p>
Generally, <tt>basic_string</tt> has a constructor matching each <tt>assign</tt> function and vice versa (except the 
constructor takes an allocator where <tt>assign</tt> does not). <a href="http://wg21.link/p0254r2">P0254R2</a> violates 
this by adding an <tt>assign(basic_string_view, size_type pos, size_type n = npos)</tt> but no corresponding constructor.
</p>

<note>2016-08-04 Chicago LWG</note>
<p>
Robert Douglas provides initial wording.
</p>
</discussion>

<resolution>
<p>
This wording is relative to N4606.
</p>

<ol>
<li><p>In <sref ref="[basic.string]"/> add the following constructor overload:</p>

<blockquote><pre>
[&hellip;]
basic_string(const basic_string&amp; str, size_type pos,
             const Allocator&amp; a = Allocator());
basic_string(const basic_string&amp; str, size_type pos, size_type n,
             const Allocator&amp; a = Allocator());
<ins>template&lt;class T&gt;
basic_string(const T&amp; t, size_type pos, size_type n, const Allocator&amp; a = Allocator());</ins>
explicit basic_string(basic_string_view&lt;charT, traits&gt; sv,
                      const Allocator&amp; a = Allocator());
[&hellip;]
</pre></blockquote>
</li>

<li><p>In <sref ref="[string.cons]"/> add the following ctor definition:</p>

<blockquote>
<pre>
<ins>template&lt;class T&gt;
basic_string(T t, size_type pos, size_type n, const Allocator&amp; a = Allocator());</ins>
</pre>
<blockquote>
<p>
<ins>-?- <i>Effects:</i> Same as <tt>basic_string(basic_string_view&lt;charT, traits&gt;(t).substr(pos, n), a)</tt>.</ins>
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
