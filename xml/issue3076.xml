<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3076" status="Ready">
<title><tt>basic_string</tt> CTAD ambiguity</title>
<section><sref ref="[string.cons]"/></section>
<submitter>Stephan T. Lavavej</submitter>
<date>3 Mar 2018</date>
<priority>99</priority>

<discussion>
<p>
The following code fails to compile for surprising reasons.
</p>
<blockquote><pre>
#include &lt;string&gt;
#include &lt;string_view&gt;

using namespace std;

int main() 
{
   string s0;
   basic_string s1(s0, 1, 1);
   // WANT: basic_string(const basic_string&amp;, size_type, size_type, const Allocator&amp; = Allocator())
   // CONFLICT: basic_string(size_type, charT, const Allocator&amp;)

   basic_string s2("cat"sv, 1, 1);
   // WANT: basic_string(const T&amp;, size_type, size_type, const Allocator&amp; = Allocator())
   // CONFLICT: basic_string(size_type, charT, const Allocator&amp;)

   basic_string s3("cat", 1);
   // WANT: basic_string(const charT *, size_type, const Allocator&amp; = Allocator())
   // CONFLICT: basic_string(const charT *, const Allocator&amp;)
}
</pre></blockquote>
<p>
For <tt>s1</tt> and <tt>s2</tt>, the signature <tt>basic_string(size_type, charT, const Allocator&amp;)</tt> participates in CTAD. <tt>size_type</tt> is non-deduced (it will be substituted later, so the compiler 
can't immediately realize that <tt>s0</tt> or <tt>"cat"sv</tt> are totally non-viable arguments). 
<tt>charT</tt> is deduced to be <tt>int</tt> (weird, but not the problem). Finally, <tt>Allocator</tt> 
is deduced to be <tt>int</tt>. Then the compiler tries to substitute for <tt>size_type</tt>, but 
this ends up giving int to <tt>allocator_traits</tt> in a non-SFINAE context, so compilation fails.
<p/>
<tt>s3</tt> fails for a slightly different reason. <tt>basic_string(const charT *, const Allocator&amp;)</tt> participates in CTAD, deducing <tt>charT</tt> to be <tt>char</tt> (good) and <tt>Allocator</tt> to be 
<tt>int</tt>. This is an exact match, which is better than the constructor that the user actually wants 
(where <tt>int</tt> would need to be converted to <tt>size_type</tt>, which is unsigned). So CTAD deduces <tt>basic_string&lt;char, char_traits&lt;char&gt;, int&gt;</tt>, which is the wrong type.
<p/>
This problem appears to be unique to <tt>basic_string</tt> and its heavily overloaded set of constructors. 
I haven't figured out how to fix it by adding (non-greedy) deduction guides. The conflicting constructors 
are always considered during CTAD, regardless of whether deduction guides are provided that correspond 
to the desired or conflicting constructors. (That's because deduction guides are preferred as a late 
tiebreaker in overload resolution; if a constructor provides a better match it will be chosen before 
tiebreaking.) It appears that we need to constrain the conflicting constructors themselves; this will 
have no effect on actual usage (where <tt>Allocator</tt> will be an allocator) but will prevent CTAD 
from considering them for non-allocators. As this is unusual, I believe it deserves a <i>Note</i>. 
This has been implemented in MSVC.
</p>

<note>2018-3-14 Wednesday evening issues processing; move to Ready</note>
</discussion>

<resolution>
<p>
This wording is relative to <a href="http://wg21.link/n4727">N4727</a>.
</p>

<ol>
<li>
<p>Edit <sref ref="[string.cons]"/> as indicated:</p>
<blockquote>
<pre>
basic_string(const charT* s, const Allocator&amp; a = Allocator());
</pre>
<blockquote>
<p>
-14- <i>Requires:</i> <tt>s</tt> points to an array of at least <tt>traits::length(s) + 1</tt> elements of 
<tt>charT</tt>.
<p/>
-15- <i>Effects:</i> Constructs an object of class <tt>basic_string</tt> and determines its initial 
string value from the array of <tt>charT</tt> of length <tt>traits::length(s)</tt> whose first element 
is designated by <tt>s</tt>.
<p/>
-16- <i>Postconditions:</i> <tt>data()</tt> points at the first element of an allocated copy of the 
array whose first element is pointed at by <tt>s</tt>, <tt>size()</tt> is equal to <tt>traits::length(s)</tt>, 
and <tt>capacity()</tt> is a value at least as large as <tt>size()</tt>.
<p/>
<ins>-?- <i>Remarks:</i> Shall not participate in overload resolution if <tt>Allocator</tt> is a type 
that does not qualify as an allocator (<sref ref="[container.requirements.general]"/>). [<i>Note:</i> 
This affects class template argument deduction. &mdash; <i>end note</i>]</ins>
</p>
</blockquote>
<pre>
basic_string(size_type n, charT c, const Allocator&amp; a = Allocator());
</pre>
<blockquote>
<p>
-17- <i>Requires:</i> <tt>n &lt; npos</tt>.
<p/>
-18- <i>Effects:</i> Constructs an object of class <tt>basic_string</tt> and determines its initial string 
value by repeating the char-like object <tt>c</tt> for all <tt>n</tt> elements.
<p/>
-19- <i>Postconditions:</i> <tt>data()</tt> points at the first element of an allocated array of <tt>n</tt>
elements, each storing the initial value <tt>c</tt>, <tt>size()</tt> is equal to <tt>n</tt>, and 
<tt>capacity()</tt> is a value at least as large as <tt>size()</tt>.
<p/>
<ins>-?- <i>Remarks:</i> Shall not participate in overload resolution if <tt>Allocator</tt> is a type that 
does not qualify as an allocator (<sref ref="[container.requirements.general]"/>). [<i>Note:</i> This 
affects class template argument deduction. &mdash; <i>end note</i>]</ins>
</p>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
