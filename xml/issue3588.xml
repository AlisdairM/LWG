<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3588" status="NAD">
<title>Strike out purposeless UB involving the deleter in members functions of <tt>unique_ptr</tt></title>
<section><sref ref="[unique.ptr.single.general]"/></section>
<submitter>Johel Ernesto Guerrero Pe&ntilde;a</submitter>
<date>07 Sep 2021</date>
<priority>99</priority>

<discussion>
<p>
This originated from the editorial issues <a href="https://github.com/cplusplus/draft/pull/4871">#4871</a> 
and <a href="https://github.com/cplusplus/draft/pull/4872">#4872</a>.
<p/>
Several member functions of <tt>unique_ptr</tt> are <tt>noexcept</tt>, and yet, they have the precondition 
that an expression involving the deleter does not exit via an exception. There's nothing an implementation 
or user can take advantage of in presence of this UB. Since the behavior otherwise would be a call to 
<tt>std::terminate</tt>, these preconditions should be striked out.
<p/>
Note that although <tt>~unique_ptr()</tt> is not <tt>noexcept</tt>, <sref ref="[res.on.exception.handling]"/> p3 
specifies it to behave as if it were.
</p>
<note>2021-09-20 Status changed: New &rarr; NAD.</note>
<p>
The current specification allows the compiler to omit noexcept-enforcement.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4892">N4892</a>.
</p>

<ol>
<li><p>Modify <sref ref="[unique.ptr.single.ctor]"/> as indicated:</p>

<blockquote>
<pre>
constexpr unique_ptr() noexcept;
constexpr unique_ptr(nullptr_t) noexcept;
</pre>
<blockquote>
<p>
-1- [&hellip;]
<p/>
-2- <i>Preconditions:</i> <tt>D</tt> meets the <i>Cpp17DefaultConstructible</i> requirements (Table 27)<del>, 
and that construction does not throw an exception</del>.
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
explicit unique_ptr(pointer p) noexcept;
</pre>
<blockquote>
<p>
-5- <i>Constraints:</i> [&hellip;]
<p/>
-6- <i>Mandates:</i> [&hellip;]
<p/>
-7- <i>Preconditions:</i> <tt>D</tt> meets the <i>Cpp17DefaultConstructible</i> requirements (Table 27)<del>, 
and that construction does not throw an exception</del>.
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
unique_ptr(pointer p, const D&amp; d) noexcept;
unique_ptr(pointer p, remove_reference_t&lt;D&gt;&amp;&amp; d) noexcept;
</pre>
<blockquote>
<p>
-10- <i>Constraints:</i> [&hellip;]
<p/>
-11- <i>Mandates:</i> [&hellip;]
<p/>
-12- <i>Preconditions:</i> For the first constructor, if <tt>D</tt> is not a reference type, <tt>D</tt> 
meets the <i>Cpp17CopyConstructible</i> requirements <del>and such construction does not exit via an exception</del>. 
For the second constructor, if <tt>D</tt> is not a reference type, <tt>D</tt> meets the <i>Cpp17MoveConstructible</i> 
requirements <del>and such construction does not exit via an exception</del>.
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
unique_ptr(unique_ptr&amp;&amp; u) noexcept;
</pre>
<blockquote>
<p>
-17- <i>Constraints:</i> [&hellip;]
<p/>
-18- <i>Preconditions:</i> If <tt>D</tt> is not a reference type, <tt>D</tt> meets the <i>Cpp17MoveConstructible</i> 
requirements (Table 28). <del>Construction of the deleter from an rvalue of type <tt>D</tt> does not throw an exception.</del>
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
template&lt;class U, class E&gt; unique_ptr(unique_ptr&lt;U, E&gt;&amp;&amp; u) noexcept;
</pre>
<blockquote>
<p>
-21- <i>Constraints:</i> [&hellip;]
<p/>
-22- <i>Preconditions:</i> If <tt>E</tt> is not a reference type, construction of the deleter from an rvalue of type 
<tt>E</tt> is well-formed <del>and does not throw an exception</del>. Otherwise, <tt>E</tt> is a reference type and 
construction of the deleter from an lvalue of type <tt>E</tt> is well-formed <del>and does not throw an exception</del>.
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[unique.ptr.single.dtor]"/> as indicated:</p>

<blockquote>
<pre>
~unique_ptr();
</pre>
<blockquote>
<p>
-1- <i>Preconditions:</i> The expression <tt>get_deleter()(get())</tt> is well-formed<del>,</del>
<ins>and</ins> has well-defined behavior<del>, and does not throw exceptions</del>.
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[unique.ptr.single.asgn]"/> as indicated:</p>

<blockquote>
<pre>
unique_ptr&amp; operator=(unique_ptr&amp;&amp; u) noexcept;
</pre>
<blockquote>
<p>
-1- <i>Constraints:</i> [&hellip;]
<p/>
-2- <i>Preconditions:</i> If <tt>D</tt> is not a reference type, <tt>D</tt> meets the 
<i>Cpp17MoveAssignable</i> requirements (Table 30) <del>and assignment of the deleter from an 
rvalue of type <tt>D</tt> does not throw an exception</del>. Otherwise, <tt>D</tt> is a
reference type; <tt>remove_reference_t&lt;D&gt;</tt> meets the <i>Cpp17CopyAssignable</i> 
requirements <del>and assignment of the deleter from an lvalue of type <tt>D</tt> does not 
throw an exception</del>.
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
template&lt;class U, class E&gt; unique_ptr&amp; operator=(unique_ptr&lt;U, E&gt;&amp;&amp; u) noexcept;
</pre>
<blockquote>
<p>
-6- <i>Constraints:</i> [&hellip;]
<p/>
-7- <i>Preconditions:</i> If <tt>E</tt> is not a reference type, assignment of the deleter from an rvalue 
of type <tt>E</tt> is well-formed <del>and does not throw an exception</del>. Otherwise, <tt>E</tt> is a 
reference type and assignment of the deleter from an lvalue of type <tt>E</tt> is well-formed <del>and 
does not throw an exception</del>.
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[unique.ptr.single.modifiers]"/> as indicated:</p>

<blockquote>
<pre>
void reset(pointer p = pointer()) noexcept;
</pre>
<blockquote>
<p>
-3- <i>Preconditions:</i> The expression <tt>get_deleter()(get())</tt> is well-formed<del>,</del> 
<ins>and</ins> has well-defined behavior<del>, and does not throw exceptions</del>.
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
void swap(unique_ptr&amp; u) noexcept;
</pre>
<blockquote>
<p>
-6- <i>Preconditions:</i> <tt>get_deleter()</tt> is swappable (<sref ref="[swappable.requirements]"/>) <del>and 
does not throw an exception under <tt>swap</tt></del>.
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
