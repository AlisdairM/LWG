<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2245" status="Tentatively Ready">
<title><tt>packaged_task::reset()</tt> memory allocation</title>
<section><sref ref="[futures.task.members]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>5 Mar 2013</date>
<priority>3</priority>

<discussion>

<p>
The effects of <tt>packaged_task::reset()</tt> result in memory allocation, but
don't allow a user to provide an allocator.
<p/>
<tt>packaged_task::reset()</tt> needs to be overloaded like so:
</p>

<blockquote><pre>
template&lt;class Alloc&gt;  
void reset(const Alloc&amp;);
</pre></blockquote>

<p>
Alternatively, the effects of <tt>reset()</tt> need to require the same allocator is used 
as at construction, which would require the constructor to store the allocator for later use.
<p/>
I like to remark that GCC at the moment uses the second option, i.e. the allocator passed to the constructor 
(if any) is used to create the new shared state, because this didn't require any change to the
interface.
</p>

<note>2015-02 Cologne</note>
<p>
Handed over to SG1.
</p>

<note>2015-05 Lenexa, SG1 response</note>
<p>
No strong opinions in SG1, and this is really an LWG issue.  Back to you.
</p>

<note>2016-08-02 Chicago, Billy O'Neal comments and suggests concrete wording</note>
<p>
Talked this over with Alasdair, who says there's little desire to allow the <tt>packaged_task</tt> to 
be change allocators after initial construction, making what libstdc++ does already the "right thing." 
A clarification note is still necessary to indicate that the allocator supplied to the 
<tt>allocator_arg_t</tt> constructor is to be used.
</p>
<p>Wed PM: Move to Tentatively Ready</p>
</discussion>

<resolution>
<p>
This wording is relative to N4606
</p>

<ol>
<li><p>Change <sref ref="[futures.task.members]"/> as indicated:</p>

<blockquote>
<pre>
void reset();
</pre>
<blockquote>
<p>
-22- <i>Effects:</i> 
</p>
<ul>
<li><p><ins>if the shared state associated with <tt>*this</tt> was created via the <tt>packaged_task(F&amp;&amp; f)</tt> 
constructor, a</ins><del>A</del>s if <tt>*this = packaged_task(std::move(f))</tt>, where <tt>f</tt> is the task stored in 
<tt>*this</tt>.</p></li>
<li><p><ins>if the shared state associated with <tt>*this</tt> was created via the 
<tt>packaged_task(allocator_arg_t, Allocator&amp; a, F&amp;&amp;)</tt> constructor, as if 
<tt>*this = packaged_task(allocator_arg, a, std::move(f))</tt>, where <tt>a</tt> is the allocator used to allocate 
the shared state associated with <tt>*this</tt>, and <tt>f</tt> is the task stored in <tt>*this</tt>.</ins></p></li>
</ul>
<p>
[<i>Note:</i> This constructs a new shared state for <tt>*this</tt>. The old state is abandoned 
(30.6.4). &mdash; <i>end note</i>]
<p/>
-23- <i>Throws:</i>
</p>
<ul>
<li><p><ins>if no allocator was used,</ins> <tt>bad_alloc</tt> if memory for the new shared state could not be allocated.</p></li>
<li><p><ins>if an allocator was used, any exception thrown by <tt>std::allocator_traits&lt;Allocator&gt;::template 
rebind_traits&lt;<i>unspecified</i>&gt;::allocate</tt>.</ins></p></li>
<li><p>any exception thrown by the move constructor of the task stored in the shared state.</p></li>
<li><p><tt>future_error</tt> with an error condition of <tt>no_state</tt> if <tt>*this</tt> has no shared state.</p></li>
</ul>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
