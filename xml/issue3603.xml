<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3603" status="New">
<title>Matching of null characters by regular expressions is underspecified</title>
<section><sref ref="[re.regex.construct]"/><sref ref="[re.alg]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>27 Sep 2021</date>
<priority>3</priority>

<discussion>
<p>
ECMAScript says that <tt>\0</tt> is an ordinary character and can be matched. POSIX says the opposite:
<p/>
"The interfaces specified in POSIX.1-2017 do not permit the inclusion of a NUL character in an RE or 
in the string to be matched. If during the operation of a standard utility a NUL is included in the 
text designated to be matched, that NUL may designate the end of the text string for the purposes of matching."
<p/>
So does that mean <tt>std::regex{"", 1, regex::basic}</tt> should throw an exception?
<p/>
And <tt>std::regex_match(string{"a\0b", 3}, regex{"a.b", regex::basic})</tt> should fail?
<p/>
The POSIX rule is because those interfaces are specified with NTBS arguments, so there's no way to 
distinguish <tt>"a\0b"</tt> and <tt>"a"</tt>. The C++ interfaces could allow it, but we never specify 
any divergence from POSIX, so presumably the rule still applies. Is that what was intended and is it 
what we want?
</p>

<note>2021-10-14; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
</p>

</discussion>

<resolution>
</resolution>

</issue>
