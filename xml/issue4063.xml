<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4063" status="New">
<title>Freestanding <tt>std::char_traits&lt;char&gt;::eof</tt> depends on non-freestanding <tt>EOF</tt></title>
<section><sref ref="[char.traits.specializations.char]"/></section>
<submitter>Jiang An</submitter>
<date>03 Apr 2024</date>
<priority>2</priority>

<discussion>
<p>
Currently <tt>EOF</tt> is not yet freestanding, because it's only specified to be provided in 
<tt>&lt;stdio.h&gt;</tt> in C, or together with <tt>&lt;cstdio&gt;</tt> in C++.
<p/>
However, <tt>std::char_traits&lt;char&gt;::eof</tt> (required to be freestanding since C++26 by 
<paper num="P2338R4"/>) is required to return the value of <tt>EOF</tt>. It's unclear what is 
expected to be done in a freestanding implementation.
<p/>
Related to <a href="https://github.com/llvm/llvm-project/issues/85158">LLVM issue #85158</a>.
</p>

<note>2024-05-08; Reflector poll</note>
<p>
Set priority to 2 after reflector poll.
</p>
<p>
"The `eof`, `not_eof`, `to_int_type` and `to_char_type` members of `char_traits`
are only needed by iostreams, so I see no reason for them to be freestanding.
In libstdc++ `eof` and `not_eof` depend on hosted, so are not freestanding.
Now that we can have partially freestanding classes in the library,
that seems like the right solution here."
</p>
<p>
"`int_type`/`char_type`/`eof` is kind of poor-man (or C)'s
<code>optional&lt;char_type&gt;</code>. Inclined to support it in freestanding
on that basis, even if the only standard component that uses it is iostreams."
</p>
<p>
"No implementer is confused about the value of `eof()`/`EOF`.
Having the value specified in the non-freestanding part of the standard
should be good enough."
</p>
<p>
"Prefer to make EOF freestanding, but don't feel strongly about it.
The important thing is keeping `string_view` working."
</p>

</discussion>

<resolution>
</resolution>

</issue>
