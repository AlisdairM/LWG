<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3475" status="New">
<title><tt>std::thread</tt>'s constructor needs to be able to report general memory allocation failures</title>
<section><sref ref="[thread.thread.constr]"/><sref ref="[thread.jthread.cons]"/></section>
<submitter>Billy O'Neal III</submitter>
<date>14 Aug 2020</date>
<priority>99</priority>

<discussion>
<p>
<tt>(j)thread</tt>'s constructor needs to <tt><i>decay-copy</i></tt> the supplied parameters and callable over to the started 
thread through an operating system API that generally only accepts a single <tt>void*</tt>. The MSVC++ and libc++ 
implementations do this by putting the parameters in a <tt>std::tuple</tt> allocated from the heap, passing a 
pointer to that tuple through the operating system API, and leaving ownership of the parameters to the other thread.
<p/>
It might be theoretically possible to introduce an additional copy and synchronization where the starting thread 
blocks for the started thread to make a move constructed copy of that tuple from the parameters, but that would 
introduce unreasonable synchronization overhead since the starting thread would have to block for all TLS 
initializers and similar in the started thread.
<p/>
It is technically possible to implement the current design by transforming this allocation failure into 
<tt>resource_unavailable_try_again</tt>, but the description for this error in the standard is that some thread-based 
limitation has been reached, not a general memory limit, so that doesn't seem to meet the spirit of the requirement.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <a href="http://wg21.link/n4861">N4861</a>.
</p>

<blockquote class="note">
<p>
[<i>Drafting Note:</i> Two mutually exclusive options are prepared, depicted below by <b>Option A</b> and 
<b>Option B</b>, respectively.] 
</p>
</blockquote>

<p>
<b>Option A:</b> The memory allocation failure results in <tt>bad_alloc</tt>.
</p>
<ol>
<li><p>Modify <sref ref="[thread.thread.constr]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class F, class... Args&gt; explicit thread(F&amp;&amp; f, Args&amp;&amp;... args);
</pre>
<blockquote>
<p>
-3- <i>Constraints:</i> [&hellip;]
<p/>
[&hellip;]
<p/>
-8- <i>Postconditions:</i> <tt>get_id() != id()</tt>. <tt>*this</tt> represents the newly started thread.
<p/>
-9- <i>Throws:</i> <ins><tt>bad_alloc</tt> if memory to transfer parameters to the new thread cannot be obtained.</ins> 
<tt>system_error</tt> if unable to start the new thread.
<p/>
-10- <i>Error conditions:</i>
</p>
<ol style="list-style-type: none">
<li><p>(10.1) &mdash; <tt>resource_unavailable_try_again</tt> &mdash; the system lacked the necessary resources 
to create another thread, or the system-imposed limit on the number of threads in a process would be exceeded.</p></li>
</ol>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[thread.jthread.cons]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class F, class... Args&gt; explicit jthread(F&amp;&amp; f, Args&amp;&amp;... args);
</pre>
<blockquote>
<p>
-3- <i>Constraints:</i> [&hellip;]
<p/>
[&hellip;]
<p/>
-8- <i>Postconditions:</i> <tt>get_id() != id()</tt> is <tt>true</tt> and <tt>ssource.stop_possible()</tt> 
is <tt>true</tt> and <tt>*this</tt> represents the newly started thread. [<i>Note:</i> The calling thread 
can make a stop request only once, because it cannot replace this stop token. &mdash; <i>end note</i>]
<p/>
-9- <i>Throws:</i> <ins><tt>bad_alloc</tt> if memory to transfer parameters to the new thread cannot be obtained.</ins> 
<tt>system_error</tt> if unable to start the new thread.
<p/>
-10- <i>Error conditions:</i>
</p>
<ol style="list-style-type: none">
<li><p>(10.1) &mdash; <tt>resource_unavailable_try_again</tt> &mdash; the system lacked the necessary resources 
to create another thread, or the system-imposed limit on the number of threads in a process would be exceeded.</p></li>
</ol>
</blockquote>
</blockquote>
</li>

</ol>

<p>
<b>Option B:</b> The memory allocation failure results in a <tt>system_error</tt> with the error condition 
<tt>out_of_memory</tt>.
</p>
<ol>
<li><p>Modify <sref ref="[thread.thread.constr]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class F, class... Args&gt; explicit thread(F&amp;&amp; f, Args&amp;&amp;... args);
</pre>
<blockquote>
<p>
-3- <i>Constraints:</i> [&hellip;]
<p/>
[&hellip;]
<p/>
-8- <i>Postconditions:</i> <tt>get_id() != id()</tt>. <tt>*this</tt> represents the newly started thread.
<p/>
-9- <i>Throws:</i> <tt>system_error</tt> if unable to start the new thread.
<p/>
-10- <i>Error conditions:</i>
</p>
<ol style="list-style-type: none">
<li><p><ins>(10.?) &mdash; <tt>not_enough_memory</tt> &mdash; the system lacked memory resources to transfer parameters 
to the new thread.</ins></p></li>
<li><p>(10.1) &mdash; <tt>resource_unavailable_try_again</tt> &mdash; the system lacked the necessary resources 
to create another thread, or the system-imposed limit on the number of threads in a process would be exceeded.</p></li>
</ol>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[thread.jthread.cons]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class F, class... Args&gt; explicit jthread(F&amp;&amp; f, Args&amp;&amp;... args);
</pre>
<blockquote>
<p>
-3- <i>Constraints:</i> [&hellip;]
<p/>
[&hellip;]
<p/>
-8- <i>Postconditions:</i> <tt>get_id() != id()</tt> is <tt>true</tt> and <tt>ssource.stop_possible()</tt> 
is <tt>true</tt> and <tt>*this</tt> represents the newly started thread. [<i>Note:</i> The calling thread 
can make a stop request only once, because it cannot replace this stop token. &mdash; <i>end note</i>]
<p/>
-9- <i>Throws:</i> <tt>system_error</tt> if unable to start the new thread.
<p/>
-10- <i>Error conditions:</i>
</p>
<ol style="list-style-type: none">
<li><p><ins>(10.?) &mdash; <tt>not_enough_memory</tt> &mdash; the system lacked memory resources to transfer parameters 
to the new thread.</ins></p></li>
<li><p>(10.1) &mdash; <tt>resource_unavailable_try_again</tt> &mdash; the system lacked the necessary resources 
to create another thread, or the system-imposed limit on the number of threads in a process would be exceeded.</p></li>
</ol>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
