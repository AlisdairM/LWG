<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3039" status="Voting">
<title>Unnecessary <tt>decay</tt> in <tt>thread</tt> and <tt>packaged_task</tt></title>
<section><sref ref="[thread.thread.constr]"/><sref ref="[futures.task.members]"/></section>
<submitter>Stephan T. Lavavej </submitter>
<date>17 Nov 2017</date>
<priority>0</priority>

<discussion>
<p>
Following <a href="http://wg21.link/p0777r1">P0777R1</a> "Treating Unnecessary decay", more occurrences can be fixed. 
When constraints are checking for the same type as <tt>thread</tt> or a specialization of <tt>packaged_task</tt>, 
decaying functions to function pointers and arrays to object pointers can't affect the result.
</p>

<note>28-Nov-2017 Moved to Tentatively Ready after five positive votes on the ML.</note>
</discussion>

<resolution>
<p>
Wording relative to <a href="http://wg21.link/n4700">N4700</a>.
</p>

<ol>
<li>
<p>
Edit <sref ref="[thread.thread.constr]"/> as indicated:
</p>
<blockquote>
<pre>
template &lt;class F, class... Args&gt; explicit thread(F&amp;&amp; f, Args&amp;&amp;... args);
</pre>
<blockquote>
<p>
-3- <i>Requires:</i> [&hellip;]
<p/>
-4- <i>Remarks:</i> This constructor shall not participate in overload resolution if 
<tt><del>decay_t</del><ins>remove_cvref_t</ins>&lt;F&gt;</tt> is the same type as <tt>std::thread</tt>.
</p>
</blockquote>
</blockquote>
</li>

<li>
<p>
Edit <sref ref="[futures.task.members]"/> as indicated:
</p>
<blockquote>
<pre>
template &lt;class F&gt;
  packaged_task(F&amp;&amp; f);
</pre>
<blockquote>
<p>
-2- <i>Requires:</i> [&hellip;]
<p/>
-3- <i>Remarks:</i> This constructor shall not participate in overload resolution if 
<tt><del>decay_t</del><ins>remove_cvref_t</ins>&lt;F&gt;</tt> is the same type as <tt>packaged_task&lt;R(ArgTypes...)&gt;</tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
