<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2873" status="WP">
<title>Add <tt>noexcept</tt> to several <tt>shared_ptr</tt> related functions</title>
<section><sref ref="[util.smartptr.shared]"/></section>
<submitter>United States</submitter>
<date>3 Feb 2017</date>
<priority>99</priority>

<discussion>
<p><b>Addresses US 124</b></p>

<p>Several <tt>shared_ptr</tt> related functions have wide 
contracts and cannot throw, so should be marked 
unconditionally <tt>noexcept</tt>.</p>

<p>
Proposed change:
</p>
<p>
Add <tt>noexcept</tt> to:
</p>
<blockquote>
<pre>
template&lt;class U&gt; 
bool 
shared_ptr::owner_before(shared_ptr&lt;U&gt; const&amp; b) const <ins>noexcept</ins>;
 
template&lt;class U&gt; 
bool 
shared_ptr::owner_before(weak_ptr&lt;U&gt; const&amp; b) const <ins>noexcept</ins>;

template&lt;class U&gt; 
bool  
weak_ptr::owner_before(shared_ptr&lt;U&gt; const&amp; b) const <ins>noexcept</ins>; 

template&lt;class U&gt; 
bool
weak_ptr::owner_before(weak_ptr&lt;U&gt; const&amp; b) const <ins>noexcept</ins>;
 
bool owner_less::operator()(A,B) const <ins>noexcept</ins>; <i>// all versions</i>
</pre>
</blockquote>

<note>2017-02-20, Marshall adds wording</note>

<note>Kona 2017-02-27</note>
<p>Accepted as Immediate to resolve NB comment.</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4640">N4640</a>.</p>
<ol>

<li><p>Modify <sref ref="[util.smartptr.shared]"/> as indicated:</p>
<blockquote>
<pre>
  template&lt;class U&gt; bool owner_before(const shared_ptr&lt;U&gt;&amp; b) const<ins> noexcept</ins>;
  template&lt;class U&gt; bool owner_before(const weak_ptr&lt;U&gt;&amp; b) const<ins> noexcept</ins>;
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[util.smartptr.shared.obs]"/> as indicated: </p>
<blockquote>
<pre>
template&lt;class U&gt; bool owner_before(const shared_ptr&lt;U&gt;&amp; b) const<ins> noexcept</ins>;
template&lt;class U&gt; bool owner_before(const weak_ptr&lt;U&gt;&amp; b) const<ins> noexcept</ins>;
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[util.smartptr.ownerless]"/> as indicated:</p>
<blockquote>
<pre>
template&lt;class T&gt; struct owner_less&lt;shared_ptr&lt;T&gt;&gt; {
   bool operator()(const shared_ptr&lt;T&gt;&amp;, const shared_ptr&lt;T&gt;&amp;) const<ins> noexcept</ins>;
   bool operator()(const shared_ptr&lt;T&gt;&amp;, const weak_ptr&lt;T&gt;&amp;) const<ins> noexcept</ins>;
   bool operator()(const weak_ptr&lt;T&gt;&amp;, const shared_ptr&lt;T&gt;&amp;) const<ins> noexcept</ins>;
};

template&lt;class T&gt; struct owner_less&lt;weak_ptr&lt;T&gt;&gt; {
   bool operator()(const weak_ptr&lt;T&gt;&amp;, const weak_ptr&lt;T&gt;&amp;) const<ins> noexcept</ins>;
   bool operator()(const shared_ptr&lt;T&gt;&amp;, const weak_ptr&lt;T&gt;&amp;) const<ins> noexcept</ins>;
   bool operator()(const weak_ptr&lt;T&gt;&amp;, const shared_ptr&lt;T&gt;&amp;) const<ins> noexcept</ins>;
};

template&lt;&gt; struct owner_less&lt;void&gt; {
   template&lt;class T, class U&gt;
      bool operator()(const shared_ptr&lt;T&gt;&amp;, const shared_ptr&lt;U&gt;&amp;) const<ins> noexcept</ins>;
   template&lt;class T, class U&gt;
      bool operator()(const shared_ptr&lt;T&gt;&amp;, const weak_ptr&lt;U&gt;&amp;) const<ins> noexcept</ins>;
   template&lt;class T, class U&gt;
      bool operator()(const weak_ptr&lt;T&gt;&amp;, const shared_ptr&lt;U&gt;&amp;) const<ins> noexcept</ins>;
   template&lt;class T, class U&gt;
      bool operator()(const weak_ptr&lt;T&gt;&amp;, const weak_ptr&lt;U&gt;&amp;) const<ins> noexcept</ins>;
   using is_transparent = <i>unspecified</i>;
};
</pre>
</blockquote>
</li>

</ol>
</resolution>

</issue>

