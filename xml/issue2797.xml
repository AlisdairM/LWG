<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2797" status="Resolved">
<title>Trait precondition violations</title>
<section><sref ref="[meta.type.synop]"/></section>
<submitter>Russia</submitter>
<date>9 Nov 2016</date>
<priority>2</priority>

<discussion>
<p>
<b>Addresses RU 2</b>
<p/>
Failed prerequirement for the type trait must result in ill-formed program.
Otherwise hard detectable errors will happen:
</p>
<blockquote><pre>
#include &lt;type_traits&gt;

struct foo;

void damage_type_trait() {
  // must be ill-formed
  std::is_constructible&lt;foo, foo&gt;::value;
}

struct foo{};

int main() {
  static_assert(
    // produces invalid result
    std::is_constructible&lt;foo, foo&gt;::value,
    "foo must be constructible from foo"
  );
}
</pre></blockquote>
<p>
Suggested resolution:
<p/>
Add to the end of the [meta.type.synop] section:
</p>
<blockquote><p>
<ins>Program is ill-formed if precondition for the type trait is violated.</ins>
</p></blockquote>

<note>2016-11-09, Jonathan provides wording</note>

<note>Issues Telecon 16-Dec-2016</note>
<p>Priority 2</p>

<note>2017-03-02, Daniel comments</note>
<p>
LWG <iref ref="2939"/> has been created to signal that some of our current type trait constraints are
not quite correct and I recommend <em>not</em> to enforce the required diagnostics for traits that
are sensitive to mismatches of the current approximate rules.
</p>

<note>2017-03-03, Kona Friday morning</note>
<p>Unanimous consent to adopt this for C++17, but due to a misunderstanding, it wasn't on the ballot</p>
<p>Setting status to 'Ready' so we'll get it in immediately post-C++17</p>

<note>2017-06-15 request from Daniel</note>
<p>I don't believe that this should be "Ready"; I added the extra note to LWG 2797 *and* added the new issue <iref ref="2939"/> exactly to *prevent* 2797 being accepted for C++17</p>
<p>Setting status back to 'Open'</p>


<note>2018-08 Batavia Monday issue discussion</note>
<p>Issues <iref ref="2797"/>, <iref ref="2939"/>, <iref ref="3022"/>, and <iref ref="3099"/> are all closely related. Walter to write a paper resolving them.</p>

<note>2018-11-11 Resolved by <a href="https://wg21.link/P1285R0">P1285R0</a>, adopted in San Diego.</note>
</discussion>

<resolution>
<p>This wording is relative to N4606.</p>

<ol>
<li><p>Add a new paragraph after <sref ref="[meta.unary.prop]"/> paragraph 3:</p>
<blockquote>
<p>
<ins>-?- If an instantiation of any template declared in this subclause fails
to meet the preconditions, the program is ill-formed.</ins>
</p>
</blockquote>
</li>

<li><p>Change the specification for <tt>alignment_of</tt> in Table 39 in <sref ref="[meta.unary.prop.query]"/>:</p>

<blockquote>
<table border="1">
<caption>Table 39 &mdash; Type property queries</caption>
<tr>
<td>
<tt>template &lt;class T&gt; struct alignment_of;</tt>
</td>
<td>
<tt>alignof(T)</tt>.<br/>
<i>Requires:</i> <tt>alignof(T)</tt> shall be a valid expression (5.3.6)<ins>,
otherwise the program is ill-formed</ins>
</td>
</tr>

</table>
</blockquote>

</li>

<li><p>Change the specification for <tt>is_base_of</tt>, <tt>is_convertible</tt>, <tt>is_callable</tt>, and
<tt>is_nothrow_callable</tt> in Table 40 in <sref ref="[meta.rel]"/>:</p>

<blockquote>
<table border="1">
<caption>Table 40 &mdash; Type relationship predicates</caption>

<tr>
<td colspan="3" align="center">
<tt>[&hellip;]</tt>
</td>
</tr>

<tr>
<td>
<tt>template &lt;class Base, class<br/>
Derived&gt;<br/>
struct is_base_of;</tt>
</td>
<td>
[&hellip;]
</td>
<td>
If <tt>Base</tt> and <tt>Derived</tt> are<br/>
non-union class types and are<br/>
different types (ignoring possible<br/>
<i>cv</i>-qualifiers) then <tt>Derived</tt> shall<br/>
be a complete type<ins>, otherwise the program is ill-formed</ins>.<br/>
[<i>Note:</i> Base classes that<br/>
are private, protected, or ambiguous are,<br/>
nonetheless, base classes. &mdash; <i>end note</i>]
</td>
</tr>

<tr>
<td>
<tt>template &lt;class From, class To&gt;<br/>
struct is_convertible;</tt>
</td>
<td>
<i>see below</i>
</td>
<td>
<tt>From</tt> and <tt>To</tt> shall be complete<br/>
types, arrays of unknown bound,<br/>
or (possibly <i>cv</i>-qualified) <tt>void</tt><br/>
types<ins>, otherwise the program is<br/>
ill-formed</ins>.
</td>
</tr>

<tr>
<td>
<tt>template &lt;class Fn, class...<br/>
ArgTypes, class R&gt;<br/>
struct is_callable&lt;<br/>
Fn(ArgTypes...), R&gt;;</tt>
</td>
<td>
[&hellip;]
</td>
<td>
<tt>Fn</tt>, <tt>R</tt>, and all types in the<br/>
parameter pack <tt>ArgTypes</tt> shall<br/>
be complete types, (possibly<br/>
<i>cv</i>-qualified) <tt>void</tt>, or arrays of<br/>
unknown bound<ins>,<br/>
otherwise the program is ill-formed</ins>.
</td>
</tr>

<tr>
<td>
<tt>template &lt;class Fn, class...<br/>
ArgTypes, class R&gt;<br/>
struct is_nothrow_callable&lt;<br/>
Fn(ArgTypes...), R&gt;;</tt>
</td>
<td>
[&hellip;]
</td>
<td>
<tt>Fn</tt>, <tt>R</tt>, and all types in the<br/>
parameter pack <tt>ArgTypes</tt> shall<br/>
be complete types, (possibly<br/>
<i>cv</i>-qualified) <tt>void</tt>, or arrays of<br/>
unknown bound<ins>,<br/>
otherwise the program is ill-formed</ins>.
</td>
</tr>

</table>
</blockquote>

</li>

<li><p>Add a new paragraph after <sref ref="[meta.trans]"/> paragraph 2:</p>
<blockquote>
<p>
-2- Each of the templates in this subclause shall be a <tt>TransformationTrait</tt> (20.15.1).
<p/>
<ins>-?- If an instantiation of any template declared in this subclause fails
to meet the <i>Requires:</i> preconditions, the program is ill-formed.</ins>
</p>
</blockquote>
</li>


</ol>
</resolution>

</issue>
