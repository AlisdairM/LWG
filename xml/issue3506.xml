<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3506" status="WP">
<title>Missing allocator-extended constructors for <tt>priority_queue</tt></title>
<section><sref ref="[priority.queue]"/></section>
<submitter>Tim Song</submitter>
<date>21 Nov 2020</date>
<priority>3</priority>

<discussion>
<p>
<tt>priority_queue</tt> has two constructor templates taking a pair of input
iterators in addition to a comparator and a container, but it does not have
allocator-extended constructors corresponding to these constructor templates:
</p>
<blockquote><pre>
template&lt;class InputIterator&gt;
  priority_queue(InputIterator first, InputIterator last, const Compare&amp; x,
                 const Container&amp;);
template&lt;class InputIterator&gt;
  priority_queue(InputIterator first, InputIterator last,
                 const Compare&amp; x = Compare(), Container&amp;&amp; = Container());
</pre></blockquote>

<note>2020-11-29; Reflector prioritization</note>
<p>
Set priority to 3 during reflector discussions. It has been pointed out that this issue
is related to LWG <iref ref="1199"/>, LWG <iref ref="2210"/>, and LWG <iref ref="2713"/>.
</p>

<note>2021-02-17 Tim adds PR</note>

<note>2021-02-26; LWG telecon</note>
<p>
Set status to Tentatively Ready after discussion and poll.
<table>
<tr><th>F</th><th>A</th><th>N</th></tr>
<tr><td>11</td><td>0</td><td>0</td></tr>
</table>
</p>

<note>2021-06-07 Approved at June 2021 virtual plenary. Status changed: Voting &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4878">N4878</a>.
</p>

<ol>
<li><p>Add the following paragraph at the end of <sref ref="[container.adaptors.general]" />:</p>
<blockquote>
<p>
<ins>-6- The exposition-only alias template <i><tt>iter-value-type</tt></i> defined in
<sref ref="[sequences.general]"/> may appear in deduction guides for container adaptors.</ins>
</p>
</blockquote>
</li>
<li><p>Modify <sref ref="[priority.queue]"/>, class template <tt>priority_queue</tt> synopsis, as indicated:</p>
<blockquote>
<pre>
namespace std {
  template&lt;class T, class Container = vector&lt;T&gt;,
            class Compare = less&lt;typename Container::value_type&gt;&gt;
  class priority_queue {

  // [&hellip;]

  public:
    priority_queue() : priority_queue(Compare()) {}
    explicit priority_queue(const Compare&amp; x) : priority_queue(x, Container()) {}
    priority_queue(const Compare&amp; x, const Container&amp;);
    priority_queue(const Compare&amp; x, Container&amp;&amp;);
    template&lt;class InputIterator&gt;
      priority_queue(InputIterator first, InputIterator last, const Compare&amp; x,
                      const Container&amp;);
    template&lt;class InputIterator&gt;
      priority_queue(InputIterator first, InputIterator last,
                      const Compare&amp; x = Compare(), Container&amp;&amp; = Container());
    template&lt;class Alloc&gt; explicit priority_queue(const Alloc&amp;);
    template&lt;class Alloc&gt; priority_queue(const Compare&amp;, const Alloc&amp;);
    template&lt;class Alloc&gt; priority_queue(const Compare&amp;, const Container&amp;, const Alloc&amp;);
    template&lt;class Alloc&gt; priority_queue(const Compare&amp;, Container&amp;&amp;, const Alloc&amp;);
    template&lt;class Alloc&gt; priority_queue(const priority_queue&amp;, const Alloc&amp;);
    template&lt;class Alloc&gt; priority_queue(priority_queue&amp;&amp;, const Alloc&amp;);
<ins>    template&lt;class InputIterator, class Alloc&gt;
      priority_queue(InputIterator, InputIterator, const Alloc&amp;);
    template&lt;class InputIterator, class Alloc&gt;
      priority_queue(InputIterator, InputIterator, const Compare&amp;, const Alloc&amp;);
    template&lt;class InputIterator, class Alloc&gt;
      priority_queue(InputIterator, InputIterator, const Compare&amp;, const Container&amp;, const Alloc&amp;);
    template&lt;class InputIterator, class Alloc&gt;
      priority_queue(InputIterator, InputIterator, const Compare&amp;, Container&amp;&amp;, const Alloc&amp;);</ins>

  // [&hellip;]

  };

  template&lt;class Compare, class Container&gt;
    priority_queue(Compare, Container)
      -&gt; priority_queue&lt;typename Container::value_type, Container, Compare&gt;;

  template&lt;class InputIterator,
            class Compare = less&lt;<del>typename iterator_traits</del><ins><i>iter-value-type</i></ins>&lt;InputIterator&gt;<del>::value_type</del>&gt;,
            class Container = vector&lt;<del>typename iterator_traits</del><ins><i>iter-value-type</i></ins>&lt;InputIterator&gt;<del>::value_type</del>&gt;&gt;
    priority_queue(InputIterator, InputIterator, Compare = Compare(), Container = Container())
      -&gt; priority_queue&lt;<del>typename iterator_traits</del><ins><i>iter-value-type</i></ins>&lt;InputIterator&gt;<del>::value_type</del>, Container, Compare&gt;;

  template&lt;class Compare, class Container, class Allocator&gt;
    priority_queue(Compare, Container, Allocator)
      -&gt; priority_queue&lt;typename Container::value_type, Container, Compare&gt;;

<ins>  template&lt;class InputIterator, class Allocator&gt;
    priority_queue(InputIterator, InputIterator, Allocator)
      -&gt; priority_queue&lt;<i>iter-value-type</i>&lt;InputIterator&gt;,
                        vector&lt;<i>iter-value-type</i>&lt;InputIterator&gt;, Allocator&gt;,
                        less&lt;<i>iter-value-type</i>&lt;InputIterator&gt;&gt;&gt;;

  template&lt;class InputIterator, class Compare, class Allocator&gt;
    priority_queue(InputIterator, InputIterator, Compare, Allocator)
      -&gt; priority_queue&lt;<i>iter-value-type</i>&lt;InputIterator&gt;,
                        vector&lt;<i>iter-value-type</i>&lt;InputIterator&gt;, Allocator&gt;, Compare&gt;;

  template&lt;class InputIterator, class Compare, class Container, class Allocator&gt;
    priority_queue(InputIterator, InputIterator, Compare, Container, Allocator)
      -&gt; priority_queue&lt;typename Container::value_type, Container, Compare&gt;;</ins>

  // [&hellip;]
}
</pre>
</blockquote>
</li>

<li><p>Add the following paragraphs to <sref ref="[priqueue.cons.alloc]"/>:</p>
<blockquote>
<pre>
template&lt;class InputIterator, class Alloc&gt;
  priority_queue(InputIterator first, InputIterator last, const Alloc&amp; a);
</pre>
<blockquote>
<p>-?- <i>Effects:</i> Initializes <tt>c</tt> with <tt>first</tt> as the first argument, <tt>last</tt> as
the second argument, and <tt>a</tt> as the third argument, and value-initializes <tt>comp</tt>;
calls <tt>make_heap(c.begin(), c.end(), comp)</tt>. </p>
</blockquote>
<pre>
template&lt;class InputIterator, class Alloc&gt;
  priority_queue(InputIterator first, InputIterator last, const Compare&amp; compare, const Alloc&amp; a);
</pre>
<blockquote>
<p>-?- <i>Effects:</i> Initializes <tt>c</tt> with <tt>first</tt> as the first argument, <tt>last</tt> as
the second argument, and <tt>a</tt> as the third argument, and initializes <tt>comp</tt> with <tt>compare</tt>;
calls <tt>make_heap(c.begin(), c.end(), comp)</tt>. </p>
</blockquote>
<pre>
template&lt;class InputIterator, class Alloc&gt;
  priority_queue(InputIterator first, InputIterator last, const Compare&amp; compare, const Container&amp; cont, const Alloc&amp; a);
</pre>
<blockquote>
<p>-?- <i>Effects:</i> Initializes <tt>c</tt> with <tt>cont</tt> as the first argument and <tt>a</tt> as
the second argument, and initializes <tt>comp</tt> with <tt>compare</tt>; calls <tt>c.insert(c.end(), first, last)</tt>;
and finally calls <tt>make_­heap(c.begin(), c.end(), comp)</tt>. </p>
</blockquote>
<pre>
template&lt;class InputIterator, class Alloc&gt;
  priority_queue(InputIterator first, InputIterator last, const Compare&amp; compare, Container&amp;&amp; cont, const Alloc&amp; a);
</pre>
<blockquote>
<p>-?- <i>Effects:</i> Initializes <tt>c</tt> with <tt>std::move(cont)</tt> as the first argument and <tt>a</tt> as
the second argument, and initializes <tt>comp</tt> with <tt>compare</tt>; calls <tt>c.insert(c.end(), first, last)</tt>;
and finally calls <tt>make_­heap(c.begin(), c.end(), comp)</tt>. </p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
