<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2549" status="New">
<title>Tuple <i>EXPLICIT</i> constructor templates that take <tt>tuple</tt> parameters end up taking references 
to temporaries and will create dangling references</title>
<section><sref ref="[tuple.cnstr]"/></section>
<submitter>Ville Voutilainen</submitter>
<date>11 Oct 2015</date>
<priority>99</priority>

<discussion>
<p>
Consider this example:
</p>
<blockquote><pre>
#include &lt;utility&gt;
#include &lt;tuple&gt;

struct X {
  int state; // this has to be here to not allow tuple
             // to inherit from an empty X.
  X() {
  }

  X(X const&amp;) {
  }

  X(X&amp;&amp;) {
  }

  ~X() {
  }
};

int main()
{
  X v;
  std::tuple&lt;X&gt; t1{v};
  std::tuple&lt;std::tuple&lt;X&gt;&amp;&amp;&gt; t2{std::move(t1)}; // #1
  std::tuple&lt;std::tuple&lt;X&gt;&gt; t3{std::move(t2)}; // #2
}
</pre></blockquote>
<p>
The line marked with <tt>#1</tt> will use the constructor
<tt>template &lt;class... UTypes&gt; <i>EXPLICIT</i> constexpr tuple(tuple&lt;UTypes...&gt;&amp;&amp; u);</tt>
and will construct a temporary and bind an rvalue reference to it.
The line marked with <tt>#2</tt> will move from a dangling reference.
<p/>
In order to solve the problem, the constructor templates taking tuples
as parameters need additional SFINAE conditions that SFINAE
those constructor templates away when <tt>Types...</tt> is constructible
or convertible from the incoming tuple type and <tt>sizeof...(Types)</tt> equals
one. libstdc++ already has this fix applied.
<p/>
There is an additional check that needs to be done, in order to avoid
infinite meta-recursion during overload resolution, for a case where
the element type is itself constructible from the target tuple. An example
illustrating that problem is as follows:
</p>
<blockquote><pre>
#include &lt;tuple&gt;

struct A
{
  template &lt;typename T&gt;
  A(T)
  {
  }

  A(const A&amp;) = default;
  A(A&amp;&amp;) = default;
  A&amp; operator=(const A&amp;) = default;
  A&amp; operator=(A&amp;&amp;) = default;
  ~A() = default;
};

int main()
{
  auto x = A{7};
  std::make_tuple(x);
}
</pre></blockquote>
<p>
I provide two proposed resolutions, one that merely has a note encouraging
trait-based implementations to avoid infinite meta-recursion, and a second
one that avoids it normatively (implementations can still do things differently
under the as-if rule, so we are not necessarily overspecifying how to do it.)
</p>
</discussion>

<resolution>
<ol style="list-style-type:upper-alpha">
<li><p><b>Alternative 1:</b></p>
<ol>
<li><p>In <sref ref="[tuple.cnstr]"/>/17, edit as follows:</p>
<blockquote>
<pre>
template &lt;class... UTypes> <i>EXPLICIT</i> constexpr tuple(const tuple&lt;UTypes...&gt;&amp; u);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-17- <i>Remarks</i>: This constructor shall not participate in overload resolution unless
</p>
<ul>
<li><p><tt>is_constructible&lt;T<sub><i>i</i></sub>, const Ui&amp;&gt;::value</tt> is true for all 
<tt><i>i</i></tt><del>.</del><ins>, and</ins></p></li>
<li><p><ins><tt>sizeof...(Types) != 1</tt>, or <tt>is_convertible&lt;const tuple&lt;UTypes...&gt;&amp;,
Types...&gt;::value</tt> is false and <tt>is_constructible&lt;Types..., const tuple&lt;UTypes...&gt;&amp;&gt;::value</tt>
is false.</ins></p></li>
</ul>
<p>
<ins>
[<i>Note</i>: to avoid infinite template recursion in a trait-based implementation
for the case where <tt>UTypes...</tt> is a single type that has a constructor template that accepts
<tt>tuple&lt;Types...&gt;</tt>, implementations need to additionally check that
<tt>remove_cv_t&lt;remove_reference_t&lt;const tuple&lt;UTypes...&gt;&amp;&gt;&gt;</tt> and
<tt>tuple&lt;Types...&gt;</tt> are not the same type. &mdash; <i>end note</i>]
</ins>
<p/>
The constructor is explicit if and only if <tt>is_convertible&lt;const U<sub><i>i</i></sub>&amp;, 
T<sub><i>i</i></sub>&gt;::value</tt> is false for at least one <tt><i>i</i></tt>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>In <sref ref="[tuple.cnstr]"/>/20, edit as follows:</p>

<blockquote>
<pre>
template &lt;class... UTypes&gt; <i>EXPLICIT</i> constexpr tuple(tuple&lt;UTypes...&gt;&amp;&amp; u);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-20- <i>Remarks</i>: This constructor shall not participate in overload resolution unless
</p>
<ul>
<li><p><tt>is_constructible&lt;T<sub><i>i</i></sub>, U<sub><i>i</i></sub>&amp;&amp;&gt;::value</tt> is true for all 
<tt><i>i</i></tt><del>.</del><ins>, and</ins></p></li>
<li><p><ins><tt>sizeof...(Types) != 1</tt>, or <tt>is_convertible&lt;tuple&lt;UTypes...&gt;&amp;&amp;,
Types...&gt;::value</tt> is false and <tt>is_constructible&lt;Types..., tuple&lt;UTypes...&gt;&amp;&amp;&gt;::value</tt>
is false.</ins></p></li>
</ul>
<p>
<ins>[<i>Note</i>: to avoid infinite template recursion in a trait-based implementation
for the case where <tt>UTypes...</tt> is a single type that has a constructor template that accepts
<tt>tuple&lt;Types...&gt;</tt>, implementations need to additionally check that
<tt>remove_cv_t&lt;remove_reference_t&lt;tuple&lt;UTypes...&gt;&amp;&amp;&gt;&gt;</tt> and
<tt>tuple&lt;Types...&gt;</tt> are not the same type. &mdash; <i>end note</i>]</ins>
<p/>
The constructor is explicit if and only if <tt>is_convertible&lt;U<sub><i>i</i></sub>&amp;&amp;, 
T<sub><i>i</i></sub>&gt;::value</tt> is false for at least one <tt><i>i</i></tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>

</li>

<li><p><b>Alternative 2 (do the sameness-check normatively):</b></p>

<ol>
<li><p>In <sref ref="[tuple.cnstr]"/>/17, edit as follows:</p>
<blockquote>
<pre>
template &lt;class... UTypes> <i>EXPLICIT</i> constexpr tuple(const tuple&lt;UTypes...&gt;&amp; u);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-17- <i>Remarks</i>: This constructor shall not participate in overload resolution unless
</p>
<ul>
<li><p><tt>is_constructible&lt;T<sub><i>i</i></sub>, const Ui&amp;&gt;::value</tt> is true for all 
<tt><i>i</i></tt><del>.</del><ins>, and</ins></p></li>
<li><p><ins><tt>sizeof...(Types) != 1</tt>, or <tt>is_convertible&lt;const tuple&lt;UTypes...&gt;&amp;,
Types...&gt;::value</tt> is false and <tt>is_constructible&lt;Types..., const tuple&lt;UTypes...&gt;&amp;&gt;::value</tt>
is false and <tt>is_same&lt;tuple&lt;Types...&gt;, remove_cv_t&lt;remove_reference_t&lt;const
tuple&lt;UTypes...&gt;&amp;&gt;&gt;&gt;::value</tt> is false.</ins></p></li>
</ul>
<p>
The constructor is explicit if and only if <tt>is_convertible&lt;const U<sub><i>i</i></sub>&amp;, 
T<sub><i>i</i></sub>&gt;::value</tt> is false for at least one <tt><i>i</i></tt>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>In <sref ref="[tuple.cnstr]"/>/20, edit as follows:</p>

<blockquote>
<pre>
template &lt;class... UTypes&gt; <i>EXPLICIT</i> constexpr tuple(tuple&lt;UTypes...&gt;&amp;&amp; u);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-20- <i>Remarks</i>: This constructor shall not participate in overload resolution unless
</p>
<ul>
<li><p><tt>is_constructible&lt;T<sub><i>i</i></sub>, U<sub><i>i</i></sub>&amp;&amp;&gt;::value</tt> is true for all 
<tt><i>i</i></tt><del>.</del><ins>, and</ins></p></li>
<li><p><ins><tt>sizeof...(Types) != 1</tt>, or <tt>is_convertible&lt;tuple&lt;UTypes...&gt;&amp;&amp;,
Types...&gt;::value</tt> is false and <tt>is_constructible&lt;Types..., tuple&lt;UTypes...&gt;&amp;&amp;&gt;::value</tt>
is false and <tt>is_same&lt;tuple&lt;Types...&gt;, 
remove_cv_t&lt;remove_reference_t&lt;tuple&lt;UTypes...&gt;&amp;&amp;&gt;&gt;&gt;::value</tt> is
false.</ins></p></li>
</ul>
<p>
The constructor is explicit if and only if <tt>is_convertible&lt;U<sub><i>i</i></sub>&amp;&amp;, 
T<sub><i>i</i></sub>&gt;::value</tt> is false for at least one <tt><i>i</i></tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>

</li>
</ol>
</resolution>

</issue>
