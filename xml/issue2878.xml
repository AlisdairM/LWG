<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2878" status="New">
<title>Missing <tt>DefaultConstructible</tt> requirement for <tt>istream_iterator</tt> default constructor</title>
<section><sref ref="[istream.iterator.cons]"/></section>
<submitter>United States</submitter>
<date>3 Feb 2017</date>
<priority>99</priority>

<discussion>
<p><b>Addresses US 153</b></p>

<p><tt>istream_iterator</tt> default constructor requires a <tt>DefaultConstructible T</tt>.</p>

<p>
Proposed change:
</p>
<p>
Add a new p1:
</p>
<blockquote><p>
<i>Requires:</i> <tt>T</tt> is <tt>DefaultConstructible</tt>.
</p></blockquote>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>

<p>This wording is relative to <a href="http://wg21.link/n4618">N4618</a>.</p>

<ol>
<li><p>Modify <sref ref="[istream.iterator.cons]"/> as indicated:</p>
<blockquote>
<pre>
<i>see below</i> istream_iterator();
</pre>
<blockquote>
<p>
<ins>-?- <i>Requires:</i> <tt>T</tt> is <tt>DefaultConstructible</tt>.</ins>
<p/>
-1- <i>Effects:</i> Constructs the end-of-stream iterator. If <tt>is_trivially_default_constructible_v&lt;T&gt;</tt> is
<tt>true</tt>, then this constructor is a <tt>constexpr</tt> constructor.
<p/>
-2- <i>Postconditions:</i> <tt>in_stream == 0</tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>

<note>Kona 2017-02-28: Jonathan provides updated wording as requested by LWG.</note>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4618">N4618</a>.</p>

<ol>
<li><p>Modify <sref ref="[istream.iterator]"/> as indicated:</p>
<blockquote>
<p>
-1- 
The class template <code>istream_iterator</code> is an input iterator (24.2.3)
that reads (using <code>operator>></code>) successive elements from the input
stream for which it was constructed. After it is constructed, and every time
<code>++</code> is used, the iterator reads and stores a value of
<code>T</code>. If the iterator fails to read and store a value of
<code>T</code> (<code>fail()</code> on the stream returns <code>true</code>),
the iterator becomes equal to the end-of-stream iterator value. The constructor
with no arguments <code>istream_iterator()</code> always constructs an
end-of-stream input iterator object, which is the only legitimate iterator to
be used for the end condition. The result of <code>operator*</code> on an
end-of-stream iterator is not defined. For any other iterator value a
<code>const T&amp;</code> is returned. The result of <code>operator-&gt;</code>
on an end-of-stream iterator is not defined. For any other iterator value a
<code>const T*</code> is returned. The behavior of a program that applies
<code>operator++()</code> to an end-of-stream iterator is undefined. It is
impossible to store things into istream iterators.
<ins>The type <code>T</code> shall meet the <code>DefaultConstructible</code>,
<code>CopyConstructible</code>, and <code>CopyAssignable</code> requirements.</ins>
</p>
</blockquote>
</li>

</ol>
</resolution>

</issue>

