<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3858" status="New">
<title><tt>basic_const_iterator</tt> is too strict to provide <tt>iterator_category</tt></title>
<section><sref ref="[const.iterators.types]"/></section>
<submitter>Hewill Kang</submitter>
<date>22 Jan 2023</date>
<priority>99</priority>

<discussion>
<p>
Currently, <tt>basic_const_iterator</tt> provides <tt>iterator_category</tt> member only when the underlying iterator 
models <tt>forward_iterator</tt>, which means that it will not provide <tt>input_iterator_tag</tt> when applied to any 
C++17 legacy iterator.
<p/>
This seems undesirable, and it should be more appropriate to provide <tt>iterator_category</tt> only by detecting whether 
the <tt>iterator_traits</tt> specialization of the underlying iterator has a valid <tt>iterator_category</tt>, 
as is common practice for other iterator adaptors in <tt>&lt;iterator&gt;</tt>.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4928"/>.
</p>

<ol>
<li><p>Modify <sref ref="[const.iterators.types]"/> as indicated:</p>

<blockquote>
<p>
-2- The member <i>typedef-name</i> <tt>iterator_category</tt> is defined if and only if <ins>the <i>qualified-id</i> 
<tt>iterator_traits&lt;Iterator&gt;::iterator_category</tt> is valid and denotes a type</ins><del><tt>Iterator</tt> 
models <tt>forward_iterator</tt></del>. In that case, <tt>basic_const_iterator&lt;Iterator&gt;::iterator_category</tt> 
denotes the type <tt>iterator_traits&lt;Iterator&gt;::iterator_category</tt>.
</p>
</blockquote>
</li>

</ol>
</resolution>

</issue>
