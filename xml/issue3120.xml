<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3120" status="Open">
<title>Unclear behavior of <tt>monotonic_buffer_resource::release()</tt></title>
<section><sref ref="[mem.res.monotonic.buffer.mem]"/></section>
<submitter>Arthur O'Dwyer</submitter>
<date>10 Jun 2018</date>
<priority>2</priority>

<discussion>
<p>
The effects of <tt>monotonic_buffer_resource::release()</tt> are defined as:
</p>
<blockquote>
<p>
Calls <tt>upstream_rsrc-&gt;deallocate()</tt> as necessary to release all allocated memory.
</p>
</blockquote>
<p>
This doesn't give any instruction on what to do with the memory controlled by the <tt>monotonic_buffer_resource</tt> which 
was not allocated, i.e., what to do with the initial buffer provided to its constructor.
<p/>
Boost.Container's pmr implementation expels its initial buffer after a <tt>release()</tt>.
Arthur O'Dwyer's proposed pmr implementation for libc++ reuses the initial buffer after a <tt>release()</tt>, on the 
assumption that this is what the average library user will be expecting.
</p>
<blockquote>
<pre>
#include &lt;memory_resource&gt;

int main() 
{
  char buffer[100];
  {
    std::pmr::monotonic_buffer_resource mr(buffer, 100, std::pmr::null_memory_resource());
    mr.release();
    mr.allocate(60);  // A
  }
  {
    std::pmr::monotonic_buffer_resource mr(buffer, 100, std::pmr::null_memory_resource());
    mr.allocate(60);  // B
    mr.release();
    mr.allocate(60);  // C
  }
}
</pre>
</blockquote>
<p>
Assume that allocation "B" always succeeds.<br/>
With the proposed libc++ implementation, allocations "A" and "C" both succeed.<br/>
With Boost.Container's implementation, allocations "A" and "C" both fail.<br/>
Using another plausible implementation strategy, allocation "A" could succeed but allocation "C" 
could fail. I have been informed that MSVC's implementation does this.
<p/>
Which of these strategies should be permitted by the Standard?
<p/>
Arthur considers "A and C both succeed" to be the obviously most user-friendly strategy, and really 
really hopes it's going to be permitted. Requiring "C" to succeed is unnecessary (and would render MSVC's 
current implementation non-conforming) but could help programmers concerned with portability between 
different implementations.
<p/>
Another side-effect of <tt>release()</tt> which goes underspecified by the Standard is the effect of 
<tt>release()</tt> on <tt>next_buffer_size</tt>. As currently written, my interpretation is that 
<tt>release()</tt> is not permitted to decrease <tt>current_buffer_size</tt>; I'm not sure if this 
is a feature or a bug.
<p/>
Consider this test case (taken from <a href="https://reviews.llvm.org/D47111#inline-421469">here</a>):
</p>
<blockquote>
<pre>
std::pmr::monotonic_buffer_resource mr(std::pmr::new_delete_resource());
for (int i=0; i &lt; 100; ++i) {
  mr.allocate(1);  // D
  mr.release();
}
</pre>
</blockquote>
<p>
Arthur believes it is important that the 100<sup>th</sup> invocation of line "D" does not attempt to allocate 
2<sup>100</sup> bytes from the upstream resource.
</p>

<note>2018-06-23 after reflector discussion</note>
<p>Priority set to 2</p>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>This wording is relative to <a href="https://wg21.link/n4750">N4750</a>.</p>

<blockquote class="note">
<p>
[<i>Drafting note:</i> The resolution depicted below would make MSVC's and my-proposed-libc++'s implementations 
both conforming.]</p>
</blockquote>

<ol>
<li><p>Modify <sref ref="[mem.res.monotonic.buffer.mem]"/> as indicated:</p>
<blockquote>
<pre>
void release();
</pre>
<blockquote>
<p>
-1- <i>Effects:</i> Calls <tt>upstream_rsrc-&gt;deallocate()</tt> as necessary to release all allocated memory. 
<ins>Resets the state of the initial buffer.</ins>
<p/>
-2- [<i>Note:</i> The memory is released back to <tt>upstream_rsrc</tt> even if some blocks that were allocated from
this have not been deallocated from this. <ins>This function has an unspecified effect on <tt>next_buffer_size</tt>.</ins> 
&mdash; <i>end note</i>]
</p>
</blockquote>
</blockquote>
</li>
</ol>
</blockquote>

<note>2018-08-23 Batavia Issues processing</note>
<p>We liked Pablo's wording from the reflector discussion. Status to Open.</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4750">N4750</a>.</p>

<ol>
<li><p>Modify <sref ref="[mem.res.monotonic.buffer.mem]"/> as indicated:</p>
<blockquote>
<pre>
void release();
</pre>
<blockquote>
<p>
-1- <i>Effects:</i> Calls <tt>upstream_rsrc-&gt;deallocate()</tt> as necessary to release all allocated memory. 
<ins>Resets <tt>*this</tt> to its initial state at construction.</ins>
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
