<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3012" status="Ready">
<title><tt>atomic&lt;T&gt;</tt> is unimplementable for non-<tt>is_trivially_copy_constructible T</tt></title>
<section><sref ref="[atomics.types.generic]"/></section>
<submitter>Billy O'Neal III</submitter>
<date>16 Aug 2017</date>
<priority>2</priority>

<discussion>
<p>
<sref ref="[atomics.types.generic]" /> requires that <tt>T</tt> for <tt>std::atomic</tt> is trivially copyable. 
Unfortunately, that's not sufficient to implement <tt>atomic</tt>. Consider <tt>atomic&lt;T&gt;::load</tt>, which 
wants to look something like this:
</p>
<blockquote><pre>
template&lt;class T&gt;
struct atomic {
  __compiler_magic_storage_for_t storage;

  T load(memory_order = memory_order_seq_cst) const {
    return __magic_intrinsic(storage);
  }

};
</pre></blockquote>
<p>
Forming this return statement, though, requires that <tt>T</tt> is copy constructible &mdash; trivially copyable things 
aren't necessarily copyable! For example, the following is trivially copyable but breaks libc++, libstdc++, and msvc++:
</p>
<blockquote><pre>
struct NonAssignable {
  int i;
  NonAssignable() = delete;
  NonAssignable(int) : i(0) {}
  NonAssignable(const NonAssignable&amp;) = delete;
  NonAssignable(NonAssignable&amp;&amp;) = default;
  NonAssignable&amp; operator=(const NonAssignable&amp;) = delete;
  NonAssignable&amp; operator=(NonAssignable&amp;&amp;) = delete;
  ~NonAssignable() = default;
};
</pre></blockquote>
<p>
All three standard libraries are happy as long as <tt>T</tt> is trivially copy constructible, assignability is not required. 
Casey Carter says that we might want to still require trivially copy assignable though, since what happens when you do an 
<tt>atomic&lt;T&gt;::store</tt> is morally an "assignment" even if it doesn't use the user's assignment operator.
</p>

<note>2017-11 Albuquerque Wednesday issue processing</note>
<p>Status to Open; Casey and STL to work with Billy for better wording.</p>
<p>Should this include trivially copyable as well as trivially copy assignable?</p>

<p>2017-11-09, Billy O'Neal provides updated wording.</p>
<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>This resolution is relative to <a href="http://wg21.link/n4687">N4687</a>.</p>

<ol>
<li><p>Edit <sref ref="[atomics.types.generic]"/> as indicated:</p>

<blockquote>
<p>
-1- <ins>If <tt>is_trivially_copy_constructible_v&lt;T&gt;</tt> is <tt>false</tt>, the program is ill-formed</ins><del>The
template argument for <tt>T</tt> shall be trivially copyable (<sref ref="[basic.types]"/>)</del>. [<i>Note:</i> Type
arguments that are not also statically initializable may be difficult to use. &mdash; <i>end note</i>]
</p>
</blockquote>
</li>
</ol>
</blockquote>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>This resolution is relative to <a href="http://wg21.link/n4687">N4687</a>.</p>

<ol>
<li><p>Edit <sref ref="[atomics.types.generic]"/> as indicated:</p>

<blockquote>
<p>
-1- <ins>If <tt>is_copy_constructible_v&lt;T&gt;</tt> is <tt>false</tt> or if
<tt>is_trivially_copyable_v&lt;T&gt;</tt> is <tt>false</tt>, the program is ill-formed</ins><del>The
template argument for <tt>T</tt> shall be trivially copyable (<sref ref="[basic.types]"/>)</del>. [<i>Note:</i> Type
arguments that are not also statically initializable may be difficult to use. &mdash; <i>end note</i>]
</p>
</blockquote>
</li>
</ol>
</blockquote>

<note>2017-11-12, Tomasz comments and suggests alternative wording</note>
<p>
According to my understanding during Albuquerque Saturday issue processing we agreed that we want the type used 
with the atomics to have non-deleted and trivial copy/move construction and assignment.
<p/>
Wording note: <tt>CopyConstructible</tt> and <tt>CopyAssignable</tt> include semantic requirements that are not 
checkable at compile time, so these are requirements imposed on the user and cannot be validated by an
implementation without heroic efforts.
</p>

<note>2018-11 San Diego Thursday night issue processing</note>
<p>Status to Ready.</p>
</discussion>

<resolution>
<p>This resolution is relative to <a href="http://wg21.link/n4700">N4700</a>.</p>

<ol>
<li><p>Edit <sref ref="[atomics.types.generic]"/> as indicated:</p>

<blockquote>
<p>
-1- The template argument for <tt>T</tt> shall <ins>meet the <tt>CopyConstructible</tt> and <tt>CopyAssignable</tt>
requirements. If <tt>is_trivially_copyable_v&lt;T&gt; &amp;&amp; is_copy_constructible_v&lt;T&gt; &amp;&amp; 
is_move_constructible_v&lt;T&gt; &amp;&amp; is_copy_assignable_v&lt;T&gt; &amp;&amp; is_move_assignable_v&lt;T&gt;</tt> 
is <tt>false</tt>, the program is ill-formed</ins><del>be trivially copyable (<sref ref="[basic.types]"/>)</del>. 
[<i>Note:</i> Type arguments that are not also statically initializable may be difficult to use. &mdash; <i>end note</i>]
</p>
</blockquote>
</li>
</ol>
</resolution>
</issue>
