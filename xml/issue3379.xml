<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3379" status="C++20">
<title>"<tt>safe</tt>" in several library names is misleading</title>
<section><sref ref="[ranges.syn]"/></section>
<submitter>Casey Carter</submitter>
<date>21 Jan 2020</date>
<priority>1</priority>

<discussion>
<p>
Various WG21 members have commented that the use of "safe" in the names <tt>safe_range</tt>, 
<tt>enable_safe_range</tt>, <tt>safe_iterator_t</tt>, and <tt>safe_subrange_t</tt> to mean "fairly 
unlikely to produce dangling iterators" is inappropriate. The term "safe" has very strong 
connotations in some application domains, and these names don't intend such connotations. We 
could avoid confusion by changing these names to avoid the use of "safe". The Ranges Illuminati 
has deemed "borrowed" to be more appropriate: it reflects the fact that such ranges often 
"borrow" iterators from an adapted range which allows them to not be lifetime-bound to the 
adapting range.
</p>

<note>2020-02-08 Issue Prioritization</note>
<p>Priority to 1 after reflector discussion. This issue needs to be looked at by LEWG.</p>

<note>2020-02-13, Prague</note>
<p>
Set to Immediate.
</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4849">N4849</a>.</p>

<ol>
<li>
<p>
Replace all occurrences of <tt>safe_range</tt>, <tt>enable_safe_range</tt>, <tt>safe_iterator_t</tt>, 
and <tt>safe_subrange_t</tt> in the working draft with <tt>borrowed_range</tt>, <tt>enable_borrowed_range</tt>, <tt>borrowed_iterator_t</tt>, and <tt>borrowed_subrange_t</tt>. 
</p>
</li>
</ol>
</resolution>

</issue>
