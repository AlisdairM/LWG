<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3213" status="Resolved">
<title><tt>for_each_n</tt> and <tt>copy_n</tt> missing requirements for <tt>Size</tt></title>
<section><sref ref="[alg.foreach]"/><sref ref="[alg.copy]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>31 May 2019</date>
<priority>3</priority>

<discussion>
<p>
<tt>search_n</tt> and <tt>fill_n</tt> and <tt>generate_n</tt> require that "The type <tt>Size</tt> shall be
convertible to integral type", but <tt>for_each_n</tt> and <tt>copy_n</tt> have no requirements on
<tt>Size</tt>. Presumably it should be convertible to an integral type.
</p>

<note>2019-07 Issue Prioritization</note>
<p>Priority to 3 after discussion on the reflector.</p>

<strong>Previous resolution [SUPERSEDED]:</strong>
<blockquote class="note">
<p>This wording is relative to <a href="https://wg21.link/n4810">N4810</a>.</p>

<blockquote class="note">
<p>
[<i>Drafting note:</i> Clause [algorithms] has not yet gone through a "Mandating" cleanup of our new wording
style for requirements expressed in <i>Requires</i> and <i>Expects</i> elements. The below wording
changes perform this fix for the touched paragraphs and also replaces here <i>Requires</i> by
<i>Expects</i> to prevent papers that address such wording changes to keep tracking of additional
wording changes caused by proposed wording of issues.]
</p>
</blockquote>

<ol>
<li><p>Modify <sref ref="[alg.foreach]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class InputIterator, class Size, class Function&gt;
  constexpr InputIterator for_each_n(InputIterator first, Size n, Function f);
</pre>
<blockquote>
<p>
-16- <i>Requires:</i> shall satisfy the <i>Cpp17MoveConstructible</i> requirements [&hellip;]
<p/>
-17- <i><del>Requires</del><ins>Expects</ins>:</i> <ins>The type <tt>Size</tt> is convertible to integral type
(<sref ref="[conv.integral]"/>, <sref ref="[class.conv]"/>).</ins> <tt>n &gt;= 0</tt>.
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
template&lt;class ExecutionPolicy, class ForwardIterator, class Size, class Function&gt;
  ForwardIterator for_each_n(ExecutionPolicy&amp;&amp; exec, ForwardIterator first, Size n,
                             Function f);
</pre>
<blockquote>
<p>
-21- <i>Requires:</i> shall satisfy the <i>Cpp17CopyConstructible</i> requirements [&hellip;]
<p/>
-22- <i><del>Requires</del><ins>Expects</ins>:</i> <ins>The type <tt>Size</tt> is convertible to integral type
(<sref ref="[conv.integral]"/>, <sref ref="[class.conv]"/>).</ins> <tt>n &gt;= 0</tt>.
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[alg.copy]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class InputIterator, class Size, class OutputIterator&gt;
  constexpr OutputIterator copy_n(InputIterator first, Size n,
                                  OutputIterator result);
template&lt;class ExecutionPolicy, class ForwardIterator1, class Size, class ForwardIterator2&gt;
  ForwardIterator2 copy_n(ExecutionPolicy&amp;&amp; exec,
                          ForwardIterator1 first, Size n,
                          ForwardIterator2 result);
template&lt;InputIterator I, WeaklyIncrementable O&gt;
  requires IndirectlyCopyable&lt;I, O&gt;
  constexpr ranges::copy_n_result&lt;I, O&gt;
    ranges::copy_n(I first, iter_difference_t&lt;I&gt; n, O result);
</pre>
<blockquote>
<p>
-10- Let <tt><i>M</i></tt> be <tt>max(n, 0)</tt>.
<p/>
<ins>-?- <i>Expects:</i> The type <tt>Size</tt> is convertible to integral type
(<sref ref="[conv.integral]"/>, <sref ref="[class.conv]"/>).</ins>
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>

</ol>

</blockquote>

<note>2020-05-01; Reflector discussions</note>
<p>
There was consensus that this issue has been resolved by <a href="https://wg21.link/p1718r2">P1718R2</a>,
voted in in Belfast 2019.
</p>
<note>2020-11-09 Resolved for C++20. Status changed: Tentatively Resolved &rarr; Resolved.</note>
</discussion>

<resolution>
<p>
Resolved by <a href="https://wg21.link/p1718r2">P1718R2</a>
</p>
</resolution>
</issue>
