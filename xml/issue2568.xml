<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2568" status="WP">
<title>[fund.ts.v2] Specification of logical operator traits uses <tt>BaseCharacteristic</tt>, which is defined only for 
<tt>UnaryTypeTraits</tt> and <tt>BinaryTypeTraits</tt></title>
<section><sref ref="[meta.logical]"/></section>
<submitter>Tim Song</submitter>
<date>10 Dec 2015</date>
<priority>2</priority>

<discussion>
<p><b>Addresses: fund.ts.v2</b></p>
<p>
The specification of <tt>conjunction</tt> and <tt>disjunction</tt> uses the term <tt>BaseCharacteristic</tt>, which 
is problematic in several ways:
</p>
<ul>
<li><p>That term is defined in <sref ref="[meta.rqmts]"/>, but only for <tt>UnaryTypeTraits</tt> and <tt>BinaryTypeTraits</tt>. 
<tt>conjunction</tt> and <tt>disjunction</tt> seem to be neither.</p></li>
<li><p><sref ref="[meta.rqmts]"/> also requires the <tt>BaseCharacteristic</tt> for both <tt>UnaryTypeTraits</tt> and 
<tt>BinaryTypeTraits</tt> to be a specialization of <tt>integral_constant</tt>, which is inconsistent with the current design of 
<tt>conjunction</tt> and <tt>disjunction</tt>.</p></li>
<li><p>The requirement in <sref ref="[meta.rqmts]"/> that "member names of the <tt>BaseCharacteristic</tt> shall not be hidden 
and shall be unambiguously available" seems impossible to meet in every case, since the arbitrary base class from which a 
specialization of <tt>conjunction</tt> or <tt>disjunction</tt> derives may contain members called <tt>conjunction</tt> or 
<tt>disjunction</tt> that will necessarily be hidden.</p></li>
</ul>

<note>2016-08 Chicago</note>
<p>
Ville provided wording for both <iref ref="2567"/> and <iref ref="2568"/>.
</p>

<note>2016-08-07 Daniel provides wording borrowed from <iref ref="2567"/></note>

<note>2016-11-08, Issaquah</note>
<p>Adopted during NB comment resolution</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4600">N4600</a>.</p>

<ol>
<li><p>In <sref ref="[meta.logical]" /> p3, edit as follows:</p>

<blockquote>
<pre>
template&lt;class... B&gt; struct conjunction : <i>see below</i> { };
</pre>
<blockquote>
<p>
-2- The class template <code>conjunction</code> forms the logical conjunction of its template type arguments. 
Every template type argument shall be usable as a base class and shall have a static data member <code>value</code> 
which is convertible to <code>bool</code>, is not hidden, and is unambiguously available in the type.
<p/>
-3- The <del>BaseCharacteristic of a</del> specialization <tt>conjunction&lt;B1, &hellip;, BN&gt;</tt>
<ins>has a public and unambiguous base that is either</ins> 
</p>
<ol style="list-style-type:none">
<li>&mdash; <ins>the first type <tt>B<i>i</i></tt> in the list <tt>true_type, B1, ..., BN</tt> for
which <tt>bool(B<i>i</i>::value)</tt> is <tt>false</tt>, or</ins></li>
<li>&mdash; <ins>if there is no such <tt>B<i>i</i></tt>, the last type in the list.</ins></li>
</ol>
<p>
<del>is the first type <code>B</code> in the list <code>true_type, B1, &hellip;, BN</code> for which 
<code>B::value == false</code>, or if <code>every B::value != false</code> the BaseCharacteristic is the last type 
in the list.</del> [<i>Note:</i> This means a specialization of conjunction does not necessarily <del>have a 
BaseCharacteristic of</del><ins>inherit from</ins> either <code>true_type</code> or <code>false_type</code>. 
&mdash; <i>end note</i>]
<p/>
<ins>-?- The member names of the base class, other than <tt>conjunction</tt> and <tt>operator=</tt>,
shall not be hidden and shall be unambiguously available in <tt>conjunction</tt>.</ins>
</p>
</blockquote>
</blockquote>
</li>

<li><p>In <sref ref="[meta.logical]" /> p6, edit as follows:</p>

<blockquote>
<pre>
template&lt;class... B&gt; struct disjunction : <i>see below</i> { };
</pre>
<blockquote>
<p>
-5- The class template <code>disjunction</code> forms the logical disjunction of its template type arguments. 
Every template type argument shall be usable as a base class and shall have a static data member <code>value</code> 
which is convertible to <code>bool</code>, is not hidden, and is unambiguously available in the type.
<p/>
-6- The <del>BaseCharacteristic of a</del> specialization <tt>disjunction&lt;B1, &hellip;, BN&gt;</tt>
<ins>has a public and unambiguous base that is either</ins> 
</p>
<ol style="list-style-type:none">
<li>&mdash; <ins>the first type <tt>B<i>i</i></tt> in the list <tt>false_type, B1, ..., BN</tt> for
which <tt>bool(B<i>i</i>::value)</tt> is <tt>true</tt>, or,</ins></li>
<li>&mdash; <ins>if there is no such <tt>B<i>i</i></tt>, the last type in the list.</ins></li>
</ol>
<p>
<del>is the first type <code>B</code> in the list <code>false_type, B1, &hellip;, BN</code> for which 
<code>B::value != false</code>, or if <code>every B::value == false</code> the BaseCharacteristic is the last type 
in the list.</del> [<i>Note:</i> This means a specialization of disjunction does not necessarily <del>have a 
BaseCharacteristic of</del><ins>inherit from</ins> either <code>true_type</code> or <code>false_type</code>. 
&mdash; <i>end note</i>]
<p/>
<ins>-?- The member names of the base class, other than <tt>disjunction</tt> and <tt>operator=</tt>,
shall not be hidden and shall be unambiguously available in <tt>disjunction</tt>.</ins>
</p>
</blockquote>
</blockquote>
</li>

<li><p>In <sref ref="[meta.logical]" /> p8, edit as follows:</p>

<blockquote>
<pre>
template&lt;class B&gt; struct negation : <del>integral_constant&lt;bool, !B::value&gt;</del><ins><i>see below</i></ins> { };
</pre>
<blockquote>
<p>
-8- The class template <code>negation</code> forms the logical negation of its template type argument. The type 
<code>negation&lt;B&gt;</code> is a UnaryTypeTrait with a BaseCharacteristic of <code>integral_constant&lt;bool, 
!<ins>bool(</ins>B::value<ins>)</ins>&gt;</code>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
