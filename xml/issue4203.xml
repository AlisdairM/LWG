<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4203" status="WP">
<title>Constraints on <i>`get-state`</i> functions are incorrect</title>
<section><sref ref="[exec.schedule.from]"/></section>
<submitter>Eric Niebler</submitter>
<date>03 Feb 2025</date>
<priority>1</priority>

<discussion>
<p>
Imported from:
<a href="https://github.com/cplusplus/sender-receiver/issues/313">cplusplus/sender-receiver #313</a>
and
<a href="https://github.com/cplusplus/sender-receiver/issues/314">cplusplus/sender-receiver #314</a>.
</p>
<p>
<sref ref="[exec.schedule.from]"/> p6 reads:

<blockquote>
The member <code><i>impls-for</i>&lt;schedule_from_t&gt;::get-state</code>
is initialized with a callable object equivalent to the following lambda:
<pre><code>  []&lt;class Sndr, class Rcvr&gt;(Sndr&amp;&amp; sndr, Rcvr&amp; rcvr) noexcept(<i>see below</i>)
     requires sender_in&lt;<i>child-type</i>&lt;Sndr&gt;, env_of_t&lt;Rcvr&gt;&gt; {
</code></pre>
</blockquote>

The constraint should account for the fact that the child sender will
be connected with <code><i>FWD-ENV</i>(get_env(rcvr))</code>.
</p>

<note>
The resolution touches some of the same text as LWG <iref ref="4198"/>,
but without conflicting.
</note>

<p>
Imported from:
<a href="https://github.com/cplusplus/sender-receiver/issues/315">cplusplus/sender-receiver #315</a>.
</p>
<p>
<sref ref="[exec.when.all]"/> p6 reads:

<blockquote>
The member <code>impls-for&lt;when_all_t&gt;::<i>get-env</i></code>
is initialized with a callable object equivalent to the following lambda
expression:
<pre><code>  []&lt;class State, class Rcvr&gt;(auto&amp;&amp;, State&amp; state, const Receiver&amp; rcvr) noexcept {
    return <i>see below</i>;
  }
</code></pre>
Returns an object `e` such that
<ol style="list-style-type:none">
<li>(6.1) &mdash; `decltype(e)` models <i>`queryable`</i>, and</li>
<li>(6.2) &mdash; `e.query(get_stop_token)` is expression-equivalent to
<code>state.<i>stop-src</i>.get_token()</code>, and</li>
<li>(6.3) &mdash;
given a query object `q` with type other than <i>cv</i> `stop_token_t`,
`e.query(q)` is expression-equivalent to `get_env(rcvr).query(q)`.
</li>
</ol>
</blockquote>

The problem is in (6.3). It should be forwarding on <i>`forwarding-query`</i>'s
to `get_env(rcvr)` but is is instead forwarding all queries.
</p>

<p>
Imported from:
<a href="https://github.com/cplusplus/sender-receiver/issues/316">cplusplus/sender-receiver #316</a>.
</p>
<p>
The child senders should only see the parent's queries if they are forwarding queries.
</p>

<p>
Imported from:
<a href="https://github.com/cplusplus/sender-receiver/issues/311">cplusplus/sender-receiver #311</a>.
</p>

<p>
<sref ref="[exec.stopped.opt]"/>/para 3 reads:

<blockquote>
Let `sndr` and `env` be subexpressions such that `Sndr` is `decltype((sndr))`
and `Env` is `decltype((env))`.
If <code><i>sender-for</i>&lt;Sndr, stopped_as_optional_t&gt;</code> is `false`,
or if the type <code><i>single-sender-value-type</i>&lt;Sndr, Env&gt;</code>
is ill-formed or `void`,
then the expression `stopped_as_optional.transform_sender(sndr, env)`
is ill-formed; otherwise, it is equivalent to:
</blockquote>
the test for <code>single-sender-value-type&lt;Sndr, Env&gt;</code> is incorrect.
It should be testing its child for single-sender-ness.
</p>
<p>
In addition, it should be applying <i>`FWD-ENV-T`</i> to `Env`
so that only forwarding queries are forwarded.
</p>


<note>2025-02-07; Reflector poll</note>
<p>
Set priority to 1 after reflector poll.
</p>

<note>Hagenberg 2025-02-11; move to Ready</note>

<note>Sofia 2025-06-21; Status changed: Voting &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N5001"/>.
</p>

<ol>
<li>
Change <sref ref="[exec.snd.expos]"/> as indicated:

<blockquote>
-2-
For a queryable object `env`,
<code><i>FWD-ENV</i>(env)</code> is an expression whose
type satisfies <i>`queryable`</i> such that for a query object `q`
and a pack of subexpressions `as`,
the expression <code><i>FWD-ENV</i>(env).query(q, as...)</code>
is ill-formed if `forwarding_query(q)` is `false`;
otherwise, it is expression-equivalent to `env.query(q, as...)`.
<ins>
The type <code><i>FWD-ENV-T</i>(Env)</code> is
<code>decltype(<i>FWD-ENV</i>(declval&lt;Env&gt;()))</code>.
</ins>
</blockquote>
</li>

<li>
Change <sref ref="[exec.schedule.from]"/> as indicated:

<blockquote>
-6-
The member
<code><i>impls-for</i>&lt;schedule_from_t&gt;::<i>get-state</i></code>
is initialized with a callable object equivalent to the following lambda:
<pre><code>  []&lt;class Sndr, class Rcvr&gt;(Sndr&amp;&amp; sndr, Rcvr&amp; rcvr) noexcept(<i>see below</i>)
   requires sender_in&lt;child-type&lt;Sndr&gt;, <ins><i>FWD-ENV-T</i>(</ins>env_of_t&lt;Rcvr&gt;<ins>)</ins>&gt; {
</code></pre>
<p>&hellip;</p>
<p>
-8-
Let `Sigs` be a pack of the arguments to the `completion_signatures`
specialization named by
<code>completion_signatures_of_t&lt;child-type&lt;Sndr&gt;,
  <ins><i>FWD-ENV-T</i>(</ins>env_of_t&lt;Rcvr&gt;<ins>)</ins>&gt;</code>.
Let <code><i>as-tuple</i></code>
be an alias template that transforms a completion signature
<code>Tag(Args...)</code> into the tuple specialization
<code><i>decayed-tuple</i>&lt;Tag, Args...&gt;</code>.
Then <code>variant_t</code> denotes the type
<code>variant&lt;monostate, as-tuple&lt;Sigs&gt;...&gt;</code>,
except with duplicate types removed.
</p>
</blockquote>
</li>

<li>
Change <sref ref="[exec.let]"/> as indicated:

<blockquote>
<p>
-6-
Let <i>`receiver2`</i> denote the following exposition-only class template:
<pre><code>  namespace std::execution {
    &hellip;
  }
</code></pre>
Invocation of the function <code><i>receiver2</i>::get_env</code>
returns an object `e` such that
<ol style="list-style-type:none">
<li>(6.1) &mdash;
`decltype(e)` models <i>`queryable`</i> and
</li>
<li>(6.2) &mdash;
given a query object `q`, the expression `e.query(q)` is expression-equivalent
to
<code><i>env</i>.query(q)</code>
if that expression is valid<del>,</del><ins>;</ins>
otherwise,
<ins>if the type of `q` satisfies <i>`forwarding-query`</i>,</ins>
`e.query(q)` is expression-equivalent to
<code>get_env(<i>rcvr</i>).query(q)</code>
<ins>; otherwise, `e.query(q)` is ill-formed</ins>.
</li>
</ol>
</p>
<p>
-7-
<code><i>impls-for</i>&lt;<i>decayed-typeof</i>&lt;<i>let-cpo</i>&gt;&gt;::<i>get-state</i></code>
is initialized with a callable object [&hellip;]
</p>
<p>
-8-
Let `Sigs` be a pack of the arguments to the `completion_signatures`
specialization named by
<code>completion_signatures_of_t&lt;<i>child-type</i>&lt;Sndr&gt;,
<ins><i>FWD-ENV-T</i>(</ins>env_of_t&lt;Rcvr&gt;<ins>)</ins>&gt;</code>.
Let `LetSigs` be a pack of those types in `Sigs` with a return type of
<code><i>decayed-typeof</i>&lt;<i>set-cpo</i>&gt;</code>.
Let `as-tuple` be an alias template such that
<code><i>as-tuple</i>&lt;Tag(Args...)&gt;</code>
denotes the type <code><i>decayed-tuple</i>&lt;Args...&gt;</code>.
Then `args_variant_t` denotes the type
<code>variant&lt;monostate, <i>as-tuple</i>&lt;LetSigs&gt;...&gt;</code>
except with duplicate types removed.
</p>
</blockquote>
</li>

<li>
Change <sref ref="[exec.when.all]"/> as indicated:

<blockquote>
<p>
-6-
The member <code>impls-for&lt;when_all_t&gt;::<i>get-env</i></code>
is initialized with a callable object equivalent to the following lambda
expression:
<pre><code>  []&lt;class State, class Rcvr&gt;(auto&amp;&amp;, State&amp; state, const Receiver&amp; rcvr) noexcept {
    return <i>see below</i>;
  }
</code></pre>
Returns an object `e` such that
<ol style="list-style-type:none">
<li>(6.1) &mdash; `decltype(e)` models <i>`queryable`</i>, and</li>
<li>(6.2) &mdash; `e.query(get_stop_token)` is expression-equivalent to
<code>state.<i>stop-src</i>.get_token()</code>, and</li>
<li>(6.3) &mdash;
given a query object `q` with type other than <i>cv</i> `stop_token_t`
<ins>and whose type satisfies <i>`forwarding-query`</i></ins>,
`e.query(q)` is expression-equivalent to `get_env(rcvr).query(q)`.
</li>
</ol>
</p>
<p>
-7-
The member <code><i>impls-for</i>&lt;when_all_t&gt;::<i>get-state</i></code>
is initialized with a callable object equivalent to the following
lambda expression:
<pre><code>  []&lt;class Sndr, class Rcvr&gt;(Sndr&amp;&amp; sndr, Rcvr&amp; rcvr) noexcept(e) -&gt; decltype(e) {
    return <i>e</i>;
  }
</code></pre>
where <i>e</i> is the expression
<pre><code>  std::forward&lt;Sndr&gt;(sndr).apply(<i>make-state</i>&lt;Rcvr&gt;())
</code></pre>
and <i>`make-state`</i> is the following exposition-only class template:
<pre><code>  template&lt;class Sndr, class Env&gt;
  concept max-1-sender-in = sender_in&lt;Sndr, Env&gt; &amp;&amp; <i>// exposition only</i>
    (tuple_size_v&lt;value_types_of_t&lt;Sndr, Env, tuple, tuple&gt;&gt; &lt;= 1);

  enum class <i>disposition</i> { <i>started</i>, <i>error</i>, <i>stopped</i> }; <i>// exposition only</i>

  template&lt;class Rcvr&gt;
  struct make-state {
   template&lt;max-1-sender-in&lt;<ins><i>FWD-ENV-T</i>(</ins>env_of_t&lt;Rcvr&gt;<ins>)</ins>&gt;... Sndrs&gt;
</code></pre>
&hellip;
</p>
<p>
-8- Let <i>`copy_fail`</i> be `exception_ptr` if [&hellip;]
</p>
<p>
-9-
The alias `values_tuple` denotes the type
<pre><code>  tuple&lt;value_types_of_t&lt;Sndrs, <ins><i>FWD-ENV-T</i>(</ins>env_of_t&lt;Rcvr&gt;<ins>)</ins>, <i>decayed-tuple</i>, optional&gt;...&gt;
</code></pre>
if that type is well-formed; otherwise, <code>tuple&lt;&gt;</code>.
</p>
</blockquote>
</li>

<li>
Change <sref ref="[exec.into.variant]"/> as indicated:

<blockquote>
-5-
The member <code>impls-for&lt;into_variant_t&gt;::<i>get-state</i></code>
is initialized with a callable object equivalent to the following lambda:
<pre><code>  []&lt;class Sndr, class Rcvr&gt;(Sndr&amp;&amp; sndr, Rcvr&amp; rcvr) noexcept
    -&gt; type_identity&lt;value_types_of_t&lt;<i>child-type</i>&lt;Sndr&gt;, <ins><i>FWD-ENV-T</i>(</ins>env_of_t&lt;Rcvr&gt;<ins>)</ins>&gt;&gt; {
    return {};
  }
</code></pre>
</blockquote>
</li>

<li>
Change <sref ref="[exec.stopped.opt]"/> as indicated:

<blockquote>
-3-
Let `sndr` and `env` be subexpressions such that `Sndr` is `decltype((sndr))`
and `Env` is `decltype((env))`.
If <code><i>sender-for</i>&lt;Sndr, stopped_as_optional_t&gt;</code> is `false`,
or if the type <code><i>single-sender-value-type</i>&lt;<ins><i>child-type</i>&lt;</ins>Sndr<ins>&gt;</ins>, <ins><i>FWD-ENV-T</i>(</ins>Env<ins>)</ins>&gt;</code>
is ill-formed or `void`,
then the expression `stopped_as_optional.transform_sender(sndr, env)`
is ill-formed; otherwise, it is equivalent to:
<pre><code>  auto&amp;&amp; [_, _, child] = sndr;
  using V = <i>single-sender-value-type</i>&lt;<ins><i>child-type</i>&lt;</ins>Sndr<ins>&gt;</ins>, <ins><i>FWD-ENV-T</i>(</ins>Env<ins>)</ins>&gt;;
</code></pre>
&hellip;
</blockquote>
</li>

</ol>

</resolution>

</issue>
