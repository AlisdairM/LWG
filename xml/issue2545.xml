<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2545" status="New">
<title>Simplify wording for <tt>bind</tt> without explicitly specified return type</title>
<section><sref ref="[func.bind.bind]"/></section>
<submitter>Tomasz Kami&nacute;ski</submitter>
<date>5 Oct 2015</date>
<priority>3</priority>

<discussion>
<p>
The specification of the <tt>bind</tt> overload without return type as of <sref ref="[func.bind.bind]"/> p3, 
uses the following expression <tt><i>INVOKE</i>(fd, std::forward&lt;V1&gt;(v1), std::forward&lt;V2&gt;(v2), ..., 
std::forward&lt;VN&gt;(vN), result_of_t&lt;FD <i>cv</i> &amp; (V1, V2, ..., VN)&gt;)</tt> to describe effects of 
invocation of returned function.
<p/>
According to the definition from <sref ref="[meta.trans.other]"/> <tt>result_of_t&lt;FD cv &amp; (V1, V2, ..., VN)></tt> 
is equivalent to 
<tt>decltype(INVOKE(declval&lt;FD <i>cv</i> &amp;&gt;(), declval&lt;V1&gt;(), declval&lt;V2&gt;(), ..., declval&lt;VN&gt;()))</tt>. 
When combined with the definition of <tt><i>INVOKE</i></tt> from <sref ref="[func.require]"/> p2, the expression 
<tt><i>INVOKE</i>(fd, std::forward&lt;V1&gt;(v1), std::forward&lt;V2&gt;(v2), ..., std::forward&lt;VN&gt;(vN), 
result_of_t&lt;FD <i>cv</i> &amp; (V1, V2, ...., VN)&gt;)</tt> is equivalent to <tt><i>INVOKE</i>(fd, 
std::forward&lt;V1&gt;(v1), std::forward&lt;V2&gt;(v2), ..., std::forward&lt;VN&gt;(vN))</tt> implicitly converted 
to <tt>decltype(<i>INVOKE</i>(declval&lt;FD <i>cv</i> &amp;&gt;(), declval&lt;V1&gt;(), declval&lt;V2&gt;(), ..., 
declval&lt;VN&gt;()))</tt> (itself).
<p/>
It is also worth to notice that specifying the result type (<tt>R</tt>) in <tt><i>INVOKE</i>(f, args..., R)</tt> does 
not in any way affect the selected call. As a consequence the use of wording of the form
<tt><i>INVOKE</i>(fd, std::forward&lt;V1&gt;(v1), std::forward&lt;V2&gt;(v2), ..., std::forward&lt;VN&gt;(vN), 
result_of_t&lt;FD <i>cv</i> &amp; (V1, V2, ..., VN)&gt;)</tt> does not and cannot lead to call of different overload 
than one invoked by <tt><i>INVOKE</i>(fd, std::forward&lt;V1&gt;(v1), std::forward&lt;V2&gt;(v2), ..., 
std::forward&lt;VN&gt;(vN))</tt>.
<p/>
In summary the form <tt><i>INVOKE</i>(fd, std::forward&lt;V1&gt;(v1), std::forward&lt;V2&gt;(v2), ..., 
std::forward&lt;VN&gt;(vN), result_of_t&lt;FD <i>cv</i> &amp; (V1, V2, ..., VN)&gt;)</tt> is a convoluted way of expressing 
<tt><i>INVOKE</i>(fd, std::forward&lt;V1&gt;(v1), std::forward&lt;V2&gt;(v2), ..., std::forward&lt;VN&gt;(vN))</tt>, 
that only confuses reader.
</p>

<note>2015-10, Kona Saturday afternoon</note>
<p>STL: I most recently reimplemented std::bind from scratch, and I think this issue is correct and the solution is good.</p>
<p>Move to Tentatively ready.</p>
</discussion>

<resolution>
<p>This wording is relative to N4527.</p>

<ol>
<li>
<p>Change <sref ref="[func.bind.bind]"/> p3 as indicated:</p>
<blockquote>
<pre>
template&lt;class F, class... BoundArgs&gt;
<i>unspecified</i> bind(F&amp;&amp; f, BoundArgs&amp;&amp;... bound_args);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-3- <i>Returns</i>: A forwarding call wrapper <tt>g</tt> with a weak result type (20.9.2). The effect of 
<tt>g(u1, u2, ..., uM)</tt> shall be <tt><i>INVOKE</i>(fd, std::forward&lt;V1&gt;(v1), std::forward&lt;V2&gt;(v2), 
..., std::forward&lt;VN&gt;(vN)<del>, result_of_t&lt;FD <i>cv</i> &amp; (V1, V2, ..., VN)&gt;</del>)</tt>, where <del><tt><i>cv</i></tt>
represents the <i>cv</i>-qualifiers of <tt>g</tt> and</del> the values and types of the bound arguments <tt>v1, v2, ..., vN</tt> 
are determined as specified below. The copy constructor and move constructor of the forwarding call wrapper shall 
throw an exception if and only if the corresponding constructor of <tt>FD</tt> or of any of the types <tt>TiD</tt> 
throws an exception.
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
