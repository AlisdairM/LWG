<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2981" status="Voting">
<title>Remove redundant deduction guides from standard library</title>
<section>
<sref ref="[refwrap]"/><sref ref="[thread.lock.guard]"/>
<sref ref="[thread.lock.scoped]"/><sref ref="[thread.lock.unique]"/><sref ref="[thread.lock.shared]"/>
</section>
<submitter>Mike Spertus</submitter>
<date>15 Jun 2017</date>
<priority>0</priority>

<discussion>
<p>
There are several deduction guides added to the standard library by <a href="https://wg21.link/p0433r2">P0433R2</a> 
that have no effect probably because LWG had not considered late changes to core wording that automatically adds 
a "copy deduction candidate" (<sref ref="[over.match.class.deduct]"/>) that renders these explicit guides moot. 
</p>

<note>2017-07 Toronto Monday issue prioritization</note>
<p>Priority 0; move to Ready</p>
</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4659">N4659</a>.
</p>

<ol>
<li><p>Edit <sref ref="[refwrap]"/>, end of class template <tt>reference_wrapper</tt> synopsis, 
as indicated:</p>

<blockquote>
<pre>
<del>template&lt;class T&gt;
  reference_wrapper(reference_wrapper&lt;T&gt;) -&gt; reference_wrapper&lt;T&gt;;</del>
</pre>
</blockquote>
</li>

<li><p>Edit <sref ref="[thread.lock.guard]"/>, end of class template <tt>lock_guard</tt> synopsis, 
as indicated:</p>

<blockquote>
<pre>
<del>template&lt;class Mutex&gt; lock_guard(lock_guard&lt;Mutex&gt;) -&gt; lock_guard&lt;Mutex&gt;;</del>
</pre>
</blockquote>
</li>

<li><p>Edit <sref ref="[thread.lock.scoped]"/>, end of class template <tt>scoped_lock</tt> synopsis, 
as indicated:</p>

<blockquote>
<pre>
<del>template&lt;class... MutexTypes&gt;
  scoped_lock(scoped_lock&lt;MutexTypes...&gt;) -&gt; scoped_lock&lt;MutexTypes...&gt;;</del>
</pre>
</blockquote>
</li>

<li><p>Edit <sref ref="[thread.lock.unique]"/>, end of class template <tt>unique_lock</tt> synopsis, 
as indicated:</p>

<blockquote>
<pre>
<del>template&lt;class Mutex&gt; unique_lock(unique_lock&lt;Mutex&gt;) -&gt; unique_lock&lt;Mutex&gt;;</del>
</pre>
</blockquote>
</li>

<li><p>Edit <sref ref="[thread.lock.shared]"/>, end of class template <tt>shared_lock</tt> synopsis, 
as indicated:</p>

<blockquote>
<pre>
<del>template&lt;class Mutex&gt; shared_lock(shared_lock&lt;Mutex&gt;) -&gt; shared_lock&lt;Mutex&gt;;</del>
</pre>
</blockquote>
</li>
</ol>

</resolution>
</issue>
