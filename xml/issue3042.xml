<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3042" status="Tentatively Ready">
<title><tt>is_literal_type_v</tt> should be inline</title>
<section><sref ref="[depr.meta.types]"/></section>
<submitter>Tim Song</submitter>
<date>6 Dec 2017</date>
<priority>99</priority>

<discussion>
<p>
<a href="https://wg21.link/P0607R0">P0607R0</a> forgot to look at <sref ref="[depr.meta.types]"/> and make <tt>is_literal_type_v</tt> inline.
</p>

<note>
2018-01-08 Moved to Tentatively Ready after 8 positive votes on c++std-lib.
</note>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4713">N4713</a>.</p>

<ol>
<li><p>Change <sref ref="[depr.meta.types]"/>p1 as indicated:</p>
<p>
-1- The header <tt>&lt;type_traits&gt;</tt> has the following addition:
</p>
<blockquote>
<pre>
namespace std {
  template&lt;class T&gt; struct is_literal_type;
  template&lt;class T&gt; <ins>inline</ins> constexpr bool is_literal_type_v = is_literal_type&lt;T&gt;::value;

  template&lt;class&gt; struct result_of;    // not defined
  template&lt;class Fn, class... ArgTypes&gt; struct result_of&lt;Fn(ArgTypes...)&gt;;
  template&lt;class T&gt; using result_of_t = typename result_of&lt;T&gt;::type;

  template&lt;class T&gt; struct is_pod;
  template&lt;class T&gt; inline constexpr bool is_pod_v = is_pod&lt;T&gt;::value;
}
</pre>
</blockquote>
</li>

</ol>
</resolution>

</issue>
