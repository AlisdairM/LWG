<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3340" status="Immediate">
<title>Formatting functions should throw on argument/format string mismatch in &sect;[format.functions]</title>
<section><sref ref="[format.functions]"/></section>
<submitter>Great Britain</submitter>
<date>17 Nov 2019</date>
<priority>99</priority>

<discussion>
<p><b>Addresses <a href="https://github.com/cplusplus/nbballot/issues/226">GB 229</a></b></p>

<p>
Formatting functions don't allow throwing on incorrect arguments. 
<tt>std::format</tt> is only allowed to throw if <tt>fmt</tt> is not a format string, but the 
intention is it also throws for errors during formatting, e.g. there are fewer arguments than 
required by the format string.
</p>
<p>
Proposed change:
</p>
<p>
Allow exceptions even when the format string is valid. Possibly state the <i>Effects:</i> more
precisely.
</p>
<p>
<b>Victor Zverovich:</b>
<p/>
LEWG approved resolution of this NB comment as an LWG issue.
</p>

<strong>Previous resolution [SUPERSEDED]:</strong>
<blockquote class="note">
<p>This wording is relative to <a href="https://wg21.link/n4835">N4835</a>.</p>

<blockquote class="note">
<p>
[<i>Drafting Note:</i> Depending on whether LWG <iref ref="3336"/>'s wording has been accepted when 
this issue's wording has been accepted, two mutually exclusive options are prepared, depicted below 
by <b>Option A</b> and <b>Option B</b>, respectively.]
</p>
</blockquote>

<p><b>Option A</b> (LWG <iref ref="3336"/> has been accepted)</p>

<ol>
<li><p>Change <sref ref="[format.string.general]"/> as follows:</p>

<blockquote>
<p>
-1- A <i>format string</i> <ins>for arguments <tt>args</tt></ins> is a (possibly empty) sequence of 
<i>replacement fields</i>, <i>escape sequences</i>, and characters other than <tt>{</tt> and <tt>}</tt>. 
[&hellip;]
<p/>
-2- The <i>arg-id</i> field specifies the index of the argument in <tt>args</tt> whose value is to be 
formatted and inserted into the output instead of the replacement field. <ins>If there is no argument 
with the index <i>arg-id</i> in <tt>args</tt>, the string is not a format string.</ins> The optional 
<i>format-specifier</i> field explicitly specifies a format for the replacement value.
<p/>
[&hellip;]
<p/>
-5- The <i>format-spec</i> field contains <i>format specifications</i> that define how the value 
should be presented. Each type can define its own interpretation of the <i>format-spec</i> field. 
<ins>If <i>format-spec</i> doesn't conform to the format specifications for the argument in <tt>args</tt> 
referred to by <i>arg-id</i>, the string is not a format string.</ins> [&hellip;]
</p>
</blockquote>
</li>

<li><p>Before <sref ref="[format.functions]"/> insert a new sub-clause as indicated:</p>

<blockquote>
<p>
<ins><b>20.20.? Error reporting [format.err.report]</b></ins>
<p/>
<ins>-?- Formatting functions throw exceptions to report formatting and other errors. They throw 
<tt>format_error</tt> if an argument <tt>fmt</tt> is passed that is not a format string for arguments 
<tt>args</tt> and propagate exceptions thrown by <tt>formatter</tt> specializations and iterator operations. 
Failure to allocate storage is reported by throwing an exception as described in 
<sref ref="[res.on.exception.handling]"/>.</ins>
</p>
</blockquote>
</li>

<li><p>Modify <sref ref="[format.functions]"/> as indicated:</p>

<blockquote>
<pre>
string vformat(string_view fmt, format_args args);
wstring vformat(wstring_view fmt, wformat_args args);
string vformat(const locale&amp; loc, string_view fmt, format_args args);
wstring vformat(const locale&amp; loc, wstring_view fmt, wformat_args args);
</pre>
<blockquote>
<p>
-6- [&hellip;]
<p/>
-7- <i>Throws:</i> <del><tt>format_error</tt> if <tt>fmt</tt> is not a format string</del><ins>As specified in <sref ref="[format.err.report]"/></ins>.
</p>
</blockquote>
[&hellip;]
<pre>
template&lt;class Out&gt;
  Out vformat_to(Out out, string_view fmt, format_args_t&lt;Out, char&gt; args);
template&lt;class Out&gt;
  Out vformat_to(Out out, wstring_view fmt, format_args_t&lt;Out, wchar_t&gt; args);
template&lt;class Out&gt;
  Out vformat_to(Out out, const locale&amp; loc, string_view fmt,
                 format_args_t&lt;Out, char&gt; args);
template&lt;class Out&gt;
  Out vformat_to(Out out, const locale&amp; loc, wstring_view fmt,
                 format_args_t&lt;Out, wchar_t&gt; args);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-15- <i>Throws:</i> <del><tt>format_error</tt> if <tt>fmt</tt> is not a format string</del><ins>As specified in <sref ref="[format.err.report]"/></ins>.
</p>
</blockquote>
[&hellip;]
<pre>
template&lt;class Out, class... Args&gt;
  format_to_n_result&lt;Out&gt; format_to_n(Out out, iter_difference_t&lt;Out&gt; n,
                                      string_view fmt, const Args&amp;... args);
template&lt;class Out, class... Args&gt;
  format_to_n_result&lt;Out&gt; format_to_n(Out out, iter_difference_t&lt;Out&gt; n,
                                      wstring_view fmt, const Args&amp;... args);
template&lt;class Out, class... Args&gt;
  format_to_n_result&lt;Out&gt; format_to_n(Out out, iter_difference_t&lt;Out&gt; n,
                                      const locale&amp; loc, string_view fmt,
                                      const Args&amp;... args);
template&lt;class Out, class... Args&gt;
  format_to_n_result&lt;Out&gt; format_to_n(Out out, iter_difference_t&lt;Out&gt; n,
                                      const locale&amp; loc, wstring_view fmt,
                                      const Args&amp;... args);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-21- <i>Throws:</i> <del><tt>format_error</tt> if <tt>fmt</tt> is not a format string</del><ins>As specified in <sref ref="[format.err.report]"/></ins>.
</p>
</blockquote>
[&hellip;]
<pre>
template&lt;class... Args&gt;
  size_t formatted_size(string_view fmt, const Args&amp;... args);
template&lt;class... Args&gt;
  size_t formatted_size(wstring_view fmt, const Args&amp;... args);
template&lt;class... Args&gt;
  size_t formatted_size(const locale&amp; loc, string_view fmt, const Args&amp;... args);
template&lt;class... Args&gt;
  size_t formatted_size(const locale&amp; loc, wstring_view fmt, const Args&amp;... args);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-25- <i>Throws:</i> <del><tt>format_error</tt> if <tt>fmt</tt> is not a format string</del><ins>As specified in <sref ref="[format.err.report]"/></ins>.
</p>
</blockquote>
</blockquote>
</li>
</ol>

<p><b>Option B</b> (LWG <iref ref="3336"/> has <b>not</b> been accepted)</p>

<ol>
<li><p>Change <sref ref="[format.string.general]"/> as follows:</p>

<blockquote>
<p>
-1- A <i>format string</i> <ins>for arguments <tt>args</tt></ins> is a (possibly empty) sequence of 
<i>replacement fields</i>, <i>escape sequences</i>, and characters other than <tt>{</tt> and <tt>}</tt>. 
[&hellip;]
<p/>
-2- The <i>arg-id</i> field specifies the index of the argument in <tt>args</tt> whose value is to be 
formatted and inserted into the output instead of the replacement field. <ins>If there is no argument 
with the index <i>arg-id</i> in <tt>args</tt>, the string is not a format string.</ins> The optional 
<i>format-specifier</i> field explicitly specifies a format for the replacement value.
<p/>
[&hellip;]
<p/>
-5- The <i>format-spec</i> field contains <i>format specifications</i> that define how the value 
should be presented. Each type can define its own interpretation of the <i>format-spec</i> field. 
<ins>If <i>format-spec</i> doesn't conform to the format specifications for the argument in <tt>args</tt> 
referred to by <i>arg-id</i>, the string is not a format string.</ins> [&hellip;]
</p>
</blockquote>
</li>

<li><p>Modify <sref ref="[format.functions]"/> as indicated:</p>

<blockquote>
<pre>
string vformat(string_view fmt, format_args args);
wstring vformat(wstring_view fmt, wformat_args args);
string vformat(const locale&amp; loc, string_view fmt, format_args args);
wstring vformat(const locale&amp; loc, wstring_view fmt, wformat_args args);
</pre>
<blockquote>
<p>
-6- [&hellip;]
<p/>
-7- <i>Throws:</i> <tt>format_error</tt> if <tt>fmt</tt> is not a format string <ins>for <tt>args</tt></ins>.
</p>
</blockquote>
[&hellip;]
<pre>
template&lt;class Out&gt;
  Out vformat_to(Out out, string_view fmt, format_args_t&lt;Out, char&gt; args);
template&lt;class Out&gt;
  Out vformat_to(Out out, wstring_view fmt, format_args_t&lt;Out, wchar_t&gt; args);
template&lt;class Out&gt;
  Out vformat_to(Out out, const locale&amp; loc, string_view fmt,
                 format_args_t&lt;Out, char&gt; args);
template&lt;class Out&gt;
  Out vformat_to(Out out, const locale&amp; loc, wstring_view fmt,
                 format_args_t&lt;Out, wchar_t&gt; args);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-15- <i>Throws:</i> <tt>format_error</tt> if <tt>fmt</tt> is not a format string <ins>for <tt>args</tt></ins>.
</p>
</blockquote>
[&hellip;]
<pre>
template&lt;class Out, class... Args&gt;
  format_to_n_result&lt;Out&gt; format_to_n(Out out, iter_difference_t&lt;Out&gt; n,
                                      string_view fmt, const Args&amp;... args);
template&lt;class Out, class... Args&gt;
  format_to_n_result&lt;Out&gt; format_to_n(Out out, iter_difference_t&lt;Out&gt; n,
                                      wstring_view fmt, const Args&amp;... args);
template&lt;class Out, class... Args&gt;
  format_to_n_result&lt;Out&gt; format_to_n(Out out, iter_difference_t&lt;Out&gt; n,
                                      const locale&amp; loc, string_view fmt,
                                      const Args&amp;... args);
template&lt;class Out, class... Args&gt;
  format_to_n_result&lt;Out&gt; format_to_n(Out out, iter_difference_t&lt;Out&gt; n,
                                      const locale&amp; loc, wstring_view fmt,
                                      const Args&amp;... args);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-21- <i>Throws:</i> <tt>format_error</tt> if <tt>fmt</tt> is not a format string <ins>for <tt>args</tt></ins>.
</p>
</blockquote>
[&hellip;]
<pre>
template&lt;class... Args&gt;
  size_t formatted_size(string_view fmt, const Args&amp;... args);
template&lt;class... Args&gt;
  size_t formatted_size(wstring_view fmt, const Args&amp;... args);
template&lt;class... Args&gt;
  size_t formatted_size(const locale&amp; loc, string_view fmt, const Args&amp;... args);
template&lt;class... Args&gt;
  size_t formatted_size(const locale&amp; loc, wstring_view fmt, const Args&amp;... args);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-25- <i>Throws:</i> <tt>format_error</tt> if <tt>fmt</tt> is not a format string <ins>for <tt>args</tt></ins>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</blockquote>

<note>2020-02-12, Prague; LWG discussion</note>
<p>
Option A is the only one we look at to resolve LWG <iref ref="3336"/> as well. During the discussions some 
wording refinements have been suggested that are integrated below.
</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4849">N4849</a>.</p>

<ol>
<li><p>Change <sref ref="[format.string.general]"/> as follows:</p>

<blockquote>
<p>
-1- A <i>format string</i> <ins>for arguments <tt>args</tt></ins> is a (possibly empty) sequence of 
<i>replacement fields</i>, <i>escape sequences</i>, and characters other than <tt>{</tt> and <tt>}</tt>. 
[&hellip;]
<p/>
-2- The <i>arg-id</i> field specifies the index of the argument in <tt>args</tt> whose value is to be 
formatted and inserted into the output instead of the replacement field. <ins>If there is no argument 
with the index <i>arg-id</i> in <tt>args</tt>, the string is not a format string for <tt>args</tt>.</ins> The optional 
<i>format-specifier</i> field explicitly specifies a format for the replacement value.
<p/>
[&hellip;]
<p/>
-5- The <i>format-spec</i> field contains <i>format specifications</i> that define how the value 
should be presented. Each type can define its own interpretation of the <i>format-spec</i> field. 
<ins>If <i>format-spec</i> does not conform to the format specifications for the argument type referred to 
by <i>arg-id</i>, the string is not a format string for <tt>args</tt>.</ins> [&hellip;]
</p>
</blockquote>
</li>

<li><p>Before <sref ref="[format.functions]"/> insert a new sub-clause as indicated:</p>

<blockquote>
<p>
<ins><b>20.20.? Error reporting [format.err.report]</b></ins>
<p/>
<ins>-?- Formatting functions throw <tt>format_error</tt> if an argument <tt>fmt</tt> is passed 
that is not a format string for <tt>args</tt>. They propagate exceptions thrown by operations of
<tt>formatter</tt> specializations and iterators. Failure to allocate storage is 
reported by throwing an exception as described in <sref ref="[res.on.exception.handling]"/>.</ins>
</p>
</blockquote>
</li>

<li><p>Modify <sref ref="[format.functions]"/> as indicated:</p>

<blockquote>
<pre>
string vformat(string_view fmt, format_args args);
wstring vformat(wstring_view fmt, wformat_args args);
string vformat(const locale&amp; loc, string_view fmt, format_args args);
wstring vformat(const locale&amp; loc, wstring_view fmt, wformat_args args);
</pre>
<blockquote>
<p>
-6- [&hellip;]
<p/>
-7- <i>Throws:</i> <del><tt>format_error</tt> if <tt>fmt</tt> is not a format string</del><ins>As specified in <sref ref="[format.err.report]"/></ins>.
</p>
</blockquote>
[&hellip;]
<pre>
template&lt;class Out&gt;
  Out vformat_to(Out out, string_view fmt, format_args_t&lt;Out, char&gt; args);
template&lt;class Out&gt;
  Out vformat_to(Out out, wstring_view fmt, format_args_t&lt;Out, wchar_t&gt; args);
template&lt;class Out&gt;
  Out vformat_to(Out out, const locale&amp; loc, string_view fmt,
                 format_args_t&lt;Out, char&gt; args);
template&lt;class Out&gt;
  Out vformat_to(Out out, const locale&amp; loc, wstring_view fmt,
                 format_args_t&lt;Out, wchar_t&gt; args);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-15- <i>Throws:</i> <del><tt>format_error</tt> if <tt>fmt</tt> is not a format string</del><ins>As specified in <sref ref="[format.err.report]"/></ins>.
</p>
</blockquote>
[&hellip;]
<pre>
template&lt;class Out, class... Args&gt;
  format_to_n_result&lt;Out&gt; format_to_n(Out out, iter_difference_t&lt;Out&gt; n,
                                      string_view fmt, const Args&amp;... args);
template&lt;class Out, class... Args&gt;
  format_to_n_result&lt;Out&gt; format_to_n(Out out, iter_difference_t&lt;Out&gt; n,
                                      wstring_view fmt, const Args&amp;... args);
template&lt;class Out, class... Args&gt;
  format_to_n_result&lt;Out&gt; format_to_n(Out out, iter_difference_t&lt;Out&gt; n,
                                      const locale&amp; loc, string_view fmt,
                                      const Args&amp;... args);
template&lt;class Out, class... Args&gt;
  format_to_n_result&lt;Out&gt; format_to_n(Out out, iter_difference_t&lt;Out&gt; n,
                                      const locale&amp; loc, wstring_view fmt,
                                      const Args&amp;... args);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-21- <i>Throws:</i> <del><tt>format_error</tt> if <tt>fmt</tt> is not a format string</del><ins>As specified in <sref ref="[format.err.report]"/></ins>.
</p>
</blockquote>
[&hellip;]
<pre>
template&lt;class... Args&gt;
  size_t formatted_size(string_view fmt, const Args&amp;... args);
template&lt;class... Args&gt;
  size_t formatted_size(wstring_view fmt, const Args&amp;... args);
template&lt;class... Args&gt;
  size_t formatted_size(const locale&amp; loc, string_view fmt, const Args&amp;... args);
template&lt;class... Args&gt;
  size_t formatted_size(const locale&amp; loc, wstring_view fmt, const Args&amp;... args);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-25- <i>Throws:</i> <del><tt>format_error</tt> if <tt>fmt</tt> is not a format string</del><ins>As specified in <sref ref="[format.err.report]"/></ins>.
</p>
</blockquote>
</blockquote>
</li>
</ol>

</resolution>
</issue>
