<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3376" status="New">
<title>"integer-like class type" is too restrictive</title>
<section><sref ref="[iterator.concept.winc]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>16 Jan 2020</date>
<priority>99</priority>

<discussion>
<p>
<sref ref="[iterator.concept.winc]"/> says:
</p>
<blockquote><p>
A type <tt>I</tt> is an <i>integer-class type</i> if it is in a set of implementation-defined class types 
that behave as integer types do, as defined in below.
</p></blockquote>
<p>
and
</p>
<blockquote><p>
A type <tt>I</tt> is integer-like if it models <tt>integral&lt;I&gt;</tt> or if it is an integer-class type.
</p></blockquote>
<p>
Some implementations support built-in integer types that do not necessarily model <tt>std::integral</tt>, 
e.g. with libstdc++ whether <tt>std::is_integral_v&lt;__int128&gt;</tt> is <tt>true</tt> depends whether 
"strict" or "extensions" mode is in use. Because <tt>__int128</tt> is not a class type, it can't be used 
as an integer-like type in strict mode (which effectively means it can't be used at all, to avoid unwanted 
ABI differences between modes).
<p/>
The requirement should be relaxed to permit non-class types which are integer-like but not one of the 
standard integer types (nor extended integer types). If we do that, the name "integer-like class type" 
should probably change.
</p>
</discussion>

<resolution>
</resolution>

</issue>
