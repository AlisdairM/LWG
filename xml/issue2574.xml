<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2574" status="New">
<title>[fund.ts.v2] <tt>std::experimental::function::operator=(F&amp;&amp;)</tt> should be constrained</title>
<section><sref ref="[func.wrap.func.con]"/></section>
<submitter>Tim Song</submitter>
<date>5 Dec 2015</date>
<priority>99</priority>

<discussion>
<p><b>Addresses: fund.ts.v2</b></p>
<p>
LWG <iref ref="2132"/> constrained <tt>std::function</tt>'s constructor and assignment operator from callable objects for C++14. 
The constructors of <tt>std::experimental::function</tt> isn't separately specified in the fundamentals TS and so inherited the 
constraints from C++14, but the assignment operator is separately specified and presumably needs to be constrained.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4562.html">N4562</a>.
</p>

<ol>
<li><p>Insert a paragraph after <sref ref="[func.wrap.func.con]"/>/15 as indicated:</p>

<blockquote>
<pre>
template&lt;class F&gt; function&amp; operator=(F&amp;&amp; f);
</pre>
<blockquote>
<p>
-14- <i>Effects</i>: <tt>function(allocator_arg, <i>ALLOCATOR_OF</i>(*this), std::forward&lt;F&gt;(f)).swap(*this);</tt>
<p/>
-15- <i>Returns</i>: <tt>*this</tt>. 
<p/>
<ins>-?- <i>Remarks</i>: This assignment operator shall not participate in overload resolution unless 
<tt>declval&lt;decay_t&lt;F&gt;&amp;&gt;()</tt> is Callable (C++14 &sect;20.9.11.2) for argument types 
<tt>ArgTypes...</tt> and return type <tt>R</tt>.</ins>
</p>
</blockquote>
</blockquote>

</li>
</ol>
</resolution>

</issue>
