<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3359" status="WP">
<title><tt>&lt;chrono&gt;</tt> leap second support should allow for negative leap seconds</title>
<section><sref ref="[time.zone.leap]"/></section>
<submitter>Asher Dunn</submitter>
<date>16 Dec 2019</date>
<priority>3</priority>

<discussion>
<p>
<tt>class leap</tt> (which is expected to be renamed by <a href="https://wg21.link/p1981r0">P1981R0</a> to
<tt>leap_second</tt>) defined in <sref ref="[time.zone.leap]"/> should include support for both
positive leap seconds (<tt>23:59:60</tt> added to UTC at a specified time) and negative leap seconds
(<tt>23:59:59</tt> removed from UTC at a specified time). While only positive leap seconds have been
inserted to date, the definition of UTC allows for both.
<p/>
Update <sref ref="[time.zone.leap]"/> to specify the value of leap seconds in addition to
their insertion date, and update wording and examples in <sref ref="[time.clock]"/> and
<sref ref="[time.format]"/> that involve leap seconds to account for both types of leap second.
</p>

<note>2020-01 Priority set to 3 after review on the reflector.</note>

<strong>Previous resolution [SUPERSEDED]:</strong>
<blockquote class="note">
<p>This wording is relative to <a href="https://wg21.link/n4842">N4842</a>.</p>

<ol>
<li><p>Modify <sref ref="[time.clock.utc.members]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class Duration&gt;
  static sys_time&lt;common_type_t&lt;Duration, seconds&gt;&gt;
    to_sys(const utc_time&lt;Duration&gt;&amp; u);
</pre>
<blockquote>
<p>
-2- <i>Returns:</i> A <tt>sys_time t</tt>, such that <tt>from_sys(t) == u</tt> if such a mapping exists.
Otherwise <tt>u</tt> represents a <tt>time_point</tt> during a <ins>positive</ins> leap second
insertion<ins>, the conversion counts that leap second as not inserted,</ins> and the last
representable value of <tt>sys_time</tt> prior to the insertion of the leap second is returned.
</p>
</blockquote>
<pre>
template&lt;class Duration&gt;
  static utc_time&lt;common_type_t&lt;Duration, seconds&gt;&gt;
    from_sys(const sys_time&lt;Duration&gt;&amp; t);
</pre>
<blockquote>
<p>
-3- <i>Returns:</i> A <tt>utc_time u</tt>, such that <tt>u.time_since_epoch() - t.time_since_epoch()</tt>
is equal to the <del>number</del><ins>sum</ins> of leap seconds that were inserted between <tt>t</tt>
and 1970-01-01. If <tt>t</tt> is exactly the date of leap second insertion, then the conversion counts
that leap second as inserted.
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[time.clock.utc.nonmembers]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class Duration&gt;
  leap_second_info get_leap_second_info(const utc_time&lt;Duration&gt;&amp; ut);
</pre>
<blockquote>
<p>
-6- <i>Returns:</i> A <tt>leap_second_info</tt> where <tt>is_leap_second</tt> is <tt>true</tt> if
<tt>ut</tt> is during a <ins>positive</ins> leap second insertion, and otherwise <tt>false</tt>.
<tt>elapsed</tt> is the <del>number</del><ins>sum</ins> of leap seconds between 1970-01-01 and
<tt>ut</tt>. If <tt>is_leap_second</tt> is <tt>true</tt>, the leap second referred to by <tt>ut</tt>
is included in the count.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[time.clock.tai.overview]"/> as indicated:</p>

<blockquote>
<p>
-1- The clock <tt>tai_clock</tt> measures seconds since 1958-01-01 00:00:00 and is offset 10s ahead of
UTC at this date. That is, 1958-01-01 00:00:00 TAI is equivalent to 1957-12-31 23:59:50 UTC. Leap seconds
are not inserted into TAI. Therefore every time a leap second is inserted into UTC, UTC <del>falls another
second behind</del><ins>shifts another second with respect to</ins> TAI. For example by 2000-01-01 there
had been 22 <ins>positive and 0 negative</ins> leap seconds inserted so 2000-01-01 00:00:00 UTC is
equivalent to 2000-01-01 00:00:32 TAI (22s plus the initial 10s offset).
</p>
</blockquote>
</li>

<li><p>Modify <sref ref="[time.clock.gps.overview]"/> as indicated:</p>

<blockquote>
<p>
-1- The clock <tt>gps_clock</tt> measures seconds since the first Sunday of January, 1980 00:00:00 UTC.
Leap seconds are not inserted into GPS. Therefore every time a leap second is inserted into UTC, UTC
<del>falls another second behind</del><ins>shifts another second with respect to</ins> GPS. Aside from
the offset from <tt>1958y/January/1</tt> to <tt>1980y/January/Sunday[1]</tt>, GPS is behind TAI by 19s
due to the 10s offset between 1958 and 1970 and the additional 9 leap seconds inserted between 1970 and 1980.
</p>
</blockquote>
</li>

<li><p>Modify <sref ref="[time.zone.leap.overview]"/> as indicated:</p>

<blockquote>
<pre>
namespace std::chrono {
  class leap {
  public:
    leap(const leap&amp;) = default;
    leap&amp; operator=(const leap&amp;) = default;

    <i>// unspecified additional constructors</i>

    constexpr sys_seconds date() const noexcept;
    <ins>constexpr seconds value() const noexcept;</ins>
  };
}
</pre>
<p>
-1- Objects of type <tt>leap</tt> representing the date <ins>and value</ins> of the leap second
insertions are constructed and stored in the time zone database when initialized.
<p/>
-2- [<i>Example:</i>
</p>
<blockquote><pre>
for (auto&amp; l : get_tzdb().leaps)
  if (l &lt;= 2018y/March/17d)
    cout &lt;&lt; l.date() &lt;&lt; <ins>": " &lt;&lt; l.value() &lt;&lt;</ins> '\n';
</pre></blockquote>
<p>
Produces the output:
</p>
<blockquote><pre>
1972-07-01 00:00:00<ins>: 1s</ins>
1973-01-01 00:00:00<ins>: 1s</ins>
1974-01-01 00:00:00<ins>: 1s</ins>
1975-01-01 00:00:00<ins>: 1s</ins>
1976-01-01 00:00:00<ins>: 1s</ins>
1977-01-01 00:00:00<ins>: 1s</ins>
1978-01-01 00:00:00<ins>: 1s</ins>
1979-01-01 00:00:00<ins>: 1s</ins>
1980-01-01 00:00:00<ins>: 1s</ins>
1981-07-01 00:00:00<ins>: 1s</ins>
1982-07-01 00:00:00<ins>: 1s</ins>
1983-07-01 00:00:00<ins>: 1s</ins>
1985-07-01 00:00:00<ins>: 1s</ins>
1988-01-01 00:00:00<ins>: 1s</ins>
1990-01-01 00:00:00<ins>: 1s</ins>
1991-01-01 00:00:00<ins>: 1s</ins>
1992-07-01 00:00:00<ins>: 1s</ins>
1993-07-01 00:00:00<ins>: 1s</ins>
1994-07-01 00:00:00<ins>: 1s</ins>
1996-01-01 00:00:00<ins>: 1s</ins>
1997-07-01 00:00:00<ins>: 1s</ins>
1999-01-01 00:00:00<ins>: 1s</ins>
2006-01-01 00:00:00<ins>: 1s</ins>
2009-01-01 00:00:00<ins>: 1s</ins>
2012-07-01 00:00:00<ins>: 1s</ins>
2015-07-01 00:00:00<ins>: 1s</ins>
2017-01-01 00:00:00<ins>: 1s</ins>
</pre></blockquote>
<p>
&mdash; <i>end example</i>]
</p>
</blockquote>
</li>

<li><p>Modify <sref ref="[time.zone.leap.members]"/> as indicated:</p>

<blockquote>
<pre>
constexpr sys_seconds date() const noexcept;
</pre>
<blockquote>
<p>
-1- <i>Returns:</i> The date and time at which the leap second was inserted.
</p>
</blockquote>
<pre>
<ins>constexpr seconds value() const noexcept;</ins>
</pre>
<blockquote>
<p>
<ins>-?- <i>Returns:</i> The value of the leap second. Always <tt>+1s</tt> to indicate a positive
leap second or <tt>-1s</tt> to indicate a negative leap second. All leap seconds inserted up
through 2017 were positive leap seconds.</ins>
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[time.format]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class Duration, class charT&gt;
  struct formatter&lt;chrono::utc_time&lt;Duration&gt;, charT&gt;;
</pre>
<blockquote>
<p>
-7- <i>Remarks:</i> If <tt>%Z</tt> is used, it is replaced with
<tt><i>STATICALLY-WIDEN</i>&lt;charT&gt;("UTC")</tt>. If <tt>%z</tt> (or a modified
variant of <tt>%z</tt>) is used, an offset of <tt>0min</tt> is formatted. If the argument represents
a time during a <ins>positive</ins> leap second insertion, and if a seconds field is formatted,
the integral portion of that format is <tt><i>STATICALLY-WIDEN</i>&lt;charT&gt;("60")</tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</blockquote>

<note>2020-02-14; Prague</note>
<p>
LWG Review. Some wording improvements have been made and lead to revised wording.
</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4849">N4849</a>.</p>

<ol>
<li><p>Modify <sref ref="[time.clock.utc.members]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class Duration&gt;
  static sys_time&lt;common_type_t&lt;Duration, seconds&gt;&gt;
    to_sys(const utc_time&lt;Duration&gt;&amp; u);
</pre>
<blockquote>
<p>
-2- <i>Returns:</i> A <tt>sys_time t</tt>, such that <tt>from_sys(t) == u</tt> if such a mapping exists.
Otherwise <tt>u</tt> represents a <tt>time_point</tt> during a <ins>positive</ins> leap second
insertion<ins>, the conversion counts that leap second as not inserted,</ins> and the last
representable value of <tt>sys_time</tt> prior to the insertion of the leap second is returned.
</p>
</blockquote>
<pre>
template&lt;class Duration&gt;
  static utc_time&lt;common_type_t&lt;Duration, seconds&gt;&gt;
    from_sys(const sys_time&lt;Duration&gt;&amp; t);
</pre>
<blockquote>
<p>
-3- <i>Returns:</i> A <tt>utc_time u</tt>, such that <tt>u.time_since_epoch() - t.time_since_epoch()</tt>
is equal to the <del>number</del><ins>sum</ins> of leap seconds that were inserted between <tt>t</tt>
and 1970-01-01. If <tt>t</tt> is exactly the date of leap second insertion, then the conversion counts
that leap second as inserted.
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[time.clock.utc.nonmembers]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class Duration&gt;
  leap_second_info get_leap_second_info(const utc_time&lt;Duration&gt;&amp; ut);
</pre>
<blockquote>
<p>
-6- <i>Returns:</i> A <tt>leap_second_info</tt><ins>, <tt>lsi</tt>,</ins> where <tt><ins>lsi.</ins>is_leap_second</tt> 
is <tt>true</tt> if <tt>ut</tt> is during a <ins>positive</ins> leap second insertion, and otherwise <tt>false</tt>.
<tt><ins>lsi.</ins>elapsed</tt> is the <del>number</del><ins>sum</ins> of leap seconds between 1970-01-01 and
<tt>ut</tt>. If <tt><ins>lsi.</ins>is_leap_second</tt> is <tt>true</tt>, the leap second referred to by <tt>ut</tt>
is included in the <del>count</del><ins>sum</ins>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[time.clock.tai.overview]"/> as indicated:</p>

<blockquote>
<p>
-1- The clock <tt>tai_clock</tt> measures seconds since 1958-01-01 00:00:00 and is offset 10s ahead of
UTC at this date. That is, 1958-01-01 00:00:00 TAI is equivalent to 1957-12-31 23:59:50 UTC. Leap seconds
are not inserted into TAI. Therefore every time a leap second is inserted into UTC, UTC <del>falls another
second behind</del><ins>shifts another second with respect to</ins> TAI. For example by 2000-01-01 there
had been 22 <ins>positive and 0 negative</ins> leap seconds inserted so 2000-01-01 00:00:00 UTC is
equivalent to 2000-01-01 00:00:32 TAI (22s plus the initial 10s offset).
</p>
</blockquote>
</li>

<li><p>Modify <sref ref="[time.clock.gps.overview]"/> as indicated:</p>

<blockquote>
<p>
-1- The clock <tt>gps_clock</tt> measures seconds since the first Sunday of January, 1980 00:00:00 UTC.
Leap seconds are not inserted into GPS. Therefore every time a leap second is inserted into UTC, UTC
<del>falls another second behind</del><ins>shifts another second with respect to</ins> GPS. Aside from
the offset from <tt>1958y/January/1</tt> to <tt>1980y/January/Sunday[1]</tt>, GPS is behind TAI by 19s
due to the 10s offset between 1958 and 1970 and the additional 9 leap seconds inserted between 1970 and 1980.
</p>
</blockquote>
</li>

<li><p>Modify <sref ref="[time.zone.leap.overview]"/> as indicated:</p>

<blockquote>
<pre>
namespace std::chrono {
  class leap {
  public:
    leap(const leap&amp;) = default;
    leap&amp; operator=(const leap&amp;) = default;

    <i>// unspecified additional constructors</i>

    constexpr sys_seconds date() const noexcept;
    <ins>constexpr seconds value() const noexcept;</ins>
  };
}
</pre>
<p>
-1- Objects of type <tt>leap</tt> representing the date <ins>and value</ins> of the leap second
insertions are constructed and stored in the time zone database when initialized.
<p/>
-2- [<i>Example:</i>
</p>
<blockquote><pre>
for (auto&amp; l : get_tzdb().leaps)
  if (l &lt;= 2018y/March/17d)
    cout &lt;&lt; l.date() &lt;&lt; <ins>": " &lt;&lt; l.value() &lt;&lt;</ins> '\n';
</pre></blockquote>
<p>
Produces the output:
</p>
<blockquote><pre>
1972-07-01 00:00:00<ins>: 1s</ins>
1973-01-01 00:00:00<ins>: 1s</ins>
1974-01-01 00:00:00<ins>: 1s</ins>
1975-01-01 00:00:00<ins>: 1s</ins>
1976-01-01 00:00:00<ins>: 1s</ins>
1977-01-01 00:00:00<ins>: 1s</ins>
1978-01-01 00:00:00<ins>: 1s</ins>
1979-01-01 00:00:00<ins>: 1s</ins>
1980-01-01 00:00:00<ins>: 1s</ins>
1981-07-01 00:00:00<ins>: 1s</ins>
1982-07-01 00:00:00<ins>: 1s</ins>
1983-07-01 00:00:00<ins>: 1s</ins>
1985-07-01 00:00:00<ins>: 1s</ins>
1988-01-01 00:00:00<ins>: 1s</ins>
1990-01-01 00:00:00<ins>: 1s</ins>
1991-01-01 00:00:00<ins>: 1s</ins>
1992-07-01 00:00:00<ins>: 1s</ins>
1993-07-01 00:00:00<ins>: 1s</ins>
1994-07-01 00:00:00<ins>: 1s</ins>
1996-01-01 00:00:00<ins>: 1s</ins>
1997-07-01 00:00:00<ins>: 1s</ins>
1999-01-01 00:00:00<ins>: 1s</ins>
2006-01-01 00:00:00<ins>: 1s</ins>
2009-01-01 00:00:00<ins>: 1s</ins>
2012-07-01 00:00:00<ins>: 1s</ins>
2015-07-01 00:00:00<ins>: 1s</ins>
2017-01-01 00:00:00<ins>: 1s</ins>
</pre></blockquote>
<p>
&mdash; <i>end example</i>]
</p>
</blockquote>
</li>

<li><p>Modify <sref ref="[time.zone.leap.members]"/> as indicated:</p>

<blockquote>
<pre>
constexpr sys_seconds date() const noexcept;
</pre>
<blockquote>
<p>
-1- <i>Returns:</i> The date and time at which the leap second was inserted.
</p>
</blockquote>
<pre>
<ins>constexpr seconds value() const noexcept;</ins>
</pre>
<blockquote>
<p>
<ins>-?- <i>Returns:</i> <tt>+1s</tt> to indicate a positive leap second or <tt>-1s</tt> to indicate a negative leap second. 
[<i>Note:</i> All leap seconds inserted up through 2019 were positive leap seconds. &mdash; <i>end note</i>]</ins>
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[time.format]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class Duration, class charT&gt;
  struct formatter&lt;chrono::utc_time&lt;Duration&gt;, charT&gt;;
</pre>
<blockquote>
<p>
-7- <i>Remarks:</i> If <tt>%Z</tt> is used, it is replaced with
<tt><i>STATICALLY-WIDEN</i>&lt;charT&gt;("UTC")</tt>. If <tt>%z</tt> (or a modified
variant of <tt>%z</tt>) is used, an offset of <tt>0min</tt> is formatted. If the argument represents
a time during a <ins>positive</ins> leap second insertion, and if a seconds field is formatted,
the integral portion of that format is <tt><i>STATICALLY-WIDEN</i>&lt;charT&gt;("60")</tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>
</issue>
