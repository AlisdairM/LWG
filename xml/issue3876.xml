<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3876" status="Immediate">
<title>Default constructor of <tt>std::layout_<i>XX</i>::mapping</tt> misses precondition</title>
<section><sref ref="[mdspan.layout]"/></section>
<submitter>Christian Trott</submitter>
<date>9 Feb 2023</date>
<priority>99</priority>

<discussion>
<p>
As shortly discussed during the LWG review of a <tt>layout_stride</tt> defect, there is currently no protection against 
creating layout mappings with all static extents where the product of those extents exceeds the representable 
value range of the <tt>index_type</tt>.
<p/>
For example, the following statement does not violate any preconditions or mandates:
</p>
<blockquote><pre>
layout_left::mapping&lt;extents&lt;int, 100000, 100000&gt;&gt; a{};
</pre></blockquote>
<p>
But <tt>a.required_span_size()</tt> would overflow since the implied span size is 10B and thus exceeds what 
<tt>int</tt> can represent.
<p/>
This is only a problem for all static extents, since with any dynamic extent in the mix the implied span size is <tt>0</tt>. 
Hence we can check for this via a mandates check on the class.
<p/>
The paper <paper num="P2798R0"/> has been provided with the proposed wording as shown below.
</p>

<note>Issaquah 2023-02-10; LWG issue processing</note>
<p>Move to Immediate for C++23</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="n4928"/>.
</p>

<ol>
<li><p>Modify <sref ref="[mdspan.layout.left.overview]"/> as indicated:</p>
<blockquote>
<p>
-2- If <tt>Extents</tt> is not a specialization of <tt>extents</tt>, then the program is ill-formed.
<p/>
-3- <tt>layout_left::mapping&lt;E&gt;</tt> is a trivially copyable type that models <tt>regular</tt> for each <tt>E</tt>.
<p/>
<ins>-?- <i>Mandates</i>: If <tt>Extents::rank_dynamic() == 0</tt> is <tt>true</tt>, then the size of the multidimensional 
index space <tt>Extents()</tt> is representable as a value of type <tt>typename Extents::index_type</tt>.</ins>
</p>
</blockquote>
</li>

<li><p>Modify <sref ref="[mdspan.layout.right.overview]"/> as indicated:</p>
<blockquote>
<p>
-2- If <tt>Extents</tt> is not a specialization of <tt>extents</tt>, then the program is ill-formed.
<p/>
-3- <tt>layout_right::mapping&lt;E&gt;</tt> is a trivially copyable type that models <tt>regular</tt> for each <tt>E</tt>.
<p/>
<ins>-?- <i>Mandates</i>: If <tt>Extents::rank_dynamic() == 0</tt> is <tt>true</tt>, then the size of the multidimensional 
index space <tt>Extents()</tt> is representable as a value of type <tt>typename Extents::index_type</tt>.</ins>
</p>
</blockquote>
</li>

<li><p>Modify <sref ref="[mdspan.layout.stride.overview]"/> as indicated:</p>
<blockquote>
<p>
-2- If <tt>Extents</tt> is not a specialization of <tt>extents</tt>, then the program is ill-formed.
<p/>
-3- <tt>layout_stride::mapping&lt;E&gt;</tt> is a trivially copyable type that models <tt>regular</tt> for each <tt>E</tt>.
<p/>
<ins>-?- <i>Mandates</i>: If <tt>Extents::rank_dynamic() == 0</tt> is <tt>true</tt>, then the size of the multidimensional 
index space <tt>Extents()</tt> is representable as a value of type <tt>typename Extents::index_type</tt>.</ins>
</p>
</blockquote>
</li>
</ol>

</resolution>

</issue>
