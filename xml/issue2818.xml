<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2818" status="Open">
<title><tt>"::std::"</tt> everywhere rule needs tweaking</title>
<section><sref ref="[contents]"/></section>
<submitter>Tim Song</submitter>
<date>11 Nov 2016</date>
<priority>2</priority>

<discussion>
<p>
[contents]/3 says
</p>
<blockquote><p>
Whenever a name <tt>x</tt> defined in the standard library is mentioned, the name <tt>x</tt> is assumed to be fully 
qualified as <tt>::std::x</tt>, unless explicitly described otherwise. For example, if the <i>Effects</i> section 
for library function <tt>F</tt> is described as calling library function <tt>G</tt>, the function <tt>::std::G</tt> is meant.
</p></blockquote>
<p>
With the introduction of nested namespaces inside <tt>std</tt>, this rule needs tweaking. For instance, 
<tt>time_point_cast</tt>'s <i>Returns</i> clause says "<tt>time_point&lt;Clock, 
ToDuration&gt;(duration_cast&lt;ToDuration&gt;(t.time_since_epoch()))</tt>"; that reference to <tt>duration_cast</tt> 
obviously means <tt>::std::chrono::duration_cast</tt>, not <tt>::std::duration_cast</tt>, which doesn't exist.
</p>

<note>Issues Telecon 16-Dec-2016</note>
<p>Priority 2; Jonathan to provide wording</p>

<note>2019 Cologne Wednesday night</note>
<p>Geoffrey suggested editing <sref ref="[contents]"/>/2 to mention the case when we're defining things in a sub-namespace.</p>
<p>Jonathan to word this.</p>

<note>2020-02-14, Prague; Walter provides wording</note>
<p>
</p>

<note>2020-10-02; Issue processing telecon: new wording from Jens</note>
<p>Use "Simplified suggestion" in 13 June 2020 email from Jens.</p>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>This wording is relative to <a href="https://wg21.link/n4849">N4849</a>.</p>

<ol>
<li><p>Modify <sref ref="[contents]"/> as indicated:</p>

<blockquote>
<p>
-3- <del>Whenever a name <tt>x</tt> defined in the standard library is mentioned, the name <tt>x</tt> is assumed to be fully qualified
as <tt>::std::x</tt>, unless explicitly described otherwise. For example, if the <i>Effects:</i> element for library function <tt>F</tt>
is described as calling library function <tt>G</tt>, the function <tt>::std::G</tt> is meant.</del><ins>Let <tt>x</tt> be a name
specified by the standard library via a declaration in namespace <tt>std</tt> or in a subnamespace of namespace <tt>std</tt>.
Whenever <tt>x</tt> is used as an unqualified name in a further specification, it is assumed to correspond
to the same <tt>x</tt> that would be found via unqualified name lookup (<sref ref="[basic.lookup.unqual]"/>) performed at that point 
of use. Similarly, whenever <tt>x</tt> is used as a qualified name in a further specification, it is assumed to correspond
to the same <tt>x</tt> that would be found via qualified name lookup (<sref ref="[basic.lookup.qual]"/>) performed at that point 
of use. [<i>Note:</i> Such lookups can never fail in a well-formed program. &mdash; <i>end note</i>] 
[<i>Example:</i> If an <i>Effects:</i> element for a library function <tt>F</tt> specifies that library function <tt>G</tt>
is to be used, the function <tt>::std::G</tt> is intended. &mdash; <i>end example</i>]</ins>
</p>
</blockquote>
</li>
</ol>
</blockquote>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>This wording is relative to <a href="https://wg21.link/n4849">N4849</a>.</p>

<ol>
<li><p>Modify <sref ref="[contents]"/> as indicated:</p>

<blockquote>
<note>Drafting note:
Consider adding a note clarifying that the unqualified lookup
does not perform ADL.
</note>
<p>
-3- <del>Whenever a name <tt>x</tt> defined in the standard library is mentioned, the name <tt>x</tt> is assumed to be fully qualified
as <tt>::std::x</tt>, unless explicitly described otherwise. For example, if the <i>Effects:</i> element for library function <tt>F</tt>
is described as calling library function <tt>G</tt>, the function <tt>::std::G</tt> is meant.</del>
<ins>
Whenever an unqualified name <tt>x</tt> is used
in the specification of a declaration <tt>D</tt>
in clauses 16-32,
its meaning is established as-if by performing unqualified name lookup
(<sref ref="[basic.lookup.unqual]"/>) in the context of <tt>D</tt>.
Similarly, the meaning of a qualified-id is established as-if by
performing qualified name lookup (<sref ref="[basic.lookup.qual]"/>)
in the context of <tt>D</tt>.
<i>[Example:</i>
The reference to <tt>is_array_v</tt> in the
specification of <tt>std::to_array</tt> (<sref ref="[array.creation]"/>)
refers to <tt>::std::is_array_v</tt>.
-- <i>end example]</i>
<i>[Note:</i>
Operators in expressions <sref ref="[over.match.oper]"/>
are not so constrained; see <sref ref="[global.functions]"/>.
-- <i>end note]</i>
</ins>
</p>
</blockquote>
</li>
</ol>
</blockquote>

<note>2020-11-04; Jens provides improved wording</note>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4868">N4868</a>.</p>

<ol>
<li><p>Modify <sref ref="[contents]"/> as indicated:</p>

<blockquote>
<p>
-3- <del>Whenever a name <tt>x</tt> defined in the standard library is mentioned, the name <tt>x</tt> 
is assumed to be fully qualified as <tt>::std::x</tt>, unless explicitly described otherwise. For example, 
if the <i>Effects:</i> element for library function <tt>F</tt> is described as calling library function 
<tt>G</tt>, the function <tt>::std::G</tt> is meant.</del>
<ins>Whenever an unqualified name <tt>x</tt> is used in the specification of a declaration <tt>D</tt>
in clauses 16-32, its meaning is established as-if by performing unqualified name lookup
(<sref ref="[basic.lookup.unqual]"/>) in the context of <tt>D</tt>. [<i>Note ?:</i> Argument-dependent lookup 
is not performed. &mdash; <i>end note</i>] Similarly, the meaning of a qualified-id is established as-if by 
performing qualified name lookup (<sref ref="[basic.lookup.qual]"/>) in the context of <tt>D</tt>.
[<i>Example:</i> The reference to <tt>is_array_v</tt> in the specification of <tt>std::to_array</tt> 
(<sref ref="[array.creation]"/>) refers to <tt>::std::is_array_v</tt>. &mdash; <i>end example</i>]
[<i>Note ?:</i> Operators in expressions (<sref ref="[over.match.oper]"/>) are not so constrained; see 
<sref ref="[global.functions]"/>. &mdash; <i>end note</i>]
</ins>
</p>
</blockquote>
</li>

<li><p>Remove <sref ref="[fs.req.namespace]"/> in its entirety:</p>

<blockquote>
<p>
<del><b>29.11.3.2 Namespaces and headers [fs.req.namespace]</b></del>
<p/>
<del>-1- Unless otherwise specified, references to entities described in subclause <sref ref="[filesystems]"/> 
are assumed to be qualified with <tt>::std::filesystem::</tt>.</del>
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
