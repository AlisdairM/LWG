<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2818" status="Open">
<title><tt>"::std::"</tt> everywhere rule needs tweaking</title>
<section><sref ref="[contents]"/></section>
<submitter>Tim Song</submitter>
<date>11 Nov 2016</date>
<priority>2</priority>

<discussion>
<p>
[contents]/3 says
</p>
<blockquote><p>
Whenever a name <tt>x</tt> defined in the standard library is mentioned, the name <tt>x</tt> is assumed to be fully 
qualified as <tt>::std::x</tt>, unless explicitly described otherwise. For example, if the <i>Effects</i> section 
for library function <tt>F</tt> is described as calling library function <tt>G</tt>, the function <tt>::std::G</tt> is meant.
</p></blockquote>
<p>
With the introduction of nested namespaces inside <tt>std</tt>, this rule needs tweaking. For instance, 
<tt>time_point_cast</tt>'s <i>Returns</i> clause says "<tt>time_point&lt;Clock, 
ToDuration&gt;(duration_cast&lt;ToDuration&gt;(t.time_since_epoch()))</tt>"; that reference to <tt>duration_cast</tt> 
obviously means <tt>::std::chrono::duration_cast</tt>, not <tt>::std::duration_cast</tt>, which doesn't exist.
</p>

<note>Issues Telecon 16-Dec-2016</note>
<p>Priority 2; Jonathan to provide wording</p>

<note>2019 Cologne Wednesday night</note>
<p>Geoffrey suggested editing <sref ref="[contents]"/>/2 to mention the case when we're defining things in a sub-namespace.</p>
<p>Jonathan to word this.</p>

<note>2020-02-14, Prague; Walter provides wording</note>
<p>
</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4849">N4849</a>.</p>

<ol>
<li><p>Modify <sref ref="[contents]"/> as indicated:</p>

<blockquote>
<p>
-3- <del>Whenever a name <tt>x</tt> defined in the standard library is mentioned, the name <tt>x</tt> is assumed to be fully qualified
as <tt>::std::x</tt>, unless explicitly described otherwise. For example, if the <i>Effects:</i> element for library function <tt>F</tt>
is described as calling library function <tt>G</tt>, the function <tt>::std::G</tt> is meant.</del><ins>Let <tt>x</tt> be a name
specified by the standard library via a declaration in namespace <tt>std</tt> or in a subnamespace of namespace <tt>std</tt>.
Whenever <tt>x</tt> is used as an unqualified name in a further specification, it is assumed to correspond
to the same <tt>x</tt> that would be found via unqualified name lookup (<sref ref="[basic.lookup.unqual]"/>) performed at that point 
of use. Similarly, whenever <tt>x</tt> is used as a qualified name in a further specification, it is assumed to correspond
to the same <tt>x</tt> that would be found via qualified name lookup (<sref ref="[basic.lookup.qual]"/>) performed at that point 
of use. [<i>Note:</i> Such lookups can never fail in a well-formed program. &mdash; <i>end note</i>] 
[<i>Example:</i> If an <i>Effects:</i> element for a library function <tt>F</tt> specifies that library function <tt>G</tt>
is to be used, the function <tt>::std::G</tt> is intended. &mdash; <i>end example</i>]</ins>
</p>
</blockquote>
</li>
</ol>

</resolution>

</issue>
