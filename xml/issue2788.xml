<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2788" status="New">
<title><tt>basic_string</tt> range mutators unintentionally require a default constructible allocator</title>
<section><sref ref="[string.append]"/><sref ref="[string.assign]"/><sref ref="[string.insert]"/>
<sref ref="[string.replace]"/></section>
<submitter>Billy O'Neal III</submitter>
<date>25 Oct 2016</date>
<priority>2</priority>

<discussion>
<p>
Email discussion occurred on the <a href="http://lists.isocpp.org/lib/2016/10/1154.php">lib reflector</a>.
<p/>
<tt>basic_string</tt>'s mutation functions show construction of temporary <tt>basic_string</tt> instances, 
without passing an allocator parameter. This says that <tt>basic_string</tt> needs to use a default-initialized 
allocator, which is clearly unintentional. The temporary needs to use the same allocator the current 
<tt>basic_string</tt> instance uses, if an implmentation needs to create a temporary at all.
<p/>
libc++ already does this; I believe libstdc++ does as well (due to the bug report we got from a user that brought 
this to our attention), but have not verified there. I implemented this in MSVC++'s STL and this change is scheduled 
to ship in VS "15" RTW.
</p>
<note>2016-11-12, Issaquah</note>
<p>Sat AM: Priority 2</p>
<p>Alisdair to investigate and (possibly) provide an alternate P/R</p>

<note>2017-02-13 Alisdair responds:</note>
<p>Looks good to me - no suggested alternative</p>
</discussion>

<resolution>
<p>This wording is relative to N4606.</p>

<ol>
<li><p>In <sref ref="[string.append]"/>, add the allocator parameter to the range overload temporary:</p>

<blockquote>
<pre>
template&lt;class InputIterator&gt;
  basic_string&amp; append(InputIterator first, InputIterator last);
</pre>
<blockquote>
<p>
-19- <i>Requires:</i> <tt>[first, last)</tt> is a valid range.
<p/>
-20- <i>Effects:</i> Equivalent to <tt>append(basic_string(first, last<ins>, get_allocator()</ins>))</tt>.
<p/>
-21- <i>Returns:</i> <tt>*this</tt>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>In <sref ref="[string.assign]"/>, add the allocator parameter to the range overload temporary:</p>

<blockquote>
<pre>
template&lt;class InputIterator&gt;
  basic_string&amp; assign(InputIterator first, InputIterator last);
</pre>
<blockquote>
<p>
-23- <i>Effects:</i> Equivalent to <tt>assign(basic_string(first, last<ins>, get_allocator()</ins>))</tt>.
<p/>
-24- <i>Returns:</i> <tt>*this</tt>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>In <sref ref="[string.insert]"/>, add the allocator parameter to the range overload temporary:</p>

<blockquote>
<pre>
template&lt;class InputIterator&gt;
  iterator insert(const_iterator p, InputIterator first, InputIterator last);
</pre>
<blockquote>
<p>
-23- <i>Requires:</i> <tt>p</tt> is a valid iterator on <tt>*this</tt>. <tt>[first, last)</tt> is a valid range.
<p/>
-24- <i>Effects:</i> Equivalent to <tt>insert(p - begin(), basic_string(first, last<ins>, get_allocator()</ins>))</tt>.
<p/>
-25- <i>Returns:</i> An iterator which refers to the copy of the first inserted character, or <tt>p</tt> if <tt>first == last</tt>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>In <sref ref="[string.replace]"/>, add the allocator parameter to the range overload temporary:</p>

<blockquote>
<pre>
template&lt;class InputIterator&gt;
  basic_string&amp; replace(const_iterator i1, const_iterator i2,
                        InputIterator j1, InputIterator j2);
</pre>
<blockquote>
<p>
-32- <i>Requires:</i> <tt>[begin(), i1)</tt>, <tt>[i1, i2)</tt> and <tt>[j1, j2)</tt> are valid ranges.
<p/>
-33- <i>Effects:</i> Calls <tt>replace(i1 - begin(), i2 - i1, basic_string(j1, j2<ins>, get_allocator()</ins>))</tt>.
<p/>
-34- <i>Returns:</i> <tt>*this</tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
