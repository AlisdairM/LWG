<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3470" status="C++23">
<title><tt><i>convertible-to-non-slicing</i></tt> seems to reject valid case</title>
<section><sref ref="[range.subrange]"/></section>
<submitter>S. B. Tam</submitter>
<date>26 Jul 2020</date>
<priority>3</priority>

<discussion>
<p>
Consider
</p>
<blockquote><pre>
#include &lt;ranges&gt;

int main()
{
  int a[3] = { 1, 2, 3 };
  int* b[3] = { &amp;a[2], &amp;a[0], &amp;a[1] };
  auto c = std::ranges::subrange&lt;const int*const*&gt;(b);
}
</pre></blockquote>
<p>
The construction of <tt>c</tt> is ill-formed because <tt><i>convertible-to-non-slicing</i>&lt;int**, const int*const*&gt;</tt>
is <tt>false</tt>, although the conversion does not involve object slicing.
<p/>
I think <tt>subrange</tt> should allow such qualification conversion, just like <tt>unique_ptr&lt;T[]&gt;</tt> already does.
<p/>
(Given that this constraint is useful in more than one context, maybe it deserves a named type trait?)
</p>

<note>2020-08-21; Reflector prioritization</note>
<p>
Set priority to 3 after reflector discussions.
</p>
<note>2021-05-19 Tim adds wording</note>
<p>
The wording below, which has been implemented and tested on top of libstdc++,
uses the same technique we use for <tt>unique_ptr</tt>, <tt>shared_ptr</tt>,
and <tt>span</tt>. It seems especially appropriate to have feature parity between
<tt>subrange</tt> and <tt>span</tt> in this respect.
</p>

<note>2021-06-23; Reflector poll</note>
<p>
Set status to Tentatively Ready after five votes in favour during reflector poll.
</p>

<note>2021-10-14 Approved at October 2021 virtual plenary. Status changed: Voting &rarr; WP.</note>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4885">N4885</a>.</p>

<ol>
<li><p>Modify <sref ref="[range.subrange]"/> as indicated:</p>

<blockquote>
<pre>
namespace std::ranges {
  <ins>template&lt;class From, class To&gt;
    concept <i>uses-nonqualification-pointer-conversion</i> = <i>// exposition only</i>
      is_pointer_v&lt;From&gt; &amp;&amp; is_pointer_v&lt;To&gt; &amp;&amp;
      !convertible_to&lt;remove_pointer_t&lt;From&gt;(*)[], remove_pointer_t&lt;To&gt;(*)[]&gt;;</ins>

  template&lt;class From, class To&gt;
    concept <i>convertible-to-non-slicing</i> = <i>// exposition only</i>
      convertible_to&lt;From, To&gt; &amp;&amp;
      <ins>!<i>uses-nonqualification-pointer-conversion</i>&lt;decay_t&lt;From&gt;, decay_t&lt;To&gt;&gt;;</ins>
      <del>!(is_pointer_v&lt;decay_t&lt;From&gt;&gt; &amp;&amp;
      is_pointer_v&lt;decay_t&lt;To&gt;&gt; &amp;&amp;
      <i>not-same-as</i>&lt;remove_pointer_t&lt;decay_t&lt;From&gt;&gt;, remove_pointer_t&lt;decay_t&lt;To&gt;&gt;&gt;
      );</del>
  [&hellip;]
}
[&hellip;]
</pre>
</blockquote>
</li>
</ol>
</resolution>

</issue>
