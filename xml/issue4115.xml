<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4115" status="New">
<title><tt>move_iterator::operator*</tt> should have conditional <tt>noexcept</tt> specification</title>
<section><sref ref="[move.iter.elem]"/></section>
<submitter>Hewill Kang</submitter>
<date>03 Jul 2024</date>
<priority>4</priority>

<discussion>
<p>
For <tt>move_iterator</tt>, dereferencing it is actually equivalent to applying <tt>iter_move</tt> to it.
<p/>
However, unlike the latter, <tt>move_iterator</tt>'s dereference operator lacks a <tt>noexcept</tt> 
specification, which seems to be an oversight given that the standard goes to such great lengths to 
preserve the noexceptness of <tt>iter_move</tt>, and the main purpose of <tt>move_iterator</tt> is 
precisely to apply <tt>iter_move</tt> to the underlying iterator via dereferencing.
</p>

<note>2024-08-02; Reflector poll</note>
<p>
Set priority to 4 after reflector poll.
"Do we have evidence conditional noexcept matters here?
Do we have a policy that `operator*` should be noexcept whenever possible?
What criteria are we using to decide here?"
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4981"/>.
</p>

<ol>
<li><p>Modify <sref ref="[move.iterator]"/> as indicated:</p>

<blockquote><pre>
namespace std {
  template&lt;class Iterator&gt;
  class move_iterator {
  public:
    [&hellip;]
    constexpr reference operator*() const <ins>noexcept(noexcept(ranges::iter_move(current)))</ins>;
    [&hellip;]
  };
}
</pre></blockquote>

</li>

<li><p>Modify <sref ref="[move.iter.elem]"/> as indicated:</p>

<blockquote>
<pre>
constexpr reference operator*() const <ins>noexcept(noexcept(ranges::iter_move(current)))</ins>;
</pre>
<blockquote>
<p>
-1- <i>Effects</i>: Equivalent to: <tt>return ranges::iter_move(current);</tt>
</p>
</blockquote>
</blockquote>

</li>
</ol>
</resolution>

</issue>
