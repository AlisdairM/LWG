<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3238" status="New">
<title>Insufficiently-defined behavior of <tt>std::function</tt> deduction guides</title>
<section><sref ref="[func.wrap.func.con]"/></section>
<submitter>Louis Dionne</submitter>
<date>17 Jul 2019</date>
<priority>99</priority>

<discussion>
<p>
The following code is currently undefined behavior:
</p>
<blockquote><pre>
#include &lt;functional&gt;

struct R { };
struct f0 { R operator()() &amp;&amp; { return {}; } };

int main() { std::function f = f0{}; }
</pre></blockquote>
<p>
The reason is that <sref ref="[func.wrap.func.con]"/>/12 says:
</p>
<blockquote><p>
This deduction guide participates in overload resolution only if <tt>&amp;F::operator()</tt> is well-formed 
when treated as an unevaluated operand. In that case, if <tt>decltype(&amp;F::operator())</tt> is of the 
form <tt>R(G::*)(A...) <i>cv</i> &amp;<sub><i>opt</i></sub> noexcept<sub><i>opt</i></sub></tt> for a 
class type <tt>G</tt>, then the deduced type is <tt>function&lt;R(A...)&gt;</tt>.
</p></blockquote>
<p>
However, it does not define the behavior when <tt>&amp;F::operator()</tt> is well-formed but <em>not</em> 
of the required form (in the above example it's of the form <tt>R(G::*)(A...) &amp;&amp;</tt>, which is 
rvalue-reference qualified instead of optionally-lvalue-reference qualified). libc++'s implementation 
of the deduction guide SFINAE's out when either <tt>&amp;F::operator()</tt> is not well-formed, or it 
is not of the required form. It seems like mandating that behavior in the Standard is the way to go.
</p>
</discussion>
<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4820">N4820</a>.</p>

<ol>
<li><p>Modify <sref ref="[func.wrap.func.con]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class F&gt; function(F) -&gt; function&lt;<i>see below</i>&gt;;
</pre><blockquote>
<p>
-12- <i>Remarks:</i> This deduction guide participates in overload resolution only if 
<tt>&amp;F::operator()</tt> is well-formed when treated as an unevaluated operand<ins>, and is 
of the form <tt>R(G::*)(A...) <i>cv</i> &amp;<sub><i>opt</i></sub> 
noexcept<sub><i>opt</i></sub></tt> for a class type <tt>G</tt></ins>. In that case, <del>if 
<tt>decltype(&amp;F::operator())</tt> is of the form <tt>R(G::*)(A...) <i>cv</i> 
&amp;<sub><i>opt</i></sub> noexcept<sub><i>opt</i></sub></tt> for a class type <tt>G</tt>, 
then</del> the deduced type is <tt>function&lt;R(A...)&gt;</tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>
</issue>
