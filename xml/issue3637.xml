<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3637" status="New">
<title><tt>pmr::memory_resource::do_allocate</tt> needs clarification</title>
<section><sref ref="[mem.res.class]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>12 Nov 2021</date>
<priority>99</priority>

<discussion>
<p>
<sref ref="[mem.res.private]"/> says that <tt>pmr::memory_resource::do_allocate</tt> 
returns "a pointer to allocated storage" and references <sref ref="[basic.stc.dynamic.allocation]"/>. 
But it's not really clear which parts of <sref ref="[basic.stc.dynamic.allocation]"/> define 
"allocated storage". <tt>pmr::memory_resource::allocate</tt> is not "an allocation function" 
and not a "replaceable allocation function", so "the value returned by a replaceable allocation 
function is a non-null pointer value" doesn't apply here, and neither does "different from any 
previously returned value".
<p/>
Is <tt>pmr::memory_resource::allocate</tt> allowed to return a null pointer on success? Is it 
allowed to return the same address twice, without an intervening deallocation? What about if you call 
<tt>pmr::monotonic_buffer_resource::release()</tt>, is that a deallocation?
<p/>
When discussed on the reflector the consensus was that returning null should not be allowed, 
it should throw an exception or return a valid dereferenceable pointer. The reference to 
<sref ref="[basic.stc.dynamic.allocation]"/> doesn't work to specify this though, so we should 
restate the requirements without directly using the core wording for <tt>operator new</tt>.
<p/>
It was also suggested that returning the same value should not be allowed without an intervening 
deallocation, but that "deallocation" should not only mean a call to deallocate on the resource, 
but include things like <tt>pmr::monotonic_buffer_resource::release()</tt>, and when a memory 
resource's destructor returns memory to an upstream resource.
</p>
</discussion>

<resolution>
</resolution>

</issue>
