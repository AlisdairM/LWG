<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2747" status="C++17">
<title>Possibly redundant <tt>std::move</tt> in [alg.foreach]</title>
<section><sref ref="[alg.foreach]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>15 Jul 2016</date>
<priority>0</priority>

<discussion>
<p>
<sref ref="[alg.foreach]"/> p3 says <i>Returns:</i> <tt>std::move(f)</tt>.
<p/>
<sref ref="[class.copy]"/> says that since <tt>f</tt> is a function parameter overload resolution to select the constructor 
for the return value is first performed as if for an rvalue, so the <tt>std::move</tt> is redundant.
<p/>
It could be argued that it isn't entirely redundant, because it says that implementations can't do something slightly different like return an lvalue reference that is bound to <tt>f</tt>, which would prevent it being treated as an rvalue. We should discuss it.
</p>
<note>2016-07 Chicago</note>
<p>Monday: P0 - tentatively ready</p>
</discussion>

<resolution>
<p>This wording is relative to N4606.</p>

<ol>
<li><p>Change <sref ref="[alg.foreach]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class InputIterator, class Function&gt;
  Function for_each(InputIterator first, InputIterator last, Function f);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-3- <i>Returns:</i> <tt><del>std::move(</del>f<del>)</del></tt>.
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
