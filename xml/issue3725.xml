<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3725" status="New">
<title><tt>reverse_iterator::operator-&gt;</tt> should not use <tt>prev</tt> for non-pointer iterators</title>
<section><sref ref="[reverse.iter.elem]"/></section>
<submitter>Hewill Kang</submitter>
<date>26 Jun 2022</date>
<priority>99</priority>

<discussion>
<p>
When the underlying iterator is not a pointer type, <tt>reverse_iterator::operator-&gt;</tt> returns 
<tt>prev(current).operator-&gt;()</tt>. However, <tt>prev</tt> only works with 
<i>Cpp17BidirectionalIterator</i>, given that C++20 <tt>bidirectional_iterator</tt> may just be 
<i>Cpp17InputIterator</i>, we shouldn't use <tt>prev</tt> here.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4910"/>.
</p>

<ol>
<li><p>Modify <sref ref="[reverse.iter.elem]"/> as indicated:</p>

<blockquote>
<pre>
constexpr pointer operator-&gt;() const
  requires (is_pointer_v&lt;Iterator&gt; ||
            requires(const Iterator i) { i.operator-&gt;(); });
</pre>
<blockquote>
<p>
-2- <i>Effects</i>:
</p>
<ol style="list-style-type: none">
<li><p>(2.1) &mdash; If <tt>Iterator</tt> is a pointer type, equivalent to: <tt>return prev(current);</tt></p></li>
<li><p>(2.2) &mdash; Otherwise, equivalent to: <del><tt>return prev(current).operator-&gt;();</tt></del></p>
<blockquote><pre>
<ins>Iterator tmp = current;
--tmp;
return tmp.operator-&gt;();</ins>
</pre></blockquote>
</li>
</ol>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
