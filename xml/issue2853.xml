<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2853" status="WP">
<title>Possible inconsistency in specification of <tt>erase</tt> in [vector.modifiers]</title>
<section><sref ref="[vector.modifiers]"/></section>
<submitter>Gerard Stone</submitter>
<date>16 Jan 2017</date>
<priority>0</priority>

<discussion>
<p>
In Table 87 (Sequence container requirements) <tt>erase(q)</tt> and <tt>erase(q1, q2)</tt> functions have the following requirements: 
</p>
<blockquote>
<p>
For <tt>vector</tt> and <tt>deque</tt>, <tt>T</tt> shall be <tt>MoveAssignable</tt>.
</p>
</blockquote>
<p>
On the other hand, section [vector.modifiers] has the following specification for erase functions (emphasis mine):
</p> 
<blockquote>
<p>
<i>Throws:</i> Nothing unless an exception is thrown by the <b>copy constructor</b>, <b>move constructor</b>, assignment
operator, or move assignment operator of <tt>T</tt>.
</p>
</blockquote>
<p>
Note that Table 87 requires <tt>T</tt> to be only <tt>MoveAssignable</tt>, it says nothing about <tt>T</tt> 
being copy- or move-constructible. It also says nothing about <tt>T</tt> being <tt>CopyInsertable</tt> and <tt>MoveInsertable</tt>, 
so why is this even there? The only reason might be so that vector could shrink, but in this case <tt>T</tt> should be required 
to be <tt>MoveInsertable</tt> or <tt>CopyInsertable</tt> into <tt>vector</tt>.
<p/>
On the other hand, we expect that vector will neither allocate, nor deallocate any memory during this operation, because in 
<i>Effects</i> it is specified that iterators/references shall be invalidated at or after the point of the erase.
<p/>
So to avoid any confusion, the proposed resolution is to remove mentions of <tt>T</tt>'s copy/move constructors 
from [vector.modifiers] paragraph 5.
</p>

<note>2017-01-27 Telecon</note>
<p>Priority 0</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4618">N4618</a>.</p>

<ol>
<li><p>Edit <sref ref="[vector.modifiers]"/> p5 as indicated:</p>
<blockquote>
<pre>
iterator erase(const_iterator position);
iterator erase(const_iterator first, const_iterator last);
void pop_back();
</pre>
<blockquote>
<p>
-3- <i>Effects:</i> Invalidates iterators and references at or after the point of the erase.
<p/>
-4- <i>Complexity:</i> The destructor of <tt>T</tt> is called the number of times equal to the number of the elements
erased, but the assignment operator of <tt>T</tt> is called the number of times equal to the number of elements
in the vector after the erased elements.
<p/>
-5- <i>Throws:</i> Nothing unless an exception is thrown by the <del>copy constructor, move constructor,</del> assignment
operator<del>,</del> or move assignment operator of <tt>T</tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
