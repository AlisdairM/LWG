<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3436" status="Voting">
<title><tt>std::construct_at</tt> should support arrays</title>
<section><sref ref="[specialized.construct]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>29 Apr 2020</date>
<priority>2</priority>

<discussion>
<p>
<tt>std::construct_at</tt> is ill-formed for array types, because the type of the <tt>new</tt>-expression is <tt>T</tt> 
not <tt>T*</tt> so it cannot be converted to the return type.
<p/>
In C++17 <tt>allocator_traits::construct</tt> did work for arrays, because it returns <tt>void</tt> so there is no 
ill-formed conversion. On the other hand, in C++17 <tt>allocator_traits::destroy</tt> didn't work for arrays, 
because <tt>p-&gt;~T()</tt> isn't valid.
<p/>
In C++20 <tt>allocator_traits::destroy</tt> does work, because <tt>std::destroy_at</tt> treats arrays specially, 
but <tt>allocator_traits::construct</tt> no longer works because it uses <tt>std::construct_at</tt>.
<p/>
It seems unnecessary and/or confusing to remove support for arrays in <tt>construct</tt> when we're adding it in <tt>destroy</tt>.
<p/>
I suggest that <tt>std::construct_at</tt> should also handle arrays. It might be reasonable to restrict that 
support to the case where <tt>sizeof...(Args) == 0</tt>, if supporting parenthesized aggregate-initialization 
is not desirable in <tt>std::construct_at</tt>.
</p>

<note>2020-05-09; Reflector prioritization</note>
<p>
Set priority to 2 after reflector discussions.
</p>

<note>2021-01-16; Zhihao Yuan provides wording</note>

<p>
<strong>Previous resolution [SUPERSEDED]:</strong>
</p>
<blockquote class="note">
<p>
This wording is relative to <paper num="N4878"/>. 
</p>

<ol>
<li><p>Modify <sref ref="[specialized.construct]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class T, class... Args&gt;
  constexpr T* construct_at(T* location, Args&amp;&amp;... args);

namespace ranges {
  template&lt;class T, class... Args&gt;
    constexpr T* construct_at(T* location, Args&amp;&amp;... args);
}
</pre>
<blockquote>
<p>
-1- <i>Constraints:</i> The expression <tt>::new (declval&lt;void*&gt;()) T(declval&lt;Args&gt;()...)</tt> is well-formed
when treated as an unevaluated operand.
<p/>
-2- <i>Effects:</i> Equivalent to:
</p>
<blockquote><pre>
<del>return</del><ins>auto ptr =</ins> ::new (<i>voidify</i>(*location)) T(std::forward&lt;Args&gt;(args)...);
<ins>if constexpr (is_array_v&lt;T&gt;)
  return launder(location);
else
  return ptr;</ins>
</pre></blockquote>
</blockquote>
</blockquote>
</li>
</ol>
</blockquote>

<note>2021-12-07; Zhihao Yuan comments and provides improved wording</note>
<p>
The previous PR allows constructing arbitrary number of elements when
<tt>T</tt> is an array of unknown bound:</p>
<blockquote><pre>
extern int a[];
std::construct_at(&amp;a, 0, 1, 2);
</pre></blockquote>
<p>
and leads to a UB.
</p>
<superseded>
<p>
This wording is relative to <paper num="N4901"/>. 
</p>

<ol>
<li><p>Modify <sref ref="[specialized.construct]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class T, class... Args&gt;
  constexpr T* construct_at(T* location, Args&amp;&amp;... args);

namespace ranges {
  template&lt;class T, class... Args&gt;
    constexpr T* construct_at(T* location, Args&amp;&amp;... args);
}
</pre>
<blockquote>
<p>
-1- <i>Constraints:</i> The expression <tt>::new (declval&lt;void*&gt;()) T(declval&lt;Args&gt;()...)</tt> is well-formed
when treated as an unevaluated operand (<sref ref="[expr.context]"/>) <ins>and <tt>is_unbounded_array_v&lt;T&gt;</tt> is 
<tt>false</tt></ins>.
<p/>
-2- <i>Effects:</i> Equivalent to:
</p>
<blockquote><pre>
<del>return</del><ins>auto ptr =</ins> ::new (<i>voidify</i>(*location)) T(std::forward&lt;Args&gt;(args)...);
<ins>if constexpr (is_array_v&lt;T&gt;)
  return launder(location);
else
  return ptr;</ins>
</pre></blockquote>
</blockquote>
</blockquote>
</li>
</ol>
</superseded>

<note>2024-03-18; Jonathan provides new wording</note>
<p>
During Core review in Varna, Hubert suggested creating `T[1]` for the array case.
</p>

<superseded>
<p>
This wording is relative to <paper num="N4971"/>.
</p>

<ol>
<li><p>Modify <sref ref="[specialized.construct]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class T, class... Args&gt;
  constexpr T* construct_at(T* location, Args&amp;&amp;... args);

namespace ranges {
  template&lt;class T, class... Args&gt;
    constexpr T* construct_at(T* location, Args&amp;&amp;... args);
}
</pre>
<blockquote>
<p>
-1- <i>Constraints:</i>
<ins><tt>is_unbounded_array_v&lt;T&gt;</tt> is <tt>false</tt>.</ins>
The expression <tt>::new (declval&lt;void*&gt;()) T(declval&lt;Args&gt;()...)</tt> is well-formed
when treated as an unevaluated operand (<sref ref="[expr.context]"/>).
<p/>
-2- <i>Effects:</i> Equivalent to:
</p>
<blockquote><pre>
<ins>if constexpr (is_array_v&lt;T&gt;)
  return ::new (<i>voidify</i>(*location)) T[1]{{std::forward&lt;Args&gt;(args)...}};
else</ins>
  return ::new (<i>voidify</i>(*location)) T(std::forward&lt;Args&gt;(args)...);
</pre></blockquote>
</blockquote>
</blockquote>
</li>
</ol>
</superseded>

<note>St. Louis 2024-06-24; Jonathan provides improved wording</note>
<p>
Why not support unbounded arrays, deducing the bound from `sizeof...(Args)`?
<br/>
JW: There's no motivation to support that here in `construct_at`.
It isn't possible to create unbounded arrays via allocators,
nor via any of the `uninitialized_xxx` algorithms. Extending `construct_at`
that way seems like a design change, not restoring support for something
that used to work with allocators and then got broken in C++20.
</p>
<p>
Tim observed that the proposed resolution is ill-formed if `T` has an
explicit default constructor. Value-initialization would work for that case,
and there seems to be little motivation for supplying arguments to
initialize the array. In C++17 the `allocator_traits::construct` case only
supported value-initialization.
</p>

<note>St. Louis 2024-06-24; move to Ready.</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4981"/>.
</p>

<ol>
<li><p>Modify <sref ref="[specialized.construct]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class T, class... Args&gt;
  constexpr T* construct_at(T* location, Args&amp;&amp;... args);

namespace ranges {
  template&lt;class T, class... Args&gt;
    constexpr T* construct_at(T* location, Args&amp;&amp;... args);
}
</pre>
<blockquote>
<p>
-1- <i>Constraints:</i>
<ins><tt>is_unbounded_array_v&lt;T&gt;</tt> is <tt>false</tt>.</ins>
The expression <tt>::new (declval&lt;void*&gt;()) T(declval&lt;Args&gt;()...)</tt> is well-formed
when treated as an unevaluated operand (<sref ref="[expr.context]"/>).
</p>
<p>
<ins>-?- <i>Mandates</i>:
If <code>is_array_v&lt;T&gt;</code> is `true`, `sizeof...(Args)` is zero.
</ins>
</p>
<p>
-2- <i>Effects:</i> Equivalent to:
</p>
<blockquote><pre>
<ins>if constexpr (is_array_v&lt;T&gt;)
  return ::new (<i>voidify</i>(*location)) T[1]();
else</ins>
  return ::new (<i>voidify</i>(*location)) T(std::forward&lt;Args&gt;(args)...);
</pre></blockquote>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>
</issue>
