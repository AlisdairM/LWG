<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4060" status="Voting">
<title><tt>submdspan</tt> preconditions do not forbid creating invalid pointer</title>
<section><sref ref="[mdspan.sub.sub]"/></section>
<submitter>Mark Hoemmen</submitter>
<date>26 Mar 2024</date>
<priority>99</priority>

<discussion>
<p>
Oliver Lee and Ryan Wooster pointed out to us that creating a <tt>submdspan</tt> with zero-length 
<tt><i>tuple-like</i></tt> or <tt>strided_slice</tt> slice specifiers at the upper extent can cause 
the Standard <tt>submdspan_mapping</tt> overloads to access the input <tt>mdspan</tt>'s mapping 
out of bounds.
This happens in the following line of specification (<sref ref="[mdspan.sub.map]"/> p8 in
<paper num="N4971"/> moved to [mdspan.sub.map.common] p8 <b>after</b> the merge of
<paper num="P2642R6"/>).
</p>
<blockquote style="border-left: 3px solid #ccc;padding-left: 15px;">
<p>
Let <tt>offset</tt> be a value of type <tt>size_t</tt> equal to <tt>(*this)(<i>first_</i>&lt;index_type, P&gt;(slices...)...)</tt>.
</p>
</blockquote>
<p>
If <tt>data_handle_type</tt> is a pointer to an array, then the resulting offset can be larger than 
<tt>required_span_size()</tt>, thus making the pointer invalid (not just one past the end). In a 
constexpr context, the result is ill-formed. With the <a href="https://github.com/kokkos/mdspan">reference 
<tt>mdspan</tt> implementation</a>, Clang can actually report a build error (e.g., for out-of-bounds access 
to a <tt>std::array</tt>). The contributed example illustrates this.
<p/>
Oliver and Ryan offer the following example and analysis:
</p>
<blockquote style="border-left: 3px solid #ccc;padding-left: 15px;">
<p>
Example 1:
</p>
<blockquote><pre>
auto x = std::array&lt;int, 3&gt;{};
auto A = mdspan{x.data(), extents{3}}; 
auto B = submdspan(A, pair{3, 3});
</pre></blockquote>
<p>
B is an <tt>mdspan</tt> with zero elements.
<p/>
Example 2:
</p>
<blockquote><pre>
auto y = std::array&lt;int, 9&gt;{};
auto C = mdspan{y.data(), extents{3, 3}}; 
auto D = submdspan(C, pair{3, 3}, pair{3, 3});
</pre></blockquote>
<p>
A precondition for each slice specifier is (<sref ref="[mdspan.submdspan.extents]"/>):
</p>
<blockquote><pre>
0 &le; <i>first_</i>&lt;index_type, <i>k</i>&gt;(slices...) &le; <i>last_</i>&lt;<i>k</i>&gt;(src.extents(), slices...) &le; src.extent(<i>k</i>).
</pre></blockquote>
<p>
Our understanding is that precondition is satisfied. In the second example, <tt><i>first_</i>&lt;0&gt;</tt> 
is 3 and <tt><i>first_</i>&lt;1&gt;</tt> is also 3.
<p/>
However, the submapping offset is defined as <tt>(*this)(<i>first_</i>&lt;index_type, P&gt;(slices...)...)</tt>, 
which then can result in an invalid data handle of the <tt>submdspan</tt>, even if the data handle is never 
accessed/dereferenced.
<p/>
<a href="https://godbolt.org/z/zaMTbMEK7">godbolt demo</a>
</p>
</blockquote>
<p>
We expect this situation to come up in practice.
<p/>
Suppose we have an <tt>N x N</tt> mdspan representing a matrix <tt>A</tt>, and we want to partition it 
into a <tt>2 x 2</tt> "matrix of matrices" (also called a "block matrix"). This partitioning is a 
common operation in linear algebra algorithms such as matrix factorizations.  
Examples of this <tt>2 x 2</tt> partitioning appear in <paper num="P2642"/> and <paper num="P1673"/>.
</p>
<blockquote><pre>
mdspan A{A_ptr, N, N};

size_t p = partition_point(N); // <i>integer in 0, 1, &hellip;, N (inclusive)</i>
auto A_00 = submdspan(A, tuple{0, p}, tuple{0, p});
auto A_10 = submdspan(A, tuple{p, N}, tuple{0, 0});
auto A_01 = submdspan(A, tuple{0, p}, tuple{p, N});
auto A_11 = submdspan(A, tuple{p, N}, tuple{p, N});
</pre></blockquote>
<p>
Table illustrating the resulting <tt>2 x 2</tt> block matrix follows:
</p>
<table border="1">
<tr>
  <td><tt>A_00</tt></td>
  <td><tt>A_01</tt></td>
</tr>
<tr>
  <td><tt>A_10</tt></td>
  <td><tt>A_11</tt></td>
</tr>
</table> 
<p>
It's valid for <tt>p</tt> to be <tt>0</tt>. That makes every block but <tt>A_11</tt> have zero size.
Thus, it should also be valid for <tt>p</tt> to be <tt>N</tt>. That makes every block but 
<tt>A_00</tt> have zero size. However, that leads to the aforementioned UB.
<p/>
It doesn't make sense to change <tt><i>first_</i></tt> or <tt><i>last_</i></tt>. The definitions of 
<tt><i>first_</i></tt> and <tt><i>last_</i></tt> are meant to turn the slice specifier into a pair of bounds.
Since <tt>submdspan(A, tuple{p, N}, tuple{p, N})</tt> is valid even if <tt>p</tt> equals <tt>N</tt>,
then that strongly suggests that <tt><i>first_</i>&lt;0&gt;</tt> and <tt><i>first_</i>&lt;1&gt;</tt> 
should always be <tt>p</tt>, even if <tt>p</tt> equals <tt>N</tt>.
<p/>
As a result, we find ourselves needing to change <tt>submdspan_mapping</tt>. This will affect both 
the Standard <tt>submdspan_mapping</tt> overloads, and any custom (user-defined) overloads.
</p>

<note>2024-05-08; Reflector poll</note>
<p>
Set status to Tentatively Ready after five votes in favour during reflector poll.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4971"/> <b>after</b> the merge of <paper num="P2642R6"/>.
</p>

<ol>
<li><p>Modify the new <sref ref="[mdspan.sub.map.common]"/> as indicated:</p>

<blockquote>
<p>
-8- <ins>If <tt><i>first_</i>&lt;index_type, <i>k</i>&gt;(slices...)</tt> equals <tt>extents().extent(<i>k</i>)</tt> 
for any rank index <tt><i>k</i></tt> of <tt>extents()</tt>, then l</ins><del>L</del>et <tt>offset</tt> be 
a value of type <tt>size_t</tt> equal to <ins><tt>(*this).required_span_size()</tt>. Otherwise, let 
<tt>offset</tt> be a value of type <tt>size_t</tt> equal to</ins> 
<tt>(*this)(<i>first_</i>&lt;index_type, P&gt;(slices...)...)</tt>.
</p>
</blockquote>
</li>

<li><p>Modify <sref ref="[mdspan.sub.sub]"/> as indicated:</p>

<blockquote class="note">
<p>
As a drive-by readability fix, we also propose changing a variable name in paragraph 6
as indicated below.
</p>
</blockquote>

<blockquote>
<pre>
template&lt;class ElementType, class Extents, class LayoutPolicy,
         class AccessorPolicy, class... SliceSpecifiers&gt;
  constexpr auto submdspan(
    const mdspan&lt;ElementType, Extents, LayoutPolicy, AccessorPolicy&gt;&amp; src,
    SliceSpecifiers... slices) -&gt; <i>see below</i>;
</pre>
<blockquote>
<p>
-1- Let <tt>index_type</tt> be <tt>typename Extents::index_type</tt>.
<p/>
-2- Let <tt>sub_map_offset</tt> be the result of <tt>submdspan_mapping(src.mapping(), slices...)</tt>.
<p/>
[&hellip;]
<p/>
-3- <i>Constraints</i>: [&hellip;]
<p/>
-4- <i>Mandates</i>: [&hellip;]
<p/>
-5-<i>Preconditions</i>: [&hellip;]
<p/>
-6- <i>Effects</i>: Equivalent to:
</p>
<blockquote><pre>
auto sub_map_<ins>result</ins><del>offset</del> = submdspan_mapping(src.mapping(), slices...);
return mdspan(src.accessor().offset(src.data(), sub_map_<ins>result</ins><del>offset</del>.offset),
              sub_map_<ins>result</ins><del>offset</del>.mapping,
              AccessorPolicy::offset_policy(src.accessor()));
</pre></blockquote>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
