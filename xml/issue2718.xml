<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2718" status="Immediate">
<title>Parallelism bug in [algorithms.parallel.exec] p2</title>
<section><sref ref="[algorithms.parallel.exec]"/></section>
<submitter>Jared Hoberock</submitter>
<date>25 May 2016</date>
<priority>99</priority>

<discussion>
<p>
The paragraph describing the effect of composing <tt>sequential_execution_policy</tt> with parallel algorithms says:
</p>
<blockquote class="note">
<p>
The invocations of element access functions in parallel algorithms invoked with an execution policy object of
type <tt>sequential_execution_policy</tt> are indeterminately sequenced (1.9) in the calling thread.
</p>
</blockquote>
<p>
The intended behavior of <tt>sequential_execution_policy</tt> is to match the classic-style algorithm semantics, cf. 
<sref ref="[algorithms.parallel.overloads]"/> p2:
</p>
<blockquote class="note">
<p>
Unless otherwise specified, the semantics of <tt>ExecutionPolicy</tt> algorithm overloads are identical to their
overloads without.
</p>
</blockquote>
<p>
Because many classic-style algorithms execute element access functions in a specified sequence, 
<sref ref="[algorithms.parallel.exec]"/> p2 introduces unintentionally different semantics between classic-style 
algorithms and parallel algorithms invoked with <tt>sequential_execution_policy</tt>.
<p/>
The unintentional change to <sref ref="[algorithms.parallel.exec]"/> p2 was introduced in the revision from P0024R1 
to P0024R0 when the wording was changed from
</p>
<blockquote class="note">
<p>
The invocations of element access functions in parallel algorithms
invoked with an execution policy object of type <tt>sequential_execution_policy</tt>
<em>execute in sequential order</em> in the calling thread.
</p>
</blockquote>
<p>
to
</p>
<blockquote class="note">
<p>
The invocations of element access functions in parallel algorithms
invoked with an execution policy object of type <tt>sequential_execution_policy</tt>
<em>are indeterminately sequenced (1.9)</em> in the calling thread.
</p>
</blockquote>
<p>
Suggested resolution:
<p/>
To restore the originally intended behavior of <tt>sequential_execution_policy</tt>, Jens Maurer suggests 
replacing <sref ref="[algorithms.parallel.exec]"/> p2 with:
</p>
<blockquote>
<p>
The invocations of element access functions in parallel algorithms
invoked with an execution policy object of type <tt>sequential_execution_policy</tt>
all occur in the calling thread.
[<i>Note:</i> The invocations are not interleaved; see <sref ref="[intro.execution]"/> &mdash; <i>end note</i>]
</p>
</blockquote>
<note>2016-06 Oulu</note>
<p>Could be P0 after SG1 gives OK</p>
<p>Tuesday, Oulu: Hans Ok'd this</p>
<p>Friday: status to Immediate</p>
</discussion>

<resolution>
<p>This wording is relative to N4582.</p>
<ol>
<li><p>Change <sref ref="[algorithms.parallel.exec]"/> as indicated:</p>

<blockquote>
<p>
The invocations of element access functions in parallel algorithms invoked with an execution policy object of
type <tt>sequential_execution_policy</tt> <ins>all occur</ins><del>are indeterminately sequenced (1.9)</del> 
in the calling thread. <ins>[<i>Note:</i> The invocations are not interleaved; see 
<sref ref="[intro.execution]"/> &mdash; <i>end note</i>]</ins>
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
