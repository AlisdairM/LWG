<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3331" status="Ready">
<title>Define totally_ordered/_with in terms of partially-ordered-with</title>
<section><sref ref="[concept.totallyordered]"/></section>
<submitter>Great Britain</submitter>
<date>08 Nov 2019</date>
<priority>0</priority>

<discussion>
<p><b>Addresses <a href="https://github.com/cplusplus/nbballot/issues/200">GB 202</a></b></p>

<p>
Define <tt>totally_ordered[_with]</tt>
in terms of <i><tt>partially-ordered-with</tt></i>.
This will simplify the definition of both concepts
(particularly <tt>totally_ordered_with</tt>), and
make them in-line with <tt>equality_comparable[_with]</tt>.
Now that we've defined <i><tt>partially-ordered-with</tt></i>
for <sref ref="[cmp.concept]"/>, we should consider
utilising it in as many locations as possible.
</p><p>
Proposed change:
</p><p>
<pre>
template&lt;class T&gt;
  concept totally_ordered =
    equality_comparable&lt;T&gt; &amp;&amp;
    <i>partially-ordered-with</i>&lt;T, T&gt;;

template&lt;class T, class U&gt;
  concept totally_ordered_with =
    totally_ordered&lt;T&gt; &amp;&amp;
    totally_ordered&lt;U&gt; &amp;&amp;
    common_reference_with&lt;
      const remove_reference_t&lt;T&gt;&amp;,
      const remove_reference_t&lt;U&gt;&amp;&gt; &amp;&amp;
    totally_ordered&lt;
      common_reference_t&lt;
        const remove_reference_t&lt;T&gt;&amp;,
        const remove_reference_t&lt;U&gt;&amp;&gt;&gt; &amp;&amp;
    equality_comparable_with&lt;T, U&gt; &amp;&amp;
    <i>partially-ordered-with</i>&lt;T, U&gt;;
</pre>
</p><p>
LWG discussion in Belfast notes that <iref ref="3329"/>
also touches the definition of <tt>totally_ordered_with</tt>;
the two sets of changes are consistent.
</p>
<note>2019-11 Status to Ready Friday afternoon LWG in Belfast</note>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4835">N4835</a>.</p>

<ol>
<li><p>Change <sref ref="[concept.totallyordered]"/> as follows:</p>
<blockquote><pre>
template&lt;class T&gt;
  concept totally_ordered =
    equality_comparable&lt;T&gt; &amp;&amp; <ins><i>partially-ordered-with</i>&lt;T, T&gt;;</ins>
    <del>requires(const remove_reference_t&lt;T&gt;&amp; a,</del>
             <del>const remove_reference_t&lt;T&gt;&amp; b) {</del>
      <del>{ a &lt;  b } -&gt; boolean;</del>
      <del>{ a &gt;  b } -&gt; boolean;</del>
      <del>{ a &lt;= b } -&gt; boolean;</del>
      <del>{ a &gt;= b } -&gt; boolean;</del>
    <del>};</del>
</pre><p>
-1- For some type <tt>T</tt>, let <tt>a</tt>, <tt>b</tt>, and <tt>c</tt>
be lvalues of type <tt>const remove_reference_t&lt;T&gt;</tt>.
<tt>T</tt> models <tt>totally_ordered</tt> only if
</p><p>
(1.1) &mdash; Exactly one of <tt>bool(a &lt; b)</tt>, <tt>bool(a &gt; b)</tt>,
or <tt>bool(a == b)</tt> is <tt>true</tt>.
</p><p>
(1.2) &mdash; If <tt>bool(a &lt; b)</tt> and <tt>bool(b &lt; c)</tt>,
then <tt>bool(a &lt; c)</tt>.
</p><p>
<del>(1.3) &mdash; <tt>bool(a &gt; b) == bool(b &lt; a)</tt>.</del>
</p><p>
(1.4) &mdash; <tt>bool(a &lt;= b) == !bool(b &lt; a)</tt>.
</p><p>
(1.5) &mdash; <tt>bool(a &gt;= b) == !bool(a &lt; b)</tt>.
</p><pre>
template&lt;class T, class U&gt;
  concept totally_ordered_with =
    totally_ordered&lt;T&gt; &amp;&amp; totally_ordered&lt;U&gt; &amp;&amp;
    common_reference_with&lt;const remove_reference_t&lt;T&gt;&amp;, const remove_reference_t&lt;U&gt;&amp;&gt; &amp;&amp;
    totally_ordered&lt;
      common_reference_t&lt;
        const remove_reference_t&lt;T&gt;&amp;,
        const remove_reference_t&lt;U&gt;&amp;&gt;&gt; &amp;&amp;
      equality_comparable_with&lt;T, U&gt; &amp;&amp;
      <ins><i>partially-ordered-with</i>&lt;T, U&gt;;</ins>
      <del>requires(const remove_reference_t&lt;T&gt;&amp; t,</del>
               <del>const remove_reference_t&lt;U&gt;&amp; u) {</del>
        <del>{ t &lt;  u } -&gt; boolean;</del>
        <del>{ t &gt;  u } -&gt; boolean;</del>
        <del>{ t &lt;= u } -&gt; boolean;</del>
        <del>{ t &gt;= u } -&gt; boolean;</del>
        <del>{ u &lt;  t } -&gt; boolean;</del>
        <del>{ u &gt;  t } -&gt; boolean;</del>
        <del>{ u &lt;= t } -&gt; boolean;</del>
        <del>{ u &gt;= t } -&gt; boolean;</del>
      <del>};</del>
</pre><p>
[&hellip;]
</p>
</blockquote>
</li>
</ol>
</resolution>
</issue>
