<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3361" status="Voting">
<title><tt>safe_range&lt;<i>SomeRange</i>&amp;></tt> case</title>
<section><sref ref="[range.range]"/></section>
<submitter>Johel Ernesto Guerrero Pe&ntilde;a</submitter>
<date>19 Dec 2019</date>
<priority>3</priority>

<discussion>
<p>
<sref ref="[range.dangling]"/> p2 hints at how <tt>safe_range</tt> should allow lvalue ranges to model it.
However, its wording doesn't take into account that case.
</p>

<note>2020-01 Priority set to 3 after review on the reflector.</note>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>This wording is relative to <a href="https://wg21.link/n4842">N4842</a>.</p>

<ol>
<li><p>Modify <sref ref="[range.range]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class T&gt;
  concept safe_range =
    range&lt;T&gt; &amp;&amp;
      (is_lvalue_reference_v&lt;T&gt; || enable_safe_range&lt;remove_cvref_t&lt;T&gt;&gt;);
</pre>
<blockquote>
<p>
-5- <del>Given an expression <tt>E</tt> such that <tt>decltype((E))</tt> is <tt>T</tt>,</del><ins>A type</ins>
<tt>T</tt> models <tt>safe_range</tt> <del>only</del> <ins>if:</ins>
<ol style="list-style-type: none">
<li><p><ins>(5.1) &mdash; <tt>is_lvalue_reference_v&lt;T&gt;</tt> is <tt>true</tt>, or</ins></p></li>
<li><p><ins>(5.2) &mdash; given an expression <tt>E</tt> such that <tt>decltype((E))</tt> is <tt>T</tt>,</ins>
<del>if</del> the validity of iterators obtained from the object denoted by <tt>E</tt> is not tied to the lifetime of
that object.</p></li>
</ol>
<p/>
-6- [<i>Note:</i> <del>Since the validity of iterators is not tied to the lifetime of an object
whose type models <tt>safe_range</tt>, a</del><ins>A</ins> function can accept arguments of <del>such</del> a
type <ins>that models <tt>safe_range</tt></ins> <del>by value</del> and return iterators obtained from it
without danger of dangling. &mdash; <i>end note</i>]
</p>
</blockquote>
</blockquote>
</li>
</ol>
</blockquote>

<note>2021-05-19 Tim updates wording</note>
<p>
The new wording below attempts to keep the "borrowed" property generally
applicable to all models of <tt>borrowed_range</tt>, instead of bluntly carving
out lvalue reference types.
</p>

<note>2021-09-20; Reflector poll</note>
<p>
Set status to Tentatively Ready after five votes in favour during reflector poll in June.
</p>

</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4885">N4885</a>.</p>

<ol>
<li><p>Modify <sref ref="[range.range]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class T&gt;
  concept borrowed_range =
    range&lt;T&gt; &amp;&amp;
      (is_lvalue_reference_v&lt;T&gt; || enable_borrowed_range&lt;remove_cvref_t&lt;T&gt;&gt;);
</pre>
<blockquote>
<p>
-5- <ins>Let <tt>U</tt> be <tt>remove_reference_t&lt;T&gt;</tt> if <tt>T</tt>
is an rvalue reference type, and <tt>T</tt> otherwise.</ins>
Given <del>an expression <tt>E</tt> such that <tt>decltype((E))</tt> is <tt>T</tt></del>
<ins>a variable <tt>u</tt> of type <tt>U</tt></ins>,
<tt>T</tt> models <tt>borrowed_range</tt> only if the validity of iterators
obtained from <del>the object denoted by <tt>E</tt></del> <ins>u</ins> is not tied
to the lifetime of that <del>object</del> <ins>variable</ins>.
<p/>
-6- [<i>Note:</i> Since the validity of iterators is not tied to the lifetime of
<del>an object</del><ins>a variable</ins> whose type models <tt>borrowed_range</tt>,
a function <del>can accept arguments of</del> <ins>with a parameter of</ins>
such a type <del>by value and</del> <ins>can</ins> return iterators
obtained from it without danger of dangling.
&mdash; <i>end note</i>]
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>
</issue>
