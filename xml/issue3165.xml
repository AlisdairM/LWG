<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3165" status="NAD">
<title>All <tt>starts_with()</tt> overloads should be called "<tt>begins_with</tt>"</title>
<section><sref ref="[basic.string]"/><sref ref="[string.view.template]"/></section>
<submitter>Gennaro Prota</submitter>
<date>22 Oct 2018</date>
<priority>2</priority>

<discussion>
<p>
Throughout the standard library, the opposite of the verb "to end" is "to begin", not to "to start". In this 
respect, all the overloads of <tt>std::basic_string::starts_with</tt> and <tt>std::basic_string_view::starts_with</tt> 
are named inconsistently. These calls were added in <a href="https://wg21.link/p0457r2">P0457R2</a>, which refers 
to analogous functions in Java, Python, Qt, LLVM, WebKit, all of which use the term "start". But, in our opinion, 
the C++ standard library should first be consistent with itself. 
</p>

<note>2018-11: Referred to LEWG after reflector discussion.</note>

<note>2020-05-28; LEWG issue reviewing</note>
<p>
LEWG issue processing voted to reject 3165 as NAD. Status change to Open.
</p>
<blockquote>
<pre>
Reject LWG3165 as NAD

SF F N A SA
21 1 0 1  0
</pre>
</blockquote>

<note>2020-08-21; Issue processing telecon: moved to NAD based on LEWG recommendation</note>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4778">N4778</a>.</p>

<ol>
<li><p>Change <sref ref="[basic.string]"/>, class template <tt>basic_string</tt> synopsis, as indicated:</p>
<blockquote>
<pre>
bool <ins>begin</ins><del>start</del>s_with(basic_string_view&lt;charT, traits&gt; x) const noexcept;
bool <ins>begin</ins><del>start</del>s_with(charT x) const noexcept;
bool <ins>begin</ins><del>start</del>s_with(const charT* x) const;
</pre>
</blockquote>
</li>

<li><p>Change <sref ref="[string.starts.with]"/> as indicated</p>
<blockquote>
<pre>
bool <ins>begin</ins><del>start</del>s_with(basic_string_view&lt;charT, traits&gt; x) const noexcept;
bool <ins>begin</ins><del>start</del>s_with(charT x) const noexcept;
bool <ins>begin</ins><del>start</del>s_with(const charT* x) const;
</pre>
<blockquote>
<p>
-1- <i>Effects:</i> Equivalent to:
</p>
<pre>
return basic_string_view&lt;charT, traits&gt;(data(), size()).<ins>begin</ins><del>start</del>s_with(x);
</pre>
</blockquote>
</blockquote>
</li>

<li><p>Change <sref ref="[string.view.template]"/>, class template <tt>basic_string_view</tt> synopsis, as indicated:</p>
<blockquote>
<pre>
constexpr bool <ins>begin</ins><del>start</del>s_with(basic_string_view x) const noexcept;
constexpr bool <ins>begin</ins><del>start</del>s_with(charT x) const noexcept;
constexpr bool <ins>begin</ins><del>start</del>s_with(const charT* x) const;
</pre>
</blockquote>
</li>

<li><p>Change <sref ref="[string.view.ops]"/> as indicated:</p>
<blockquote>
<pre>
constexpr bool <ins>begin</ins><del>start</del>s_with(basic_string_view x) const noexcept;
</pre>
<blockquote>
<p>
-20- <i>Effects:</i> Equivalent to: <tt>return compare(0, npos, x) == 0;</tt>
</p>
</blockquote>
<pre>
constexpr bool <ins>begin</ins><del>start</del>s_with(charT x) const noexcept;
</pre>
<blockquote>
<p>
-21- <i>Effects:</i> Equivalent to: <tt>return <ins>begin</ins><del>start</del>s_with(basic_string_view(&amp;x, 1));</tt>
</p>
</blockquote>
<pre>
constexpr bool <ins>begin</ins><del>start</del>s_with(const charT* x) const;
</pre>
<blockquote>
<p>
-22- <i>Effects:</i> Equivalent to: <tt>return <ins>begin</ins><del>start</del>s_with(basic_string_view(x));</tt>
</p>
</blockquote>
</blockquote>
</li>
</ol>

</resolution>

</issue>
