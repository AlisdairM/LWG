<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3435" status="New">
<title><tt>three_way_comparable_with&lt;reverse_iterator&lt;int*&gt;, reverse_iterator&lt;const int*&gt;&gt;</tt></title>
<section><sref ref="[reverse.iter.cons]"/></section>
<submitter>Casey Carter</submitter>
<date>26 Apr 2020</date>
<priority>99</priority>

<discussion>
<p>
Despite that <tt>reverse_iterator&lt;int*&gt;</tt> and <tt>reverse_iterator&lt;const int*&gt;</tt> are comparable with 
<tt>&lt;=&gt;</tt>, <tt>three_way_comparable_with&lt;reverse_iterator&lt;int*&gt;, reverse_iterator&lt;const int*&gt;&gt;</tt> 
is <tt>false</tt>. This unfortunate state of affairs results from the absence of constraints on <tt>reverse_iterator</tt>'s 
converting constructor: both <tt>convertible_to&lt;reverse_iterator&lt;int*&gt;, reverse_iterator&lt;const int*&gt;&gt;</tt>
and <tt>convertible_to&lt;reverse_iterator&lt;const int*&gt;, reverse_iterator&lt;int*&gt;&gt;</tt> evaluate to <tt>true</tt>, 
despite that <tt>reverse_iterator&lt;int*&gt;</tt>'s converting constructor template is ill-formed when instantiated 
for <tt>reverse_iterator&lt;const int*&gt;</tt>. This apparent bi-convertibility results in ambiguity when trying to 
determine <tt>common_reference_t&lt;const reverse_iterator&lt;int*&gt;&amp;, const reverse_iterator&lt;const int*&gt;&amp;&gt;</tt>, 
causing the <tt>common_reference</tt> requirement in <tt>three_way_comparable_with</tt> to fail.
<p/>
I think we should correct this by constraining <tt>reverse_iterator</tt>'s conversion constructor (and converting 
assignment operator, while we're here) correctly so we can use the concept to determine when it's ok to compare 
specializations of <tt>reverse_iterator</tt> with <tt>&lt;=&gt;</tt>.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <a href="http://wg21.link/n4861">N4861</a>.
</p>

<ol>
<li><p>Modify <sref ref="[reverse.iter.cons]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class U&gt; constexpr reverse_iterator(const reverse_iterator&lt;U&gt;&amp; u);
</pre>
<blockquote>
<p>
<ins>-?- <i>Constraints:</i> <tt>is_same_v&lt;U, Iterator&gt;</tt> is <tt>false</tt> and 
<tt>const U&amp;</tt> models <tt>convertible_to&lt;Iterator&gt;</tt>.</ins>
<p/>
-3- <i>Effects:</i> Initializes <tt>current</tt> with <tt>u.current</tt>.
</p>
</blockquote>
<pre>
template&lt;class U&gt;
  constexpr reverse_iterator&amp;
    operator=(const reverse_iterator&lt;U&gt;&amp; u);
</pre>
<blockquote>
<p>
<ins>-?- <i>Constraints:</i> <tt>is_same_v&lt;U, Iterator&gt;</tt> is <tt>false</tt>, 
<tt>const U&amp;</tt> models <tt>convertible_to&lt;Iterator&gt;</tt>, and 
<tt>assignable_from&lt;Iterator&amp;, const U&amp;&gt;</tt> is modeled.</ins>
<p/>
-4- <i>Effects:</i> Assigns <tt>u.<ins>current</ins><del>base()</del></tt> to <tt>current</tt>.
<p/>
-5- <i>Returns:</i> <tt>*this</tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>
</issue>
