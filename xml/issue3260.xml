<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3260" status="New">
<title><tt>year_month*</tt> arithmetic rejects durations convertible to years</title>
<section><sref ref="[time.cal]"/></section>
<submitter>Tomasz Kami&nacute;ski</submitter>
<date>15 Aug 2019</date>
<priority>2</priority>

<discussion>
<p>
Currently, the <tt>year_month*</tt> types (<tt>year_month</tt>,
<tt>year_month_day</tt>) provide separate arithmetic operators with
duration type of <tt>years</tt> or <tt>months</tt>. This is an intentional
optimization that avoids performing modulo arithmetic in the former case.
<p/>
However, these make the arithmetic of <code>year_month*</code> types
with durations that are convertible to <code>years</code> (and by
consequence to <code>months</code>) ambiguous. For example, the following
code is ambiguous:
</p>
<blockquote>
<pre>
using decades = duration&lt;int, ratio_multiply&lt;ratio&lt;10&gt;, years::period&gt;&gt;;
auto ymd = 2001y/January/1d;
ymd += decades(1); // <span style="color:#C80000;font-weight:bold">error, ambiguous</span>
</pre>
</blockquote>
<p>
while less usual durations that are only convertible to <tt>months</tt> work correctly:
</p>
<blockquote>
<pre>
using decamonths = duration&lt;int, ratio_multiply&lt;ratio&lt;10&gt;, months::period&gt;&gt;;
auto ymd = 2001y/January/1d;
ymd += decamonths(1);
</pre>
</blockquote>
<p>
The example implementation resolves the issues by making sure that the
<tt>years</tt> overload will be preferred in case of ambiguity, by declaring the
<tt>months</tt> overload a function template with a default argument for its parameter
(suggested by Tim Song):
</p>
<blockquote>
<pre>
<ins>template&lt;class = <em>unspecified</em>&gt;</ins>
constexpr year_month_weekday&amp; operator+=(const months&amp; m) noexcept;
constexpr year_month_weekday&amp; operator+=(const years&amp; m) noexcept;
</pre>
</blockquote>

<note>2019-09-14 Priority set to 2 based on reflector discussion</note>

<note>2019-09-14; Tomasz and Howard provide concrete wording</note>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4830">N4830</a>.</p>

<blockquote class="note">
<p>
[<i>Drafting note:</i> Suggested wording below assumes that we can add a <i>Constraints:</i> to a 
signature where the constraint does not apply to a deduced template. We have examples of such 
constraints in other parts of the WD (e.g. <sref ref="[unique.ptr.single.ctor]"/>/p15, 
<sref ref="[unique.ptr.single.asgn]"/>/p1). And we have the old form "does not participate &hellip;" 
being used for non-deduced templates in several places as well (e.g. <sref ref="[pairs.pair]"/>/p5).
<p/>
There are several ways of implementing such a constraint, such as adding a gratuitous template 
parameter.]
</p>
</blockquote>

<ol>
<li><p>Modify <sref ref="[time.cal.ym.members]"/> as indicated:</p>

<blockquote>
<pre>
constexpr year_month&amp; operator+=(const months&amp; dm) noexcept;
</pre>
<blockquote>
<p>
<ins>-?- <i>Constraints:</i> The argument supplied by the caller for the <tt>months</tt> 
parameter is not implicitly convertible to <tt>years</tt>.</ins>
<p/>
-4- <i>Effects:</i> <tt>*this = *this + dm</tt>.
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
constexpr year_month&amp; operator-=(const months&amp; dm) noexcept;
</pre>
<blockquote>
<p>
<ins>-?- <i>Constraints:</i> The argument supplied by the caller for the <tt>months</tt> 
parameter is not implicitly convertible to <tt>years</tt>.</ins>
<p/>
-6- <i>Effects:</i> <tt>*this = *this - dm</tt>.
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[time.cal.ym.nonmembers]"/> as indicated:</p>

<blockquote>
<pre>
constexpr year_month operator+(const year_month&amp; ym, const months&amp; dm) noexcept;
</pre>
<blockquote>
<p>
<ins>-?- <i>Constraints:</i> The argument supplied by the caller for the <tt>months</tt> 
parameter is not implicitly convertible to <tt>years</tt>.</ins>
<p/>
-3- <i>Returns:</i> A <tt>year_month</tt> value <tt>z</tt> such that <tt>z - ym == dm</tt>.
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
constexpr year_month operator+(const months&amp; dm, const year_month&amp; ym) noexcept;
</pre>
<blockquote>
<p>
<ins>-?- <i>Constraints:</i> The argument supplied by the caller for the <tt>months</tt> 
parameter is not implicitly convertible to <tt>years</tt>.</ins>
<p/>
-5- <i>Returns:</i> <tt>ym + dm</tt>.
</p>
</blockquote>
<pre>
constexpr year_month operator-(const year_month&amp; ym, const months&amp; dm) noexcept;
</pre>
<blockquote>
<p>
<ins>-?- <i>Constraints:</i> The argument supplied by the caller for the <tt>months</tt> 
parameter is not implicitly convertible to <tt>years</tt>.</ins>
<p/>
-6- <i>Returns:</i> <tt>ym + -dm</tt>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[time.cal.ymd.members]"/> as indicated:</p>

<blockquote>
<pre>
constexpr year_month_day&amp; operator+=(const months&amp; m) noexcept;
</pre>
<blockquote>
<p>
<ins>-?- <i>Constraints:</i> The argument supplied by the caller for the <tt>months</tt> 
parameter is not implicitly convertible to <tt>years</tt>.</ins>
<p/>
-7- <i>Effects:</i> <tt>*this = *this + m</tt>.
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
constexpr year_month_day&amp; operator-=(const months&amp; m) noexcept;
</pre>
<blockquote>
<p>
<ins>-?- <i>Constraints:</i> The argument supplied by the caller for the <tt>months</tt> 
parameter is not implicitly convertible to <tt>years</tt>.</ins>
<p/>
-9- <i>Effects:</i> <tt>*this = *this - m</tt>.
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[time.cal.ymd.nonmembers]"/> as indicated:</p>
<blockquote>
<pre>
constexpr year_month_day operator+(const year_month_day&amp; ymd, const months&amp; dm) noexcept;
</pre>
<blockquote>
<p>
<ins>-?- <i>Constraints:</i> The argument supplied by the caller for the <tt>months</tt> 
parameter is not implicitly convertible to <tt>years</tt>.</ins>
<p/>
-3- <i>Returns:</i> <tt>(ymd.year() / ymd.month() + dm) / ymd.day()</tt>.
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
constexpr year_month_day operator+(const months&amp; dm, const year_month_day&amp; ymd) noexcept;
</pre>
<blockquote>
<p>
<ins>-?- <i>Constraints:</i> The argument supplied by the caller for the <tt>months</tt> 
parameter is not implicitly convertible to <tt>years</tt>.</ins>
<p/>
-5- <i>Returns:</i> <tt>ymd + dm</tt>.
</p>
</blockquote>
<pre>
constexpr year_month_day operator+(const months&amp; dm, const year_month_day&amp; ymd) noexcept;
</pre>
<blockquote>
<p>
<ins>-?- <i>Constraints:</i> The argument supplied by the caller for the <tt>months</tt> 
parameter is not implicitly convertible to <tt>years</tt>.</ins>
<p/>
-6- <i>Returns:</i> <tt>ymd + (-dm)</tt>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[time.cal.ymdlast.members]"/> as indicated:</p>

<blockquote>
<pre>
constexpr year_month_day_last&amp; operator+=(const months&amp; m) noexcept;
</pre>
<blockquote>
<p>
<ins>-?- <i>Constraints:</i> The argument supplied by the caller for the <tt>months</tt> 
parameter is not implicitly convertible to <tt>years</tt>.</ins>
<p/>
-2- <i>Effects:</i> <tt>*this = *this + m</tt>.
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
constexpr year_month_day_last&amp; operator-=(const months&amp; m) noexcept;
</pre>
<blockquote>
<p>
<ins>-?- <i>Constraints:</i> The argument supplied by the caller for the <tt>months</tt> 
parameter is not implicitly convertible to <tt>years</tt>.</ins>
<p/>
-4- <i>Effects:</i> <tt>*this = *this - m</tt>.
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[time.cal.ymdlast.nonmembers]"/> as indicated:</p>

<blockquote>
<pre>
constexpr year_month_day_last
  operator+(const year_month_day_last&amp; ymdl, const months&amp; dm) noexcept;
</pre>
<blockquote>
<p>
<ins>-?- <i>Constraints:</i> The argument supplied by the caller for the <tt>months</tt> 
parameter is not implicitly convertible to <tt>years</tt>.</ins>
<p/>
-3- <i>Returns:</i> <tt>(ymdl.year() / ymdl.month() + dm) / last</tt>.
</p>
</blockquote>
<pre>
constexpr year_month_day_last
  operator+(const months&amp; dm, const year_month_day_last&amp; ymdl) noexcept;
</pre>
<blockquote>
<p>
<ins>-?- <i>Constraints:</i> The argument supplied by the caller for the <tt>months</tt> 
parameter is not implicitly convertible to <tt>years</tt>.</ins>
<p/>
-4- <i>Returns:</i> <tt>ymdl + dm</tt>.
</p>
</blockquote>
<pre>
constexpr year_month_day_last
  operator-(const year_month_day_last&amp; ymdl, const months&amp; dm) noexcept;
</pre>
<blockquote>
<p>
<ins>-?- <i>Constraints:</i> The argument supplied by the caller for the <tt>months</tt> 
parameter is not implicitly convertible to <tt>years</tt>.</ins>
<p/>
-5- <i>Returns:</i> <tt>ymdl + (-dm)</tt>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[time.cal.ymwd.members]"/> as indicated:</p>

<blockquote>
<pre>
constexpr year_month_weekday&amp; operator+=(const months&amp; m) noexcept;
</pre>
<blockquote>
<p>
<ins>-?- <i>Constraints:</i> The argument supplied by the caller for the <tt>months</tt> 
parameter is not implicitly convertible to <tt>years</tt>.</ins>
<p/>
-6- <i>Effects:</i> <tt>*this = *this + m</tt>.
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
constexpr year_month_weekday&amp; operator-=(const months&amp; m) noexcept;
</pre>
<blockquote>
<p>
<ins>-?- <i>Constraints:</i> The argument supplied by the caller for the <tt>months</tt> 
parameter is not implicitly convertible to <tt>years</tt>.</ins>
<p/>
-8- <i>Effects:</i> <tt>*this = *this - m</tt>.
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[time.cal.ymwd.nonmembers]"/> as indicated:</p>

<blockquote>
<pre>
constexpr year_month_weekday operator+(const year_month_weekday&amp; ymwd, const months&amp; dm) noexcept;
</pre>
<blockquote>
<p>
<ins>-?- <i>Constraints:</i> The argument supplied by the caller for the <tt>months</tt> 
parameter is not implicitly convertible to <tt>years</tt>.</ins>
<p/>
-2- <i>Returns:</i> <tt>(ymwd.year() / ymwd.month() + dm) / ymwd.weekday_indexed()</tt>.
</p>
</blockquote>
<pre>
constexpr year_month_weekday operator+(const months&amp; dm, const year_month_weekday&amp; ymwd) noexcept;
</pre>
<blockquote>
<p>
<ins>-?- <i>Constraints:</i> The argument supplied by the caller for the <tt>months</tt> 
parameter is not implicitly convertible to <tt>years</tt>.</ins>
<p/>
-3- <i>Returns:</i> <tt>ymwd + dm</tt>.
</p>
</blockquote>
<pre>
constexpr year_month_weekday operator-(const year_month_weekday&amp; ymwd, const months&amp; dm) noexcept;
</pre>
<blockquote>
<p>
<ins>-?- <i>Constraints:</i> The argument supplied by the caller for the <tt>months</tt> 
parameter is not implicitly convertible to <tt>years</tt>.</ins>
<p/>
-4- <i>Returns:</i> <tt>ymwd + (-dm)</tt>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[time.cal.ymwdlast.members]"/> as indicated:</p>

<blockquote>
<pre>
constexpr year_month_weekday_last&amp; operator+=(const months&amp; m) noexcept;
</pre>
<blockquote>
<p>
<ins>-?- <i>Constraints:</i> The argument supplied by the caller for the <tt>months</tt> 
parameter is not implicitly convertible to <tt>years</tt>.</ins>
<p/>
-2- <i>Effects:</i> <tt>*this = *this + m</tt>.
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
constexpr year_month_weekday_last&amp; operator-=(const months&amp; m) noexcept;
</pre>
<blockquote>
<p>
<ins>-?- <i>Constraints:</i> The argument supplied by the caller for the <tt>months</tt> 
parameter is not implicitly convertible to <tt>years</tt>.</ins>
<p/>
-4- <i>Effects:</i> <tt>*this = *this - m</tt>.
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[time.cal.ymwdlast.nonmembers]"/> as indicated:</p>

<blockquote>
<pre>
constexpr year_month_weekday_last
  operator+(const year_month_weekday_last&amp; ymwdl, const months&amp; dm) noexcept;
</pre>
<blockquote>
<p>
<ins>-?- <i>Constraints:</i> The argument supplied by the caller for the <tt>months</tt> 
parameter is not implicitly convertible to <tt>years</tt>.</ins>
<p/>
-2- <i>Returns:</i> <tt>(ymwdl.year() / ymwdl.month() + dm) / ymwdl.weekday_last()</tt>.
</p>
</blockquote>
<pre>
constexpr year_month_weekday_last
  operator+(const months&amp; dm, const year_month_weekday_last&amp; ymwdl) noexcept;
</pre>
<blockquote>
<p>
<ins>-?- <i>Constraints:</i> The argument supplied by the caller for the <tt>months</tt> 
parameter is not implicitly convertible to <tt>years</tt>.</ins>
<p/>
-3- <i>Returns:</i> <tt>ymwdl + dm</tt>.
</p>
</blockquote>
<pre>
constexpr year_month_weekday_last
  operator-(const year_month_weekday_last&amp; ymwdl, const months&amp; dm) noexcept;
</pre>
<blockquote>
<p>
<ins>-?- <i>Constraints:</i> The argument supplied by the caller for the <tt>months</tt> 
parameter is not implicitly convertible to <tt>years</tt>.</ins>
<p/>
-4- <i>Returns:</i> <tt>ymwdl + (-dm)</tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>
</issue>
