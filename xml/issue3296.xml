<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3296" status="Voting">
<title>Inconsistent default argument for <tt>basic_regex&lt;&gt;::assign</tt></title>
<section><sref ref="[re.regex]"/></section>
<submitter>Mark de Wever</submitter>
<date>16 Sep 2019</date>
<priority>0</priority>

<discussion>
<p>
The declaration of the overload of <tt>basic_regex&lt;&gt;::assign(const charT* p, size_t len, flag_type f)</tt>
has an inconsistent default argument for the <tt>flag_type f</tt> parameter.
<p/>
<sref ref="[re.regex]"/> p3:
</p>
<blockquote><pre>
basic_regex&amp; assign(const charT* p, size_t len, flag_type f);
</pre></blockquote>
<p>
<sref ref="[re.regex.assign]"/> before p12:
</p>
<blockquote><pre>
basic_regex&amp; assign(const charT* ptr, size_t len, flag_type f = regex_constants::ECMAScript);
</pre></blockquote>
<p>
Since all other overloads have a default argument in both <sref ref="[re.regex]"/> and
<sref ref="[re.regex.assign]"/> I propose to add a default argument for this overload
in the declaration in <sref ref="[re.regex]"/>.
<p/>
It should be pointed out that there exists implementation divergence due to the current
wording state: libc++ and libstdc++ do <em>not</em> implement the default argument.
The MS STL library <em>does</em> have the default argument.
</p>

<note>2019-10-31 Issue Prioritization</note>
<p>Status to Tentatively Ready and priority to 0 after six positive votes on the reflector.</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4830">N4830</a>.</p>

<ol>
<li><p>Modify <sref ref="[re.regex]"/>, class template <tt>basic_regex</tt> synopsis, 
as indicated:</p>

<blockquote>
<pre>
[&hellip;]
<i>// <sref ref="[re.regex.assign]"/>, assign</i>
[&hellip;]
basic_regex&amp; assign(const charT* ptr, flag_type f = regex_constants::ECMAScript);
basic_regex&amp; assign(const charT* p, size_t len, flag_type f <ins>= regex_constants::ECMAScript</ins>);
template&lt;class string_traits, class A&gt;
  basic_regex&amp; assign(const basic_string&lt;charT, string_traits, A&gt;&amp; s,
                      flag_type f = regex_constants::ECMAScript);
template&lt;class InputIterator&gt;
  basic_regex&amp; assign(InputIterator first, InputIterator last,
                      flag_type f = regex_constants::ECMAScript);
basic_regex&amp; assign(initializer_list&lt;charT&gt;,
                    flag_type = regex_constants::ECMAScript);
[&hellip;]
</pre>
</blockquote>
</li>
</ol>
</resolution>
</issue>
