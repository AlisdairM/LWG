<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2261" status="New">
<title>Are containers required to use their '<tt>pointer</tt>' type internally?</title>
<section><sref ref="[container.requirements]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>14 May 2013</date>
<priority>2</priority>

<discussion>
<p>
Is a container <tt>C</tt> only supposed to refer to allocated memory (blocks of
contiguous storage, nodes, etc.) through objects of type <tt>C::pointer</tt>
rather than <tt>C::value_type*</tt>?
</p>

<p>
I don't see anything explicitly requiring this, so a container could
immediately convert the result of <tt>get_allocator().allocate(1)</tt> to a
built-in pointer of type <tt>value_type*</tt> and only deal with the built-in
pointer until it needs to deallocate it again, but that removes most
of the benefit of allowing allocators to use custom pointer types.
</p>

<note>2014-06-12, Jonathan comments</note>
<p>
This issue is basically the same issue as LWG <iref ref="1521"/>, which agrees it's an issue, 
to be dealt with in the future, so I request that <iref ref="2261"/> not be closed as a dup 
unless we reopen <iref ref="1521"/>.
</p>

</discussion>

<resolution>
</resolution>

</issue>
