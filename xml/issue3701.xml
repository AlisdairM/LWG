<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3701" status="Tentatively Ready">
<title>Make <tt>formatter&lt;remove_cvref_t&lt;const charT[N]&gt;, charT&gt;</tt> requirement explicit</title>
<section><sref ref="[format.formatter.spec]"/></section>
<submitter>Mark de Wever</submitter>
<date>17 May 2022</date>
<priority>99</priority>

<discussion>
<p>
The wording in <sref ref="[format.functions]"/>/20 and <sref ref="[format.functions]"/>/25 both contain
</p>
<blockquote>
<p>
<tt>formatter&lt;remove_cvref_t&lt;T<sub><i>i</i></sub>&gt;, charT&gt;</tt> meets the <i>BasicFormatter</i> 
requirements (<sref ref="[formatter.requirements]"/>) for each <tt>T<sub><i>i</i></sub></tt> in <tt>Args</tt>.
</p>
</blockquote>
<p>
The issue is that <tt>remove_cvref_t&lt;const charT[N]&gt;</tt> becomes <tt>charT[N]</tt>. 
<sref ref="[format.formatter.spec]"/>/2.2 requires a specialization for
</p>
<blockquote>
<pre>
template&lt;size_t N&gt; struct formatter&lt;const charT[N], charT&gt;;
</pre>
</blockquote>
<p>
but there's no requirement to provide
</p>
<blockquote>
<pre>
 template&lt;size_t N&gt; struct formatter&lt;charT[N], charT&gt;;
</pre>
</blockquote>
<p>
There's no wording preventing library vendors from providing additional specializations. 
So it's possible to implement the current specification but the indirect requirement is odd. 
I noticed this while implementing a <tt>formattable</tt> concept. The concept is based on the 
<tt>formattable</tt> concept of <paper num="P2286"/> "Formatting Ranges" (This paper is targeting C++23.)
<p/>
It could be argued that the specialization
</p>
<blockquote>
<pre>
template&lt;size_t N&gt; struct formatter&lt;const charT[N], charT&gt;
</pre>
</blockquote>
<p>
is not needed and should be removed from the Standard. This will be an API break. Vendors 
can decide to keep the no longer required specialization as an extension; which would lead 
to implementation divergence. Microsoft is already shipping this specialization as stable
and Victor doesn't like the removal too.
<p/>
Therefore I only propose to add the required <tt>formatter</tt> specialization.
</p>

<note>2022-06-21; Reflector poll</note>
<p>
Set status to Tentatively Ready after seven votes in favour during reflector poll.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4910"/>.
</p>

<ol>
<li><p>Modify <sref ref="[format.formatter.spec]"/> as indicated:</p>

<blockquote>
<p>
-2- Let <tt>charT</tt> be either <tt>char</tt> or <tt>wchar_t</tt>. Each specialization of 
<tt>formatter</tt> is either enabled or disabled, as described below. Each header that declares the 
template <tt>formatter</tt> provides the following enabled specializations:
</p>
<ol style="list-style-type:none">
<li><p>(2.1) &mdash; The specializations [&hellip;]</p></li>
<li><p>(2.2) &mdash; For each <tt>charT</tt>, the string type specializations</p>
<blockquote><pre>
template&lt;&gt; struct formatter&lt;charT*, charT&gt;;
template&lt;&gt; struct formatter&lt;const charT*, charT&gt;;
<ins>template&lt;size_t N&gt; struct formatter&lt;charT[N], charT&gt;;</ins>
template&lt;size_t N&gt; struct formatter&lt;const charT[N], charT&gt;;
template&lt;class traits, class Allocator&gt;
  struct formatter&lt;basic_string&lt;charT, traits, Allocator&gt;, charT&gt;;
template&lt;class traits&gt;
  struct formatter&lt;basic_string_view&lt;charT, traits&gt;, charT&gt;;
</pre></blockquote>
</li>
<li><p>(2.3) &mdash; [&hellip;]</p></li>
<li><p>(2.4) &mdash; [&hellip;]</p></li>
</ol>
</blockquote>
</li>

</ol>
</resolution>

</issue>
