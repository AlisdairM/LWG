<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2838" status="New">
<title><tt>is_literal_type</tt> specification needs a little cleanup</title>
<section><sref ref="[depr.meta.types]"/></section>
<submitter>Tim Song</submitter>
<date>9 Dec 2016</date>
<priority>99</priority>

<discussion>
<p>
<sref ref="[depr.meta.types]"/>/3 currently reads:
</p>
<blockquote><p>
<i>Effects:</i> <tt>is_literal_type</tt> has a base-characteristic of <tt>true_type</tt> if <tt>T</tt> is a literal 
type ([basic.types]), and a base-characteristic of <tt>false_type</tt> otherwise.
</p></blockquote>
<p>
First, this doesn't seem like an <i>Effects</i> clause. Second, this wording failed to say that <tt>is_literal_type</tt> 
is an <tt>UnaryTypeTrait</tt>, and misspelled <tt>BaseCharacteristic</tt> &mdash; which is only defined for 
<tt>UnaryTypeTraits</tt> and <tt>BinaryTypeTraits</tt>. Third, moving this to Annex D means that the general prohibition 
against specializing type traits in [meta.type.synop]/1 no longer applies, which is presumably unintended.
</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4618">N4618</a>.</p>

<ol>
<li><p>Edit <sref ref="[depr.meta.types]"/> as indicated:</p>
<blockquote>
<p>
The header <tt>&lt;type_traits&gt;</tt> has the following addition:
</p>
<blockquote>
<pre>
namespace std {
  template &lt;class T&gt; struct is_literal_type;
  
  template &lt;class T&gt; constexpr bool is_literal_type_v = is_literal_type&lt;T&gt;::value;
}
</pre>
</blockquote>
<p>
-2- <i>Requires:</i> <tt>remove_all_extents_t&lt;T&gt;</tt> shall be a complete type or (possibly <i>cv</i>-qualified) <tt>void</tt>.
<p/>
-3- <del><i>Effects:</i> <tt>is_literal_type</tt> has a base-characteristic of <tt>true_type</tt> if <tt>T</tt> is a literal type (3.9), 
and a basecharacteristic of <tt>false_type</tt> otherwise</del><ins><tt>is_literal_type&lt;T&gt;</tt> is a 
<tt>UnaryTypeTrait</tt> (<sref ref="[meta.reqmts]"/>) with a <tt>BaseCharacteristic</tt> of <tt>true_type</tt> if <tt>T</tt> 
is a literal type (<sref ref="[basic.types]"/>), and <tt>false_type</tt> otherwise</ins>.
<p/>
<ins>-?- The behavior of a program that adds specializations for <tt>is_literal_type</tt> or <tt>is_literal_type_v</tt> is 
undefined.</ins>
</p>
</blockquote>
</li>
</ol>

</resolution>

</issue>
