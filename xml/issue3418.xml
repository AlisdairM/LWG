<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3418" status="New">
<title>Deprecated free functions in <tt>&lt;atomic&gt;</tt></title>
<section><sref ref="[atomics.nonmembers]"/></section>
<submitter>Alisdair Meredith</submitter>
<date>19 Mar 2020</date>
<priority>3</priority>

<discussion>
<p>
Paper <a href="https://wg21.link/p1831r1">P1831R1</a> deprecated the <tt>volatile</tt>-qualified 
member functions of <tt>std::atomic</tt> unless <tt>is_always_lock_free</tt> is <tt>true</tt>.  
<sref ref="[atomics.nonmembers]"/> maps free functions calls, declared in the <tt>&lt;atomic&gt;</tt> 
header, to those member functions, but does not deprecate them under the same circumstances.
<p/>
I have confirmed with the paper author that the intended design was to deprecate these too, 
but currently we have no wording.
</p>

<note>2020-03-29; Daniel provides wording</note>
<p>
The suggested wording changes for <sref ref="[atomics.nonmembers]"/> attempts to make clear that 
any of the specification elements of the member function (including but not restricted to <i>Constraints:</i>
elements) are also imposed on the corresponding non-member function template. According to 
<sref ref="[structure.specifications]"/>, the wording "the semantics of the code sequence are determined 
by the <i>Constraints</i>,[&hellip;], and <i>Error conditions</i> specified for the function invocations contained in 
the code sequence." should realize the wanted effect. The advantage of this more general wording form is
that we don't need to to worry in case that in the future <i>Constraints:</i> elements of the member 
functions are modified.
</p>

<note>2020-03-30; Tim improves wording</note>

<note>2020-04-25 Issue Prioritization</note>
<p>Priority to 3 after reflector discussion.</p>
</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4861">N4861</a>.
</p>

<ol>
<li><p>Modify <sref ref="[atomics.nonmembers]"/> as indicated:</p>

<blockquote>
<p>
-1- A non-member function template whose name matches the pattern <tt>atomic_<i>f</i></tt> or the 
pattern <tt>atomic_<i>f</i>_explicit</tt> invokes the member function <tt><i>f</i></tt>, with the 
value of the first parameter as the object expression and the values of the remaining parameters 
(if any) as the arguments of the member function call, in order. An argument for a parameter of 
type <tt>atomic&lt;T&gt;::value_type*</tt> is dereferenced when passed to the member function call. 
If no such member function exists, the program is ill-formed. <ins>Otherwise, a call to such
a function template has effects equivalent to (<sref ref="[structure.specifications]"/>) the effective 
code sequence containing the <tt><i>f</i></tt> invocation specified in this subclause.</ins>
</p>
</blockquote>
</li>

<li><p>Modify <sref ref="[depr.atomics.volatile]"/>, annex D, as indicated:</p>

<blockquote>
<p>
If an atomic specialization has one of the following overloads, then that overload participates in overload
resolution even if <tt>atomic&lt;T&gt;::is_always_lock_free</tt> is <tt>false</tt>:
</p>
<blockquote>
<pre>
void store(T desired, memory_order order = memory_order::seq_cst) volatile noexcept;
[&hellip;]
T* fetch_<i>key</i>(ptrdiff_t operand, memory_order order = memory_order::seq_cst) volatile noexcept;
</pre>
</blockquote>
<p>
<ins>In addition, the following non-member function templates participate in overload
resolution even if <tt>atomic&lt;T&gt;::is_always_lock_free</tt> is <tt>false</tt>:</ins> 
</p>
<blockquote>
<pre>
<ins>template&lt;class T&gt;
  void atomic_store(volatile atomic&lt;T&gt;*, typename atomic&lt;T&gt;::value_type) noexcept;
template&lt;class T&gt;
  T atomic_load(const volatile atomic&lt;T&gt;*) noexcept;
template&lt;class T&gt;
  T atomic_load_explicit(const volatile atomic&lt;T&gt;*, memory_order) noexcept;
template&lt;class T&gt;
  T atomic_exchange(volatile atomic&lt;T&gt;*, typename atomic&lt;T&gt;::value_type) noexcept;
template&lt;class T&gt;
T atomic_exchange_explicit(volatile atomic&lt;T&gt;*, typename atomic&lt;T&gt;::value_type,
  memory_order) noexcept;
template&lt;class T&gt;
  bool atomic_compare_exchange_weak(volatile atomic&lt;T&gt;*,
                                    typename atomic&lt;T&gt;::value_type*,
                                    typename atomic&lt;T&gt;::value_type) noexcept;
template&lt;class T&gt;
  bool atomic_compare_exchange_strong(volatile atomic&lt;T&gt;*,
                                      typename atomic&lt;T&gt;::value_type*,
                                      typename atomic&lt;T&gt;::value_type) noexcept;
template&lt;class T&gt;
  bool atomic_compare_exchange_weak_explicit(volatile atomic&lt;T&gt;*,
                                             typename atomic&lt;T&gt;::value_type*,
                                             typename atomic&lt;T&gt;::value_type,
                                             memory_order, memory_order) noexcept;    
template&lt;class T&gt;
  bool atomic_compare_exchange_strong_explicit(volatile atomic&lt;T&gt;*,
                                               typename atomic&lt;T&gt;::value_type*,
                                               typename atomic&lt;T&gt;::value_type,
                                               memory_order, memory_order) noexcept;  
template&lt;class T&gt;
  T atomic_fetch_<i>key</i>(volatile atomic&lt;T&gt;*, typename atomic&lt;T&gt;::difference_type) noexcept;  
template&lt;class T&gt;
  T atomic_fetch_<i>key</i>_explicit(volatile atomic&lt;T&gt;*, typename atomic&lt;T&gt;::difference_type,
                              memory_order) noexcept;  
template&lt;class T&gt;
  T atomic_fetch_<i>key</i>(volatile atomic&lt;T&gt;*, typename atomic&lt;T&gt;::value_type) noexcept;  
template&lt;class T&gt;
  T atomic_fetch_<i>key</i>_explicit(volatile atomic&lt;T&gt;*, typename atomic&lt;T&gt;::value_type,
                              memory_order) noexcept;  
template&lt;class T&gt;
  void atomic_wait(const volatile atomic&lt;T&gt;*, typename atomic&lt;T&gt;::value_type);
template&lt;class T&gt;
  void atomic_wait_explicit(const volatile atomic&lt;T&gt;*, typename atomic&lt;T&gt;::value_type,
                            memory_order);
template&lt;class T&gt;
  void atomic_notify_one(volatile atomic&lt;T&gt;*);
template&lt;class T&gt;
  void atomic_notify_all(volatile atomic&lt;T&gt;*);</ins>
</pre>
</blockquote>

</blockquote>
</li>

</ol>
</resolution>
</issue>
