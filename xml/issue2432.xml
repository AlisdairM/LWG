<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2432" status="NAD">
<title><tt>initializer_list</tt> assignability</title>
<section><sref ref="[support.initlist]"/></section>
<submitter>David Krauss</submitter>
<date>30 Sep 2014</date>
<priority>2</priority>

<discussion>
<p>
<tt>std::initializer_list::operator=</tt> <sref ref="[support.initlist]"/> is horribly broken and it needs deprecation:
</p>
<blockquote><pre>
std::initializer_list&lt;foo&gt; a = {{1}, {2}, {3}};
a = {{4}, {5}, {6}};
// New sequence is already destroyed.
</pre></blockquote>
<p>
Assignability of <tt>initializer_list</tt> isn't explicitly specified, but most implementations supply a default assignment 
operator. I'm not sure what <sref ref="[description]"/> says, but it probably doesn't matter.
</p>

<note>Lenexa 2015-05-05: Send to EWG as discussed in Telecon</note>

<note>2022-08-24; Reflector poll</note>
<p>
Set status to Tentatively NAD after reflector poll in October 2021.
</p>
<p>
"If somebody wants to revisit it, they'll need to write a paper to demonstrate
what the change would break, whether that would be a problem in practice,
and convince the evolution groups to make a change. But it's not an LWG issue."
</p>

<note>2022-11-25; see <a href="https://github.com/cplusplus/papers/issues/1369">EWG 1369</a></note>

<note>2022-11-30 LWG telecon. Status changed: Tentatively NAD &rarr; NAD.</note>
</discussion>

<resolution>

<ol>
<li><p>Edit <sref ref="[support.initlist]"/> p1, class template <tt>initializer_list</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
namespace std {
  template&lt;class E&gt; class initializer_list {
  public:
    [&hellip;]
    constexpr initializer_list() noexcept;
  
    <ins>initializer_list(const initializer_list&amp;) = default;</ins>
    <ins>initializer_list(initializer_list&amp;&amp;) = default;</ins>
    <ins>initializer_list&amp; operator=(const initializer_list&amp;) = delete;</ins>
    <ins>initializer_list&amp; operator=(initializer_list&amp;&amp;) = delete;</ins>
    
    constexpr size_t size() const noexcept;
    [&hellip;]
  };
  [&hellip;]
}
</pre>
</blockquote>

</li>
</ol>

</resolution>

</issue>
