<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3348" status="New">
<title><tt>__cpp_lib_unwrap_ref</tt> in wrong header</title>
<section><sref ref="[version.syn]"/><sref ref="[refwrap.unwrapref]"/></section>
<submitter>Barry Revzin</submitter>
<date>03 Dec 2019</date>
<priority>2</priority>

<discussion>
<p>
cpplearner points out in <a href="https://github.com/BRevzin/sd6/issues/1">this github comment</a> that:
</p>
<blockquote style="border-left: 3px solid #ccc;padding-left: 15px;">
<p>
Since <tt>unwrap_reference</tt> and <tt>unwrap_ref_decay</tt> are defined in <tt>&lt;functional&gt;</tt> 
([functional.syn]), their feature test macro should also be defined there.
</p>
</blockquote>
<p>
<a href="https://wg21.link/p1902r1">P1902R1</a> adds this feature test macro in <tt>&lt;type_traits&gt;</tt> instead. 
The feature test macro and the type traits should go into the same header: either both in <tt>&lt;functional&gt;</tt> 
or both in <tt>&lt;type_traits&gt;</tt>. 
<p/>
The smallest diff is just to move the macro into <tt>&lt;functional&gt;</tt>.
</p>

<note>2019-12-12 Issue Prioritization</note>
<p>Priority to 2 after reflector discussion.</p>

<strong>Previous resolution [SUPERSEDED]:</strong>
<blockquote class="note">
<p>This wording is relative to <a href="https://wg21.link/n4842">N4842</a>.</p>

<ol>
<li><p>Modify <sref ref="[version.syn]"/> p2 as indicated:</p>
<blockquote>
<pre>
[&hellip;]
#define __cpp_lib_unordered_map_try_emplace 201411L <i>// also in &lt;unordered_map&gt;</i>
#define __cpp_lib_unwrap_ref                201811L <i>// also in &lt;<del>type_traits</del><ins>functional</ins>&gt;</i>
#define __cpp_lib_variant                   201606L <i>// also in &lt;variant&gt;</i>
[&hellip;]
</pre>
</blockquote>
</li>

</ol>
</blockquote>

<note>2020-02-13, Prague</note>
<p>
During LWG discussions it had been suggested that they considered it is an improvement to move the definitions of
<tt>unwrap_reference</tt> and <tt>unwrap_ref_decay</tt> from <tt>&lt;functional&gt;</tt> to <tt>&lt;type_traits&gt;</tt>.
This is what the alternative wording tries to accomplish.
</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4849">N4849</a>.</p>

<ol>
<li><p>Modify <sref ref="[functional.syn]"/>, header <tt>&lt;functional&gt;</tt> synopsis, as indicated:</p>
<blockquote>
<pre>
namespace std {
[&hellip;]
<del>template&lt;class T&gt; struct unwrap_reference;
template&lt;class T&gt; using unwrap_reference_t = typename unwrap_reference&lt;T&gt;::type;
template&lt;class T&gt; struct unwrap_ref_decay;
template&lt;class T&gt; using unwrap_ref_decay_t = typename unwrap_ref_decay&lt;T&gt;::type;</del>
[&hellip;]
}
</pre>
</blockquote>
</li>

<li><p>Delete sub-clause <sref ref="[refwrap.unwrapref]"/> completely, as indicated:</p>
<blockquote>
<p>
<del><b>20.14.5.6 Transformation type trait <tt>unwrap_reference</tt> [refwrap.unwrapref]</b></del>
</p>
<pre>
<del>template&lt;class T&gt;
  struct unwrap_reference;</del>
</pre>
<blockquote>
<p>
<del>-1- If <tt>T</tt> is a specialization <tt>reference_wrapper&lt;X&gt;</tt> for some type <tt>X</tt>, the member typedef 
<tt>type</tt> of <tt>unwrap_reference&lt;T&gt;</tt> is <tt>X&amp;</tt>, otherwise it is <tt>T</tt>.</del>
</p>
</blockquote>
<pre>
<del>template&lt;class T&gt;
  struct unwrap_ref_decay;</del>
</pre>
<blockquote>
<p>
<del>-2- The member typedef <tt>type</tt> of <tt>unwrap_ref_decay&lt;T&gt;</tt> denotes the type 
<tt>unwrap_reference_t&lt;decay_t&lt;T&gt;&gt;</tt>.</del>
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[meta.type.synop]"/>, header <tt>&lt;type_traits&gt;</tt> synopsis, as indicated:</p>
<blockquote>
<pre>
namespace std {
[&hellip;]
<i>// <sref ref="[meta.trans.other]"/>, other transformations</i>
[&hellip;]
template&lt;class T&gt; struct underlying_type;
template&lt;class Fn, class... ArgTypes&gt; struct invoke_result;
<ins>template&lt;class T&gt; struct unwrap_reference;
template&lt;class T&gt; struct unwrap_ref_decay;</ins>

template&lt;class T&gt;
  using type_identity_t = typename type_identity&lt;T&gt;::type;
[&hellip;]
template&lt;class Fn, class... ArgTypes&gt;
  using invoke_result_t = typename invoke_result&lt;Fn, ArgTypes...&gt;::type;
<ins>template&lt;class T&gt; 
  using unwrap_reference_t = typename unwrap_reference&lt;T&gt;::type;
template&lt;class T&gt; 
  using unwrap_ref_decay_t = typename unwrap_ref_decay&lt;T&gt;::type;</ins>
template&lt;class...&gt;
  using void_t = void;
[&hellip;]
}
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[meta.trans.other]"/>, Table 55 &mdash; "Sign modifications" in <sref ref="[tab:meta.trans.sign]"/> as indicated:</p>

<table border="1">
<caption>Table 52 &mdash; Other transformations [tab:meta.trans.other]</caption>
<tr>
<th>Template</th>
<th>Comments</th>
</tr> 

<tr>
<td colspan="2" align="center">
<tt>[&hellip;]</tt>
</td>
</tr>

<tr>
<td>
<ins><tt>template &lt;class T&gt;<br/>
struct unwrap_reference;</tt></ins>
</td>
<td>
<ins>If <tt>T</tt> is a specialization <tt>reference_wrapper&lt;X&gt;</tt> for some type <tt>X</tt>, the member typedef 
<tt>type</tt> of <tt>unwrap_reference&lt;T&gt;</tt> is <tt>X&amp;</tt>, otherwise it is <tt>T</tt>.</ins>
</td>
</tr>

<tr>
<td>
<ins><tt>template &lt;class T&gt;<br/>
struct unwrap_ref_decay;</tt></ins>
</td>
<td>
<ins>The member typedef <tt>type</tt> of <tt>unwrap_ref_decay&lt;T&gt;</tt> denotes the type 
<tt>unwrap_reference_t&lt;decay_t&lt;T&gt;&gt;</tt>.</ins>
</td>
</tr>
</table>

</li>

<li><p>Insert between <sref ref="[meta.trans.other]"/> p1 and p2 as indicated:</p>
<blockquote>
<p>
<ins>In addition to being available via inclusion of the <tt>&lt;type_traits&gt;</tt> header, the templates 
<tt>unwrap_reference</tt>, <tt>unwrap_ref_decay</tt>, <tt>unwrap_reference_t</tt>, and <tt>unwrap_ref_decay_t</tt> 
are available when the header <tt>&lt;functional&gt;</tt> (<sref ref="[functional.syn]"/>) is included.</ins>
</p>
</blockquote>
</li>

</ol>
</resolution>
</issue>
