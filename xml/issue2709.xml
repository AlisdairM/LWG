<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2709" status="C++17">
<title><tt>offsetof</tt> is unnecessarily imprecise</title>
<section><sref ref="[support.types]"/></section>
<submitter>Richard Smith</submitter>
<date>10 May 2016</date>
<priority>2</priority>

<discussion>
<p>
Per <sref ref="[support.types]"/>/4:
</p>
<blockquote><p>
"The macro <tt>offsetof(<i>type</i>, <i>member-designator</i>)</tt> accepts a restricted set of <i>type</i> arguments 
in this International Standard. If <i>type</i> is not a standard-layout class (Clause 9), the results are undefined. [...]"
</p></blockquote>
<p>
Implementations in practice interpret this as meaning that the program is ill-formed for classes that are not 
standard-layout, but several implementations allow additional types as an extension (rejected in their "strictly conforming" 
modes).
<p/>
It would seem superior to specify that implementation-defined extensions are permitted, and that the implementation 
must give a correct answer for any type that it chooses to accept.
</p>

<note>2016-05 Issues Telecon</note>
<p>
People were worried about the requirement to report errors implied by 'conditionally supported'.
</p>

<note>2016-06 Oulu</note>
<p>The concern about errors appears to be less severe that we thought. Moving to Ready.</p>
<p>Friday: status to Immediate</p>
</discussion>

<resolution>
<p>
This wording is relative to N4582.
</p>

<ol>
<li><p>Change in <sref ref="[support.types]"/>/4:</p>

<blockquote>
<p>
-4- The macro <tt>offsetof(<i>type</i>, <i>member-designator</i>)</tt> accepts a restricted set of <i>type</i> arguments 
in this International Standard. <del>If <tt><i>type</i></tt> is not</del><ins>Use of the <tt>offsetof</tt> macro with a 
<tt><i>type</i></tt> other than</ins> a standard-layout class (Clause 9)<del>, the results are 
undefined</del><ins>is conditionally-supported</ins>.193 The expression <tt>offsetof(<i>type</i>, 
<i>member-designator</i>)</tt> is never type-dependent (14.6.2.2) and it is value-dependent (14.6.2.3) if and only 
if <tt><i>type</i></tt> is dependent. The result of applying the <tt>offsetof</tt> macro to a static data member or 
a function member is undefined. No operation invoked by the <tt>offsetof</tt> macro shall throw an exception and 
<tt>noexcept(offsetof(type, member-designator))</tt> shall be <tt>true</tt>.
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
