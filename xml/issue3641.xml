<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3641" status="New">
<title>Add <tt>operator==</tt> to <tt>format_to_n_result</tt></title>
<section><sref ref="[format.syn]"/></section>
<submitter>Mark de Wever</submitter>
<date>14 Nov 2021</date>
<priority>99</priority>

<discussion>
<p>
During the 2019 Cologne meeting the papers <paper num="P1614R2"/> "The Mothership has
Landed" and <paper num="P0645R10"/> "Text Formatting" have been accepted. P1614R2 adds
<tt>operator==</tt> to <tt>to_chars_result</tt> and <tt>from_chars_result</tt>. P0645R10 
adds a similar type <tt>format_to_n_result</tt> <em>without</em> an <tt>operator==</tt>. 
LWG <iref ref="3373"/> reaffirms these three types are similar by ensuring they can be used in
structured bindings.
<p/>
It seems due to accepting P1614R2 and P0645R10 during the same meeting the addition of 
<tt>operator==</tt> wasn't applied to <tt>format_to_n_result</tt>. I propose to add 
<tt>operator==</tt> to <tt>format_to_n_result</tt> to keep these types similar.
<p/>
The <tt>Out</tt> template argument of <tt>format_to_n_result</tt> is unconstrained. Since
it's returned from <tt>format_to_n</tt> it's indirectly constrained to an 
<tt>output_iterator</tt>. An <tt>output_iterator</tt> doesn't require <tt>equality_comparable</tt>,
thus the defaulted <tt>operator==</tt> can be defined deleted.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4901"/>.
</p>

<ol>

<li><p>Modify <sref ref="[format.syn]"/>, header <tt>&lt;format&gt;</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
[&hellip;]
template&lt;class Out&gt; struct format_to_n_result {
  Out out;
  iter_difference_t&lt;Out&gt; size;
  <ins>friend bool operator==(const format_to_n_result&amp;, const format_to_n_result&amp;) = default;</ins>
};
[&hellip;]
</pre>
</blockquote>
</li>

</ol>
</resolution>

</issue>
