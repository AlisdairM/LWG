<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3629" status="New">
<title><code>make_error_code</code> and <code>make_error_condition</code> are customization points</title>
<section><sref ref="[syserr]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>31 Oct 2021</date>
<priority>99</priority>

<discussion>
<p>
The rule in <sref ref="[contents]"/> means that the calls to
<code>make_error_code</code> in <sref ref="[syserr.errcode.constructors]"/>
and <sref ref="[syserr.errcode.modifiers]"/> are required to call
<code>std::make_error_code</code>,
which means program-defined error codes do not work.
The same applies to the <code>make_error_condition</code> calls in
<sref ref="[syserr.errcondition.constructors]"/> and
<sref ref="[syserr.errcondition.modifiers]"/>.
</p>

<p>
They need to use ADL.
This is what all known implementations (including Boost.System) do.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4901">N4901</a>.
</p>

<ol>
<li><p>Modify <sref ref="[system.error.syn]"/> as indicated:</p>

<blockquote>
<p>
-1-
The value of each <code>enum errc</code> constant shall be the same as the
value of the <code>&lt;cerrno&gt;</code> macro shown in the above synopsis.
Whether or not the <code>&lt;system_error&gt;</code> implementation exposes
the <code>&lt;cerrno&gt;</code> macros is unspecified.
</p>

<p>
<ins>
-?-
Invocations of <code>make_error_code</code> and
<code>make_error_condition</code> shown in subclause <sref ref="[syserr]"/>
select a function to call via overload resolution (<sref ref="[over.match]"/>)
on a candidate set that includes the lookup set found by
argument dependent lookup (<sref ref="[basic.lookup.argdep]"/>).
</ins>
</p>

<p>
-2-
The <code>is_error_code_enum</code> and <code>is_error_condition_enum</code>
templates may be specialized for program-defined types to indicate that such
types are eligible for <code>class error_code</code> and
<code>class error_condition</code> implicit conversions, respectively.
</p>

<p>
<ins>
<em>[Note 1:</em>
Conversions from such types are done by program-defined overloads of
<code>make_error_code</code> and <code>make_error_condition</code>,
found by ADL. <em>&mdash;end note]</em>
</ins>
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
