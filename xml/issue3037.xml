<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3037" status="C++20">
<title><tt>polymorphic_allocator</tt> and incomplete types</title>
<section><sref ref="[mem.poly.allocator.class]"/></section>
<submitter>Casey Carter</submitter>
<date>15 Nov 2017</date>
<priority>2</priority>

<discussion>
<p>
<tt>polymorphic_allocator</tt> can trivially support the allocator completeness
requirements (<sref ref="[allocator.requirements.completeness]"/>) just as does
the default allocator. Doing so imposes no implementation burden, and enables
<tt>pmr::forward_list</tt>, <tt>pmr::list</tt>, and <tt>pmr::vector</tt> to
support incomplete types as do the non-<tt>pmr</tt> equivalents.
</p>

<note>2018-01; Priority set to 2 after mailing list discussion</note>

<note>2018-08-23 Batavia Issues processing</note>
<p>Status to Tentatively Ready</p>
<note>2018-11, Adopted in San Diego</note>
</discussion>

<resolution>
<p>
Wording relative to <a href="https://wg21.link/n4700">N4700</a>.
</p>

<ol>
<li>
<p>
Add a new paragraph in <sref ref="[mem.poly.allocator.class]"/> after para 1:
</p>
<blockquote>
<p>
1 A specialization of class template <tt>pmr::polymorphic_allocator</tt> conforms
to the <tt>Allocator</tt> requirements [...]
</p>
<p>
<ins>-?- All specializations of class template <tt>pmr::polymorphic_allocator</tt>
satisfy the allocator completeness requirements (<sref ref="[allocator.requirements.completeness]"/>).</ins>
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
