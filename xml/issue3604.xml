<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3604" status="New">
<title>What is the effect of an invalid value of type <tt>syntax_option_type</tt>?</title>
<section><sref ref="[re.regex.construct]"/><sref ref="[re.synopt]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>27 Sep 2021</date>
<priority>99</priority>

<discussion>
<p>
<sref ref="[re.synopt]"/> says:
</p>
<blockquote><p>
A valid value of type <tt>syntax_option_type</tt> shall have at most one of the grammar elements <tt>ECMAScript</tt>, 
<tt>basic</tt>, <tt>extended</tt>, <tt>awk</tt>, <tt>grep</tt>, <tt>egrep</tt>, set.
</p></blockquote>
<p>
But then we never say what happens if an invalid value is used.
<p/>
What does <tt>std::regex(".", std::regex::grep|std::regex::awk)</tt> do? Is it undefined? Does it throw?
<p/>
It seems reasonable for <tt>basic_regex</tt> constructors to throw if <tt>f</tt> is not a valid value, i.e. 
for each non-default constructor:
</p>
<blockquote><p>
<i>Throws:</i> <tt>regex_error</tt> <ins>if <tt>f</tt> is not a valid value, or</ins> if [&hellip;] is not a valid 
regular expression according to the grammar specified by <tt>f</tt>.
</p></blockquote>
<p>
However, there is no <tt>regex_constants::error_code</tt> value suitable for this error condition.
<p/>
Also, the constructors say "<i>Postconditions:</i> <tt>flags()</tt> returns <tt>f</tt>." This prevents an 
implementation from storing <tt>f|ECMAScript</tt> in <tt>flags()</tt> if no grammar element is present in <tt>f</tt>. 
This seems like an unnecessary restriction, and forces implementations to do extra work to check if the 
<tt>ECMAScript</tt> grammar is in use. Arguably, it would even be better to require implementations to set 
<tt>ECMAScript</tt> in <tt>flags()</tt> if no grammar element was set in the flags passed to the constructor.
<p/>
This problem was introduced by LWG <iref ref="2330"/>.
</p>
</discussion>

<resolution>
</resolution>

</issue>
