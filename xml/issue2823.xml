<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2823" status="New">
<title><tt>std::array</tt> initialization is still not permissive enough</title>
<section><sref ref="[array.overview]"/></section>
<submitter>Robert Haberlach</submitter>
<date>16 Nov 2016</date>
<priority>99</priority>

<discussion>
<p>
LWG <iref ref="2590"/>'s resolution is incomplete:
</p>
<blockquote><pre>
std::array&lt;int, 1&gt; arr{{0}};
</pre></blockquote>
<p>
should be fine, but isn't guaranteed, since <tt>{0}</tt> has no type. We should rather go for implicit conversion:
</p>
<blockquote><p>
An array is an aggregate (<sref ref="[dcl.init.aggr]"/>) that can be list-initialized with up to <tt>N</tt> elements 
<del>whose types are convertible to <tt>T</tt></del><ins>that can be implicitly converted to <tt>T</tt></ins>.
</p></blockquote>

<note>2016-11-26, Tim Song comments</note>
<p> 
This is not possible as written, because due to the brace elision rules for aggregate initialization,
<tt>std::array&lt;int, 2&gt; arr{{0}, {1}};</tt> will never work: the <tt>{0}</tt> 
is taken as initializing the inner array, and the <tt>{1}</tt> causes an error.
</p>
</discussion>

<resolution>
<p>
This wording is relative to N4606.
</p>
<ol>
<li><p>Change <sref ref="[array.overview]"/> p2 as indicated:</p>

<blockquote>
<p>
-2- An <tt>array</tt> is an aggregate (<sref ref="[dcl.init.aggr]"/>) that can be list-initialized with up to <tt>N</tt> 
elements <del>whose types are convertible</del><ins>that can be implicitly converted</ins> to <tt>T</tt>.
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
