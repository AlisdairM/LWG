<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3388" status="Immediate">
<title><tt>view</tt> iterator types have ill-formed <tt>&lt;=&gt;</tt> operators</title>
<section><sref ref="[range.iota.iterator]"/><sref ref="[range.transform.iterator]"/>
         <sref ref="[range.elements.iterator]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>7 Feb 2020</date>
<priority>0</priority>

<discussion>
<p>
<sref ref="[range.iota.iterator]"/> and <sref ref="[range.transform.iterator]"/> and 
<sref ref="[range.elements.iterator]"/> all declare <tt>operator&lt;=&gt;</tt> similar to this:
</p>
<blockquote><pre>
friend constexpr compare_three_way_result_t&lt;W&gt; operator&lt;=&gt;(
    const iterator&amp; x, const iterator&amp; y)
  requires totally_ordered&lt;W&gt; &amp;&amp; three_way_comparable&lt;W&gt;;
</pre></blockquote>
<p>
Similar to issue <iref ref="3347"/> and issue <iref ref="3387"/>, this is ill-formed if 
<tt>three_way_comparable&lt;W&gt;</tt> is not satisfied, because <tt>compare_three_way_result_t&lt;W&gt;</tt> 
is invalid. This declaration is instantiated when the enclosing iterator type is instantiated, making 
any use of <tt>iota_view&lt;W, B&gt;::iterator</tt> ill-formed when <tt>three_way_comparable&lt;W&gt;</tt> 
is not satisfied.
<p/>
We can either add an exposition-only <tt><i>safe-compare-three-way-result-t</i></tt> alias that denotes 
<tt>void</tt> or <tt>std::nonesuch</tt> for spaceship-less types, so the declaration is valid (and then 
disabled by the constraints), or simply make them return <tt>auto</tt>.
</p>

<note>2020-02 Prioritized as IMMEDIATE Monday morning in Prague</note>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4849">N4849</a>.</p>

<ol>
<li><p>Modify <sref ref="[range.iota.iterator]"/> as indicated:</p>

<blockquote>
<blockquote>
<pre>
namespace std::ranges {
  template&lt;class W, class Bound&gt;
  struct iota_view&lt;W, Bound&gt;::<i>iterator</i> {
    [&hellip;]
    friend constexpr <del>compare_three_way_result_t&lt;W&gt;</del><ins>auto</ins> operator&lt;=&gt;(
        const <i>iterator</i>&amp; x, const <i>iterator</i>&amp; y)
      requires totally_ordered&lt;W&gt; &amp;&amp; three_way_comparable&lt;W&gt;;
    [&hellip;]
  };
  [&hellip;]
}
</pre>
[&hellip;]
</blockquote>
<blockquote>
<pre>
friend constexpr <del>compare_three_way_result_t&lt;W&gt;</del><ins>auto</ins>
  operator&lt;=&gt;(const <i>iterator</i>&amp; x, const <i>iterator</i>&amp; y)
    requires totally_ordered&lt;W&gt; &amp;&amp; three_way_comparable&lt;W&gt;;
</pre>
<blockquote>
<p>
-19- <i>Effects:</i> Equivalent to: <tt>return x.value_ &lt;=&gt; y.value_;</tt>
</p>
</blockquote>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.transform.iterator]"/> as indicated:</p>

<blockquote>
<blockquote>
<pre>
namespace std::ranges {
  template&lt;class V, class F&gt;
  template&lt;bool Const&gt;
  class transform_view&lt;V, F&gt;::<i>iterator</i> {
    [&hellip;]
    friend constexpr <del>compare_three_way_result_t&lt;iterator_t&lt;<i>Base</i>&gt;&gt;</del><ins>auto</ins> 
      operator&lt;=&gt;(const <i>iterator</i>&amp; x, const <i>iterator</i>&amp; y)
        requires random_access_range&lt;<i>Base</i>&gt; &amp;&amp; three_way_comparable&lt;iterator_t&lt;<i>Base</i>&gt;&gt;;
    [&hellip;]
  };
  [&hellip;]
}
</pre>
[&hellip;]
</blockquote>
<blockquote>
<pre>
friend constexpr <del>compare_three_way_result_t&lt;iterator_t&lt;<i>Base</i>&gt;&gt;</del><ins>auto</ins>
  operator&lt;=&gt;(const <i>iterator</i>&amp; x, const <i>iterator</i>&amp; y)
    requires random_access_range&lt;<i>Base</i>&gt; &amp;&amp; three_way_comparable&lt;iterator_t&lt;<i>Base</i>&gt;&gt;;
</pre>
<blockquote>
<p>
-19- <i>Effects:</i> Equivalent to: <tt>return x.<i>current_</i> &lt;=&gt; y.<i>current_</i>;</tt>
</p>
</blockquote>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.elements.iterator]"/> as indicated:</p>

<blockquote>
<blockquote>
<pre>
namespace std::ranges {
  template&lt;class V, size_t N&gt;
  template&lt;bool Const&gt;
  class elements_view&lt;V, N&gt;::<i>iterator</i> {
    [&hellip;]
    friend constexpr <del>compare_three_way_result_t&lt;iterator_t&lt;<i>base-t</i>&gt;&gt;</del><ins>auto</ins> 
      operator&lt;=&gt;(const <i>iterator</i>&amp; x, const <i>iterator</i>&amp; y)
        requires random_access_range&lt;<i>base-t</i>&gt; &amp;&amp; three_way_comparable&lt;iterator_t&lt;<i>base-t</i>&gt;&gt;;
    [&hellip;]
  };
  [&hellip;]
}
</pre>
[&hellip;]
</blockquote>
<blockquote>
<pre>
friend constexpr <del>compare_three_way_result_t&lt;iterator_t&lt;<i>base-t</i>&gt;&gt;</del><ins>auto</ins>
  operator&lt;=&gt;(const <i>iterator</i>&amp; x, const <i>iterator</i>&amp; y)
    requires random_access_range&lt;<i>base-t</i>&gt; &amp;&amp; three_way_comparable&lt;iterator_t&lt;<i>base-t</i>&gt;&gt;;
</pre>
<blockquote>
<p>
-18- <i>Effects:</i> Equivalent to: <tt>return x.<i>current_</i> &lt;=&gt; y.<i>current_</i>;</tt>
</p>
</blockquote>
</blockquote>
</blockquote>
</li>
</ol></resolution>

</issue>
