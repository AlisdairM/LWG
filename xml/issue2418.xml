<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2418" status="WP">
<title>[fund.ts] <tt>apply</tt> does not work with member pointers</title>
<section><sref ref="[tuple.apply]"/></section>
<submitter>Zhihao Yuan</submitter>
<date>8 Jul 2014</date>
<priority>0</priority>

<discussion>
<p><b>Addresses: fund.ts</b></p>
<p>
The definition of <tt>apply</tt> present in &sect;3.2.2 [tuple.apply] prevents this
function template to be used with pointer to members type passed as the first argument.
</p>
<blockquote>
<i>Effects:</i> 
<p/>
[&hellip;]
<p/>
<tt>return std::forward&lt;F&gt;(f)(std::get&lt;I&gt;(std::forward&lt;Tuple&gt;(t))...);</tt>
</blockquote>
<p>
This makes this utility inconsistent with other standard library components and limits its usability.
<p/>
We propose to define its functionally in terms of <tt><i>INVOKE</i></tt>.
</p>

<note>2015-02, Cologne</note>
<p>
DK: We should use the new <tt>std::invoke</tt>.<br/> 
TK: Is this a defect?<br/> 
AM: <tt>std::invoke</tt> goes into C++17, and this is a defect against a TS based on C++14. We can change this later, 
but now leave it as INVOKE.<br/> 
GR: The TS lets you have Editor's Notes, so leave a note to make that change for C++17.
<p/>
[&hellip;]
<p/>
GR: I can't see how we can assume this is part of the design. I cannot believe it was ever intended for this 
design to exclude function pointers.<br/>  
AM: I can give you the exact evolution: We had "apply" as an example explaining the usefulness of <tt>index_sequence</tt>. 
Then someone looked at it and said, "why isn't this in the Standard". NJ to VV: Why are you against useful steps? 
We are trying to converge on a consistent standard across multiple documents. The alternative is to reopen this 
in a later discussion.<br/>  
VV: All I said is that this is not defect, whether or not people like it.<br/>  
AM: So you'd be fine with the issue, but not as a DR?<br/> 
Straw poll: Who's happy to make this tentatively ready as a DR against the Fundamentals TS? 
Lots of agreement, no opposition, 3 neutrals
</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4081.html">N4081</a> 
in regard to fundamental-ts changes.</p>

<ol>
<li><p>Edit &sect;3.2.2 [tuple.apply] paragraph 2:</p>

<blockquote>
<pre>
template &lt;class F, class Tuple&gt;
constexpr decltype(auto) apply(F&amp;&amp; f, Tuple&amp;&amp; t);
</pre>
<blockquote>
<p>
-2- <i>Effects</i>: Given the exposition only function
</p>
<blockquote>
<pre>
template &lt;class F, class Tuple, size_t... I&gt;
constexpr decltype(auto) apply_impl(  // <i>exposition only</i>
    F&amp;&amp; f, Tuple&amp;&amp; t, index_sequence&lt;I...&gt;) {
  return <ins><i>INVOKE</i>(</ins>std::forward&lt;F&gt;(f)<del>(</del><ins>, </ins>std::get&lt;I&gt;(std::forward&lt;Tuple&gt;(t))...);
}
</pre>
<p>
[&hellip;]
</p>
</blockquote>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
