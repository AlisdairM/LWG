<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4165" status="New">
<title>Should swapping a built-in array or `std::array` with itself result in UB?</title>
<section><sref ref="[concept.swappable]"/><sref ref="[utility.swap]"/><sref ref="[array.members]"/></section>
<submitter>Jiang An</submitter>
<date>13 Oct 2024</date>
<priority>99</priority>

<discussion>
<p>
Currently, the `std::swap` overload for built-in arrays, the `swap` member function of 
`std::array`, the `std::swap` overload for `std::array`, and the expression-equivalent-to 
operation of `std::ranges::swap` for built-in arrays are specified to be equivalent to performing 
`std::(ranges::)swap_ranges`. As `swap_ranges` functions require that the swapped ranges shall 
not overlap (<sref ref="[alg.swap]"/>/2), swapping a built-in array or a nonzero-length 
<tt>std::array</tt> with itself results in undefined behavior.
<p/>
It seems that no other swap operation in the standard library has precondition that both arguments 
don't refer to the same object. Should we make self-swapping of arrays well-defined? If so, 
perhaps we should change the semantics to plain loops that execute `swap` or `ranges::swap` on 
elements.
</p>
</discussion>

<resolution>
</resolution>

</issue>
