<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3096" status="New">
<title><tt>path::lexically_relative</tt> is confused by trailing slashes</title>
<section><sref ref="[fs.path.gen]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>4 Apr 2018</date>
<priority>99</priority>

<discussion>
<p>
<tt>filesystem::proximate("/dir", "/dir/")</tt> returns <tt>"."</tt> when <tt>"/dir"</tt> exists, and <tt>".."</tt> 
otherwise. It should always be <tt>"."</tt> because whether it exists shouldn't matter.
<p/>
The problem is in <tt>filesystem::path::lexically_relative</tt>, as shown by:
</p>
<blockquote><pre>
path("/dir").lexically_relative("/dir/.");  <i>// yields ""</i>
path("/dir").lexically_relative("/dir/");   <i>// yields ".."</i>
</pre></blockquote>
<p>
The two calls should yield the same result, and when iteration of a <tt>path</tt> with a trailing slash gave "." as the final 
element they did yield the same result. In the final C++17 spec the trailing slash produces an empty filename in the 
iteration sequence, and <tt>lexically_relative</tt> doesn't handle that correctly.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <a href="http://wg21.link/n4727">N4727</a>.
</p>

<ol>
<li>
<p>Edit <sref ref="[fs.path.gen]"/> as indicated:</p>
<blockquote>
<pre>
path lexically_relative(const path&amp; base) const;
</pre>
<blockquote>
<p>
-3- <i>Returns:</i> <tt>*this</tt> made relative to <tt>base</tt>. Does not resolve (<sref ref="[fs.class.path]"/>) symlinks. 
Does not first normalize (<sref ref="[fs.path.generic]"/>) <tt>*this</tt> or <tt>base</tt>.
<p/>
-4- <i>Effects:</i> If <tt>root_name() != base.root_name()</tt> is <tt>true</tt> or <tt>is_absolute() != base.is_absolute()</tt>
is <tt>true</tt> or <tt>!has_root_directory() &amp;&amp; base.has_root_directory()</tt> is <tt>true</tt>, returns <tt>path()</tt>. 
Determines the first mismatched element of <tt>*this</tt> and <tt>base</tt> as if by:
</p>
<blockquote><pre>
auto [a, b] = mismatch(begin(), end(), base.begin(), base.end());
</pre></blockquote>
<p>
Then,
</p>
<ol style="list-style-type: none">
<li><p>(4.1) &mdash; if <tt>a == end()</tt> and <tt>b == base.end()</tt>, returns <tt>path(".")</tt>; otherwise</p></li>
<li><p>(4.2) &mdash; let <tt>n</tt> be the number of <i>filename</i> elements in <tt>[b, base.end())</tt> that are not dot 
or dot-dot <ins>or empty,</ins> minus the number that are dot-dot. If <tt>n&lt;0</tt>, returns <tt>path()</tt>; otherwise</p></li>
<li><p>[&hellip;]</p></li>
</ol>

</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
