<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3857" status="Tentatively Ready">
<title><tt>basic_string_view</tt> should allow explicit conversion when only traits vary</title>
<section><sref ref="[string.view.cons]"/></section>
<submitter>Casey Carter</submitter>
<date>10 Jan 2023</date>
<priority>99</priority>

<discussion>
<p>
<tt>basic_string_view</tt> has a constructor that converts appropriate contiguous ranges to <tt>basic_string_view</tt>. 
This constructor accepts an argument by forwarding reference (<tt>R&amp;&amp;</tt>), and has several constraints 
including that specified in <sref ref="[string.view.cons]"/>/12.6: 
</p>
<blockquote><p>
if the <i>qualified-id</i> <tt>remove_reference_t&lt;R&gt;::traits_type</tt> is valid and denotes a type, 
<tt>is_same_v&lt;remove_reference_t&lt;R&gt;::traits_type, traits&gt;</tt> is <tt>true</tt>. 
</p></blockquote>
<p>
This constraint prevents conversions from <tt>basic_string_view&lt;C, T1&gt;</tt> and <tt>basic_string&lt;C, T1, A&gt;</tt> 
to <tt>basic_string_view&lt;C, T2&gt;</tt>. Preventing such seemingly semantic-affecting conversions from happening 
implicitly was a good idea, but since the constructor was changed to be explicit it no longer seems necessary to 
forbid these conversions. If a user wants to convert a <tt>basic_string_view&lt;C, T2&gt;</tt> to 
<tt>basic_string_view&lt;C, T1&gt;</tt> with <tt>static_cast&lt;basic_string_view&lt;C, T1&gt;&gt;(meow)</tt>
instead of by writing out <tt>basic_string_view&lt;C, T1&gt;{meow.data(), meow.size()}</tt> that seems fine to me.
Indeed, if we think conversions like this are so terribly dangerous we probably shouldn't be performing them ourselves 
in <sref ref="[format.arg]"/>/9 and <sref ref="[format.arg]"/>/10.
</p>

<note>2023-02-01; Reflector poll</note>
<p>
Set status to Tentatively Ready after six votes in favour during reflector poll.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4917"/>.
</p>

<ol>
<li><p>Modify <sref ref="[string.view.cons]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class R&gt;
  constexpr explicit basic_string_view(R&amp;&amp; r);
</pre>
<blockquote>
<p>
-11- Let <tt>d</tt> be an lvalue of type <tt>remove_cvref_t&lt;R&gt;</tt>.
<p/>
-12- <i>Constraints</i>:
</p>
<ol style="list-style-type: none">
<li><p>(12.1) &mdash; <tt>remove_cvref_t&lt;R&gt;</tt> is not the same type as <tt>basic_string_view</tt>,</p></li>
<li><p>(12.2) &mdash; <tt>R</tt> models <tt>ranges::contiguous_range</tt> and <tt>ranges::sized_range</tt>,</p></li>
<li><p>(12.3) &mdash; <tt>is_same_v&lt;ranges::range_value_t&lt;R&gt;, charT&gt;</tt> is <tt>true</tt>,</p></li>
<li><p>(12.4) &mdash; <tt>is_convertible_v&lt;R, const charT*&gt;</tt> is <tt>false</tt>, <ins>and</ins></p></li>
<li><p>(12.5) &mdash; <tt>d.operator ::std::basic_string_view&lt;charT, traits&gt;()</tt> is not a valid expression<del>, and</del><ins>.</ins></p></li>
<li><p><del>(12.6) &mdash; if the <i>qualified-id</i> <tt>remove_reference_t&lt;R&gt;::traits_type</tt> is valid and denotes a type, 
<tt>is_same_v&lt;remove_reference_t&lt;R&gt;::traits_type, traits&gt;</tt> is <tt>true</tt>.</del></p></li>
</ol>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
