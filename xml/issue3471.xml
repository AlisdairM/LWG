<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3471" status="C++23">
<title><tt>polymorphic_allocator::allocate</tt> does not satisfy <i>Cpp17Allocator</i> requirements</title>
<section><sref ref="[mem.res]"/></section>
<submitter>Alisdair Meredith</submitter>
<date>27 Jul 2020</date>
<priority>3</priority>

<discussion>
<p>
With the adoption of <a href="https://wg21.link/p0593r6">P0593R6</a> in Prague,
<tt>std::ptr::polymorphic_allocator</tt> no longer satisfies the of <i>Cpp17Allocator</i>
requirements. Specifically, all calls to <tt>allocate(n)</tt> need to create an object
for an array of <tt>n T</tt>s (but not initialize any of those elements).
<tt>std::pmr::polymorphic_allocator</tt> calls its underlying memory resource to allocate
sufficient bytes of storage, but it does not create (and start the lifetime of) the array
object within that storage.
</p>

<note>2020-08-03; Billy comments</note>
<p>
It's worth noting that the resolution of <a href="https://wg21.link/cwg2382">CWG 2382</a>
has impact on implementors for this issue.
</p>

<note>2020-08-21; Reflector prioritization</note>
<p>
Set priority to 3 after reflector discussions.
</p>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>
This wording is relative to <a href="https://wg21.link/n4861">N4861</a>.
</p>

<blockquote class="note">
<p>
[<i>Drafting note:</i> The proposed wording is inspired by the example given in the "Assertion/note" column of the expression
<tt>a.allocate(n)</tt> in table [tab:cpp17.allocator].]
</p>
</blockquote>

<ol>
<li><p>Modify <sref ref="[mem.res.public]"/> as indicated:</p>

<blockquote>
<pre>
[[nodiscard]] void* allocate(size_t bytes, size_t alignment = max_align);
</pre>
<blockquote>
<p>
-2- <i>Effects:</i> Equivalent to: <del><tt>return do_allocate(bytes, alignment);</tt></del>
</p>
<blockquote><pre>
<ins>void* p = do_allocate(bytes, alignment);
return launder(new (p) byte[bytes]);</ins>
</pre></blockquote>
</blockquote>
</blockquote>
</li>
</ol>
</blockquote>

<note>2021-05-20 Tim comments and updates wording</note>
<p>
<tt>memory_resource::allocate</tt> is the PMR equivalent of <tt>malloc</tt>
and <tt>operator new</tt>. It therefore needs the "suitable created object"
wording (see <sref ref="[intro.object]"/>, <sref ref="[c.malloc]"/>).
This ensures that it creates the requisite array object automatically for all
the allocation functions of <tt>polymorphic_allocator</tt>,
and returns the correct pointer value in all cases.
</p>

<note>2022-01-31; Reflector poll</note>
<p>
Set status to Tentatively Ready after seven votes in favour during reflector poll.
</p>

<note>2022-02-10 Approved at February 2022 virtual plenary. Status changed: Tentatively Ready &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4885">N4885</a>.
</p>

<ol>
<li><p>Modify <sref ref="[mem.res.public]"/> as indicated:</p>

<blockquote>
<pre>
[[nodiscard]] void* allocate(size_t bytes, size_t alignment = max_align);
</pre>
<blockquote>
<p>
-2- <i>Effects:</i> <del>Equivalent to: <tt>return</tt></del>
<ins>Allocates storage by calling</ins> <tt>do_allocate(bytes, alignment)</tt><del><tt>;</tt></del>
<ins>and implicitly creates objects within the allocated region of storage.</ins>
<p/>
<ins>-?- <i>Returns:</i> A pointer to a suitable created object
(<sref ref="[intro.object]"/>) in the allocated region of storage.</ins>
<p/>
<ins>-?- <i>Throws:</i> What and when the call to <tt>do_allocate</tt> throws.</ins>
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
