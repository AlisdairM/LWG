<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2964" status="Ready">
<title>Apparently redundant requirement for <tt>dynamic_pointer_cast</tt></title>
<section><sref ref="[util.smartptr.shared.cast]"/></section>
<submitter>Tim Song</submitter>
<date>11 May 2017</date>
<priority>0</priority>

<discussion>
<p>
Currently <sref ref="[util.smartptr.shared.cast]"/>/4 says:
</p>
<blockquote><p>
<i>Requires:</i> The expression <tt>dynamic_cast&lt;T*&gt;((U*)nullptr)</tt> shall be well
formed and shall have well defined behavior.
</p></blockquote>
<p>
A <tt>dynamic_cast</tt> of a null pointer, if well-formed, always has
well-defined behavior: it returns a null pointer. The second part is
therefore redundant as currently worded. The C++14 version, on the
other hand, requires <tt>dynamic_cast&lt;T*&gt;(r.get())</tt> to have well-defined
behavior, which actually adds something: it requires the user to not
trigger the undefined case in [class.cdtor]/5, for instance.
</p>

<note>2017-07 Toronto Monday issue prioritization</note>
<p>Priority 0; move to Ready</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4659">N4659</a>.</p>

<ol>
<li>
<p>Edit <sref ref="[util.smartptr.shared.cast]"/> as indicated:</p>

<blockquote>
<pre>
shared_ptr&lt;T&gt; dynamic_pointer_cast(const shared_ptr&lt;U&gt;&amp; r) noexcept;
</pre>
<blockquote>
<p>
-4- <i>Requires:</i> The expression <tt>dynamic_cast&lt;T*&gt;((U*)0)</tt> shall be well formed<ins>. The 
expression <tt>dynamic_cast&lt;typename shared_ptr&lt;T&gt;::element_type*&gt;(r.get())</tt> shall be well 
formed</ins> and shall have well defined behavior.
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
