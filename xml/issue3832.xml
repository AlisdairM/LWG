<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3832" status="New">
<title>Missing change for <tt>element_view::<i>iterator</i></tt> in LWG 3798</title>
<section><sref ref="[range.elements.iterator]"/></section>
<submitter>Jiang An</submitter>
<date>23 Nov 2022</date>
<priority>3</priority>

<discussion>
<p>
In LWG <iref ref="3798"/> (voted into WP in November 2022), iterator types of several range adaptors may have 
<tt>forward_iterator_tag</tt> or stronger iterator tag types as their <tt>iterator_category</tt> type when 
their <tt>operator*</tt> returns rvalue references. However, the proposed resolution missed the similar change 
for <tt>element_view::<i>iterator</i></tt>.
</p>

<note>2022-11-30; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
</p>
<p>
"The proposed resolution is incorrect - just because the <tt>get</tt>
expression is an xvalue doesn't mean <tt>operator*</tt> returns by reference."
</p>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>
This wording is relative to <paper num="N4917"/>.
</p>

<ol>
<li><p>Modify <sref ref="[range.elements.iterator]"/> as indicated:</p>

<blockquote>
<p>
-2- The member <i>typedef-name</i> <tt>iterator_category</tt> is defined if and only if <tt><i>Base</i></tt> 
models <tt>forward_range</tt>. In that case, <tt>iterator_category</tt> is defined as follows: Let <tt>C</tt> 
denote the type <tt>iterator_traits&lt;iterator_t&lt;<i>Base</i>&gt;&gt;::iterator_category</tt>.
</p>
<ol style="list-style-type: none">
<li><p>(2.1) &mdash; If <tt>std::get&lt;N&gt;(*<i>current_</i>)</tt> is a<del>n</del> <ins>p</ins>rvalue, 
<tt>iterator_category</tt> denotes <tt>input_iterator_tag</tt>.</p></li>
<li><p>(2.2) &mdash; Otherwise, if <tt>C</tt> models <tt>derived_from&lt;random_access_iterator_tag&gt;</tt>, 
<tt>iterator_category</tt> denotes <tt>random_access_iterator_tag</tt>.</p></li>
<li><p>(2.3) &mdash; Otherwise, <tt>iterator_category</tt> denotes <tt>C</tt>.</p></li>
</ol>
</blockquote>
</li>

</ol>
</blockquote>

<note>2023-01-22; Jiang An comments and provides improved wording</note>
<p>
The old proposed resolution was incorrect. I think the correct criteria could be that determined from the return type of 
<tt><i>get-element</i></tt>.
</p>

<superseded>
<p>
This wording is relative to <paper num="N4928"/>.
</p>

<ol>
<li><p>Modify <sref ref="[range.elements.iterator]"/> as indicated:</p>

<blockquote>
<p>
-2- The member <i>typedef-name</i> <tt>iterator_category</tt> is defined if and only if <tt><i>Base</i></tt> 
models <tt>forward_range</tt>. In that case, <tt>iterator_category</tt> is defined as follows: Let <tt>C</tt> 
denote the type <tt>iterator_traits&lt;iterator_t&lt;<i>Base</i>&gt;&gt;::iterator_category</tt>.
</p>
<ol style="list-style-type: none">
<li><p>(2.1) &mdash; If <ins><tt>range_reference_t&lt;<i>Base</i>&gt;</tt> is a reference type and</ins> 
<tt>std::get&lt;N&gt;(*<i>current_</i>)</tt> is a<del>n</del> <ins>p</ins>rvalue <ins>or neither 
<tt>range_reference_t&lt;<i>Base</i>&gt;</tt> nor <tt>tuple_element_t&lt;N, range_reference_t&lt;<i>Base</i>&gt;</tt> 
is a reference type</ins>, <tt>iterator_category</tt> denotes <tt>input_iterator_tag</tt>.</p></li>
<li><p>(2.2) &mdash; Otherwise, if <tt>C</tt> models <tt>derived_from&lt;random_access_iterator_tag&gt;</tt>, 
<tt>iterator_category</tt> denotes <tt>random_access_iterator_tag</tt>.</p></li>
<li><p>(2.3) &mdash; Otherwise, <tt>iterator_category</tt> denotes <tt>C</tt>.</p></li>
</ol>
</blockquote>
</li>

</ol>
</superseded>

<note>2024-07-08; Hewill Kang provides improved wording</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4986"/>.
</p>

<ol>
<li><p>Modify <sref ref="[range.elements.iterator]"/> as indicated:</p>

<blockquote>
<p>
-2- The member <i>typedef-name</i> <code>iterator_category</code> is defined if and only if <code><i>Base</i></code> 
models <code>forward_range</code>. In that case, <code>iterator_category</code> is defined as follows: Let <code>C</code> 
denote the type <code>iterator_traits&lt;iterator_t&lt;<i>Base</i>&gt;&gt;::iterator_category</code>.
</p>
<ol style="list-style-type: none">
<li><p>(2.1) &mdash; If <del><code>std::get&lt;N&gt;(*<i>current_</i>)</code></del><ins><tt>is_reference_v&lt;decltype(<i>get-element</i>(<i>current_</i>))&gt;</tt></ins> 
is <del>an rvalue</del><ins><tt>false</tt></ins>, <code>iterator_category</code> denotes <code>input_iterator_tag</code>.</p></li>
<li><p>(2.2) &mdash; Otherwise, if <code>C</code> models <code>derived_from&lt;random_access_iterator_tag&gt;</code>, 
<code>iterator_category</code> denotes <code>random_access_iterator_tag</code>.</p></li>
<li><p>(2.3) &mdash; Otherwise, <code>iterator_category</code> denotes <code>C</code>.</p></li>
</ol>
</blockquote>
</li>

</ol>

</resolution>

</issue>
