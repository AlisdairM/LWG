<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3104" status="C++20">
<title>Fixing <tt>duration</tt> division</title>
<section><sref ref="[time.duration.nonmember]"/></section>
<submitter>Johel Ernesto Guerrero Pe&ntilde;a</submitter>
<date>17 Apr 2018</date>
<priority>0</priority>

<discussion>
<p>
[time.duration.nonmember]/1 states
</p>
<blockquote><p>
In the function descriptions that follow, <tt>CD</tt> represents the return type of the function.
</p></blockquote>
<p>
From what I could find, many definitions of <tt>CD</tt> in the paragraphs of [time.duration.nonmember] were lifted to 
[time.duration.nonmember]/1 as cited above. That works for all other paragraphs, but not for [time.duration.nonmember]/10, 
which the change rendered ill-formed:
</p>
<blockquote>
<pre>
template&lt;class Rep1, class Period1, class Rep2, class Period2&gt;
  constexpr common_type_t&lt;Rep1, Rep2&gt;
    operator/(const duration&lt;Rep1, Period1&gt;&amp; lhs, const duration&lt;Rep2, Period2&gt;&amp; rhs);
</pre>
<blockquote>
<i>Returns:</i> <tt>CD(lhs).count() / CD(rhs).count()</tt>.
</blockquote>
</blockquote>
<p>
In this case, we want <tt>CD</tt> to mean <tt>common_type_t&lt;duration&lt;Rep1, Period1&gt;, duration&lt;Rep2, Period2&gt;&gt;</tt>. 
That way, the division has the expected semantics of dividing two quantities of the same dimension.
</p>

<note>
2018-04-24 Moved to Tentatively Ready after 6 positive votes on c++std-lib.
</note>

<note>2018-06 Rapperswil: Adopted</note>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4741">N4741</a>.</p>

<blockquote>
<ol>
<li>
<p>Edit <sref ref="[time.duration.nonmember]"/> as indicated:</p>
<blockquote>
<p>
-1- In the function descriptions that follow, <ins>unless stated otherwise, let</ins> <tt>CD</tt> represent<del>s</del> 
the return type of the function.
<p/>
[&hellip;]
</p>
<pre>
template&lt;class Rep1, class Period1, class Rep2, class Period2&gt;
  constexpr common_type_t&lt;Rep1, Rep2&gt;
    operator/(const duration&lt;Rep1, Period1&gt;&amp; lhs, const duration&lt;Rep2, Period2&gt;&amp; rhs);
</pre>
<blockquote>
<p>
<ins>Let <tt>CD</tt> be <tt>common_type_t&lt;duration&lt;Rep1, Period1&gt;, duration&lt;Rep2, Period2&gt;&gt;</tt>.</ins>
<p/>
-10- <i>Returns:</i> <tt>CD(lhs).count() / CD(rhs).count()</tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</blockquote>
</resolution>

</issue>
