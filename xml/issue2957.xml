<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2957" status="New">
<title><tt>bind</tt>'s specification doesn't apply the <i>cv</i>-qualification of the call wrapper to the callable object</title>
<section><sref ref="[func.bind.bind]"/></section>
<submitter>Tim Song</submitter>
<date>4 May 2017</date>
<priority>99</priority>

<discussion>
<p>
According to <sref ref="[func.bind.bind]"/>/1.2,
</p>
<blockquote><p>
<tt>fd</tt> is an lvalue of type <tt>FD</tt> constructed from <tt>std::forward&lt;F&gt;(f)</tt>,
</p></blockquote>
<p>
and then uses <tt>fd</tt> throughout the specification, seemingly without
regard to the <i>cv</i>-qualification of the call wrapper <tt>g</tt>. But this
definition means that <tt>fd</tt> is always <i>cv</i>-unqualified, rather than having
its <i>cv</i>-qualification change with that of <tt>g</tt> as intended.
<p/>
LWG <iref ref="2545"/> accidentally exacerbated the problem by removing any hint that
<tt>fd</tt>'s <i>cv</i>-qualifier followed that of the call wrapper.
<p/>
A similar issue affects the type of <tt>td<sub><i>i</i></sub></tt> for nested binds.
</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4659">N4659</a>.</p>

<ol>
<li><p>Edit <sref ref="[func.bind.bind]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class F, class... BoundArgs&gt;
  <i>unspecified</i> bind(F&amp;&amp; f, BoundArgs&amp;&amp;... bound_args);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-3- <i>Returns:</i> A forwarding call wrapper <tt>g</tt> (<sref ref="[func.require]"/>). The effect of 
<tt>g(u<sub>1</sub>, u<sub>2</sub>, ..., u<sub><i>M</i></sub>)</tt> shall be
</p>
<blockquote><pre>
<i>INVOKE</i>(<ins>static_cast&lt;FD <i>cv</i> &amp;&gt;(</ins>fd<ins>)</ins>, std::forward&lt;V<sub>1</sub>&gt;(v<sub>1</sub>), 
  std::forward&lt;V<sub>2</sub>&gt;(v<sub>2</sub>), ..., std::forward&lt;V<sub><i>N</i></sub>&gt;(v<sub><i>N</i></sub>))
</pre></blockquote>
<p>
where <ins><i>cv</i> represents the <i>cv</i>-qualifiers of <tt>g</tt> and</ins> the values and types of the bound arguments 
<tt>v<sub>1</sub>, v<sub>2</sub>, . . . , v<sub><i>N</i></sub></tt> are determined as specified below. The copy constructor 
and move constructor of the forwarding call wrapper shall throw an exception if and only if the corresponding constructor 
of <tt>FD</tt> or of any of the types <tt>TD<sub><i>i</i></sub></tt> throws an exception.
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
template&lt;class R, class F, class... BoundArgs&gt;
  <i>unspecified</i> bind(F&amp;&amp; f, BoundArgs&amp;&amp;... bound_args);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-7- <i>Returns:</i> A forwarding call wrapper <tt>g</tt> (<sref ref="[func.require]"/>). The effect of 
<tt>g(u<sub>1</sub>, u<sub>2</sub>, ..., u<sub><i>M</i></sub>)</tt> shall be
</p>
<blockquote><pre>
<i>INVOKE</i>&lt;R&gt;(<ins>static_cast&lt;FD <i>cv</i> &amp;&gt;(</ins>fd<ins>)</ins>, std::forward&lt;V<sub>1</sub>&gt;(v<sub>1</sub>), 
  std::forward&lt;V<sub>2</sub>&gt;(v<sub>2</sub>), ..., std::forward&lt;V<sub><i>N</i></sub>&gt;(v<sub><i>N</i></sub>))
</pre></blockquote>
<p>
where <ins><i>cv</i> represents the <i>cv</i>-qualifiers of <tt>g</tt> and</ins> the values and types of the bound arguments 
<tt>v<sub>1</sub>, v<sub>2</sub>, . . . , v<sub><i>N</i></sub></tt> are determined as specified below. The copy constructor 
and move constructor of the forwarding call wrapper shall throw an exception if and only if the corresponding constructor 
of <tt>FD</tt> or of any of the types <tt>TD<sub><i>i</i></sub></tt> throws an exception.
<p/>
[&hellip;]
<p/>
-10- The values of the bound arguments <tt>v<sub>1</sub>, v<sub>2</sub>, ... , v<sub><i>N</i></sub></tt> and their 
corresponding types <tt>V<sub>1</sub>, V<sub>2</sub>, ... , V<sub><i>N</i></sub></tt> depend on 
the types <tt>TD<sub><i>i</i></sub></tt> derived from the call to <tt>bind</tt> and the <i>cv</i>-qualifiers <i>cv</i> of the 
call wrapper <tt>g</tt> as follows:
</p>
<ol style="list-style-type: none">
<li><p>(10.1) &mdash; [&hellip;]</p></li>
<li><p>(10.2) &mdash; if the value of <tt>is_bind_expression_v&lt;TD<sub><i>i</i></sub>&gt;</tt> is <tt>true</tt>, the 
argument is <tt><ins>static_cast&lt;TD<sub><i>i</i></sub> <i>cv</i> &amp;&gt;(</ins>td<sub><i>i</i></sub><ins>)</ins>(std::forward&lt;U<sub><i>j</i></sub>&gt;(u<sub><i>j</i></sub>)...)</tt> and its type <tt>V<sub><i>i</i></sub></tt> is 
<tt>invoke_result_t&lt;TD<sub><i>i</i></sub> <i>cv</i> &amp;, U<sub><i>j</i></sub>...&gt;&amp;&amp;</tt>;</p></li>
<li><p>(10.3) &mdash; [&hellip;]</p></li>
</ol>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
