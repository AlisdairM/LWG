<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4160" status="New">
<title><tt>packaged_task</tt> should reject rvalue reference return types</title>
<section><sref ref="[futures.task.general]"/></section>
<submitter>Casey Carter</submitter>
<date>28 Sep 2024</date>
<priority>3</priority>

<discussion>
<p>
`promise`, `future`, and `shared_future` all refuse rvalue reference types as template arguments 
(e.g., <sref ref="[futures.promise]"/> paragraphs 1 and 2), but <tt>packaged_task&lt;meow&amp;&amp;()&gt;</tt> 
violates no requirements. Its member `get_future` returns <tt>future&lt;meow&amp;&amp;&gt;</tt>, 
which is ill-formed, but the other member functions appear to be callable. Nonetheless, at least MSVCSTL, 
libc++, and libstdc++ all fail to compile simple uses of `packaged_task` with a function type that has 
an rvalue reference return type (see <a href="https://www.godbolt.org/z/5E18nn896">https://www.godbolt.org/z/5E18nn896</a>).
<p/>
Presumably the design intent &mdash; which the implementers all inferred &mdash; is that `packaged_task` 
should be ill-formed when `get_future` is not instantiable. The spec should say so explicitly rather than 
relying on the fact that one of the basis operations is unusable.
</p>

<note>2025-02-07; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
</p>
<p>
"Shouldn't it be ill-formed only if instantiated?"
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4988"/>.
</p>

<ol>
<li><p>Modify <sref ref="[futures.task.general]"/> as indicated:</p>

<blockquote>
<p>
[&hellip;]
<p/>
-2- When the <tt>packaged_task</tt> object is invoked, its stored task is invoked and the result 
(whether normal or exceptional) stored in the shared state. Any futures that share the shared state 
will then be able to access the stored result.
</p>
<blockquote>
<pre>
namespace std {
  template&lt;class&gt; class packaged_task; // <i>not defined</i>
  
  template&lt;class R, class... ArgTypes&gt;
  class packaged_task&lt;R(ArgTypes...)&gt; {
    [&hellip;]
  };
  
  template&lt;class R, class... ArgTypes&gt;
  packaged_task(R (*)(ArgTypes...)) -&gt; packaged_task&lt;R(ArgTypes...)&gt;;
  
  template&lt;class F&gt; packaged_task(F) -&gt; packaged_task&lt;<i>see below</i>&gt;;
}
</pre>
</blockquote>
<p>
<ins>-?- The program is ill-formed if <tt>R</tt> is an rvalue reference type.</ins>
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
