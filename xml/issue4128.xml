<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4128" status="New">
<title>Allocator requirements should not allow rebinding conversions to be explicit</title>
<section><sref ref="[allocator.requirements.general]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>02 Aug 2024</date>
<priority>99</priority>

<discussion>
<p>
The <i>Cpp17Allocator</i> requirements require a non-explicit copy constructor,
but do not require a non-explicit converting constructor used for rebinding.
</p>
<p>
Since C++14 it has been clearly stated that
"An allocator type `X` shall satisfy the requirements of CopyConstructible".
That requires `X u = a;` to work as well as `X u(a);`,
but only when the type of `a` is `X`.
Constructing a rebound allocator from another specialization of the same
allocator class template is only required to work using direct-initialization,
`X u(b);`.
This means it's permitted to make the converting constructor explicit, so that `X u = b;` is ill-formed.
There seems to be no good reason to allow allocators to make that ill-formed.
</p>
<p>
In fact, there seems to be a good reason to <i>not</i> allow it.
The `uses_allocator` trait is defined in terms of `is_convertible`,
not `is_constructible`, which means that if <code>Alloc&lt;T&gt;</code>
has an explicit converting constructor,
then <code>uses_allocator_v&lt;X, Alloc&lt;T&gt;&gt;</code> will be false
for a type with <code>X::allocator_type = Alloc&lt;U&gt;</code>,
because you would need to explicitly convert an <code>Alloc&lt;T&gt;</code> to
<code>Alloc&lt;U&gt;</code> before passing it to <code>X</code>'s constructor.
</p>
<p>
That is at least consistent:
the trait gives the right answer even for allocators with explicit conversions.
It doesn't seem very useful though, and if users don't carefully check
`uses_allocator` with exactly the right types they might get errors unless
they carefully rebind and convert their allocators explicitly.
Or worse, if they rely on other library components to check `uses_allocator`,
they might silently get the wrong behaviour.
For example, trying to construct an <code>X</code> with an <code>Alloc&lt;T&gt;</code>
(e.g. via `make_obj_using_allocator`)
could silently fail to pass the allocator to the constructor
because there's no implicit conversion to `X::allocator_type`,
even though you're providing an allocator of the right "family"
and trying to use it. So a constructor without an allocator argument could be
chosen when you thought you were supplying an allocator for the object to use.
</p>
<p>
There seemed to be consensus when LWG discussed it that we should just 
require conversions to be implicit, so that allocators are not
silently ignored because they cannot be implicitly converted.
</p>
<p>
During the discussion it was noted that assigning allocators is only needed
when the propagation trait is true,
but such assignments are always done between objects of the same allocator type.
So the allocator requirements do not need to require converting assignments
to work.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4986"/>.
</p>
<ol>
<li><p>Modify <sref ref="[allocator.requirements.general]"/> as indicated:</p>

<blockquote>
<pre>
X u(a);
X u = a;
</pre>
<p>-63-
<i>Postconditions</i>: `u == a` <ins>is `true`.</ins>
</p>
<p>-64-
<i>Throws</i>: Nothing.
</p>
<pre>
X u(b);
<ins>X u = b;</ins>
</pre>
<p>-65-
<i>Postconditions</i>: `Y(u) == b` and `u == X(b)` <ins>are both `true`</ins>.
</p>
<p>-66-
<i>Throws</i>: Nothing.
</p>
<pre>
X u(std::move(a));
X u = std::move(a);
</pre>
<p>-67-
<i>Postconditions</i>: The value of `a` is unchanged and is equal to `u`.
</p>
<p>-68-
<i>Throws</i>: Nothing.
</p>
<pre>
X u(std::move(b));
<ins>X u = std::move(b);</ins>
</pre>
<p>-69-
<i>Postconditions</i>: `u` is equal to the prior value of `X(b)`.
</p>
<p>-70-
<i>Throws</i>: Nothing.
</p>
</blockquote>
</li>
</ol>

</resolution>

</issue>
