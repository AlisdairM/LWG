<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2713" status="New">
<title>More missing allocator-extended constructors for unordered containers</title>
<section><sref ref="[unord]"/></section>
<submitter>Billy Robert O'Neal III</submitter>
<date>20 May 2016</date>
<priority>3</priority>

<discussion>
<p>
The resolution of LWG <iref ref="2210"/> missed constructors accepting a range or initializer list and allocator.
</p>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>This wording is relative to N4582.</p>
<ol>
<li><p>Add to the synopsis in <sref ref="[unord.map.overview]"/> p3:</p>

<blockquote>
<pre>
namespace std {
  template &lt;class Key, class T,
    class Hash = hash&lt;Key&gt;,
    class Pred = std::equal_to&lt;Key&gt;,
    class Allocator = std::allocator&lt;std::pair&lt;const Key, T&gt; &gt; &gt; {
  class unordered_map {
  public:
    [&hellip;]
    unordered_map(size_type n, const hasher&amp; hf, const allocator_type&amp; a)
      : unordered_map(n, hf, key_equal(), a) { }
    <ins>template &lt;class InputIterator&gt;
      unordered_map(InputIterator f, InputIterator l, const allocator_type&amp; a)
      : unordered_map(f, l, <em>see below</em>, hasher(), key_equal(), a) { }</ins>
    template &lt;class InputIterator&gt;
      unordered_map(InputIterator f, InputIterator l, size_type n, const allocator_type&amp; a)
      : unordered_map(f, l, n, hasher(), key_equal(), a) { }
    template &lt;class InputIterator&gt;
      unordered_map(InputIterator f, InputIterator l, size_type n, const hasher&amp; hf,
            const allocator_type&amp; a)
      : unordered_map(f, l, n, hf, key_equal(), a) { }
    <ins>unordered_map(initializer_list&lt;value_type&gt; il, const allocator_type&amp; a)
      : unordered_map(il, <em>see below</em>, hasher(), key_equal(), a) { }</ins>
    unordered_map(initializer_list&lt;value_type&gt; il, size_type n, const allocator_type&amp; a)
      : unordered_map(il, n, hasher(), key_equal(), a) { }
    [&hellip;]
  };
}
</pre>
</blockquote>
</li>

<li><p>Add to the synopsis in <sref ref="[unord.multimap.overview]"/> p3:</p>

<blockquote>
<pre>
namespace std {
  template &lt;class Key, class T,
    class Hash = hash&lt;Key&gt;,
    class Pred = std::equal_to&lt;Key&gt;,
    class Allocator = std::allocator&lt;std::pair&lt;const Key, T&gt; &gt; &gt; {
  class unordered_multimap {
  public:
    [&hellip;]
    unordered_multimap(size_type n, const hasher&amp; hf, const allocator_type&amp; a)
      : unordered_multimap(n, hf, key_equal(), a) { }
    <ins>template &lt;class InputIterator&gt;
      unordered_multimap(InputIterator f, InputIterator l, const allocator_type&amp; a)
      : unordered_multimap(f, l, <em>see below</em>, hasher(), key_equal(), a) { }</ins>
    template &lt;class InputIterator&gt;
      unordered_multimap(InputIterator f, InputIterator l, size_type n, const allocator_type&amp; a)
      : unordered_multimap(f, l, n, hasher(), key_equal(), a) { }
    template &lt;class InputIterator&gt;
      unordered_multimap(InputIterator f, InputIterator l, size_type n, const hasher&amp; hf,
            const allocator_type&amp; a)
      : unordered_multimap(f, l, n, hf, key_equal(), a) { }
    <ins>unordered_multimap(initializer_list&lt;value_type&gt; il, const allocator_type&amp; a)
      : unordered_multimap(il, <em>see below</em>, hasher(), key_equal(), a) { }</ins>
    unordered_multimap(initializer_list&lt;value_type&gt; il, size_type n, const allocator_type&amp; a)
      : unordered_multimap(il, n, hasher(), key_equal(), a) { }
    [&hellip;]
  };
}
</pre>
</blockquote>
</li>

<li><p>Add to the synopsis in <sref ref="[unord.set.overview]"/> p3:</p>

<blockquote>
<pre>
namespace std {
  template &lt;class Key,
    class Hash = hash&lt;Key&gt;,
    class Pred = std::equal_to&lt;Key&gt;,
    class Allocator = std::allocator&lt;Key&gt; &gt; {
  class unordered_set {
  public:
    [&hellip;]
    unordered_set(size_type n, const hasher&amp; hf, const allocator_type&amp; a)
      : unordered_set(n, hf, key_equal(), a) { }
    <ins>template &lt;class InputIterator&gt;
      unordered_set(InputIterator f, InputIterator l, const allocator_type&amp; a)
      : unordered_set(f, l, <em>see below</em>, hasher(), key_equal(), a) { }</ins>
    template &lt;class InputIterator&gt;
      unordered_set(InputIterator f, InputIterator l, size_type n, const allocator_type&amp; a)
      : unordered_set(f, l, n, hasher(), key_equal(), a) { }
    template &lt;class InputIterator&gt;
      unordered_set(InputIterator f, InputIterator l, size_type n, const hasher&amp; hf,
            const allocator_type&amp; a)
      : unordered_set(f, l, n, hf, key_equal(), a) { }
    <ins>unordered_set(initializer_list&lt;value_type&gt; il, const allocator_type&amp; a)
      : unordered_set(il, <em>see below</em>, hasher(), key_equal(), a) { }</ins>
    unordered_set(initializer_list&lt;value_type&gt; il, size_type n, const allocator_type&amp; a)
      : unordered_set(il, n, hasher(), key_equal(), a) { }
    [&hellip;]
  };
}
</pre>
</blockquote>
</li>

<li><p>Add to the synopsis in <sref ref="[unord.multiset.overview]"/> p3:</p>

<blockquote>
<pre>
namespace std {
  template &lt;class Key,
    class Hash = hash&lt;Key&gt;,
    class Pred = std::equal_to&lt;Key&gt;,
    class Allocator = std::allocator&lt;Key&gt; &gt; {
  class unordered_multiset {
  public:
    [&hellip;]
    unordered_multiset(size_type n, const hasher&amp; hf, const allocator_type&amp; a)
      : unordered_multiset(n, hf, key_equal(), a) { }
    <ins>template &lt;class InputIterator&gt;
      unordered_multiset(InputIterator f, InputIterator l, const allocator_type&amp; a)
      : unordered_multiset(f, l, <em>see below</em>, hasher(), key_equal(), a) { }</ins>
    template &lt;class InputIterator&gt;
      unordered_multiset(InputIterator f, InputIterator l, size_type n, const allocator_type&amp; a)
      : unordered_multiset(f, l, n, hasher(), key_equal(), a) { }
    template &lt;class InputIterator&gt;
      unordered_multiset(InputIterator f, InputIterator l, size_type n, const hasher&amp; hf,
            const allocator_type&amp; a)
      : unordered_multiset(f, l, n, hf, key_equal(), a) { }
    <ins>unordered_multiset(initializer_list&lt;value_type&gt; il, const allocator_type&amp; a)
      : unordered_multiset(il, <em>see below</em>, hasher(), key_equal(), a) { }</ins>
    unordered_multiset(initializer_list&lt;value_type&gt; il, size_type n, const allocator_type&amp; a)
      : unordered_multiset(il, n, hasher(), key_equal(), a) { }
    [&hellip;]
  };
}
</pre>
</blockquote>
</li>
</ol>

</blockquote>

<note>2016-06, Oulu &mdash; Daniel comments and provides new wording</note>
<p>
During the LWG discussion of this issue it has been observed, that the interpretation of the embedded <i>see below</i>
is not really clear and that we should split declaration and definition of the new overloads, so that we have a place
that allows us to specify what "<i>see below</i>" stands for. In addition, the new wording wraps the "<i>see below</i>"
as "<tt>size_type(<i>see below</i>)</tt>" to clarify the provided expression type, similar as we did for the default
constructor of <tt>unordered_map</tt>.
</p>

<note>Oulu, 2016-06</note>
<p>Alisdair to review wording.</p>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>This wording is relative to N4594.</p>
<ol>
<li><p>Add to the synopsis in <sref ref="[unord.map.overview]"/> p3:</p>

<blockquote>
<pre>
namespace std {
  template &lt;class Key, class T,
    class Hash = hash&lt;Key&gt;,
    class Pred = std::equal_to&lt;Key&gt;,
    class Allocator = std::allocator&lt;std::pair&lt;const Key, T&gt; &gt; &gt; {
  class unordered_map {
  public:
    [&hellip;]
    unordered_map(size_type n, const hasher&amp; hf, const allocator_type&amp; a)
      : unordered_map(n, hf, key_equal(), a) { }
    <ins>template &lt;class InputIterator&gt;
      unordered_map(InputIterator f, InputIterator l, const allocator_type&amp; a);</ins>
    template &lt;class InputIterator&gt;
      unordered_map(InputIterator f, InputIterator l, size_type n, const allocator_type&amp; a)
      : unordered_map(f, l, n, hasher(), key_equal(), a) { }
    template &lt;class InputIterator&gt;
      unordered_map(InputIterator f, InputIterator l, size_type n, const hasher&amp; hf,
            const allocator_type&amp; a)
      : unordered_map(f, l, n, hf, key_equal(), a) { }
    <ins>unordered_map(initializer_list&lt;value_type&gt; il, const allocator_type&amp; a);</ins>
    unordered_map(initializer_list&lt;value_type&gt; il, size_type n, const allocator_type&amp; a)
      : unordered_map(il, n, hasher(), key_equal(), a) { }
    [&hellip;]
  };
}
</pre>
</blockquote>
</li>

<li><p>Insert the following new prototype specification just after <sref ref="[unord.map.cnstr]"/> p2</p>

<blockquote>
<pre>
<ins>template &lt;class InputIterator&gt;
  unordered_map(InputIterator f, InputIterator l, const allocator_type&amp; a)
    : unordered_map(f, l, size_type(<em>see below</em>), hasher(), key_equal(), a) { }</ins>

<ins>unordered_map(initializer_list&lt;value_type&gt; il, const allocator_type&amp; a)
  : unordered_map(il, size_type(<em>see below</em>), hasher(), key_equal(), a) { }</ins>
</pre>
<blockquote>
<p>
<ins>-?- <i>Remarks:</i> The number of buckets is implementation-defined.</ins>
</p>
</blockquote>
</blockquote>

</li>

<li><p>Add to the synopsis in <sref ref="[unord.multimap.overview]"/> p3:</p>

<blockquote>
<pre>
namespace std {
  template &lt;class Key, class T,
    class Hash = hash&lt;Key&gt;,
    class Pred = std::equal_to&lt;Key&gt;,
    class Allocator = std::allocator&lt;std::pair&lt;const Key, T&gt; &gt; &gt; {
  class unordered_multimap {
  public:
    [&hellip;]
    unordered_multimap(size_type n, const hasher&amp; hf, const allocator_type&amp; a)
      : unordered_multimap(n, hf, key_equal(), a) { }
    <ins>template &lt;class InputIterator&gt;
      unordered_multimap(InputIterator f, InputIterator l, const allocator_type&amp; a);</ins>
    template &lt;class InputIterator&gt;
      unordered_multimap(InputIterator f, InputIterator l, size_type n, const allocator_type&amp; a)
      : unordered_multimap(f, l, n, hasher(), key_equal(), a) { }
    template &lt;class InputIterator&gt;
      unordered_multimap(InputIterator f, InputIterator l, size_type n, const hasher&amp; hf,
            const allocator_type&amp; a)
      : unordered_multimap(f, l, n, hf, key_equal(), a) { }
    <ins>unordered_multimap(initializer_list&lt;value_type&gt; il, const allocator_type&amp; a);</ins>
    unordered_multimap(initializer_list&lt;value_type&gt; il, size_type n, const allocator_type&amp; a)
      : unordered_multimap(il, n, hasher(), key_equal(), a) { }
    [&hellip;]
  };
}
</pre>
</blockquote>
</li>

<li><p>Insert the following new prototype specification just after <sref ref="[unord.multimap.cnstr]"/> p2</p>

<blockquote>
<pre>
<ins>template &lt;class InputIterator&gt;
  unordered_multimap(InputIterator f, InputIterator l, const allocator_type&amp; a)
    : unordered_multimap(f, l, size_type(<em>see below</em>), hasher(), key_equal(), a) { }</ins>

<ins>unordered_multimap(initializer_list&lt;value_type&gt; il, const allocator_type&amp; a)
  : unordered_multimap(il, size_type(<em>see below</em>), hasher(), key_equal(), a) { }</ins>
</pre>
<blockquote>
<p>
<ins>-?- <i>Remarks:</i> The number of buckets is implementation-defined.</ins>
</p>
</blockquote>
</blockquote>

</li>

<li><p>Add to the synopsis in <sref ref="[unord.set.overview]"/> p3:</p>

<blockquote>
<pre>
namespace std {
  template &lt;class Key,
    class Hash = hash&lt;Key&gt;,
    class Pred = std::equal_to&lt;Key&gt;,
    class Allocator = std::allocator&lt;Key&gt; &gt; {
  class unordered_set {
  public:
    [&hellip;]
    unordered_set(size_type n, const hasher&amp; hf, const allocator_type&amp; a)
      : unordered_set(n, hf, key_equal(), a) { }
    <ins>template &lt;class InputIterator&gt;
      unordered_set(InputIterator f, InputIterator l, const allocator_type&amp; a);</ins>
    template &lt;class InputIterator&gt;
      unordered_set(InputIterator f, InputIterator l, size_type n, const allocator_type&amp; a)
      : unordered_set(f, l, n, hasher(), key_equal(), a) { }
    template &lt;class InputIterator&gt;
      unordered_set(InputIterator f, InputIterator l, size_type n, const hasher&amp; hf,
            const allocator_type&amp; a)
      : unordered_set(f, l, n, hf, key_equal(), a) { }
    <ins>unordered_set(initializer_list&lt;value_type&gt; il, const allocator_type&amp; a);</ins>
    unordered_set(initializer_list&lt;value_type&gt; il, size_type n, const allocator_type&amp; a)
      : unordered_set(il, n, hasher(), key_equal(), a) { }
    [&hellip;]
  };
}
</pre>
</blockquote>
</li>

<li><p>Insert the following new prototype specification just after <sref ref="[unord.set.cnstr]"/> p2</p>

<blockquote>
<pre>
<ins>template &lt;class InputIterator&gt;
  unordered_set(InputIterator f, InputIterator l, const allocator_type&amp; a)
    : unordered_set(f, l, size_type(<em>see below</em>), hasher(), key_equal(), a) { }</ins>

<ins>unordered_set(initializer_list&lt;value_type&gt; il, const allocator_type&amp; a)
  : unordered_set(il, size_type(<em>see below</em>), hasher(), key_equal(), a) { }</ins>
</pre>
<blockquote>
<p>
<ins>-?- <i>Remarks:</i> The number of buckets is implementation-defined.</ins>
</p>
</blockquote>
</blockquote>

</li>

<li><p>Add to the synopsis in <sref ref="[unord.multiset.overview]"/> p3:</p>

<blockquote>
<pre>
namespace std {
  template &lt;class Key,
    class Hash = hash&lt;Key&gt;,
    class Pred = std::equal_to&lt;Key&gt;,
    class Allocator = std::allocator&lt;Key&gt; &gt; {
  class unordered_multiset {
  public:
    [&hellip;]
    unordered_multiset(size_type n, const hasher&amp; hf, const allocator_type&amp; a)
      : unordered_multiset(n, hf, key_equal(), a) { }
    <ins>template &lt;class InputIterator&gt;
      unordered_multiset(InputIterator f, InputIterator l, const allocator_type&amp; a);</ins>
    template &lt;class InputIterator&gt;
      unordered_multiset(InputIterator f, InputIterator l, size_type n, const allocator_type&amp; a)
      : unordered_multiset(f, l, n, hasher(), key_equal(), a) { }
    template &lt;class InputIterator&gt;
      unordered_multiset(InputIterator f, InputIterator l, size_type n, const hasher&amp; hf,
            const allocator_type&amp; a)
      : unordered_multiset(f, l, n, hf, key_equal(), a) { }
    <ins>unordered_multiset(initializer_list&lt;value_type&gt; il, const allocator_type&amp; a);</ins>
    unordered_multiset(initializer_list&lt;value_type&gt; il, size_type n, const allocator_type&amp; a)
      : unordered_multiset(il, n, hasher(), key_equal(), a) { }
    [&hellip;]
  };
}
</pre>
</blockquote>
</li>

<li><p>Insert the following new prototype specification just after <sref ref="[unord.multiset.cnstr]"/> p2</p>

<blockquote>
<pre>
<ins>template &lt;class InputIterator&gt;
  unordered_multiset(InputIterator f, InputIterator l, const allocator_type&amp; a)
    : unordered_multiset(f, l, size_type(<em>see below</em>), hasher(), key_equal(), a) { }</ins>

<ins>unordered_multiset(initializer_list&lt;value_type&gt; il, const allocator_type&amp; a)
  : unordered_multiset(il, size_type(<em>see below</em>), hasher(), key_equal(), a) { }</ins>
</pre>
<blockquote>
<p>
<ins>-?- <i>Remarks:</i> The number of buckets is implementation-defined.</ins>
</p>
</blockquote>
</blockquote>

</li>

</ol>
</blockquote>

<note>2017-08-04, Daniel and Alisdair finetune wording</note>
<p>
We decided to improve the added <i>Remarks:</i> elements by changing from the previous form:
</p>
<blockquote>
<p>
<i>Remarks:</i> The number of buckets is implementation-defined.
</p>
</blockquote>
<p>
to the more elaborate form:
</p>
<blockquote>
<p>
<i>Remarks:</i> The initial number of buckets supplied by the <tt>size_type</tt> argument is implementation-defined.
</p>
</blockquote>
</discussion>

<resolution>
<p>This resolution is relative to <a href="https://wg21.link/n4687">N4687</a>.</p>

<ol>
<li><p>Add to the synopsis in <sref ref="[unord.map.overview]"/> p3:</p>

<blockquote>
<pre>
namespace std {
  template &lt;class Key, class T,
    class Hash = hash&lt;Key&gt;,
    class Pred = std::equal_to&lt;Key&gt;,
    class Allocator = std::allocator&lt;std::pair&lt;const Key, T&gt; &gt; &gt; {
  class unordered_map {
  public:
    [&hellip;]
    unordered_map(size_type n, const hasher&amp; hf, const allocator_type&amp; a)
      : unordered_map(n, hf, key_equal(), a) { }
    <ins>template &lt;class InputIterator&gt;
      unordered_map(InputIterator f, InputIterator l, const allocator_type&amp; a);</ins>
    template &lt;class InputIterator&gt;
      unordered_map(InputIterator f, InputIterator l, size_type n, const allocator_type&amp; a)
      : unordered_map(f, l, n, hasher(), key_equal(), a) { }
    template &lt;class InputIterator&gt;
      unordered_map(InputIterator f, InputIterator l, size_type n, const hasher&amp; hf,
            const allocator_type&amp; a)
      : unordered_map(f, l, n, hf, key_equal(), a) { }
    <ins>unordered_map(initializer_list&lt;value_type&gt; il, const allocator_type&amp; a);</ins>
    unordered_map(initializer_list&lt;value_type&gt; il, size_type n, const allocator_type&amp; a)
      : unordered_map(il, n, hasher(), key_equal(), a) { }
    [&hellip;]
  };
}
</pre>
</blockquote>
</li>

<li><p>Insert the following new prototype specification just after <sref ref="[unord.map.cnstr]"/> p2</p>

<blockquote>
<pre>
<ins>template &lt;class InputIterator&gt;
  unordered_map(InputIterator f, InputIterator l, const allocator_type&amp; a)
    : unordered_map(f, l, size_type(<em>see below</em>), hasher(), key_equal(), a) { }</ins>

<ins>unordered_map(initializer_list&lt;value_type&gt; il, const allocator_type&amp; a)
  : unordered_map(il, size_type(<em>see below</em>), hasher(), key_equal(), a) { }</ins>
</pre>
<blockquote>
<p>
<ins>-?- <i>Remarks:</i> The initial number of buckets supplied by the <tt>size_type</tt> argument is implementation-defined.</ins>
</p>
</blockquote>
</blockquote>

</li>

<li><p>Add to the synopsis in <sref ref="[unord.multimap.overview]"/> p3:</p>

<blockquote>
<pre>
namespace std {
  template &lt;class Key, class T,
    class Hash = hash&lt;Key&gt;,
    class Pred = std::equal_to&lt;Key&gt;,
    class Allocator = std::allocator&lt;std::pair&lt;const Key, T&gt; &gt; &gt; {
  class unordered_multimap {
  public:
    [&hellip;]
    unordered_multimap(size_type n, const hasher&amp; hf, const allocator_type&amp; a)
      : unordered_multimap(n, hf, key_equal(), a) { }
    <ins>template &lt;class InputIterator&gt;
      unordered_multimap(InputIterator f, InputIterator l, const allocator_type&amp; a);</ins>
    template &lt;class InputIterator&gt;
      unordered_multimap(InputIterator f, InputIterator l, size_type n, const allocator_type&amp; a)
      : unordered_multimap(f, l, n, hasher(), key_equal(), a) { }
    template &lt;class InputIterator&gt;
      unordered_multimap(InputIterator f, InputIterator l, size_type n, const hasher&amp; hf,
            const allocator_type&amp; a)
      : unordered_multimap(f, l, n, hf, key_equal(), a) { }
    <ins>unordered_multimap(initializer_list&lt;value_type&gt; il, const allocator_type&amp; a);</ins>
    unordered_multimap(initializer_list&lt;value_type&gt; il, size_type n, const allocator_type&amp; a)
      : unordered_multimap(il, n, hasher(), key_equal(), a) { }
    [&hellip;]
  };
}
</pre>
</blockquote>
</li>

<li><p>Insert the following new prototype specification just after <sref ref="[unord.multimap.cnstr]"/> p2</p>

<blockquote>
<pre>
<ins>template &lt;class InputIterator&gt;
  unordered_multimap(InputIterator f, InputIterator l, const allocator_type&amp; a)
    : unordered_multimap(f, l, size_type(<em>see below</em>), hasher(), key_equal(), a) { }</ins>

<ins>unordered_multimap(initializer_list&lt;value_type&gt; il, const allocator_type&amp; a)
  : unordered_multimap(il, size_type(<em>see below</em>), hasher(), key_equal(), a) { }</ins>
</pre>
<blockquote>
<p>
<ins>-?- <i>Remarks:</i> The initial number of buckets supplied by the <tt>size_type</tt> argument is implementation-defined.</ins>
</p>
</blockquote>
</blockquote>

</li>

<li><p>Add to the synopsis in <sref ref="[unord.set.overview]"/> p3:</p>

<blockquote>
<pre>
namespace std {
  template &lt;class Key,
    class Hash = hash&lt;Key&gt;,
    class Pred = std::equal_to&lt;Key&gt;,
    class Allocator = std::allocator&lt;Key&gt; &gt; {
  class unordered_set {
  public:
    [&hellip;]
    unordered_set(size_type n, const hasher&amp; hf, const allocator_type&amp; a)
      : unordered_set(n, hf, key_equal(), a) { }
    <ins>template &lt;class InputIterator&gt;
      unordered_set(InputIterator f, InputIterator l, const allocator_type&amp; a);</ins>
    template &lt;class InputIterator&gt;
      unordered_set(InputIterator f, InputIterator l, size_type n, const allocator_type&amp; a)
      : unordered_set(f, l, n, hasher(), key_equal(), a) { }
    template &lt;class InputIterator&gt;
      unordered_set(InputIterator f, InputIterator l, size_type n, const hasher&amp; hf,
            const allocator_type&amp; a)
      : unordered_set(f, l, n, hf, key_equal(), a) { }
    <ins>unordered_set(initializer_list&lt;value_type&gt; il, const allocator_type&amp; a);</ins>
    unordered_set(initializer_list&lt;value_type&gt; il, size_type n, const allocator_type&amp; a)
      : unordered_set(il, n, hasher(), key_equal(), a) { }
    [&hellip;]
  };
}
</pre>
</blockquote>
</li>

<li><p>Insert the following new prototype specification just after <sref ref="[unord.set.cnstr]"/> p2</p>

<blockquote>
<pre>
<ins>template &lt;class InputIterator&gt;
  unordered_set(InputIterator f, InputIterator l, const allocator_type&amp; a)
    : unordered_set(f, l, size_type(<em>see below</em>), hasher(), key_equal(), a) { }</ins>

<ins>unordered_set(initializer_list&lt;value_type&gt; il, const allocator_type&amp; a)
  : unordered_set(il, size_type(<em>see below</em>), hasher(), key_equal(), a) { }</ins>
</pre>
<blockquote>
<p>
<ins>-?- <i>Remarks:</i> The initial number of buckets supplied by the <tt>size_type</tt> argument is implementation-defined.</ins>
</p>
</blockquote>
</blockquote>

</li>

<li><p>Add to the synopsis in <sref ref="[unord.multiset.overview]"/> p3:</p>

<blockquote>
<pre>
namespace std {
  template &lt;class Key,
    class Hash = hash&lt;Key&gt;,
    class Pred = std::equal_to&lt;Key&gt;,
    class Allocator = std::allocator&lt;Key&gt; &gt; {
  class unordered_multiset {
  public:
    [&hellip;]
    unordered_multiset(size_type n, const hasher&amp; hf, const allocator_type&amp; a)
      : unordered_multiset(n, hf, key_equal(), a) { }
    <ins>template &lt;class InputIterator&gt;
      unordered_multiset(InputIterator f, InputIterator l, const allocator_type&amp; a);</ins>
    template &lt;class InputIterator&gt;
      unordered_multiset(InputIterator f, InputIterator l, size_type n, const allocator_type&amp; a)
      : unordered_multiset(f, l, n, hasher(), key_equal(), a) { }
    template &lt;class InputIterator&gt;
      unordered_multiset(InputIterator f, InputIterator l, size_type n, const hasher&amp; hf,
            const allocator_type&amp; a)
      : unordered_multiset(f, l, n, hf, key_equal(), a) { }
    <ins>unordered_multiset(initializer_list&lt;value_type&gt; il, const allocator_type&amp; a);</ins>
    unordered_multiset(initializer_list&lt;value_type&gt; il, size_type n, const allocator_type&amp; a)
      : unordered_multiset(il, n, hasher(), key_equal(), a) { }
    [&hellip;]
  };
}
</pre>
</blockquote>
</li>

<li><p>Insert the following new prototype specification just after <sref ref="[unord.multiset.cnstr]"/> p2</p>

<blockquote>
<pre>
<ins>template &lt;class InputIterator&gt;
  unordered_multiset(InputIterator f, InputIterator l, const allocator_type&amp; a)
    : unordered_multiset(f, l, size_type(<em>see below</em>), hasher(), key_equal(), a) { }</ins>

<ins>unordered_multiset(initializer_list&lt;value_type&gt; il, const allocator_type&amp; a)
  : unordered_multiset(il, size_type(<em>see below</em>), hasher(), key_equal(), a) { }</ins>
</pre>
<blockquote>
<p>
<ins>-?- <i>Remarks:</i> The initial number of buckets supplied by the <tt>size_type</tt> argument is implementation-defined.</ins>
</p>
</blockquote>
</blockquote>

</li>

</ol>

</resolution>

</issue>
