<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3617" status="New">
<title><tt>function</tt>/<tt>packaged_task</tt> deduction guides and deducing <tt>this</tt></title>
<section><sref ref="[func.wrap.func.con]"/><sref ref="[futures.task.members]"/></section>
<submitter>Barry Revzin</submitter>
<date>09 Oct 2021</date>
<priority>99</priority>

<discussion>
<p>
With the adoption of deducing <tt>this</tt> (<a href="https://wg21.link/p0847">P0847</a>), we can now create 
types whose call operator is an explicit object member function, which means that <tt>decltype(&amp;F::operator())</tt> 
could have pointer-to-function type rather than pointer-to-member-function type. This means that the deduction 
guides for <tt>std::function</tt> (<sref ref="[func.wrap.func.con]"/>) and <tt>std::packaged_task</tt> 
(<sref ref="[futures.task.members]"/>) will simply fail:
</p>
<blockquote><pre>
struct F {
  int operator()(this const F&amp;) { return 42; }
};

std::function g = F{}; // error: decltype(&amp;F::operator()) is not of the form R(G::*)(A...) <i>cv</i> &amp;<sub>opt</sub> noexcept<sub>opt</sub>
</pre></blockquote>
<p>
We should update the deduction guides to keep them in line with the core language.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4892">N4892</a>.
</p>

<ol>
<li><p>Modify <sref ref="[func.wrap.func.con]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class F&gt; function(F) -&gt; function&lt;<i>see below</i>&gt;;
</pre>
<blockquote>
<p>
-16- <i>Constraints:</i> <tt>&amp;F::operator()</tt> is well-formed when treated as an unevaluated operand and 
<tt>decltype(&amp;F::operator())</tt> is <ins>either</ins> of the form <tt>R(G::*)(A...) <i>cv</i> 
&amp;<sub>opt</sub> noexcept<sub>opt</sub></tt> <ins>or of the form <tt>R(*)(G <i>cv</i> &amp;<sub>opt</sub>, A...) 
noexcept<sub>opt</sub></tt></ins> for a class type <tt>G</tt>.
<p/>
-17- <i>Remarks:</i> The deduced type is <tt>function&lt;R(A...)&gt;</tt>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[futures.task.members]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class F&gt; packaged_task(F) -&gt; packaged_task&lt;<i>see below</i>&gt;;
</pre>
<blockquote>
<p>
-7- <i>Constraints:</i> <tt>&amp;F::operator()</tt> is well-formed when treated as an unevaluated operand and 
<tt>decltype(&amp;F::operator())</tt> is <ins>either</ins> of the form <tt>R(G::*)(A...) <i>cv</i> 
&amp;<sub>opt</sub> noexcept<sub>opt</sub></tt> <ins>or of the form <tt>R(*)(G <i>cv</i> &amp;<sub>opt</sub>, A...) 
noexcept<sub>opt</sub></tt></ins> for a class type <tt>G</tt>.
<p/>
-8- <i>Remarks:</i> The deduced type is <tt>packaged_task&lt;R(A...)&gt;</tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>