<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3932" status="New">
<title>Expression-equivalence is sometimes unimplementable when passing prvalue expressions to comparison CPOs</title>
<section><sref ref="[cmp.alg]"/></section>
<submitter>Jiang An</submitter>
<date>04 May 2023</date>
<priority>99</priority>

<discussion>
<p>
Currently, comparison CPOs may call ADL-found <tt>strong_order</tt>, <tt>weak_order</tt>, and <tt>partial_order</tt> 
functions. It might be impossible to meet the expression-equivalent requirement if one passed argument is a prvalue 
and an ADL-found function is selected, because temporary materialization must take place before entering the CPO's 
<tt>operator()</tt>.
<p/>
Perhaps we should say when <tt>E</tt> or <tt>F</tt> is a prvalue expression of an object type, temporary 
materialization takes place first, and then an xvalue referring to the temporary object is used instead of the original 
<tt>E</tt> or <tt>F</tt>.
<p/>
There is currently implementation divergence in these CPOs: when performing internal comparison, libstdc++ and libc++ 
perfect-forward arguments, while MSVC STL always treats arguments as lvalues.
</p>
</discussion>

<resolution>
</resolution>

</issue>
