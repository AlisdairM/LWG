<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2594" status="New">
<title>Contradicting definition of empty <tt>shared_ptr</tt> on <tt>shared_ptr(nullptr, d)</tt></title>
<section><sref ref="[util.smartptr.shared]"/></section>
<submitter>Kazutoshi Satoda</submitter>
<date>20 Feb 2016</date>
<priority>3</priority>

<discussion>
<p>
Latest draft (N4567) <sref ref="[util.smartptr.shared]"/> p1 says:
</p>
<blockquote>
<p>
A <tt>shared_ptr</tt> object is <em>empty</em> if it does not own a pointer.
</p>
</blockquote>
<p>
Please note that it says "own a pointer". This definition was added as
the resolution for LWG defect <iref ref="813"/>.
<p/>
<sref ref="[util.smartptr.shared.const]"/> p8 says about the effect of
<tt>shared_ptr(nullptr_t p, D d)</tt>:
</p>
<blockquote>
<p>
<i>Effects</i>: Constructs a <tt>shared_ptr</tt> object that <em>owns</em> the object <tt>p</tt> and the deleter <tt>d</tt>.
</p>
</blockquote>
<p>
Please note that it says "<em>owns</em> the object". This was intentionally
changed from "the pointer" as a part of resolution for LWG defect <iref ref="758"/>,
to cover <tt>nullptr_t</tt> case.
<p/>
Since <tt>shared_ptr(nullptr, d)</tt> owns an object of type <tt>nullptr_t</tt>, but does
not own a pointer, it is said as "empty" by a strict reading of the
above mentioned definition in <sref ref="[util.smartptr.shared]"/> p1.
<p/>
These cause a contradiction:
<p/>
<sref ref="[util.smartptr.shared.const]"/> p9 sets a postcondition
<tt>use_count() == 1</tt> on <tt>shared_ptr(nullptr, d)</tt>. But 
<sref ref="[util.smartptr.shared.obs]"/> p7 says that the return value of <tt>use_count()</tt>
is "<tt>0</tt> when <tt>*this</tt> is <em>empty</em>".
</p>
<p>
Proposed wording changes:
<p/>
Replace the last 2 words in <sref ref="[util.smartptr.shared]"/> p1 from
</p>
<blockquote><p>
[&hellip;] <em>empty</em> if it does not own a pointer.
</p></blockquote>
<p>
to
</p>
<blockquote><p>
[&hellip;] <em>empty</em> if it does not own an object.
</p></blockquote>
<p>
Note that <tt>shared_ptr(nullptr_t)</tt> is defined to be empty in synopsis in
<sref ref="[util.smartptr.shared]"/>.
</p>
<blockquote><pre>
constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }
</pre></blockquote>
<p>
It could be less confusing if <tt>shared_ptr(nullptr, d)</tt> could be defined to
be empty. But it seems too late to change that (which means changing
whether the deleter is called or not, see 
<a href="https://stackoverflow.com/questions/11164354/">this Stackoverflow article</a>). 
Then I'm proposing just fix the contradiction.
</p>

</discussion>

<resolution>
<p>
This wording is relative to N4594.
</p>

<ol>
<li><p>Change <sref ref="[util.smartptr.shared]"/> p1 as indicated:</p>

<blockquote>
<p>-1- The <tt>shared_ptr</tt> class template stores a pointer, usually obtained via <tt>new</tt>. <tt>shared_ptr</tt> 
implements semantics of shared ownership; the last remaining owner of the pointer is responsible for destroying the 
object, or otherwise releasing the resources associated with the stored pointer. A <tt>shared_ptr</tt> object is 
<em>empty</em> if it does not own <ins>an object</ins><del>a pointer</del>.
</p>
</blockquote>

</li>
</ol>

</resolution>

</issue>
