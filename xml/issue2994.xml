<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2994" status="WP">
<title>Needless UB for <tt>basic_string</tt> and <tt>basic_string_view</tt></title>
<section><sref ref="[char.traits]"/><sref ref="[string.require]"/><sref ref="[string.view.template]"/></section>
<submitter>Gennaro Prota</submitter>
<date>3 Jul 2017</date>
<priority>3</priority>

<discussion>
<p>
<tt>basic_string</tt> and <tt>basic_string_view</tt> involve undefined behavior in a few cases where it's 
simple for the implementation to add a <tt>static_assert</tt> and make the program ill-formed.
<p/>
With regards to basic_string, <sref ref="[char.traits]"/>/3 states:
</p>
<blockquote><p>
<tt>Traits::char_type</tt> shall be the same as <tt>CharT</tt>.
</p></blockquote>
<p>
Here, the implementation can add a <tt>static_assert</tt> using the <tt>is_same</tt>
type trait. Similar issues exist in <sref ref="[string.require]"/> and, for
<tt>basic_string_view</tt>, in <sref ref="[string.view.template]"/>/1. 
</p>

<note>2017-07 Toronto Tuesday PM issue prioritization</note>
<p>Priority 3; need to check general container requirements</p>

<p>Partially by the adoption of <a href="https://wg21.link/P1148">P1148</a> in San Diego.</p>
<p>Tim opines: "the remainder deals with allocator value type mismatch, which I think is NAD."</p>
<superseded>
<p>
This wording is relative to <a href="https://wg21.link/n4659">N4659</a>.
</p>

<ol>
<li><p>Edit <sref ref="[char.traits]"/> as indicated:</p>

<blockquote>
<p>
-3- To specialize those templates to generate a string or iostream class to handle a particular character container
type <tt>CharT</tt>, that and its related character traits class <tt>Traits</tt> are passed as a pair of parameters to 
the string or iostream template as parameters <tt>charT</tt> and <tt>traits</tt>. <ins>If</ins> <tt>Traits::char_type</tt> 
<del>shall be the same</del> <ins>is not the same type</ins> as <tt>CharT</tt><ins>, the program is ill-formed</ins>.
</p>
</blockquote>
</li>

<li><p>Edit <sref ref="[string.require]"/> as indicated:</p>

<blockquote>
<p>
-3- In every specialization <tt>basic_string&lt;charT, traits, Allocator&gt;</tt>, <ins>if</ins> <del>the type</del> 
<tt>allocator_traits&lt;Allocator&gt;::value_type</tt> <del>shall name the same type</del> <ins>is not the 
same type</ins> as <tt>charT</tt><ins>, the program is ill-formed</ins>. 
Every object of type <tt>basic_string&lt;charT, traits, Allocator&gt;</tt> shall use an object of type 
<tt>Allocator</tt> to allocate and free storage for the contained <tt>charT</tt> objects as needed. The 
<tt>Allocator</tt> object used shall be obtained as described in <sref ref="[container.requirements.general]"/>. 
In every specialization <tt>basic_string&lt;charT, traits, Allocator&gt;</tt>, the type <tt>traits</tt> 
shall satisfy the character traits requirements (<sref ref="[char.traits]"/>)<ins>. If</ins><del>, and the type</del> 
<tt>traits::char_type</tt> <del>shall name the same type</del> <ins>is not the same type</ins> as <tt>charT</tt><ins>, 
the program is ill-formed</ins>.
</p>
</blockquote>
</li>

<li><p>Edit <sref ref="[string.view.template]"/> as indicated:</p>

<blockquote>
<p>
-1- In every specialization <tt>basic_string_view&lt;charT, traits&gt;</tt>, the type <tt>traits</tt> shall satisfy the character
traits requirements (<sref ref="[char.traits]"/>)<ins>. If</ins><del>, and the type</del> <tt>traits::char_type</tt> <del>shall 
name the same type</del> <ins>is not the same type</ins> as <tt>charT</tt><ins>, the program is ill-formed</ins>.
</p>
</blockquote>
</li>

</ol>
</superseded>

<note>2023-05-15; Jonathan Wakely provides improved wording</note>
<p>
As noted above, most of this issue was resolved by <paper num="P1148R0"/>.
The remainder is the change to make it ill-formed if the allocator has the wrong
<code>value_type</code>, but since <paper num="P1463R1"/> that is already part of
the Allocator-aware container requirements, which apply to <code>basic_string</code>.
</p>


<note>2023-06-01; Reflector poll</note>
<p>
Set status to Tentatively Ready after eight votes in favour during reflector poll.
</p>
<p>
There was a request to editorially move the added text in <i>Note 1</i> into
<i>Note 2</i> after this is approved.
</p>

<note>2023-06-17 Approved at June 2023 meeting in Varna. Status changed: Voting &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4950"/>.
</p>

<ol>
<li><p>Edit <sref ref="[string.require]"/> as indicated:</p>

<blockquote>
<p>
-3- <del>In every specialization <tt>basic_string&lt;charT, traits, Allocator&gt;</tt>, the type
<tt>allocator_traits&lt;Allocator&gt;::value_type</tt> shall name the same type as <tt>charT</tt>.</del>
Every object of type <tt>basic_string&lt;charT, traits, Allocator&gt;</tt> shall use an object of type
<tt>Allocator</tt> to allocate and free storage for the contained <tt>charT</tt> objects as needed. The
In every specialization <tt>basic_string&lt;charT, traits, Allocator&gt;</tt>, the type <tt>traits</tt>
shall satisfy the character traits requirements (<sref ref="[char.traits]"/>).
</p>
<p>
[<i>Note 1</i>:
Every specialization <code>basic_string&lt;charT, traits, Allocator&gt;</code>
is an allocator-aware container, but does not use the allocatorâ€™s
<code>construct</code> and <code>destroy</code> member functions
(<sref ref="[container.requirements.general]"/>).
<ins>
The program is ill-formed if <code>Allocator::value_type</code>
is not the same type as <code>charT</code>.
</ins>
&mdash; <i>end note</i>]
</p>
<p>
[<i>Note 2</i>:
The program is ill-formed if <code>traits::char_type</code>
is not the same type as <code>charT</code>.
&mdash; <i>end note</i>]
</p>
</blockquote>
</li>
</ol>

</resolution>
</issue>
