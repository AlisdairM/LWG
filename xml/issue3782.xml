<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3782" status="Voting">
<title>Should <tt>&lt;math.h&gt;</tt> declare <tt>::lerp</tt>?</title>
<section><sref ref="[support.c.headers.other]"/></section>
<submitter>Jiang An</submitter>
<date>17 Sep 2022</date>
<priority>99</priority>

<discussion>
<p>
According to <sref ref="[support.c.headers.other]"/>/1, <tt>&lt;math.h&gt;</tt> is required to 
provide <tt>::lerp</tt>, despite that it is a C++-only component. In <paper num="P0811R3"/>, neither 
<tt>&lt;math.h&gt;</tt> nor C compatibility is mentioned, so it seems unintended not to list 
<tt>lerp</tt> as an exception in <sref ref="[support.c.headers.other]"/>.
<p/>
Currently there is implementation divergence: libstdc++ provide <tt>::lerp</tt> in 
<tt>&lt;math.h&gt;</tt> but not in <tt>&lt;cmath&gt;</tt>, while MSVC STL and libc++ don't provide 
<tt>::lerp</tt> in <tt>&lt;math.h&gt;</tt> or <tt>&lt;cmath&gt;</tt> at all.
<p/>
I'm not sure whether this should be considered together with LWG <iref ref="3484"/>. 
Since <tt>nullptr_t</tt> has become a part of the C standard library as of C23 
(see <a href="https://www.open-std.org/jtc1/sc22/wg14/www/docs/n3042.htm">WG14-N3042</a> and 
<a href="https://www.open-std.org/jtc1/sc22/wg14/www/docs/n3048.htm">WG14-N3048</a>), 
I believe we should keep providing <tt>::nullptr_t</tt> in <tt>&lt;stddef.h&gt;</tt>.
</p>

<note>2022-10-12; Reflector poll</note>
<p>
Set status to Tentatively Ready after six votes in favour during reflector poll.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4917"/>.
</p>

<ol>

<li><p>Modify <sref ref="[support.c.headers.other]"/> as indicated:</p>

<blockquote>
<p>
-1- Every C header other than <tt>&lt;complex.h&gt;</tt> (<sref ref="[complex.h.syn]"/>), 
<tt>&lt;iso646.h&gt;</tt> (<sref ref="[iso646.h.syn]"/>), 
<tt>&lt;stdalign.h&gt;</tt> (<sref ref="[stdalign.h.syn]"/>),
<tt>&lt;stdatomic.h&gt;</tt> (<sref ref="[stdatomic.h.syn]"/>), 
<tt>&lt;stdbool.h&gt;</tt> (<sref ref="[stdbool.h.syn]"/>), 
and <tt>&lt;tgmath.h&gt;</tt> (<sref ref="[tgmath.h.syn]"/>), each of which has a name of
the form <tt>&lt;<i>name</i>.h&gt;</tt>, behaves as if each name placed in 
the standard library namespace by the corresponding <tt>&lt;c<i>name</i>&gt;</tt> 
header is placed within the global namespace scope, except for the functions 
described in <sref ref="[sf.cmath]"/>, <ins>the <tt>std::lerp</tt> function overloads 
(<sref ref="[c.math.lerp]"/>),</ins> the declaration of <tt>std::byte</tt> 
(<sref ref="[cstddef.syn]"/>), and the functions and function templates described 
in <sref ref="[support.types.byteops]"/>. [&hellip;]
</p>
</blockquote>
</li>

</ol>
</resolution>

</issue>
