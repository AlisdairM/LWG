<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3598" status="Tentatively Ready">
<title><tt>system_category().default_error_condition(0)</tt> is underspecified</title>
<section><sref ref="[syserr.errcat.objects]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>23 Sep 2021</date>
<priority>99</priority>

<discussion>
<p>
<sref ref="[syserr.errcat.objects]"/> says:
</p>
<blockquote><p>
If the argument <tt>ev</tt> corresponds to a POSIX <tt>errno</tt> value <tt>posv</tt>, 
the function shall return <tt>error_condition(posv, generic_category())</tt>. Otherwise, 
the function shall return <tt>error_condition(ev, system_category())</tt>. What constitutes 
correspondence for any given operating system is unspecified.
</p></blockquote>
<p>
What is "a POSIX <tt>errno</tt> value"? Does it mean a value equal to one of the <tt>&lt;cerrno&gt;</tt> 
<tt>Exxx</tt> macros? Because in that case, the value <tt>0</tt> is not "a POSIX <tt>errno</tt> value". 
So arguably <tt>system_category().default_error_condition(0)</tt> is required to return an 
<tt>error_condition</tt> using the "system" category, which means that <tt>error_code{} == error_condition{}</tt> 
is required to be <tt>false</tt>. This seems wrong.
<p/>
For POSIX-based systems the value <tt>0</tt> should definitely correspond to the generic category. 
Arguably that needs to be <tt>true</tt> for all systems, because the <tt>std::error_code</tt> API 
strongly encourages a model where zero means "no error".
<p/>
The proposed resolution has been implemented in libstdc++. Libc++ has always treated system error code 
<tt>0</tt> as corresponding to generic error code <tt>0</tt>.
</p>

<note>2021-10-14; Reflector poll</note>
<p>
Set status to Tentatively Ready after six votes in favour during reflector poll.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4892">N4892</a>.
</p>

<ol>
<li><p>Modify <sref ref="[syserr.errcat.objects]"/> as indicated:</p>

<blockquote>
<pre>
const error_category&amp; system_category() noexcept;
</pre>
<blockquote>
<p>
-3- <i>Returns:</i> [&hellip;]
<p/>
-4- <i>Remarks:</i> The object's <tt>equivalent</tt> virtual functions shall behave as specified 
for class <tt>error_category</tt>. The object's <tt>name</tt> virtual function shall return a pointer 
to the string <tt>"system"</tt>. The object's <tt>default_error_condition</tt> virtual function 
shall behave as follows:
<p/>
If the argument <tt>ev</tt> <ins>is equal to <tt>0</tt>, the function returns 
<tt>error_condition(0, generic_category())</tt>. Otherwise, if <tt>ev</tt></ins> corresponds to a POSIX 
<tt>errno</tt> value <tt>posv</tt>, the function <del>shall return</del><ins>returns</ins> 
<tt>error_condition(posv, generic_category())</tt>. Otherwise, the function <del>shall return</del><ins>returns</ins> 
<tt>error_condition(ev, system_category())</tt>. What constitutes correspondence for any given operating 
system is unspecified.
<p/>
[<i>Note 1</i>: The number of potential system error codes is large and unbounded, and some might not 
correspond to any POSIX <tt>errno</tt> value. Thus implementations are given latitude in determining 
correspondence. &mdash; <i>end note</i>]
</p>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
