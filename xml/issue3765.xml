<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3765" status="C++23">
<title><tt>const_sentinel</tt> should be constrained</title>
<section><sref ref="[iterator.synopsis]"/><sref ref="[const.iterators.alias]"/></section>
<submitter>Hewill Kang</submitter>
<date>03 Sep 2022</date>
<priority>99</priority>

<discussion>
<p>
The current standard does not have any constraints on <tt>const_sentinel</tt> template parameters, 
which makes it possible to pass almost any type of object to <tt>make_const_sentinel</tt>.
It would be more appropriate to constrain the type to meet the minimum requirements of the 
sentinel type such as <tt>semiregular</tt> as <tt>move_sentinel</tt> does.
</p>

<note>2022-09-23; Reflector poll</note>
<p>
Set status to Tentatively Ready after six votes in favour during reflector poll.
</p>

<note>2022-11-12 Approved at November 2022 meeting in Kona. Status changed: Voting &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="n4917"/>.
</p>

<ol>

<li><p>Modify <sref ref="[iterator.synopsis]"/>, header <tt>&lt;iterator&gt;</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
#include &lt;compare&gt;              <i>// see <sref ref="[compare.syn]"/></i>
#include &lt;concepts&gt;             <i>// see <sref ref="[concepts.syn]"/></i>

namespace std {
  [&hellip;]
  
  <i>// <sref ref="[const.iterators]"/>, constant iterators and sentinels</i>
  <i>// <sref ref="[const.iterators.alias]"/>, alias templates</i>
  [&hellip;]
  template&lt;input_iterator I&gt;
    using const_iterator = <i>see below</i>;                                               // <i>freestanding</i>
  template&lt;<ins>semiregular</ins><del>class</del> S&gt;
    using const_sentinel = <i>see below</i>;                                               // <i>freestanding</i>

  [&hellip;]
  template&lt;input_iterator I&gt;
    constexpr const_iterator&lt;I&gt; make_const_iterator(I it) { return it; }            // <i>freestanding</i>

  template&lt;<ins>semiregular</ins><del>class</del> S&gt;
    constexpr const_sentinel&lt;S&gt; make_const_sentinel(S s) { return s; }              // <i>freestanding</i>
  [&hellip;]
}
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[const.iterators.alias]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;<ins>semiregular</ins><del>class</del> S&gt;
  using const_sentinel = <i>see below</i>;
</pre>
<blockquote>
<p>
-2- <i>Result</i>: If <tt>S</tt> models <tt>input_iterator</tt>, <tt>const_iterator&lt;S&gt;</tt>. Otherwise, <tt>S</tt>.
</p>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
