<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3804" status="New">
<title><tt>flat_<i>foo</i></tt> missing some allocator-extended deduction guides</title>
<section><sref ref="[flat.map]"/><sref ref="[flat.multimap]"/>
<sref ref="[flat.set]"/><sref ref="[flat.multiset]"/></section>
<submitter>Arthur O'Dwyer</submitter>
<date>25 Oct 2022</date>
<priority>99</priority>

<discussion>
<p>
Tony Table:
</p>
<blockquote><pre>
std::vector&lt;int&gt; v;
std::flat_set s = std::flat_set(v, MyAllocator&lt;int&gt;());
std::flat_set s = std::flat_set(v, std::less(), MyAllocator&lt;int&gt;());
std::flat_set s = std::flat_set(v.begin(), v.end(), MyAllocator&lt;int&gt;());
std::flat_set s = std::flat_set(v.begin(), v.end(), std::less(), MyAllocator&lt;int&gt;());
// BEFORE: all fail to compile
// AFTER: all compile successfully
</pre></blockquote>
<p>
Contrast <sref ref="[flat.set.cons]"/> with <sref ref="[priqueue.cons]"/>, where most of these are okay:
</p>
<blockquote><pre>
std::vector&lt;int, MyAllocator&lt;int&gt;&gt; v;
std::priority_queue pq1 = std::priority_queue(v, std::less(), MyAllocator&lt;int&gt;());
std::priority_queue pq2 = std::priority_queue(v.begin(), v.end(), MyAllocator&lt;int&gt;());
std::priority_queue pq3 = std::priority_queue(v.begin(), v.end(), std::less(), MyAllocator&lt;int&gt;());
// BEFORE AND AFTER: pq1 compiles successfully
// BEFORE AND AFTER: pq2 and pq3 also compile successfully thanks to LWG <iref ref="3506"/>
</pre></blockquote>
</discussion>

<resolution>
</resolution>

</issue>
