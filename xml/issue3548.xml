<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3548" status="WP">
<title><tt>shared_ptr</tt> construction from <tt>unique_ptr</tt> should move (not copy) the deleter</title>
<section><sref ref="[util.smartptr.shared.const]"/></section>
<submitter>Thomas K&ouml;ppe</submitter>
<date>04 May 2021</date>
<priority>99</priority>

<discussion>
<p>
The construction of a <tt>shared_ptr</tt> from a suitable <tt>unique_ptr</tt> rvalue <tt>r</tt> 
(which was last modified by LWG <iref ref="2415"/>, but not in ways relevant to this issue) calls 
for <tt>shared_ptr(r.release(), r.get_deleter())</tt> in the case where the deleter is not a reference.
<p/>
This specification requires the deleter to be copyable, which seems like an unnecessary restriction. 
Note that the constructor <tt>unique_ptr(unique_ptr&amp;&amp; u)</tt> only requires <tt>u</tt>'s deleter 
to be <i>Cpp17MoveConstructible</i>. By analogy, the constructor <tt>shared_ptr(unique_ptr&lt;Y, D&gt;&amp;&amp;)</tt> 
should also require <tt>D</tt> to be only move-, not copy-constructible.
</p>

<note>2021-05-17; Reflector poll</note>
<p>
Set status to Tentatively Ready after eight votes in favour during reflector poll.
</p>

<note>2021-06-07 Approved at June 2021 virtual plenary. Status changed: Voting &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4885">N4885</a>.
</p>

<ol>
<li><p>Modify <sref ref="[util.smartptr.shared.const]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class Y, class D&gt; shared_ptr(unique_ptr&lt;Y, D&gt;&amp;&amp; r);
</pre>
<blockquote>
<p>
-28- <i>Constraints:</i> <tt>Y*</tt> is compatible with <tt>T*</tt> and <tt>unique_ptr&lt;Y, D&gt;::pointer</tt> 
is convertible to <tt>element_type*</tt>.
<p/>
-29- <i>Effects:</i> If <tt>r.get() == nullptr</tt>, equivalent to <tt>shared_ptr()</tt>. Otherwise, if <tt>D</tt> 
is not a reference type, equivalent to <tt>shared_ptr(r.release(), <ins>std::move(</ins>r.get_deleter()<ins>)</ins>)</tt>. 
Otherwise, equivalent to <tt>shared_ptr(r.release(), ref(r.get_deleter()))</tt>. If an exception is thrown, 
the constructor has no effect.
</p>
</blockquote>
</blockquote>

</li>
</ol>
</resolution>

</issue>
