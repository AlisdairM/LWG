<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2598" status="Tentatively Ready">
<title><tt>addressof</tt> works on temporaries</title>
<section><sref ref="[specialized.addressof]"/></section>
<submitter>Brent Friedman</submitter>
<date>6 Mar 2016</date>
<priority>3</priority>

<discussion>
<p>
LWG issue <iref ref="970"/> removed the rvalue reference overload for <tt>addressof</tt>. This allows const prvalues to 
bind to a call to <tt>addressof</tt>, which is dissimilar from the behavior of <tt>operator&amp;</tt>.
</p>
<blockquote><pre>
const vector&lt;int&gt; a();

void b()
{
  auto x = addressof(a()); // "ok"
  auto y = addressof&lt;const int&gt;(0); // "ok"
  auto z = &amp;a(); //error: cannot take address of a temporary
}
</pre></blockquote>

<note>08-2016, Chicago</note>
<p>Tues PM: Move to Tentatively Ready</p>
</discussion>

<resolution>
<p>
This wording is relative to N4582.
</p>

<ol>
<li><p>Change <sref ref="[memory.syn]"/>, header <tt>&lt;memory&gt;</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
[&hellip;]
<i>// 20.9.12, specialized algorithms:</i>
template &lt;class T&gt; constexpr T* addressof(T&amp; r) noexcept;
<ins>template &lt;class T&gt; const T* addressof(const T&amp;&amp; elem) = delete;</ins>
[&hellip;]
</pre>
</blockquote>
</li>

<li><p>Change <sref ref="[specialized.addressof]"/> p1 as indicated:</p>

<blockquote>
<pre>
template &lt;class T&gt; constexpr T* addressof(T&amp; r) noexcept;
<ins>template &lt;class T&gt; const T* addressof(const T&amp;&amp; elem) = delete;</ins>
</pre>
<blockquote>
<p>
-1- <i>Returns</i>: The actual address of the object or function referenced by <tt>r</tt>, even in the presence of an
overloaded <tt>operator&amp;</tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
