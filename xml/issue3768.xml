<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3768" status="New">
<title><tt><i>possibly-const-range</i></tt> is overconstrained</title>
<section><sref ref="[ranges.syn]"/></section>
<submitter>Hewill Kang</submitter>
<date>08 Sep 2022</date>
<priority>99</priority>

<discussion>
<p>
Due to the <tt><i>possibly-const-range</i></tt> constraint that the template parameter <tt>R</tt> 
must model <tt>input_range</tt>, this makes the <tt>ranges::cend</tt> that tries using it 
for meaningful <tt>const</tt> casting never be applied to an <tt>output_range</tt>, even though 
<tt>const_sentinel</tt> does not require the template parameter <tt>S</tt> to model 
<tt>input_iterator</tt>.
<p/>
This is unnecessary, we should relax its constraint.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="n4917"/>.
</p>

<ol>

<li><p>Modify <sref ref="[ranges.syn]"/> as indicated:</p>

<blockquote>
<pre>
#include &lt;compare&gt;              // <i>see <sref ref="[compare.syn]"/></i>
#include &lt;initializer_list&gt;     // <i>see <sref ref="[initializer.list.syn]"/></i>
#include &lt;iterator&gt;             // <i>see <sref ref="[iterator.synopsis]"/></i>

namespace std::ranges {
  [&hellip;]

  // <i><sref ref="[range.as.const]"/>, as const view</i>
  template&lt;<del>input_</del>range R&gt;
    constexpr auto&amp; <i>possibly-const-range</i>(R&amp; r) {          // <i>exposition only</i>
      if constexpr (constant_range&lt;const R&gt; &amp;&amp; !constant_range&lt;R&gt;) {
        return const_cast&lt;const R&amp;&gt;(r);
      } else {
        return r;
      }
    } 
  
  [&hellip;]
}
</pre>
</blockquote>
</li>

</ol>
</resolution>

</issue>
