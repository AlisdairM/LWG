<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3682" status="New">
<title>A <i>Cpp17Allocator</i> type can't silently ignore an unsupported alignment</title>
<section><sref ref="[allocator.requirements.general]"/></section>
<submitter>Jiang An</submitter>
<date>18 Mar 2022</date>
<priority>3</priority>

<discussion>
<p>
Currently (at least since <paper num="P0593R6"/>), the <tt>allocate</tt> function of an allocator is 
required to create an array of elements (<sref ref="[allocator.requirements.general]"/>), which means 
the allocated storage must be properly aligned (otherwise the array of requested size can't be created). 
However, according to paragraph 12 it is also allowed that "the allocator also may silently ignore the 
requested alignment".
<p/>
IMO the allowance is contradictory and should be removed.
</p>

<note>2022-05-17; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
</p>
<p>
"You can allocate from such an allocator but you can't construct objects
in the allocated memory without manually checking the alignment of the
returned pointer. That doesn't seem useful in practice."
</p>
<p>
"maybe even NAD/LEWG? I can't see us declaring most in-the-wild allocators
to no longer be allocators. If anything, a design change is necessary to have
a protocol for allocators to declare proper support for overalignment and for
<tt>allocator_traits</tt> to implement such support "manually" for older
allocators."
</p>

</discussion>

<resolution>
</resolution>

</issue>
