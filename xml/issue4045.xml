<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4045" status="New">
<title><code>tuple</code> can create dangling references from <code><i>tuple-like</i></code></title>
<section><sref ref="[tuple.cnstr]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>24 Jan 2024</date>
<priority>99</priority>

<discussion>
<p>
<paper num="P2165R4"/>
(Compatibility between tuple, pair and tuple-like objects)
added two new constructors to <code>std::tuple</code>:
</p>
<pre><code>
  template&lt;tuple-likeUTuple&gt;
    constexpr explicit(see below ) tuple(UTuple&amp;&amp; u);
</code></pre>
<p>
and the allocator-extended equivalent.
Unlike the existing constructors taking a single parameter of tuple type,
these new constructors are not defined as deleted if they would create a
dangling reference to a temporary. The existing constructors gained that
restriction from
<paper num="P2255R2"/>
(A type trait to detect reference binding to temporary)
which was approved one meeting before
<paper num="P2165R4"/>
so LWG seem to have missed the inconsistency.
</p>
<p>
The proposal also added a new constructor for <code>std::pair</code>:
</p>
<pre><code>
  template&lt;pair-like P&gt; constexpr explicit(<i>see below</i>) pair(P&amp;&amp; p);
</code></pre>
<p>
This <em>is</em> deleted if it would create a dangling reference,
although that seems to be an almost accidental consequence of adding
the new signature after existing ones which already have the <em>Remarks</em>:
about being deleted.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4971"/>.
</p>
<ol>
<li><p>Modify <sref ref="[tuple.cnstr]"/> as indicated:</p>
<blockquote>
<pre><code>
template&lt;<i>tuple-like</i> UTuple&gt;
  constexpr explicit(<i>see below</i>) tuple(UTuple&amp;&amp; u);
</code></pre>
<p>-28-
Let <code>I</code> be the pack <code>0, 1, ..., (sizeof...(Types) - 1)</code>.
</p>
<p>-29-
<i>Constraints</i>:
<ol style="list-style-type: none">
<li>(29.1) &ndash;
<code><i>different-from</i>&lt;UTuple, tuple&gt;</code>
(<sref ref="[range.utility.helpers]"/>) is <code>true</code>,
</li>
<li>(29.2) &ndash;
<code>remove_cvref_t&lt;UTuple&gt;</code> is not a specialization of
<code>ranges::subrange</code>,
</li>
<li>(29.3) &ndash;
<code>sizeof...(Types)</code> equals
<code>tuple_size_v&lt;remove_cvref_t&lt;UTuple&gt;&gt;</code>,
</li>
<li>(29.4) &ndash;
<code>(is_constructible_v&lt;Types, decltype(get&lt;I&gt;(std::forward&lt;UTuple&gt;(u)))> &amp;&amp; ...)</code>
 is
<code>true</code>, and
</li>
<li>(29.5) &ndash;
either <code>sizeof...(Types)</code> is not 1,
or (when <code>Types...</code> expands to <code>T</code>)
<code>is_convertible_v&lt;UTuple, T&gt;</code> and <code>is_constructible_v&lt;T, UTuple&gt;</code>
are both <code>false</code>.
</li>
</ol>
</p>
<p>-30- <i>Effects</i>:
For all <i>i</i>,
initializes the <i>i</i><sup>th</sup> element of <code>*this</code>
with <code>get&lt;i&gt;(std::forward&lt;UTuple&gt;(u))</code>.
</p>
<p>-31- <i>Remarks</i>:
The expression inside <code>explicit</code> is equivalent to:
<pre><code>  !(is_convertible_v&lt;decltype(get&lt;I&gt;(std::forward&lt;UTuple&gt;(u))), Types&gt; &amp;&amp; ...)
</code></pre>
</p>
<p>
<ins>
The constructor is defined as deleted if
</ins>
<pre><code><ins>  (reference_constructs_from_temporary_v&lt;Types, decltype(get&lt;I&gt;(std::forward&lt;UTuple&gt;(u)))&gt; || ...)</ins>
</code></pre>
<ins>
is <code>true</code>.
</ins>
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
