<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3377" status="WP">
<title><tt>elements_view::iterator</tt> befriends a specialization of itself</title>
<section><sref ref="[range.elements.iterator]"/></section>
<submitter>Casey Carter</submitter>
<date>18 Jan 2020</date>
<priority>0</priority>

<discussion>
<p>
The synopsis of the exposition-only class template <tt>elements_view::iterator</tt> in 
<sref ref="[range.elements.iterator]"/> includes the declaration "<tt>friend iterator&lt;!Const&gt;;</tt>". 
We typically don't depict such friend relationships in the Library specification, leaving the 
choice of how to implement access to private data from external sources to implementer magic. 
For consistency, we should strike this occurrence from <tt>elements_view::iterator</tt>.
</p>

<note>2020-02-08 Status set to Tentatively Ready after ten positive votes on the reflector.</note>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4842">N4842</a>.</p>

<ol>
<li><p>Modify <sref ref="[range.elements.iterator]"/>, class template <tt>elements_view::iterator</tt> 
synopsis, as indicated:</p>

<blockquote>
<pre>
namespace std::ranges {
  template&lt;class V, size_t N&gt;
  template&lt;bool Const&gt;
  class elements_view&lt;V, N&gt;::iterator { <i>// exposition only</i>
    using base_t = conditional_t&lt;Const, const V, V&gt;;
    <del>friend iterator&lt;!Const&gt;;</del>

    iterator_t&lt;base_t&gt; current_;
  public:
    [&hellip;]
  };
  [&hellip;]
}
</pre>
</blockquote>
</li>
</ol>
</resolution>

</issue>
