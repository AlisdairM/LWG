<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY hellip "&#x2026;">
] >

<issue num="2496" status="New">
<title>Certain hard-to-avoid errors not in the immediate context are not allowed to be triggered by 
the evaluation of type traits</title>
<section><sref ref="[meta.unary.prop]"/></section>
<submitter>Hubert Tong</submitter>
<date>7 May 2015</date>
<priority>3</priority>

<discussion>
<p>
I do not believe that the wording in <sref ref="[meta.unary.prop]"/> paragraph 3 allows for the following program to be ill-formed:
</p>
<blockquote>
<pre>
#include &lt;type_traits&gt;

template &lt;typename T&gt; struct B : T { };
template &lt;typename T&gt; struct A { A&amp; operator=(const B&lt;T&gt;&amp;); };

std::is_assignable&lt;A&lt;int&gt;, int&gt; q;
</pre>
</blockquote>
<p>
In particular, I do not see where the wording allows for the "compilation of the expression" 
<tt>declval&lt;T&gt;() = declval&lt;U&gt;()</tt> to occur as a consequence of instantiating <tt>std::is_assignable&lt;T, U&gt;</tt> 
(where <tt>T</tt> and <tt>U</tt> are, respectively, <tt>A&lt;int&gt;</tt> and <tt>int</tt> in the example code).
<p/>
Instantiating <tt>A&lt;int&gt;</tt> as a result of requiring it to be a complete type does not trigger the instantiation of 
<tt>B&lt;int&gt;</tt>; however, the "compilation of the expression" in question does.
</p>
</discussion>

<resolution>
</resolution>

</issue>
