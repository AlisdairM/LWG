<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3171" status="C++23">
<title>LWG 2989 breaks <tt>directory_entry</tt> stream insertion</title>
<section><sref ref="[fs.class.directory.entry]"/></section>
<submitter>Tim Song</submitter>
<date>3 Dec 2018</date>
<priority>2</priority>

<discussion>
<p>
<tt>directory_entry</tt> has a conversion function to <tt>const path&amp;</tt> and depends on <tt>path</tt>'s stream insertion 
operator for stream insertion support, which is now broken after LWG <iref ref="2989"/> made it a hidden friend.
<p/>
This does not appear to be intended.
</p>

<note>2018-12-21 Reflector prioritization</note>
<p>Set Priority to 2</p>
<note>2019-02; Kona Wednesday night issue processing</note>
<p>Status to Open; Marshall to move definition inline and re-vote on reflector.</p>
<p>Jonathan to write a paper about how to specify "hidden friends".</p>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>This wording is relative to <a href="https://wg21.link/n4778">N4778</a>.</p>

<ol>
<li><p>Modify <sref ref="[fs.class.directory_entry]"/>, class <tt>directory_entry</tt> synopsis, as follows:</p>

<blockquote>
<pre>
namespace std::filesystem {
  class directory_entry {
  public:
    [&hellip;]
  private:
    filesystem::path pathobject;     // exposition only
    friend class directory_iterator; // exposition only

<ins>    template&lt;class charT, class traits&gt;
      friend basic_ostream&lt;charT, traits&gt;&amp;
        operator&lt;&lt;(basic_ostream&lt;charT, traits&gt;&amp; os, const directory_entry&amp; d);</ins>
  };
}
</pre>
</blockquote>
</li>
<li>
<p>Add a new subclause at the end of <sref ref="[fs.class.directory_entry]"/>, as follows:</p>
<blockquote>
<p><strong>28.11.11.4 Inserter [fs.dir.entry.io]</strong></p>
<blockquote>
<pre>
template&lt;class charT, class traits&gt;
  friend basic_ostream&lt;charT, traits&gt;&amp;
    operator&lt;&lt;(basic_ostream&lt;charT, traits&gt;&amp; os, const directory_entry&amp; d);
</pre>
<blockquote>
<p>
-1- <i>Effects:</i> Equivalent to: <tt> return os &lt;&lt; d.path(); </tt>
</p>
</blockquote>
</blockquote>
</blockquote>
</li>
</ol>
</blockquote>

<note>2020-05-02; Daniel resyncs wording with recent working draft and comments</note>
<p>
We have now the paper <a href="https://wg21.link/p1965r0">P1965R0</a>, which introduced
a specification of what friend functions in the library specification (see 
<sref ref="[hidden.friends]"/>) are supposed to mean, there is no longer an inline
definition needed to clarify the meaning. In addition to updating the change of section
names the provided wording has moved the friend declaration into the public part of the
class definition as have done in all other cases where we take advantage of "hidden friends"
declarations.
</p>
<note>2020-08-21 Issue processing telecon: moved to Tentatively Ready</note>
<note>2020-11-09 Approved In November virtual meeting. Status changed: Tentatively Ready &rarr; WP.</note>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4861">N4861</a>.</p>

<ol>
<li><p>Modify <sref ref="[fs.class.directory.entry]"/>, class <tt>directory_entry</tt> synopsis, as follows:</p>

<blockquote>
<pre>
namespace std::filesystem {
  class directory_entry {
  public:
    [&hellip;]
    bool operator==(const directory_entry&amp; rhs) const noexcept;
    strong_ordering operator&lt;=&gt;(const directory_entry&amp; rhs) const noexcept;
    
    <ins><i>// 29.11.11.? [fs.dir.entry.io], inserter</i>    
    template&lt;class charT, class traits&gt;
      friend basic_ostream&lt;charT, traits&gt;&amp;
        operator&lt;&lt;(basic_ostream&lt;charT, traits&gt;&amp; os, const directory_entry&amp; d);</ins>
  private:
    [&hellip;]
  };
}
</pre>
</blockquote>
</li>

<li>
<p>Add a new subclause at the end of <sref ref="[fs.class.directory.entry]"/>, as indicated:</p>

<blockquote>
<p><strong><ins>29.11.11.? Inserter [fs.dir.entry.io]</ins></strong></p>
<blockquote>
<pre>
<ins>template&lt;class charT, class traits&gt;
  friend basic_ostream&lt;charT, traits&gt;&amp;
    operator&lt;&lt;(basic_ostream&lt;charT, traits&gt;&amp; os, const directory_entry&amp; d);</ins>
</pre>
<blockquote>
<p>
<ins>-?- <i>Effects:</i> Equivalent to: <tt>return os &lt;&lt; d.path();</tt></ins>
</p>
</blockquote>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
