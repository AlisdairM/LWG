<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2861" status="New">
<title><tt>basic_string</tt> should require that <tt>charT</tt> match <tt>traits::char_type</tt></title>
<section><sref ref="[string.require]"/></section>
<submitter>United States</submitter>
<date>2 Feb 2017</date>
<priority>99</priority>

<discussion>
<p><b>Addresses US 145</b></p>

<p>There is no requirement that <tt>traits::char_type</tt> is <tt>charT</tt>, although there is a requirement that 
<tt>allocator::value_type</tt> is <tt>charT</tt>. This means that it might be difficult to honour both methods returning reference 
(such as <tt>operator[]</tt>) and <tt>charT&amp;</tt> (like <tt>front</tt>/<tt>back</tt>) when traits has a surprising 
<tt>char_type</tt>. It seems that the allocator should <em>not</em> rebind in such cases, making the reference-returning 
signatures the problematic ones.</p>

<p>Suggested resolution: Add a requirement that <tt>is_same_v&lt;typename traits::char_type, charT&gt;</tt> is true, and simplify so that value_type is just an alias for <tt>charT</tt>.</p>

<note>2017-02-02 Marshall adds</note>
<p>In [string.require]/3, there's already a note that the types shall be the same. In [string.view.template]/1, it says "In every specialization <tt>basic_string_view&lt;charT, traits, Allocator&gt;</tt>, the type <tt>traits</tt> shall satisfy the character traits requirements (21.2), and the type <tt>traits::char_type</tt> shall name the same type as <tt>charT</tt>".</p>
</discussion>

<resolution>
<p>Changes are based off of <a href="http://wg21.link/n4618">N4618</a></p>

<ol>
<li><p>Modify [basic.string] as indicated (in the synopsis):</p>
<blockquote><pre>
class basic_string {
public:
// <i>types:</i>
  using traits_type      = traits;
  using value_type       = <ins>charT</ins><del>typename traits::char_type</del>;
  using allocator_type   = Allocator
</pre></blockquote>
</li>

<li>
<p>Change [string.require]/3 as indicated:</p>
<p>-3- In every specialization <tt>basic_string&lt;charT, traits, Allocator&gt;</tt>, the type <tt>allocator_traits&lt;Allocator&gt;::value_type</tt> shall name the same type as <tt>charT</tt>. Every object of type <tt>basic_string&lt;charT, traits, Allocator&gt;</tt> shall use an object of type <tt>Allocator</tt> to allocate and free storage for the contained <tt>charT</tt> objects as needed. The <tt>Allocator</tt> object used shall be obtained as described in 23.2.1. <del>[ Note: </del>In every specialization <tt>basic_string&lt;charT, traits, Allocator&gt;</tt>, <ins>the type <tt>traits</tt> shall satisfy the character traits requirements (21.2), and </ins> the type <tt>traits::char_type</tt> shall <ins>name</ins><del>be</del> the same type as <tt>charT</tt><del>; see 21.2. â€” end note ]</del>
</p>
</li>
</ol>
</resolution>

</issue>

