<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3134" status="Tentatively Ready">
<title>[fund.ts.v3] LFTSv3 contains extraneous [meta] variable templates that should have been deleted by P09961</title>
<section><sref ref="[meta.type.synop]"/></section>
<submitter>Thomas K&ouml;ppe</submitter>
<date>2 Jul 2018</date>
<priority>0</priority>

<discussion>
<p><b>Addresses: fund.ts.v3</b></p>
<p>
The LFTSv3 prospective-working-paper <a href="http://wg21.link/n4758">N4758</a> lists a large number of type trait 
variable templates in [meta.type.synop] that are duplicates of corresponding ones in C++17. The paper 
<a href="http://wg21.link/P0996R1">P0996R1</a> that was meant to rebase the LFTS on C++17 appears to have missed them.
</p>

<note>2018-07-20 Status to Tentatively Ready after five positive votes on the reflector.</note>
</discussion>

<resolution>
<p>
This wording is relative to <a href="http://wg21.link/n4758">N4758</a>.
</p>

<ol>
<li>
<p>
Delete from <sref ref="[meta.type.synop]"/> all variable templates starting at <tt>is_void_v</tt> up to and including 
<tt>is_convertible_v</tt> as indicated:
</p>
<blockquote>
<pre>
#include &lt;type_traits&gt;

namespace std::experimental {
inline namespace fundamentals_v3 {

  <del><i>// See C++17 &sect;23.15.4.1, primary type categories</i>
  template &lt;class T&gt; constexpr bool is_void_v
    = is_void&lt;T&gt;::value;
  [&hellip;]
  template &lt;class From, class To&gt; constexpr bool is_convertible_v
    = is_convertible&lt;From, To&gt;::value;</del>

  // 3.3.2, Other type transformations
  template &lt;class&gt; class invocation_type; // not defined
  [&hellip;]
} // inline namespace fundamentals_v3
} // namespace std::experimental
</pre>
</blockquote>
</li>
</ol>
</resolution>

</issue>
