<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3492" status="Tentatively Ready">
<title>Minimal improvements to <tt>elements_view::<i>iterator</i></tt></title>
<section><sref ref="[range.elements.iterator]"/></section>
<submitter>Michael Schellenberger Costa</submitter>
<date>28 Oct 2020</date>
<priority>0</priority>

<discussion>
<p>
During code review of <tt>elements_view</tt> for MSVC-STL we found two issues that should be easily addressed:
</p>
<ol>
<li>
<p><tt>elements_view::<i>iterator</i></tt> constraints both <tt>operator++(int)</tt> member functions</p>
<blockquote><pre>
constexpr void operator++(int) requires (!forward_range&lt;<i>Base</i>&gt;);
constexpr <i>iterator</i> operator++(int) requires forward_range&lt;<i>Base</i>&gt;;  
</pre></blockquote>
<p>
However, given that a constrained method would be preferred we only need to constrain one of those. 
The proposal would be to remove the constraint from the <tt>void</tt> returning overload and change 
the declaration to
</p>
<blockquote><pre>
constexpr void operator++(int);
constexpr <i>iterator</i> operator++(int) requires forward_range&lt;<i>Base</i>&gt;;  
</pre></blockquote>
</li>
<li>
<p><tt>elements_view::<i>iterator</i> operator-</tt> is constrained as follows:</p>
<blockquote><pre>
friend constexpr difference_type operator-(const <i>iterator</i>&amp; x, const <i>iterator</i>&amp; y)
  requires random_access_range&lt;<i>Base</i>&gt;; 
</pre></blockquote>
<p>
However, that requires its base to have <tt>operator-</tt> defined. We should change the constraint to 
<tt>sized_sentinel_for&lt;iterator_t&lt;<i>Base</i>&gt;, iterator_t&lt;Base&gt;&gt;</tt>:
</p>
<blockquote><pre>
friend constexpr difference_type operator-(const <i>iterator</i>&amp; x, const <i>iterator</i>&amp; y)
  requires sized_sentinel_for&lt;iterator_t&lt;<i>Base</i>&gt;, iterator_t&lt;<i>Base</i>&gt;&gt;;
</pre></blockquote>
</li>
</ol>

<note>2020-11-01; Daniel comments</note>
<p>
Bullet (2) of the discussion has already been resolved by LWG <iref ref="3483"/>, it has therefore
been omitted from the proposed wording below.
</p>

<note>2020-11-15; Reflector prioritization</note>
<p>
Set priority to 0 and status to Tentatively Ready after five votes in favour during reflector discussions.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4868">N4868</a>. 
</p>

<blockquote class="note">
<p>
This wording intentionally only touches <tt>operator++(int)</tt> and <em>not</em> <tt>operator-</tt>,
see the 2020-11-01 comment for the reason why.
</p>
</blockquote>

<ol>
<li>
<p>
Modify <sref ref="[range.elements.iterator]"/>, class template <tt>elements_view::<i>iterator</i></tt> synopsis, 
as indicated:
</p>

<blockquote>
<blockquote>
<pre>
[&hellip;]
constexpr <i>iterator</i>&amp; operator++();
constexpr void operator++(int) <del>requires (!forward_range&lt;<i>Base</i>&gt;)</del>;
constexpr <i>iterator</i> operator++(int) requires forward_range&lt;<i>Base</i>&gt;;
[&hellip;]
</pre>
</blockquote>
[&hellip;]
<pre>
constexpr void operator++(int) <del>requires (!forward_range&lt;<i>Base</i>&gt;)</del>;
</pre>
<blockquote>
<p>
-6- <i>Effects:</i> Equivalent to: <tt>++<i>current_</i></tt>.
</p>
</blockquote>
<pre>
constexpr <i>iterator</i> operator++(int) requires forward_range&lt;<i>Base</i>&gt;;
</pre>
[&hellip;]
</blockquote>
</li>
</ol>
</resolution>

</issue>
