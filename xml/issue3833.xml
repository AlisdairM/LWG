<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3833" status="WP">
<title>Remove specialization <tt>template&lt;size_t N&gt; struct formatter&lt;const charT[N], charT&gt;</tt></title>
<section><sref ref="[format.formatter.spec]"/></section>
<submitter>Mark de Wever</submitter>
<date>27 Nov 2022</date>
<priority>2</priority>

<discussion>
<p>
In the past I discussed with Victor and Charlie to remove
</p>
<blockquote><pre>
template&lt;size_t N&gt; struct formatter&lt;const charT[N], charT&gt;;
</pre></blockquote>
<p>
Charlie disliked that since MSVC STL already shipped it and Victor
mentioned it was useful. Instead of proposing to remove the
specialization in LWG <iref ref="3701"/> ("Make <tt>formatter&lt;remove_cvref_t&lt;const charT[N]&gt;, charT&gt;</tt> 
requirement explicit") I proposed to keep it. It's unused but it doesn't hurt. 
<p/>
That was until <paper num="P2585R0"/> "Improve default container formatting". This paper makes it no 
longer possible to instantiate this specialization. See 
<a href="https://godbolt.org/z/bqjhhaexx">here for an example</a> and a possible work-around.
<p/>
The relevant wording is <sref ref="[format.syn]"/>:
</p>
<blockquote><pre>
template&lt;class R&gt;
  constexpr <i>unspecified</i> format_kind = <i>unspecified</i>;

template&lt;ranges::input_range R&gt;
    requires same_as&lt;R, remove_cvref_t&lt;R&gt;&gt;
  constexpr range_format format_kind&lt;R&gt; = <i>see below</i>;
</pre></blockquote>
<p>
combined with  <sref ref="[format.range.fmtkind]"/> p1:
</p>
<blockquote><p>
A program that instantiates the primary template of <tt>format_kind</tt> is
ill-formed.
</p></blockquote>
<p>
The issue is that <tt>const charT[N]</tt> does not satisfy the requirement
<tt>same_as&lt;R, remove_cvref_t&lt;R&gt;&gt;</tt>. So it tries to instantiate the primary
template, which is ill-formed.
<p/>
I see two possible solutions:
</p>
<ol>
<li><p><em>Removing</em> the specialization</p>
<blockquote><pre>
template&lt;size_t N&gt; struct formatter&lt;const charT[N], charT&gt;;
</pre></blockquote></li>
<li><p><em>Adding</em> a specialization</p>
<blockquote><pre>
template&lt;class charT, size_t N&gt;
  constexpr range_format format_kind&lt;const charT[N]&gt; =
    range_format::disabled;
</pre></blockquote></li>
</ol>
<p>
I discussed this issue privately and got no objection for solution 1,
therefore I propose to take that route. Implementations can still
implement solution 2 as an extension until they are ready to ship an
API/ABI break.
</p>

<note>2022-11-30; Reflector poll</note>
<p>
Set priority to 2 after reflector poll.
</p>
<p>
"Rationale is not really convincing why the first option is the right one."
</p>
<p>
"The point is not that we would need to add a format_kind specialization,
it is that the specialization is inconsistent with the design of <tt>formatter</tt>,
which is supposed to be instantiated only for cv-unqualified non-reference types."
</p>

<superseded>

<p>
This wording is relative to <paper num="N4917"/>.
</p>

<ol>
<li><p>Modify <sref ref="[format.formatter.spec]"/> as indicated:</p>

<blockquote>
<p>
-2- Let <tt>charT</tt> be either <tt>char</tt> or <tt>wchar_t</tt>. Each specialization 
of <tt>formatter</tt> is either enabled or disabled, as described below. A 
<i>debug-enabled</i> specialization of <tt>formatter</tt> additionally provides a public, constexpr,
non-static member function <tt>set_debug_format()</tt> which modifies the state of the <tt>formatter</tt> 
to be as if the type of the <i>std-format-spec</i> parsed by the last call to <tt>parse</tt> were <tt>?</tt>. 
Each header that declares the template <tt>formatter</tt> provides the following enabled specializations:
</p>
<ol style="list-style-type: none">
<li><p>(2.1) &mdash; The debug-enabled specializations [&hellip;]</p></li>
<li><p>(2.2) &mdash; For each <tt>charT</tt>, the debug-enabled string type specializations</p>
<blockquote><pre>
template&lt;&gt; struct formatter&lt;charT*, charT&gt;;
template&lt;&gt; struct formatter&lt;const charT*, charT&gt;;
template&lt;size_t N&gt; struct formatter&lt;charT[N], charT&gt;;
<del>template&lt;size_t N&gt; struct formatter&lt;const charT[N], charT&gt;;</del>
template&lt;class traits, class Allocator&gt;
  struct formatter&lt;basic_string&lt;charT, traits, Allocator&gt;, charT&gt;;
template&lt;class traits&gt;
  struct formatter&lt;basic_string_view&lt;charT, traits&gt;, charT&gt;;
</pre></blockquote></li>
<li><p>(2.3) &mdash; [&hellip;]</p></li>
<li><p>(2.4) &mdash; [&hellip;]</p></li>
</ol>
</blockquote>
</li>

<li><p>Add a new paragraph to <sref ref="[diff.cpp20.utilities]"/> as indicated:</p>

<blockquote>
<p>
<ins><b>Affected subclause</b>: <sref ref="[format.formatter.spec]"/></ins>
<p/>
<ins><b>Change</b>: Remove the <tt>formatter</tt> specialization
<tt>template&lt;size_t N&gt; struct formatter&lt;const charT[N], charT&gt;</tt>.</ins>
<p/>
<ins><b>Rationale</b>: The <tt>formatter</tt> specialization was not used in the Standard library.
Keeping the specialization well-formed required an additional <tt>format_kind</tt>
specialization.</ins>
<p/>
<ins><b>Effect on original feature</b>: Valid C++ 2020 code that instantiated the removed
specialization is now ill-formed.</ins>
</p>
</blockquote>
</li>
</ol>
</superseded>

<note>2023-02-07 Tim provides updated wording</note>

<note>Issaquah 2023-02-08; LWG</note>
<p>Unanimous consent to move to Immediate.</p>

<note>2023-02-13 Status changed: Immediate &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4928"/>.
</p>

<ol>
<li><p>Modify <sref ref="[format.formatter.spec]"/> as indicated:</p>

<blockquote>
<p>
-2- Let <tt>charT</tt> be either <tt>char</tt> or <tt>wchar_t</tt>. Each specialization 
of <tt>formatter</tt> is either enabled or disabled, as described below. A 
<i>debug-enabled</i> specialization of <tt>formatter</tt> additionally provides a public, constexpr,
non-static member function <tt>set_debug_format()</tt> which modifies the state of the <tt>formatter</tt> 
to be as if the type of the <i>std-format-spec</i> parsed by the last call to <tt>parse</tt> were <tt>?</tt>. 
Each header that declares the template <tt>formatter</tt> provides the following enabled specializations:
</p>
<ol style="list-style-type: none">
<li><p>(2.1) &mdash; The debug-enabled specializations [&hellip;]</p></li>
<li><p>(2.2) &mdash; For each <tt>charT</tt>, the debug-enabled string type specializations</p>
<blockquote><pre>
template&lt;&gt; struct formatter&lt;charT*, charT&gt;;
template&lt;&gt; struct formatter&lt;const charT*, charT&gt;;
template&lt;size_t N&gt; struct formatter&lt;charT[N], charT&gt;;
<del>template&lt;size_t N&gt; struct formatter&lt;const charT[N], charT&gt;;</del>
template&lt;class traits, class Allocator&gt;
  struct formatter&lt;basic_string&lt;charT, traits, Allocator&gt;, charT&gt;;
template&lt;class traits&gt;
  struct formatter&lt;basic_string_view&lt;charT, traits&gt;, charT&gt;;
</pre></blockquote></li>
<li><p>(2.3) &mdash; [&hellip;]</p></li>
<li><p>(2.4) &mdash; [&hellip;]</p></li>
</ol>
</blockquote>
</li>

<li><p>Add a new paragraph to <sref ref="[diff.cpp20.utilities]"/> as indicated:</p>

<blockquote>
<p>
<ins><b>Affected subclause</b>: <sref ref="[format.formatter.spec]"/></ins>
<p/>
<ins><b>Change</b>: Removed the <tt>formatter</tt> specialization
<tt>template&lt;size_t N&gt; struct formatter&lt;const charT[N], charT&gt;</tt>.</ins>
<p/>
<ins><b>Rationale</b>: The specialization is inconsistent with the design of <tt>formatter</tt>,
which is intended to be instantiated only with cv-unqualified object types.</ins>
<p/>
<ins><b>Effect on original feature</b>: Valid C++ 2020 code that instantiated the removed
specialization can become ill-formed.</ins>
</p>
</blockquote>
</li>
</ol>

</resolution>

</issue>
