<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3046" status="New">
<title>Do not require <tt>reference_wrapper</tt> to support non-referenceable function types</title>
<section><sref ref="[refwrap]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>14 Dec 2017</date>
<priority>99</priority>

<discussion>
<p>
[refwrap] says that <tt>reference_wrapper&lt;T&gt;</tt> is a "wrapper around a reference to an object or function of type <tt>T</tt>" 
but this doesn't actually constrain it, and doesn't forbid non-referenceable function types like <tt>int() const</tt>.
<p/>
There is no way to construct a <tt>reference_wrapper&lt;int() const&gt;</tt> but implementations are required to provide partial 
specializations for functions with <i>cv</i>-qualifiers and ref-qualifiers in order to define a nested <tt>result_type</tt>. 
It should be undefined to instantiate <tt>reference_wrapper&lt;T&gt;</tt> with a non-referenceable type, or with a reference type 
(since references to references are not possible). Making it undefined (rather than ill-formed or unspecified) means implementations 
are not required to diagnose such invalid specializations, but also don't have to go to the effort of supporting weak result types etc.
</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4713">N4713</a>.</p>

<ol>
<li><p>Modify <sref ref="[refwrap]"/> as indicated:</p>
<p>
-1- <tt>reference_wrapper&lt;T&gt;</tt> is a <tt>CopyConstructible</tt> and <tt>CopyAssignable</tt> wrapper around a reference 
to an object or function of type <tt>T</tt>. <ins>T shall be a referenceable type (<sref ref="[defns.referenceable]"/>) that 
is not a reference type.</ins>
<p/>
-2- <tt>reference_wrapper&lt;T&gt;</tt> shall be a trivially copyable type (<sref ref="[basic.types]"/>).
</p>
</li>
</ol>
</resolution>

</issue>
