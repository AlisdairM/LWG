<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2474" status="NAD">
<title><tt>&lt;cmath&gt;</tt> functions unfriendly to <tt>integral_constant</tt> arguments</title>
<section><sref ref="[c.math]"/></section>
<submitter>Matheus Izvekov</submitter>
<date>13 Feb 2015</date>
<priority>4</priority>

<discussion>
<p>
Using numeric wrappers with <tt>&lt;cmath&gt;</tt> functions is currently troublesome.
Code such as: "<tt>std::exp2(std::integral_constant&lt;int, 5&gt;{})</tt>" will fail to 
compile because of ambiguity.
<p/>
Arguments which are implicitly convertible to an arithmetic type should be accepted whenever
the latter would be accepted.
<p/>
David Krauss pointed out that some issue may present itself with numeric libraries which provide <tt>&lt;cmath&gt;</tt> 
equivalents in their own namespace which are not more specialized than the ones provided in <tt>&lt;cmath&gt;</tt>. 
If the changes proposed are implemented, then cases where the user brings those into scope through ADL might become ambiguous.
<p/>
It's hard to assess how much breakage this would cause in the wild, and how much work it would take to fix. 
Should this be determined to be a problem, it's possible to make the new behaviour optional, and disabled by 
default for all user-defined types.
</p>

<note>2015-10, Kona Saturday afternoon</note>
<p>STL: This should be NAD, NAD-future and NAD-go-away. Users can already solve this using Walter's call syntax.</p>
<p>VV: I don't personally have this problem, but the proposed resolution seems frightening to me.</p>
<p>VV: There's a related issue, 2294, and also 2192.</p>
<p>STL: 2086 is about user-defined types in &lt;cmath&gt;, fixed in C++14. The PR for 2474 wants to undo the fix.</p>
<p>Link to <a href="lwg-active.html#2086">2086</a> and NAD.</p>
</discussion>

<resolution>
<p>This wording is relative to N4296.</p>

<ol>
<li>
<p>Change <sref ref="[c.math]"/> p11 b2 as indicated:</p>
<blockquote>
<p>
-11- Moreover, there shall be additional overloads sufficient to ensure:
</p>
<ol>
<li><p>[&hellip;]</p></li>
<li><p>Otherwise, if any arithmetic argument corresponding to a <tt>double</tt> parameter has type <tt>double</tt> or 
<del>an integer type</del><ins>a type which is not floating-point, but which is implicitly convertible to <tt>double</tt></ins>, 
then all arithmetic arguments corresponding to <tt>double</tt> parameters are effectively cast to <tt>double</tt>.</p></li>
<li><p>[&hellip;]</p></li>
</ol>
</blockquote>
</li>
</ol>
</resolution>

</issue>
