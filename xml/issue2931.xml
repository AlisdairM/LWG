<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2931" status="New">
<title>Missed optimization opportunity with single-argument <tt>std::next</tt></title>
<section><sref ref="[iterator.operations]"/></section>
<submitter>Morwenn</submitter>
<date>4 Feb 2017</date>
<priority>99</priority>

<discussion>
<p>
It seems that <tt>std::next</tt> is missing an optimization opportunity when taking a single parameter. The standard 
mandates that <tt>std::next</tt> shall call <tt>std::advance</tt> on the passed iterator and return it. For random-access 
iterators, it means that <tt>operator+=</tt> will be called on the iterator. However, if a single-argument overload was 
added to <tt>std::next</tt>, it could call <tt>++it</tt> directly instead of <tt>std::advance(it, 1)</tt>, which means 
that <tt>operator++</tt> would be called instead of <tt>operator+=</tt>. This might make a small performance difference 
for complicated iterators such as <tt>std::deque</tt>'s ones, where <tt>operator++</tt> has a simpler logic than 
<tt>operator+=</tt>.
<p/>
An equivalent optimization could be allowed by adding a single-argument overload to <tt>std::prev</tt> too.
</p>
</discussion>

<resolution>
<p>
</p>
</resolution>

</issue>

