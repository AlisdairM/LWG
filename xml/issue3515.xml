<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3515" status="LEWG">
<title>&sect;[stacktrace.basic.nonmem]: <tt>operator&lt;&lt;</tt> should be less templatized</title>
<section><sref ref="[stacktrace.syn]"/><sref ref="[stacktrace.basic.nonmem]"/></section>
<submitter>Jiang An</submitter>
<date>25 Jan 2021</date>
<priority>2</priority>

<discussion>
<p>
According to <sref ref="[string.io]"/>, the <tt>operator&lt;&lt;</tt> overloads in 
<sref ref="[stacktrace.basic.nonmem]"/> are well-formed only if the template parameters 
<tt>charT</tt> and <tt>traits</tt> are <tt>char</tt> and <tt>std::char_traits&lt;char&gt;</tt> 
(that of <tt>std::string</tt>) respectively, because it is required in <i>Effects:</i> that 
these overloads behave as-if insert a <tt>std::string</tt>.
<p/>
I think the declarations of these overloads should be changed to:
</p>
<blockquote><pre>
ostream&amp; operator&lt;&lt;(ostream&amp; os, const stacktrace_entry&amp; f); 

template&lt;class Allocator&gt;
ostream&amp; operator&lt;&lt;(ostream&amp; os, const basic_stacktrace&lt;Allocator&gt;&amp; st);
</pre></blockquote>

<note>2021-03-12; Reflector poll</note>
<p>
Set priority to 2 and status to LEWG following reflector poll.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4878">N4878</a>. 
</p>

<ol>
<li><p>Modify <sref ref="[stacktrace.syn]"/>, header <tt>&lt;stacktrace&gt;</tt> synopsis, as indicated:</p>

<blockquote><pre>
namespace std {
  <i>// <sref ref="[stacktrace.entry]"/>, class stacktrace_entry</i>
  class stacktrace_entry;
  
  <i>// <sref ref="[stacktrace.basic]"/>, class template basic_stacktrace</i>
  template&lt;class Allocator&gt;
  class basic_stacktrace;
  
  [&hellip;]
  
  <i>// <sref ref="[stacktrace.basic.nonmem]"/>, non-member functions</i>
  [&hellip;]
  
  string to_string(const stacktrace_entry&amp; f);
  
  template&lt;class Allocator&gt;
    string to_string(const basic_stacktrace&lt;Allocator&gt;&amp; st);
  
  <del>template&lt;class charT, class traits&gt;
    basic_</del>ostream<del>&lt;charT, traits&gt;</del>&amp;
      operator&lt;&lt;(<del>basic_</del>ostream<del>&lt;charT, traits&gt;</del>&amp; os, const stacktrace_entry&amp; f);
    
  template&lt;<del>class charT, class traits, </del>class Allocator&gt;
    <del>basic_</del>ostream<del>&lt;charT, traits&gt;</del>&amp;
      operator&lt;&lt;(<del>basic_</del>ostream<del>&lt;charT, traits&gt;</del>&amp; os, const basic_stacktrace&lt;Allocator&gt;&amp; st);
  
  [&hellip;]
}
</pre></blockquote>
</li>

<li><p>Modify <sref ref="[stacktrace.basic.nonmem]"/> as indicated:</p>

<blockquote>
<pre>
<del>template&lt;class charT, class traits&gt;
basic_</del>ostream<del>&lt;charT, traits&gt;</del>&amp;
  operator&lt;&lt;(<del>basic_</del>ostream<del>&lt;charT, traits&gt;</del>&amp; os, const stacktrace_entry&amp; f);
</pre>
<blockquote>
<p>
-4- <i>Effects:</i> Equivalent to: <tt>return os &lt;&lt; to_string(f);</tt>
</p>
</blockquote>
<pre>
template&lt;<del>class charT, class traits, </del>class Allocator&gt;
<del>basic_</del>ostream<del>&lt;charT, traits&gt;</del>&amp;
  operator&lt;&lt;(<del>basic_</del>ostream<del>&lt;charT, traits&gt;</del>&amp; os, const basic_stacktrace&lt;Allocator&gt;&amp; st);
</pre>
<blockquote>
<p>
-5- <i>Effects:</i> Equivalent to: <tt>return os &lt;&lt; to_string(st);</tt>
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
