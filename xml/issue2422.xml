<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2422" status="New">
<title><tt>std::numeric_limits&lt;T&gt;::is_modulo</tt> description: "most machines" errata</title>
<section><sref ref="[numeric.limits.members]"/></section>
<submitter>Melissa Mears</submitter>
<date>6 Aug 2014</date>
<priority>99</priority>

<discussion>
<p>
The seemingly non-normative (?) paragraph 61 (referring to N3936) describing how "most machines" define 
<tt>std::numeric_limits&lt;T&gt;::is_modulo</tt> in [numeric.limits.members] appears to have some issues, in my opinion.
</p>
<blockquote>
<p>
-61- On most machines, this is <tt>false</tt> for floating types, <tt>true</tt> for unsigned integers, and <tt>true</tt> 
for signed integers.
</p>
</blockquote>
<p>
Issues I see:
</p>
<ol>
<li><p>Very minor: change clause 2 to "this is <tt>false</tt> for floating <ins>point</ins> types". Other uses of the term 
say "floating point types" rather than just "floating types" &mdash; see nearby <tt>is_iec559</tt>, <tt>tinyness_before</tt>, 
etc.</p></li>
<li><p><tt>is_modulo</tt> <em>must</em> be <tt>true</tt> for unsigned integers in order to be compliant with the Standard; 
this is not just for "most machines". For reference, this requirement is from [basic.fundamental] paragraph 4 with its 
footnote 48.</p></li>
<li><p>Depending on the definition of "most machines", <tt>is_modulo</tt> could be <tt>false</tt> for most machines' signed 
integer types. GCC, Clang and Visual Studio, the 3 most popular C++ compilers by far, by default treat signed integer overflow 
as undefined.</p></li>
</ol>
<p>
As an additional note regarding the definition of <tt>is_modulo</tt>, it seems like it should be explicitly mentioned that 
on an implementation for which signed integer overflow is undefined, <tt>is_modulo</tt> shall be <tt>false</tt> for signed 
integer types. It took bugs filed for all three of these compilers before they finally changed (or planned to change) 
<tt>is_modulo</tt> to <tt>false</tt> for signed types.
</p>
</discussion>

<resolution>
<ol>
<li><p>Edit <sref ref="[numeric.limits.members]"/> around p60 as indicated:</p>

<blockquote>
<pre>
static constexpr bool is_modulo;
</pre>
<p>
-60- True if the type is modulo.(footnote) A type is modulo if, for any operation involving <tt>+</tt>, <tt>-</tt>, or <tt>*</tt> 
on values of that type whose result would fall outside the range <tt>[min(),max()]</tt>, the value returned differs from
the true value by an integer multiple of <tt>max() - min() + 1</tt>.
<p/>
<ins>-??- [<i>Note</i>: <tt>is_modulo</tt> shall be <tt>true</tt> for unsigned integer types (<sref ref="[basic.fundamental]"/>). &mdash; 
<i>end note</i>]</ins>
<p/>
<ins>-??- [<i>Note</i>: <tt>is_modulo</tt> shall be <tt>false</tt> for types for which overflow is undefined on the implementation, 
because such types cannot meet the modulo requirement. Often, signed integer overflow is left undefined on implementations. &mdash; 
<i>end note</i>]</ins>
<p/>
-61- On most machines, this is <tt>false</tt> for floating <ins>point</ins> types<del>, <tt>true</tt> for unsigned integers, 
and <tt>true</tt> for signed integers</del>.
<p/>
-62- Meaningful for all specializations.
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
