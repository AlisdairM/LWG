<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3943" status="New">
<title>Clarify lifetime requirements of <i>BasicFormatter</i> and <i>Formatter</i></title>
<section><sref ref="[format.formattable]"/></section>
<submitter>Mark de Wever</submitter>
<date>01 Jun 2023</date>
<priority>99</priority>

<discussion>
<p>
A <a href="https://github.com/llvm/llvm-project/issues/62074">bug</a> has been
filed against libc++'s format implementation. The question arose whether
the parsed <i>chrono-specs</i> should still be available during executing the
formatter's <tt>format</tt> member function. Libc++'s implementation requires
this MSVC STL's implementation does not.
<p/>
It turns out there is a lifetime a requirement in the Standard, but it
would be good to clarify the intention of the wording. Prosed a small
wording improvement and a note to clarify the intention.
<p/>
Currently the <tt>format</tt> function may use elements in the range <tt>[pc.begin(),
pc.end())</tt> that have not been parsed. This does not seem to be in the
spirit of the formatting library. The wording change proposes to
restrict this range to the parsed range.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4950"/>.
</p>

<ol>
<li><p>Modify <i>BasicFormatter</i> requirements [tab:formatter.basic] as indicated:</p>

<blockquote>
<table border="1">
<caption>Table 73: <i>BasicFormatter</i> requirements [tab:formatter.basic]</caption>
<tr>
<th align="center">Expression</th>
<th align="center">Return type</th>
<th align="center">Requirement</th>
</tr>

<tr>
<td colspan="3" align="center">
<tt>&hellip;</tt>
</td>
</tr>

<tr>
<td>
<tt>f.format(u, fc)</tt>
</td>
<td>
<tt>FC::iterator</tt>
</td>
<td>
Formats <tt>u</tt> according to the specifiers stored in<br/>
<tt>*this</tt>, writes the output to <tt>fc.out()</tt>, and returns<br/>
an iterator past the end of the output range.<br/>
The output shall only depend on <tt>u</tt>, <tt>fc.locale()</tt>,<br/>
<tt>fc.arg(n)</tt> for any value <tt>n</tt> of type <tt>size_t</tt>, and<br/>
the <ins>elements in the parsed</ins> range <ins>of</ins> <tt>[pc.begin(), pc.end())</tt><br/> 
from the last call to <tt>f.parse(pc)</tt>.
<p/>
<ins>[<i>Note ?</i>: Using elements in the parsed range of <tt>[pc.begin(),<br/>
pc.end())</tt> allows the formatter to store references, pointers, or<br/>
iterators to elements in the parsed range. For example,<br/>
<tt>formatter&lt;chrono::day&gt;</tt> might store the parsed <i>chrono-specs</i><br/>
(<sref ref="[time.format]"/>) in a <tt>basic_string_view</tt>. &mdash; <i>end note</i>]</ins>
</td>
</tr>

</table>
</blockquote>
</li>

<li><p>Modify <i>Formatter</i> requirements [tab:formatter] as indicated:</p>

<blockquote>
<table border="1">
<caption>Table 74: <i>Formatter</i> requirements [tab:formatter]</caption>
<tr>
<th align="center">Expression</th>
<th align="center">Return type</th>
<th align="center">Requirement</th>
</tr>

<tr>
<td>
<tt>f.format(t, fc)</tt>
</td>
<td>
<tt>FC::iterator</tt>
</td>
<td>
Formats <tt>t</tt> according to the specifiers stored in<br/>
<tt>*this</tt>, writes the output to <tt>fc.out()</tt>, and returns<br/>
an iterator past the end of the output range.<br/>
The output shall only depend on <tt>t</tt>, <tt>fc.locale()</tt>,<br/>
<tt>fc.arg(n)</tt> for any value <tt>n</tt> of type <tt>size_t</tt>, and<br/>
the <ins>elements in the parsed</ins> range <ins>of</ins> <tt>[pc.begin(), pc.end())</tt><br/>
from the last call to <tt>f.parse(pc)</tt>.
<p/>
<ins>[<i>Note ?</i>: Using elements in the parsed range of <tt>[pc.begin(),<br/>
pc.end())</tt> allows the formatter to store references, pointers, or<br/>
iterators to elements in the parsed range. For example,<br/>
<tt>formatter&lt;chrono::day&gt;</tt> might store the parsed <i>chrono-specs</i><br/>
(<sref ref="[time.format]"/>) in a <tt>basic_string_view</tt>. &mdash; <i>end note</i>]</ins>
</td>
</tr>

<tr>
<td colspan="3" align="center">
<tt>&hellip;</tt>
</td>
</tr>

</table>
</blockquote>
</li>

</ol>

</resolution>

</issue>
