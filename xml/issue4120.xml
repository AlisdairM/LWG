<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4120" status="New">
<title><code>move_iterator</code> should provide <code>iterator_category</code> only when it models
<code>forward_iterator</code></title>
<section><sref ref="[move.iterator]"/></section>
<submitter>Hewill Kang</submitter>
<date>12 Jul 2024</date>
<priority>99</priority>

<discussion>
<p>
Following up LWG <iref ref="4116"/>, when the underlying iterator does not satisfy <code>forward_iterator</code>,
<code>move_iterator::operator++(int)</code> will return <code>void</code>, which fails to meet the C++17 iterator
requirements, which should not provide <code>iterator_category</code>.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4986"/>.
</p>

<ol>
<li><p>Modify <sref ref="[move.iterator]"/> as indicated:</p>

<blockquote class="note">
<p>
[<i>Drafting note:</i> <code>Iterator</code> that models <tt>forward_iterator</tt> implies that
<tt>iterator_traits&lt;Iterator&gt;::iterator_category</tt> is always valid as it satisfies the
exposition-only concept <code><i>cpp17-iterator</i></code>.]
</p>
</blockquote>

<blockquote>
<p>
-2-
The member <i>typedef-name</i> <tt>iterator_category</tt> is defined if and only if <del>the <i>qualified-id</i>
  <tt>iterator_traits&lt;Iterator&gt;::iterator_category</tt> is valid and denotes a
  type</del><ins><code>Iterator</code> models <code>forward_iterator</code></ins>. In that case,
<tt>iterator_category</tt> denotes
</p>
<ol style="list-style-type: none">
<li>
<p>(2.1) &mdash; <code>random_access_iterator_tag</code> if the type
<code>iterator_traits&lt;Iterator&gt;::iterator_category</code> models
<code>derived_from&lt;random_access_iterator_tag&gt;</code>, and</p>
</li>
<li>
<p>(2.2) &mdash; <code>iterator_traits&lt;Iterator&gt;::iterator_category</code> otherwise.</p>
</li>
</ol>
</blockquote>
</li>
</ol>
</resolution>

</issue>
