<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3108" status="New">
<title><tt>istreambuf_iterator::proxy::operator*</tt> should be <tt>const</tt></title>
<section><sref ref="[istreambuf.iterator.proxy]"/></section>
<submitter>Billy O'Neal III</submitter>
<date>26 Apr 2018</date>
<priority>3</priority>

<discussion>
<p>
<tt>operator*</tt> on iterators is usually intended to be <tt>const</tt>; see <sref ref="[input.iterators]"/> 
Table 87, <tt>*a</tt>, where <tt>a</tt> is of type <tt>X</tt> or <tt>const X</tt>. (Technically, <tt>proxy</tt> 
is implementing the <tt>*r++</tt> requirement in this table, and <tt>r</tt> doesn't imply a const iterator, 
but there's no reason for the iterator's <tt>operator*</tt> to differ from the proxy)
</p>

<note>2018-06-18 after reflector discussion</note>
<p>Priority set to 3</p>
</discussion>

<resolution>
<p>
This wording is relative to <a href="http://wg21.link/n4741">N4741</a>.
</p>

<ol>
<li>
<p>Edit <sref ref="[istreambuf.iterator.proxy]"/> as indicated:</p>
<blockquote>
<pre>
namespace std {
  template&lt;class charT, class traits = char_traits&lt;charT&gt;&gt;
  class istreambuf_iterator&lt;charT, traits&gt;::proxy { <i>// exposition only</i>
    charT keep_;
    basic_streambuf&lt;charT,traits&gt;* sbuf_;
    proxy(charT c, basic_streambuf&lt;charT,traits&gt;* sbuf)
      : keep_(c), sbuf_(sbuf) { }
    public:
      charT operator*() <ins>const</ins> { return keep_; }
  };
}
</pre>
</blockquote>
</li>
</ol>
</resolution>

</issue>
