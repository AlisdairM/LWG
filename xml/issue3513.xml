<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3513" status="New">
<title>Fix definition of program-defined based on its uses</title>
<section><sref ref="[defns.prog.def.type]"/></section>
<submitter>Johel Ernesto Guerrero Pe&ntilde;a</submitter>
<date>29 Dec 2020</date>
<priority>3</priority>

<discussion>
<p>
Consider the following definitions:
</p>
<blockquote><p>
<b>3.42 [defns.prog.def.spec]</b><br/> 
<b>program-defined specialization</b><br/>
&lt;library&gt; explicit template specialization or partial specialization that is not part 
of the C++ standard library and not defined by the implementation
</p></blockquote>
<p>
and
</p>
<blockquote><p>
<b>3.43 [defns.prog.def.type]</b><br/>
<b>program-defined type</b><br/>
&lt;library&gt; non-closure class type or enumeration type that is not part of the C++ standard library 
and not defined by the implementation, or a closure type of a non-implementation-provided lambda expression, 
or an instantiation of a program-defined specialization
[<i>Note 1 to entry:</i> Types defined by the implementation include extensions (4.1) and internal types 
used by the library. &mdash; <i>end note</i>]
</p></blockquote>
<p>
A program-defined type is either a type or an instantiation. "program-defined type" is used in 
<sref ref="[namespace.std]"/> p2 to give permission to specialize standard class templates:
</p>
<blockquote><p>
Unless explicitly prohibited, a program may add a template specialization for any standard library class
template to namespace <tt>std</tt> provided that (a) the added declaration depends on at least one 
program-defined type and (b) the specialization meets the standard library requirements for the original 
template.
</p></blockquote>
<p>
ISO requires that the terms in Clause 3 be substitutable with their definitions. If this were done for 
"program-defined type", we'd end up with "or an instantiation of a program-defined specialization".
It's fine to depend on a type, but not an instantiated type, because all you need is the name of its 
specialization (its type) as a template argument to explicitly or partially specialize a template.
</p>

<note>2021-01-29; reflector prioritization</note>
Set priority to 3 following reflector discussions.
It was pointed out that it might be easier to resolve <iref ref="3512"/>
if this issue changes the definition of program-defined type.

</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4878">N4878</a>. 
</p>

<ol>
<li><p>Modify <sref ref="[defns.prog.def.type]"/> as indicated:</p>

<blockquote>
<b>3.43 [defns.prog.def.type]</b><br/>
<b>program-defined type</b><br/>
&lt;library&gt; non-closure class type or enumeration type that is not part of the C++ standard library 
and not defined by the implementation, or a closure type of a non-implementation-provided lambda expression, 
or <del>an instantiation</del><ins>a name</ins> of a program-defined specialization <ins>or instantiation 
thereof</ins>
[<i>Note 1 to entry:</i> Types defined by the implementation include extensions (<sref ref="[intro.compliance]"/>) 
and internal types used by the library. &mdash; <i>end note</i>]
</blockquote>
</li>
</ol>
</resolution>

</issue>
