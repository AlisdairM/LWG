<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3233" status="C++20">
<title>Broken requirements for <tt>shared_ptr</tt> converting constructors</title>
<section><sref ref="[util.smartptr.shared.const]"/></section>
<submitter>Casey Carter</submitter>
<date>10 Jul 2019</date>
<priority>0</priority>

<discussion>
<p>
Issue <iref ref="2875"/> added <sref ref="[util.smartptr.shared.const]"/> paragraph 13:
<blockquote>
<i>Remarks</i>: When <tt>T</tt> is an array type, this constructor shall not participate in overload
resolution unless <tt>is_move_constructible_v&lt;D&gt;</tt> is <tt>true</tt>, the expression
<tt>d(p)</tt> is well-formed, and either <tt>T</tt> is <tt>U[N]</tt> and <tt>Y(*)[N]</tt> is
convertible to <tt>T*</tt>, or <tt>T</tt> is <tt>U[]</tt> and <tt>Y(*)[]</tt> is convertible to
<tt>T*</tt>. When <tt>T</tt> is not an array type, this constructor shall not participate in
overload resolution unless <tt>is_move_constructible_v&lt;D&gt;</tt> is <tt>true</tt>, the
expression <tt>d(p)</tt> is well-formed, and <tt>Y*</tt> is convertible to <tt>T*</tt>.
</blockquote>
which pertains to the four constructor overloads:
<blockquote><pre>
template&lt;class Y, class D&gt; shared_ptr(Y* p, D d);
template&lt;class Y, class D, class A&gt; shared_ptr(Y* p, D d, A a);
template&lt;class D&gt; shared_ptr(nullptr_t p, D d);
template&lt;class D, class A&gt; shared_ptr(nullptr_t p, D d, A a);
</pre></blockquote>
which is fine (ignoring for now that two occurrences of "this constructor" should read "these
constructors") for the two overloads with a template parameter <tt>Y</tt>, but not so much for the
two with no such template parameter.
</p>
<p>
MSVC ignores the constraints on <tt>Y</tt> for the overloads with no such template parameter,
whereas libstdc++ and libc++ seem to ignore <em>all</em> of the constraints for those overloads (See
<a href="https://gcc.godbolt.org/z/ECdop6">Compiler Explorer</a>). We should fix the broken wording,
ideally by requiring the MSVC interpretation - the <tt>nullptr_t</tt> constructors participate in
overload resolution only when <tt>is_movable_v&lt;D&gt;</tt> is <tt>true</tt> and <tt>d(p)</tt> is
well-formed - so concepts and traits that check constructibility are correct.
</p>

<note>2019-11-17 Issue Prioritization</note>
<p>Status to Tentatively Ready and priority to 0 after six positive votes on the reflector.</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4835">N4835</a>.</p>

<ol>
<li><p>Modify <sref ref="[util.smartptr.shared.const]"/> as indicated:</p>

<blockquote>
<blockquote><pre>
template&lt;class Y, class D&gt; shared_ptr(Y* p, D d);
template&lt;class Y, class D, class A&gt; shared_ptr(Y* p, D d, A a);
template&lt;class D&gt; shared_ptr(nullptr_t p, D d);
template&lt;class D, class A&gt; shared_ptr(nullptr_t p, D d, A a);
</pre></blockquote>
<p>
<ins>-?- <i>Constraints:</i> <tt>is_move_constructible_v&lt;D&gt;</tt> is <tt>true</tt>, and
<tt>d(p)</tt> is a well-formed expression. For the first two overloads:</ins>
</p>
<ul>
  <li><p><ins>
    If <tt>T</tt> is an array type, then either <tt>T</tt> is <tt>U[N]</tt> and <tt>Y(*)[N]</tt> is
    convertible to <tt>T*</tt>, or <tt>T</tt> is <tt>U[]</tt> and <tt>Y(*)[]</tt> is convertible to
    <tt>T*</tt>.
  </ins></p></li>
  <li><p><ins>
    If <tt>T</tt> is not an array type, then <tt>Y*</tt> is convertible to <tt>T*</tt>.
  </ins></p></li>
</ul>
<p>
-9- <i><del>Requires</del><ins>Expects</ins>:</i> Construction of <tt>d</tt> and a deleter of type [&hellip;]
</p>
<p>[&hellip;]</p>
<p>
<del>-13- <i>Remarks:</i> When <tt>T</tt> is an array type, this constructor shall not participate
in overload resolution unless <tt>is_move_constructible_v&lt;D&gt;</tt> is <tt>true</tt>, the
expression <tt>d(p)</tt> is well-formed, and either <tt>T</tt> is <tt>U[N]</tt> and <tt>Y(*)[N]</tt>
is convertible to <tt>T*</tt>, or <tt>T</tt> is <tt>U[]</tt> and <tt>Y(*)[]</tt> is convertible to
<tt>T*</tt>. When <tt>T</tt> is not an array type, this constructor shall not participate in
overload resolution unless <tt>is_move_constructible_v&lt;D&gt;</tt> is <tt>true</tt>, the
expression <tt>d(p)</tt> is well-formed, and <tt>Y*</tt> is convertible to <tt>T*</tt>.</del>
</p>
</blockquote>
</li>
</ol>
</resolution>
</issue>
