<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3116" status="New">
<title><tt><i>OUTERMOST_ALLOC_TRAITS</i></tt> needs <tt>remove_reference_t</tt></title>
<section><sref ref="[allocator.adaptor.members]"/></section>
<submitter>Tim Song</submitter>
<date>4 Jun 2018</date>
<priority>99</priority>

<discussion>
<p>
<tt><i>OUTERMOST_ALLOC_TRAITS</i>(x)</tt> is currently defined in <sref ref="[allocator.adaptor.members]"/>p1 as 
<tt>allocator_traits&lt;decltype(<i>OUTERMOST</i>(x))&gt;</tt>. However, <tt><i>OUTERMOST</i>(x)</tt>, as defined and used
in this subclause, is an lvalue for which <tt>decltype</tt> produces an lvalue reference. That referenceness needs to be 
removed before the type can be used with <tt>allocator_traits</tt>.
<p/>
While we are here, the current wording for <tt><i>OUTERMOST</i></tt> uses the imprecise "if <tt>x</tt> does not have an 
<tt>outer_allocator()</tt> member function". What we meant to check is the validity of the expression <tt>x.outer_allocator()</tt>,
not whether <tt>x</tt> has some (possibly ambiguous and/or inaccessible) member function named <tt>outer_allocator</tt>.
</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4750">N4750</a>.</p>
<blockquote class="note">
<p>
[<i>Drafting note:</i> The subclause only uses <tt><i>OUTERMOST_ALLOC_TRAITS</i>(*this)</tt> and only in non-<tt>const</tt>
member functions, so the result is also non-<tt>const</tt>. Thus, <tt>remove_reference_t</tt> is sufficient; there's no need
to further remove cv-qualification. &mdash; <i>end drafting note</i>]
</p>
</blockquote>
<ol>
<li><p>Modify <sref ref="[allocator.adaptor.members]"/>p1 as indicated:</p>
<blockquote>
<p>
-1- In the <tt>construct</tt> member functions, <tt><i>OUTERMOST</i>(x)</tt> is <del><tt>x</tt> if <tt>x</tt> does not have an 
<tt>outer_allocator()</tt> member function and </del><tt><i>OUTERMOST</i>(x.outer_allocator())</tt><ins> if the expression
<tt>x.outer_allocator()</tt> is valid (<sref ref="[temp.deduct]"/>) and <tt>x</tt></ins> otherwise; 
<tt><i>OUTERMOST_ALLOC_TRAITS</i>(x)</tt> is <tt>allocator_traits&lt;<ins>remove_reference_t&lt;</ins>decltype(<i>OUTERMOST</i>(x))<ins>&gt;</ins>&gt;</tt>.
[<i>Note:</i> [&hellip;] &mdash; <i>end note</i>]
</p>
</blockquote>
</li>

</ol>
</resolution>

</issue>
