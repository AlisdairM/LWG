<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3796" status="New">
<title><tt><i>movable-box</i></tt> as member should use default-initialization instead of copy-initialization</title>
<section><sref ref="[range.repeat.view]"/><sref ref="[range.chunk.by.view]"/></section>
<submitter>Hewill Kang</submitter>
<date>20 Oct 2022</date>
<priority>3</priority>

<discussion>
<p>
Currently, the member variable <tt><i>value_</i></tt> of <tt>repeat_view</tt> is initialized with the following expression:
</p>
<blockquote><pre>
<i>movable-box</i>&lt;W&gt; <i>value_</i> = W();
</pre></blockquote>
<p>
which will result in the following unexpected error in <a href="https://godbolt.org/z/jK7djP6GT">libstdc++</a>:
</p>
<blockquote><pre>
#include &lt;ranges&gt;

int main() {
  std::ranges::repeat_view&lt;int&gt; r; // <span style="color:red;font-weight:bolder">error: could not convert '0' from 'int' to 'std::ranges::__detail::__box&lt;int&gt;'</span>
}
</pre></blockquote>
<p>
This is because the single-argument constructors of the simple version of <tt><i>movable-box</i></tt> in libstdc++ 
are declared as <tt>explicit</tt>, which is different from the conditional <tt>explicit</tt> declared by the 
<tt>optional</tt>'s constructor, resulting in no visible conversion between those two types.
<p/>
For MSVC-STL, the simple version of <tt><i>movable-box</i></tt> does not provide a single-argument constructor, 
so this form of initialization will also produce a hard error.
</p>
<p>
This may be a bug of existing implementations, but we don't need such "copy-initialization", the default-constructed 
<tt><i>movable-box</i></tt> already value-initializes the underlying type.
<p/>
Simply using default initialization, as most other range adaptors do, guarantees consistency, which also 
eliminates extra move construction.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4917"/>.
</p>

<ol>
<li><p>Modify <sref ref="[range.repeat.view]"/> as indicated:</p>

<blockquote>
<pre>
namespace std::ranges {
  template&lt;move_constructible W, semiregular Bound = unreachable_sentinel_t&gt;
    requires (is_object_v&lt;W&gt; &amp;&amp; same_as&lt;W, remove_cv_t&lt;W&gt;&gt; &amp;&amp;
              (<i>is-integer-like</i>&lt;Bound&gt; || same_as&lt;Bound, unreachable_sentinel_t&gt;))
   class repeat_view : public view_interface&lt;repeat_view&lt;W, Bound&gt;&gt; {
   private:
     // <i><sref ref="[range.repeat.iterator]"/>, class repeat_view::<i>iterator</i></i>
     struct <i>iterator</i>;                            // <i>exposition only</i>

     <i>movable-box</i>&lt;W&gt; <i>value_</i><del> = W()</del>;                // <i>exposition only, see <sref ref="[range.move.wrap]"/></i>
     Bound <i>bound_</i> = Bound();                     // <i>exposition only</i>
     [&hellip;]
   };
   [&hellip;]
}
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.chunk.by.view]"/> as indicated:</p>

<blockquote>
<pre>
namespace std::ranges {
  template&lt;forward_range V, indirect_binary_predicate&lt;iterator_t&lt;V&gt;, iterator_t&lt;V&gt;&gt; Pred&gt;
    requires view&lt;V&gt; &amp;&amp; is_object_v&lt;Pred&gt;
  class chunk_by_view : public view_interface&lt;chunk_by_view&lt;V, Pred&gt;&gt; {
    V <i>base_</i> = V();                                          // <i>exposition only</i>
    <i>movable-box</i>&lt;Pred&gt; <i>pred_</i><del> = Pred()</del>;                       // <i>exposition only</i>

    // <i><sref ref="[range.chunk.by.iter]"/></i>, <i>class</i> chunk_by_view::<i>iterator</i>
    class <i>iterator</i>;                                         // <i>exposition only</i>
    [&hellip;]
  };
  [&hellip;]
}
</pre>
</blockquote>

</li>
</ol>
</resolution>

</issue>
