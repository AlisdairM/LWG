<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4057" status="New">
<title><tt>generator::iterator</tt>'s <tt>operator*</tt> is not <tt>noexcept</tt> when it can be</title>
<section><sref ref="[coro.generator.iterator]"/></section>
<submitter>S. B. Tam</submitter>
<date>01 Mar 2024</date>
<priority>99</priority>

<discussion>
<p>
<tt>generator::<i>iterator</i></tt>'s <tt>operator*</tt> is specified to have the following noexcept-specifier:
</p>
<blockquote><pre>
noexcept(is_nothrow_copy_constructible_v&lt;<i>reference</i>&gt;)
</pre></blockquote>
<p>
When <tt><i>reference</i></tt> is an rvalue reference type, <tt>is_nothrow_copy_constructible_v&lt;<i>reference</i>&gt;</tt> 
is <tt>false</tt> (because <tt><i>reference</i></tt> is not copy constructible), which means <tt>operator*</tt> 
is not <tt>noexcept</tt>.
<p/>
However, <tt>operator*</tt> doesn't perform any potentially-throwing operation in this case. It's effect is 
equivalent to <tt>return static_cast&lt;<i>reference</i>&gt;(*p.value_);</tt> (where the type of <tt>p.<i>value_</i></tt> 
is effectively <tt>add_pointer_t&lt;<i>reference</i>&gt;</tt>). Neither the dereference nor the cast to rvalue 
reference can throw an exception.
<p/>
I think the expression inside the noexcept-specifier should be changed to 
<tt>noexcept(static_cast&lt;<i>reference</i>&gt;(*p.<i>value_</i>))</tt>.
</p>
</discussion>

<resolution>
</resolution>

</issue>
