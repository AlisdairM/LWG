<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3458" status="New">
<title>Is <tt>shared_future</tt> intended to work with arrays or function types?</title>
<section><sref ref="[futures.unique.future]"/><sref ref="[futures.shared.future]"/></section>
<submitter>Tomasz Kami&nacute;ski</submitter>
<date>28 Jun 2020</date>
<priority>99</priority>

<discussion>
<p>
Currently there is no prohibition of creating <code>shared_future&lt;T&gt;</code> where <code>T</code> is 
either an array type or a function type. However such objects cannot be constructed, as the corresponding 
<code>future&lt;T&gt;</code>, is ill-formed due the signature <code>get()</code> method being ill-formed &mdash; 
it will be declared as function returning an array or function type, respectively. [<i>Note:</i> For 
<code>shared_future</code> <tt>get</tt> always returns an reference, so it is well-formed for array or function 
types.]
</p>
</discussion>

<resolution>
<p>
This wording is relative to <a href="http://wg21.link/n4861">N4861</a>. 
</p>

<blockquote class="note">
<p>
Ideally the wording below would use a <i>Mandates:</i> element, but due to the still open
issue LWG <iref ref="3168"/> the wording below uses instead the more general "ill-formed"
vocabulary.
</p>
</blockquote>

<ol>
<li><p>Modify <sref ref="[futures.unique.future]"/> as indicated:</p>

<blockquote>
<blockquote>
<pre>
namespace std {
  template&lt;class R&gt;
  class future {
    [&hellip;]
  };
}
</pre>
</blockquote>
<p>
<ins>-?- If <tt>is_array_v&lt;R&gt;</tt> is <tt>true</tt> or <tt>is_function_v&lt;R&gt;</tt> is <tt>true</tt>, 
the program is ill-formed.</ins>
<p/>
-4- The implementation provides the template <tt>future</tt> and two specializations, <tt>future&lt;R&amp;&gt;</tt> and 
<tt>future&lt;void&gt;</tt>. These differ only in the return type and return value of the member function <tt>get</tt>, 
as set out in its description, below.
</p>
</blockquote>
</li>

<li><p>Modify <sref ref="[futures.shared.future]"/> as indicated:</p>

<blockquote>
<blockquote>
<pre>
namespace std {
  template&lt;class R&gt;
  class shared_future {
    [&hellip;]
  };
}
</pre>
</blockquote>
<p>
<ins>-?- If <tt>is_array_v&lt;R&gt;</tt> is <tt>true</tt> or <tt>is_function_v&lt;R&gt;</tt> is <tt>true</tt>, 
the program is ill-formed.</ins>
<p/>
-4- The implementation provides the template <tt>shared_future</tt> and two specializations, 
<tt>shared_future&lt;R&amp;&gt;</tt> and <tt>shared_future&lt;void&gt;</tt>. These differ only in the return type 
and return value of the member function <tt>get</tt>, as set out in its description, below.
</p>
</blockquote>
</li>
</ol>

</resolution>

</issue>
