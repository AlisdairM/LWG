<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4112" status="New">
<title><tt><i>has-arrow</i></tt> should required <tt>operator-&gt;()</tt> to be <tt>const</tt>-qualified</title>
<section><sref ref="[range.utility.helpers]"/></section>
<submitter>Hewill Kang</submitter>
<date>22 Jun 2024</date>
<priority>99</priority>

<discussion>
<p>
The helper concept <tt><i>has-arrow</i></tt> in <sref ref="[range.utility.helpers]"/> does not 
require that <tt>I::operator-&gt;()</tt> be <tt>const</tt>-qualified, which is inconsistent with 
the constraints on <tt>reverse_iterator</tt> and <tt>common_iterator</tt>'s <tt>operator-&gt;()</tt> 
as the latter two both require the underlying iterator has <tt>const operator-&gt;()</tt> member.
<p/>
We should enhance the semantics of <tt><i>has-arrow</i></tt> so that <i>implicit expression variations</i> 
prohibit silly games.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4981"/>.
</p>

<ol>
<li><p>Modify <sref ref="[range.utility.helpers]"/> as indicated:</p>

<blockquote>
<pre>
[&hellip;]

template&lt;class I&gt;
  concept <i>has-arrow</i> =                                       // <i>exposition only</i>
    input_iterator&lt;I&gt; &amp;&amp; (is_pointer_v&lt;I&gt; || requires(<ins>const</ins> I i) { i.operator-&gt;(); });

[&hellip;]
</pre>
</blockquote>

</li>
</ol>
</resolution>

</issue>
