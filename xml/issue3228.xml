<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3228" status="Tentatively Resolved">
<title>Surprising <tt>variant</tt> construction</title>
<section><sref ref="[variant.ctor]"/></section>
<submitter>Barry Revzin</submitter>
<date>25 Jun 2019</date>
<priority>2</priority>

<discussion>
<p>
User mcencora on reddit today posted this example:
</p>
<blockquote><pre>
#include &lt;variant&gt;

struct ConvertibleToBool
{
  constexpr operator bool() const { return true; }
};

static_assert(std::holds_alternative&lt;bool&gt;(std::variant&lt;int, bool&gt;(ConvertibleToBool{})));
</pre></blockquote>
<p>
Before <a href="https://wg21.link/p0608">P0608</a>, the <tt>variant</tt> holds <tt>bool</tt>. After P0608,
the <tt>variant</tt> holds <tt>int</tt> so the static assertion fires.
<p/>
I don't know what the right answer is between (a) ill-formed (b) hold <tt>bool</tt> and (c)
hold <tt>int</tt> is, but I think (a) and (b) are better options than (c).
</p>

<note>2019-07 Issue Prioritization</note>
<p>Priority to 2 after discussion on the reflector.</p>

<note>This is US212; status set to "LEWG" for guidance on desired behavior.</note>

<note>2020-05-28; LEWG issue reviewing</note>
<p>
<a href="https://wg21.link/p1957r2">P1957R2</a> was accepted in Prague as CWG motion 5 and resolves LWG 3228.
</p>
</discussion>

<rationale>
Resolved by <a href="https://wg21.link/p1957r2">P1957R2</a>.
</rationale>

<resolution>
</resolution>
</issue>
