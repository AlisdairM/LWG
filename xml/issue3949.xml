<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3949" status="New">
<title><tt>std::atomic&lt;bool&gt;</tt>'s trivial destructor dropped in C++17 spec wording</title>
<section><sref ref="[atomics.types.generic.general]"/></section>
<submitter>Jeremy Hurwitz</submitter>
<date>20 Jun 2023</date>
<priority>99</priority>

<discussion>
<p>
<tt>std::atomic&lt;bool&gt;</tt> was originally required to have a trivial default constructor and a trivial destructor 
[C++11 <a href="https://wg21.link/N3337#page=1118">N3337</a>: Section [atomics.types.generic], Paragraph 5], 
the same as the integral [C++11 <a href="https://wg21.link/N3337#page=1118">N3337</a>: Section [atomics.types.generic], 
Paragraph 5] and pointer specializations [C++11 <a href="https://wg21.link/N3337#page=1119">N3337</a>: 
Section [atomics.types.generic], Paragraph 6]. <paper num="P0558"/> rearranged the text, 
accidentally (as far as we can tell) removing the constructor and destructor requirements from <tt>std::atomic&lt;bool&gt;</tt>,
which has the surprising effect that <tt>std::atomic&lt;bool&gt;</tt> has no longer the same constructor/destructor 
guarantees as <tt>std::atomic&lt;int&gt;</tt>.
<p/>
C++20 removed the "trivial default constructor" requirement from all specializations. A specialization for floating-point 
types was added with a trivial destructor [<a href="https://wg21.link/N4861#page=1548">N4861</a>: Section [atomics.types.float], 
Paragraph 2)].
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4950"/>.
</p>

<ol>
<li><p>Modify <sref ref="[atomics.types.generic.general]"/> as indicated:</p>

<blockquote>
<p>
-1- [&hellip;]
<p/>
-2- The specialization <tt>atomic&lt;bool&gt;</tt> is a standard-layout struct. <ins>It has a trivial destructor.</ins>
</p>
</blockquote>
</li>

</ol>
</resolution>

</issue>
