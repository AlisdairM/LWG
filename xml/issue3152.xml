<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3152" status="Tentatively Ready">
<title><tt>common_type</tt> and <tt>common_reference</tt> have flaws in common</title>
<section><sref ref="[meta.trans.other]"/></section>
<submitter>Casey Carter</submitter>
<date>10 Aug 2018</date>
<priority>3</priority>

<discussion>
<p>
<sref ref="[meta.trans.other]"/> p5 characterizes the requirements for
program-defined specializations of <tt>common_type</tt> with the sentence:
</p>
<blockquote>
Such a specialization need not have a member named <tt>type</tt>, but if it does,
that member shall be a <i>typedef-name</i> for an accessible and unambiguous
cv-unqualified non-reference type <tt>C</tt> to which each of the types
<tt>T1</tt> and <tt>T2</tt> is explicitly convertible.
</blockquote>
<p>
This sentence - which <sref ref="[meta.trans.other]"/> p7 largely duplicates to
specify requirements on program-defined specializations of
<tt>basic_common_reference</tt> - has two problems:
</p><ol>
<li><p>The grammar term "<i>typedef-name</i>" is overconstraining; there's no
reason to prefer a <i>typedef-name</i> here to an actual type, and</p>
</li>
<li><p>"accessible" and "unambiguous" are not properties of <em>types</em>, they
are properties of names and base classes.</p>
</li>
<li><p>While we're here, we may as well strike the unused name <tt>C</tt> which
both Note B and Note D define for the type denoted by <tt>type</tt>.</p>
</li></ol>

<note>2018-08 Batavia Monday issue prioritization</note>
<p>Priority set to 3</p>

<note>2021-06-23; Reflector poll</note>
<p>
Set status to Tentatively Ready after seven votes in favour during reflector poll.
</p>

</discussion>

<resolution>

<p>This wording is relative to <a href="https://wg21.link/n4762">N4762</a>.</p>

<ol>
<li><p>Modify <sref ref="[meta.trans.other]"/> p5 as follows:</p>
<blockquote>
<p>
-5- Note B: Notwithstanding the provisions of <sref ref="[meta.type.synop]"/>,
and pursuant to <sref ref="[namespace.std]"/>, a program may specialize
<tt>common_type&lt;T1, T2&gt;</tt> for types <tt>T1</tt> and <tt>T2</tt> such
that <tt>is_same_v&lt;T1, decay_t&lt;T1&gt;&gt;</tt> and <tt>is_same_v&lt;T2,
decay_t&lt;T2&gt;&gt;</tt> are each true. [<i>Note:</i> &hellip;] Such a
specialization need not have a member named <tt>type</tt>, but if it does,
<del>that member shall be a <i>typedef-name</i> for an accessible and
unambiguous</del> <ins>the <i>qualified-id</i>
<tt>common_type&lt;T1, T2&gt;::type</tt> shall denote a</ins> cv-unqualified
non-reference type <del><tt>C</tt></del> to which each of the types <tt>T1</tt>
and <tt>T2</tt> is explicitly convertible. Moreover, [&hellip;]
</p>
</blockquote>
</li>
<li><p>Modify <sref ref="[meta.trans.other]"/> p7 similarly:</p>
<blockquote>
<p>
-7- Note D: Notwithstanding  the provisions of <sref ref="[meta.type.synop]"/>,
and pursuant to <sref ref="[namespace.std]"/>, a program may partially
specialize <tt>basic_common_reference&lt;T, U, TQual, UQual&gt;</tt> for types
<tt>T</tt> and <tt>U</tt> such that <tt>is_same_v&lt;T, decay_t&lt;T&gt;&gt;</tt>
and <tt>is_same_v&lt;U, decay_t&lt;U&gt;&gt;</tt> are each true. [<i>Note:</i>
&hellip;] Such a specialization need not have a member named <tt>type</tt>, but
if it does, <del>that member shall be a <i>typedef-name</i> for an accessible
and unambiguous</del> <ins>the <i>qualified-id</i>
<tt>basic_common_reference&lt;T, U, TQual, UQual&gt;::type</tt> shall denote
a</ins> cv-unqualified non-reference type <del><tt>C</tt></del> to which each of
the types <tt>TQual&lt;T&gt;</tt> and <tt>UQual&lt;U&gt;</tt> is convertible.
Moreover, [&hellip;]
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
