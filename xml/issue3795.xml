<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3795" status="New">
<title>Self-move-assignment of <tt>std::future</tt> and <tt>std::shared_future</tt> have unimplementable postconditions</title>
<section><sref ref="[futures.unique.future]"/><sref ref="[futures.shared.future]"/></section>
<submitter>Jiang An</submitter>
<date>19 Oct 2022</date>
<priority>3</priority>

<discussion>
<p>
The move assignment operators of <tt>std::future</tt> and <tt>std::shared_future</tt> have their postconditions specified as below:
</p>
<blockquote style="border-left: 3px solid #ccc;padding-left: 15px;">
<p>
<i>Postconditions</i>:
</p>
<ul>
<li><p><tt>valid()</tt> returns the same value as <tt>rhs.valid()</tt> returned prior to the assignment.</p></li>
<li><p><tt>rhs.valid() == false</tt>.</p></li>
</ul>        
</blockquote>
<p>
It can be found that when <tt>*this</tt> and <tt>rhs</tt> is the same object and <tt>this-&gt;valid()</tt> 
is <tt>true</tt> before the assignment, the postconditions can't be achieved.
<p/>
Mainstream implementations (libc++, libstdc++, msvc stl) currently implement such self-move-assignment as no-op, 
which doesn't meet the requirements in the <i>Effects:</i> element. As discussed in LWG <iref ref="3788"/>, I think 
we should say self-move-assignment has no effects for these types.
</p>

<note>2022-11-01; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
</p>

<note>2022-11-01; Jonathan provides wording</note>

</discussion>

<resolution>

<p>
This wording is relative to <paper num="N4917"/>.
</p>

<ol>
<li><p>Modify <sref ref="[futures.unique.future]"/> as indicated:</p>

<blockquote>
<blockquote><pre>
future&amp; operator=(future&amp;&amp; rhs) noexcept;
</pre></blockquote>
<blockquote>
<p>-11- <i>Effects</i>:
<ins>
If <tt>addressof(rhs) == this</tt> is <tt>true</tt>, there are no effects.
Otherwise:
</ins>
<ol style="list-style-type: none">
<li>(11.1) &mdash; Releases any shared state (<sref ref="[futures.state]"/>).</li>
<li>(11.2) &mdash; move assigns the contents of <tt>rhs</tt> to <tt>*this</tt>.</li>
</ol>
</p>
<p> -12- <i>Postconditions</i>:
<ol style="list-style-type: none">
<li>(12.1) &mdash; <tt>valid()</tt> returns the same value as <tt>rhs.valid()</tt> prior to the assignment.</li>
<li>(12.2) &mdash; <ins>If <tt>addressof(rhs) == this</tt> is <tt>false</tt>,</ins> <tt>rhs.valid() == false</tt>.</li>
</ol>
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[futures.shared.future]"/> as indicated:</p>

<blockquote>
<blockquote><pre>
shared_future&amp; operator=(shared_future&amp;&amp; rhs) noexcept;
</pre></blockquote>
<blockquote>
<p>-13- <i>Effects</i>:
<ins>
If <tt>addressof(rhs) == this</tt> is <tt>true</tt>, there are no effects.
Otherwise:
</ins>
<ol style="list-style-type: none">
<li>(13.1) &mdash; Releases any shared state (<sref ref="[futures.state]"/>).</li>
<li>(13.2) &mdash; move assigns the contents of <tt>rhs</tt> to <tt>*this</tt>.</li>
</ol>
</p>
<p> -14- <i>Postconditions</i>:
<ol style="list-style-type: none">
<li>(14.1) &mdash; <tt>valid()</tt> returns the same value as <tt>rhs.valid()</tt> returned prior to the assignment.</li>
<li>(14.2) &mdash; <ins>If <tt>addressof(rhs) == this</tt> is <tt>false</tt>,</ins> <tt>rhs.valid() == false</tt>.</li>
</ol>
</p>
</blockquote>

<blockquote><pre>
shared_future&amp; operator=(const shared_future&amp; rhs) noexcept;
</pre></blockquote>
<blockquote>
<p>-15- <i>Effects</i>:
<ins>
If <tt>addressof(rhs) == this</tt> is <tt>true</tt>, there are no effects.
Otherwise:
</ins>
<ol style="list-style-type: none">
<li>(15.1) &mdash; Releases any shared state (<sref ref="[futures.state]"/>).</li>
<li>(15.2) &mdash; assigns the contents of <tt>rhs</tt> to <tt>*this</tt>.
<p>[<i>Note 3</i>: As a result, <tt>*this</tt> refers to the same shared state
as <tt>rhs</tt> (if any). &mdash; <i>end note</i>]</p>
</li>
</ol>
</p>
<p> -16- <i>Postconditions</i>:
<tt>valid() == rhs.valid()</tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>

</resolution>

</issue>
