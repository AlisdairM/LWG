<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3523" status="WP">
<title><tt>iota_view::<i>sentinel</i></tt> is not always <tt>iota_view</tt>'s sentinel</title>
<section><sref ref="[range.iota.view]"/></section>
<submitter>Tim Song</submitter>
<date>17 Feb 2021</date>
<priority>99</priority>

<discussion>
<p>
<a href="https://wg21.link/P1739R4">P1739R4</a> added the following constructor to
<tt>iota_view</tt>:
</p>
<blockquote><pre>
constexpr iota_view(<i>iterator</i> first, <i>sentinel</i> last) : iota_view(*first, last.<i>bound_</i>) {}
</pre></blockquote>
<p>
However, while <tt>iota_view</tt>'s iterator type is always <tt>iota_view::<i>iterator</i></tt>, its sentinel type
is not always <tt>iota_view::<i>sentinel</i></tt>. First, if <tt>Bound</tt> is <tt>unreachable_sentinel_t</tt>, then
the sentinel type is <tt>unreachable_sentinel_t</tt> too - we don't add an unnecessary level of wrapping
on top. Second, when <tt>W</tt> and <tt>Bound</tt> are the same type, <tt>iota_view</tt> models <tt>common_range</tt>, and
the sentinel type is the same as the iterator type - that is, <tt><i>iterator</i></tt>, not <tt><i>sentinel</i></tt>.
</p>
<p>
Presumably the intent is to use the view's actual sentinel type, rather than always use the
<tt><i>sentinel</i></tt> type.
</p>

<note>2021-03-12; Reflector poll</note>
<p>
Set status to Tentatively Ready after five votes in favour during reflector poll.
</p>

<note>2021-06-07 Approved at June 2021 virtual plenary. Status changed: Voting &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4878">N4878</a>.
</p>

<ol>
<li><p>Edit <sref ref="[range.iota.view]"/>, as indicated:</p>

<blockquote>
<pre>
namespace std::ranges {
  // [...]

  template&lt;weakly_­incrementable W, semiregular Bound = unreachable_sentinel_t&gt;
    requires <i>weakly-equality-comparable-with</i>&lt;W, Bound&gt; &amp;&amp; semiregular&lt;W&gt;
  class iota_view : public view_interface&lt;iota_view&lt;W, Bound&gt;&gt; {
  private:
    // [range.iota.iterator], class iota_­view​::​iterator
    struct <i>iterator</i>;            // exposition only
    // [range.iota.sentinel], class iota_­view​::​sentinel
    struct <i>sentinel</i>;            // exposition only
    W <i>value_</i> = W();             // exposition only
    Bound <i>bound_</i> = Bound();     // exposition only
  public:
    iota_view() = default;
    constexpr explicit iota_view(W value);
    constexpr iota_view(type_identity_t&lt;W&gt; value,
                        type_identity_t&lt;Bound&gt; bound);
    constexpr iota_view(<i>iterator</i> first, <i><del>sentinel</del><ins>see below</ins></i> last)<ins>;</ins><del>: iota_view(*first, last.<i>bound_</i>) {}</del>

    constexpr <i>iterator</i> begin() const;
    constexpr auto end() const;
    constexpr <i>iterator</i> end() const requires same_­as&lt;W, Bound&gt;;

    constexpr auto size() const requires see below;
  };

  template&lt;class W, class Bound&gt;
      requires (!<i>is-integer-like</i>&lt;W&gt; || !<i>is-integer-like</i>&lt;Bound&gt; ||
              (<i>is-signed-integer-like</i>&lt;W&gt; == <i>is-signed-integer-like</i>&lt;Bound&gt;))
      iota_view(W, Bound) -&gt; iota_view&lt;W, Bound&gt;;
}
</pre>
<p>[...]</p>
<pre>
constexpr iota_view(type_identity_t&lt;W&gt; value, type_identity_t&lt;Bound&gt; bound);
</pre>
<blockquote>
<p>-8- <i>Preconditions</i>: <tt>Bound</tt> denotes <tt>unreachable_­sentinel_­t</tt> or <tt>bound</tt> is reachable
from <tt>value</tt>. When <tt>W</tt> and <tt>Bound</tt> model <tt>totally_­ordered_­with</tt>, then <tt>bool(value &lt;= bound)</tt> is true.</p>
<p>-9- <i>Effects</i>: Initializes <tt><i>value_</i></tt>­ with <tt>value</tt> and <tt><i>bound_</i></tt> with <tt>bound</tt>.</p>
</blockquote>
<pre>
<ins>constexpr iota_view(<i>iterator</i> first, <i>see below</i> last);</ins>
</pre>
<blockquote>
<p><ins>-?- <i>Effects</i>: Equivalent to:</ins></p>
<ol style="list-style-type: none">
<li><p><ins>(?.1) &mdash; If <tt>same_as&lt;W, Bound&gt;</tt> is <tt>true</tt>, <tt>iota_view(first.<i>value_</i>, last.<i>value_</i>)</tt>.</ins></p></li>
<li><p><ins>(?.2) &mdash; Otherwise, if <tt>Bound</tt> denotes <tt>unreachable_sentinel_t</tt>, <tt>iota_view(first.<i>value_</i>, last)</tt>.</ins></p></li>
<li><p><ins>(?.3) &mdash; Otherwise, <tt>iota_view(first.<i>value_</i>, last.<i>bound_</i>)</tt>.</ins></p></li>
</ol>
<p><ins>-?- <i>Remarks</i>: The type of <tt>last</tt> is:</ins></p>
<ol style="list-style-type: none">
<li><p><ins>(?.1) &mdash; If <tt>same_as&lt;W, Bound&gt;</tt> is <tt>true</tt>, <tt><i>iterator</i></tt>.</ins></p></li>
<li><p><ins>(?.2) &mdash; Otherwise, if <tt>Bound</tt> denotes <tt>unreachable_sentinel_t</tt>, <tt>Bound</tt>.</ins></p></li>
<li><p><ins>(?.3) &mdash; Otherwise, <tt><i>sentinel</i></tt>.</ins></p></li>
</ol>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
