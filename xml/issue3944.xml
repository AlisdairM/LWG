<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3944" status="SG16">
<title>Formatters converting sequences of <tt>char</tt> to sequences of <tt>wchar_t</tt></title>
<section><sref ref="[format.formatter.spec]"/></section>
<submitter>Mark de Wever</submitter>
<date>01 Jun 2023</date>
<priority>3</priority>

<discussion>
<p>
I noticed some interesting features introduced by the range based
formatters in C++23
</p>
<blockquote><pre>
// Ill-formed in C++20 and C++23
const char* cstr = "hello";
char* str = const_cast&lt;char*&gt;(cstr);
std::format(L"{}", str);
std::format(L"{}",cstr);

// Ill-formed in C++20
// In C++23 they give L"['h', 'e', 'l', 'l', 'o']"
std::format(L"{}", "hello"); // A libc++ bug prevents this from working.
std::format(L"{}", std::string_view("hello"));
std::format(L"{}", std::string("hello"));
std::format(L"{}", std::vector{'h', 'e', 'l', 'l', 'o'});
</pre></blockquote>
<p>
An example is shown <a href="https://godbolt.org/z/P9E6TK3YW">here</a>. This only
shows libc++ since libstdc++ and MSVC STL have not implemented the
formatting ranges papers (<paper num="P2286R8"/> and <paper num="P2585R0"/>) yet.
<p/>
The difference between C++20 and C++23 is the existence of range
formatters. These formatters use the formatter specialization
<tt>formatter&lt;char, wchar_t&gt;</tt> which converts the sequence of <tt>char</tt>s 
to a sequence of <tt>wchar_t</tt>s.
<p/>
In this conversion <tt>same_as&lt;char, charT&gt;</tt> is <tt>false</tt>, thus the requirements
of the range-type <tt>s</tt> and <tt>?s</tt> ([tab:formatter.range.type]) aren't met. So
the following is ill-formed:
</p>
<blockquote><pre>
std::format(L"{:s}", std::string("hello")); // Not L"hello"
</pre></blockquote>
<p>
It is surprising that some string types can be formatted as a sequence
of wide-characters, but others not. A sequence of characters can be a
sequence UTF-8 code units. This is explicitly supported in the width
estimation of string types. The conversion of <tt>char</tt> to <tt>wchar_t</tt> will
convert the individual code units, which will give incorrect results for
multi-byte code points. It will not transcode UTF-8 to UTF-16/32. The
current behavior is not in line with the note in
<sref ref="[format.formatter.spec]"/>/2
</p>
<blockquote><p>
[<i>Note 1</i>: Specializations such as <tt>formatter&lt;wchar_t, char&gt;</tt> and
<tt>formatter&lt;const char*, wchar_t&gt;</tt> that would require implicit
multibyte / wide string or character conversion are disabled. &mdash; <i>end note</i>]
</p></blockquote>
<p>
Disabling this could be done by explicitly disabling the <tt>char</tt> to <tt>wchar_t</tt>
sequence formatter. Something along the lines of
</p>
<blockquote><pre>
template&lt;ranges::input_range R&gt;
  requires(format_kind&lt;R&gt; == range_format::sequence &amp;&amp;
           same_as&lt;remove_cvref_t&lt;ranges::range_reference_t&lt;R&gt;&gt;, char&gt;)
struct formatter&lt;R, wchar_t&gt; : __disabled_formatter {};
</pre></blockquote>
<p>
where <tt>__disabled_formatter</tt> satisfies <sref ref="[format.formatter.spec]"/>/5, would
do the trick. This disables the conversion for all sequences not only
the string types. So <tt>vector</tt>, <tt>array</tt>, <tt>span</tt>, etc. would be disabled.
<p/>
This does not disable the conversion in the <tt>range_formatter</tt>. This allows
users to explicitly opt in to this formatter for their own
specializations.
<p/>
An alternative would be to only disable this conversion for string type
specializations (<sref ref="[format.formatter.spec]"/>/2.2) where <tt>char</tt> to 
<tt>wchar_t</tt> is used:
</p>
<blockquote><pre>
template&lt;size_t N&gt; struct formatter&lt;charT[N], charT&gt;;
template&lt;class traits, class Allocator&gt;
  struct formatter&lt;basic_string&lt;charT, traits, Allocator&gt;, charT&gt;;
template&lt;class traits&gt;
  struct formatter&lt;basic_string_view&lt;charT, traits&gt;, charT&gt;;
</pre></blockquote>
<p>
Disabling following the following two is not strictly required:
</p>
<blockquote><pre>
template&lt;&gt; struct formatter&lt;char*, wchar_t&gt;;
template&lt;&gt; struct formatter&lt;const char*, wchar_t&gt;;
</pre></blockquote>
<p>
However, if (<tt>const</tt>) <tt>char*</tt> becomes an <tt>input_range</tt> 
in a future version C++, these formatters would become enabled. 
Disabling all five instead of the three required specializations seems like a 
future proof solution.
<p/>
Since there is no enabled narrowing formatter specialization
</p>
<blockquote><pre>
template&lt;&gt; struct formatter&lt;wchar_t, char&gt;;
</pre></blockquote>
<p>
there are no issues for <tt>wchar_t</tt> to <tt>char</tt> conversions.
<p/>
Before proceeding with a proposed resolution the following design
questions need to be addressed:
</p>
<ul>
<li><p>Do we want to allow string types of <tt>char</tt>s to be formatted as
sequences of <tt>wchar_t</tt>s?</p></li>
<li><p>Do we want to allow non string type sequences of <tt>char</tt>s to be
formatted as sequences of <tt>wchar_t</tt>s?</p></li>
<li><p>Should we disable <tt>char</tt> to <tt>wchar_t</tt> conversion in the <tt>range_formatter</tt>?</p></li>
</ul>
<p>
SG16 has indicated they would like to discuss this issue during a telecon.
</p>

<note>2023-06-08; Reflector poll</note>
<p>
Set status to SG16 and priority to 3 after reflector poll.
</p>

<note>2023-07-26; Mark de Wever provides wording confirmed by SG16</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4950"/>.
</p>

<ol>

<li><p>Modify <sref ref="[format.formatter.spec]"/> as indicated:</p>

<blockquote class="note">
<p>
[<i>Drafting note</i>: The unwanted conversion happens due to the <tt>formatter</tt> base class
specialization (<sref ref="[format.range.fmtdef]"/>)
</p>
<pre>
struct <i>range-default-formatter</i>&lt;range_format::sequence, R, charT&gt;
</pre>
<p>
which is defined the header <tt>&lt;format&gt;</tt>. Therefore the disabling is only
needed in this header) &mdash; <i>end drafting note</i>]
</p>
</blockquote>

<blockquote>
<p>
-2- [&hellip;]
<p/>
The <tt>parse</tt> member functions of these formatters interpret the format specification as a 
<i>std-format-spec</i> as described in <sref ref="[format.string.std]"/>.
<p/>
[<i>Note 1</i>: Specializations such as <tt>formatter&lt;wchar_t, char&gt;</tt> <del>and 
<tt>formatter&lt;const char*, wchar_t&gt;</tt></del> that would require implicit multibyte / wide string 
or character conversion are disabled. &mdash; <i>end note</i>]
<p/>
<ins>
-?- The header <tt>&lt;format&gt;</tt> provides the following disabled specializations:
</ins>
</p>
<ol style="list-style-type: none">
<li><p><ins>(?.1) &mdash; The string type specializations</ins></p>
<blockquote><pre>
<ins>template&lt;&gt; struct formatter&lt;char*, wchar_t&gt;;
template&lt;&gt; struct formatter&lt;const char*, wchar_t&gt;;
template&lt;size_t N&gt; struct formatter&lt;char[N], wchar_t&gt;;
template&lt;class traits, class Allocator&gt;
  struct formatter&lt;basic_string&lt;char, traits, Allocator&gt;, wchar_t&gt;;
template&lt;class traits&gt;
  struct formatter&lt;basic_string_view&lt;char, traits&gt;, wchar_t&gt;;</ins>
</pre></blockquote>
</li>
</ol>
<p>
-3- For any types <tt>T</tt> and <tt>charT</tt> for which neither the library nor the user provides 
an explicit or partial specialization of the class template <tt>formatter</tt>, 
<tt>formatter&lt;T, charT&gt;</tt> is disabled.
</p>
</blockquote>
</li>

</ol></resolution>

</issue>
