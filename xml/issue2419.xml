<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2419" status="New">
<title>Clang's libc++ extension to <tt>std::tuple</tt></title>
<section><sref ref="[tuple.cnstr]"/></section>
<submitter>Akim Demaille</submitter>
<date>11 Jul 2014</date>
<priority>99</priority>

<discussion>
<p>
The issue has been submitted after exchanges with the clang++ team
as a consequence of two PR I sent:
<p/>
<a href="http://llvm.org/bugs/show_bug.cgi?id=20174">Issue 20174</a>
<p/>
<a href="http://llvm.org/bugs/show_bug.cgi?id=20175">Issue 20175</a>
<p/>
The short version is shown in the program below:
</p>
<blockquote>
<pre>
#include &lt;iostream&gt;
#include &lt;tuple&gt;

struct base
{
  void out(const std::tuple&lt;char, char&gt;&amp; w) const
  {
    std::cerr &lt;&lt; "Tuple: " &lt;&lt; std::get&lt;0&gt;(w) &lt;&lt; std::get&lt;1&gt;(w) &lt;&lt; '\n';
  }
};

struct decorator
{
  base b_;

  template &lt;typename... Args&gt;
  auto
  out(Args&amp;&amp;... args)
    -> decltype(b_.out(args...))
  {
    return b_.out(args...);
  }

  void out(const char&amp; w)
  {
    std::cerr &lt;&lt; "char: " &lt;&lt; w &lt;&lt; '\n';
  }
};

int main()
{
  decorator d{base{}};
  char l = 'a';
  d.out(l);
}
</pre>
</blockquote>
<p>
This is a stripped down version of a real world case where I
wrap objects in decorators.  These decorators contributes some
functions, and forward all the rest of the API to the wrapped
object using perfect forwarding.  There can be overloaded names.
<p/>
Here the inner object provides an
</p>
<blockquote><pre>
out(const std::tuple&lt;char, char&gt;&amp;) -&gt; void
</pre></blockquote>
<p>
function, and the wrappers, in addition to perfect forwarding,
provides
</p>
<blockquote><pre>
out(const char&amp;) -&gt; void
</pre></blockquote>
<p>
The main function then call <tt>out(l)</tt> where <tt>l</tt> is a <tt>char</tt> lvalue.
<p/>
With (GCC's) libstdc++ I get the expected result: the <tt>char</tt>
overload is run.  With (clang++'s) libc++ it is the tuple
version which is run.
</p>
<blockquote><pre>
$ g++-mp-4.9 -std=c++11 bar.cc &amp;&amp; ./a.out
char: a
$ clang++-mp-3.5 -std=c++11 bar.cc -Wall &amp;&amp; ./a.out
Tuple: a
</pre></blockquote>
<p>
It turns out that this is the result of an extension of <tt>std::tuple</tt>
in libc++ where they accept constructors with fewer values that
tuple elements.
<p/>
The purpose of this issue is to ask the standard to forbid
that this extension be allowed to participate in overload resolution.
</p>

<note>2014-10-05, Daniel comments</note>
<p>
This issue is closely related to LWG <iref ref="2312"/>.
</p>
</discussion>

<resolution>
</resolution>

</issue>
