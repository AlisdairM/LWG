<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2801" status="New">
<title>Default-constructibility of <tt>unique_ptr</tt></title>
<section><sref ref="[unique.ptr.single.ctor]"/></section>
<submitter>Marshall Clow</submitter>
<date>9 Nov 2016</date>
<priority>2</priority>

<discussion>
<p>
<b>Addresses US 122</b>
<p/>
<tt>unique_ptr</tt> should not satisfy <tt>is_constructible_v&lt;unique_ptr&lt;T, D&gt;&gt;</tt> 
unless <tt>D</tt> is <tt>DefaultConstructible</tt> and not a pointer type. This is 
important for interactions with <tt>pair</tt>, <tt>tuple</tt>, and <tt>variant</tt>
constructors that rely on the <tt>is_default_constructible</tt> trait.
</p>
<p>
Suggested resolution:
<p/>
Add a <i>Remarks:</i> clause to constrain the default 
constructor to not exist unless the <i>Requires</i> clause is 
satisfied.
</p>
<note>Issues Telecon 16-Dec-2016</note>
<p>Priority 2; Howard and Ville to provide wording.</p>

<note>2016-12-24: Howard and Ville provided wording.</note>

</discussion>

<resolution>

<ol>
<li>
<p>
Modify the synopsis in  <sref ref="[unique.ptr.single]"/> as follows:
</p>
<blockquote>
<pre>
...
constexpr unique_ptr(nullptr_t) noexcept<ins>;</ins>
    <del>: unique_ptr() { }</del>
...
</pre>
</blockquote>
</li>

<li>
<p>
Modify <sref ref="[unique.ptr.single.ctor]"/> as follows:
</p>
<blockquote>

<pre>
constexpr unique_ptr() noexcept;
</pre>
<blockquote>
<p>...</p>
<p>
4 <i>Remarks:</i> <del>If this constructor is instantiated with a
pointer type or reference type for the template argument <tt>D</tt>,
the program is ill-formed.</del> <ins>If <tt>deleter_type</tt> is a
pointer type or
<tt>is_default_constructible_v&lt;deleter_type&gt;</tt> is
<tt>false</tt>, this constructor shall not participate in overload
resolution.</ins>
</p>
</blockquote>

<pre>
explicit unique_ptr(pointer p) noexcept;
</pre>
<blockquote>
<p>...</p>
<p>
8 <i>Remarks:</i> <del>If this constructor is instantiated with a
pointer type or reference type for the template argument <tt>D</tt>,
the program is ill-formed.</del> <ins>If <tt>deleter_type</tt> is a
pointer type or
<tt>is_default_constructible_v&lt;deleter_type&gt;</tt> is
<tt>false</tt>, this constructor shall not participate in overload
resolution.</ins>
</p>
</blockquote>

<pre>
<ins>constexpr unique_ptr(nullptr_t) noexcept;</ins>
</pre>
<blockquote>
<p>
<ins><i>Requires:</i> <tt>deleter_type</tt> shall satisfy the requirements of
<tt>DefaultConstructible</tt> (Table 22), and that construction shall not throw
an exception.</ins>
</p>
<p>
<ins><i>Effects:</i> Equivalent to the <tt>unique_ptr</tt> default constructor.</ins>
</p>
<p>
<ins><i>Remarks:</i> If <tt>deleter_type</tt> is a pointer type or
<tt>is_default_constructible_v&lt;deleter_type&gt;</tt> is
<tt>false</tt>), this constructor shall not participate in overload
resolution.</ins>
</p>
</blockquote>

</blockquote>
</li>

<li>
<p>
Modify the synopsis in  <sref ref="[unique.ptr.runtime]"/> as follows:
</p>
<blockquote>
<pre>
...
constexpr unique_ptr(nullptr_t) noexcept<ins>;</ins><del> : unique_ptr() { }</del>
...
</pre>
</blockquote>
</li>

<li>
<p>
Modify <sref ref="[unique.ptr.runtime.ctor]"/> as follows:
</p>
<blockquote>

<pre>
template &lt;class U&gt; explicit unique_ptr(U p) noexcept;
</pre>
<blockquote>
<p><ins>
This constructor behaves the same as the constructor that takes a
pointer parameter in the primary template except that the following
constraints are added for it to participate in overload resolution
</ins></p>
<ul>
<li><p><ins>
<tt>U</tt> is the same type as <tt>pointer</tt>, or
</ins></p></li>
<li><p><ins>
<tt>pointer</tt> is the same type as <tt>element_type*</tt>,
<tt>U</tt> is a pointer type <tt>V*</tt>, and <tt>V(*)[]</tt> is
convertible to <tt>element_type(*)[]</tt>.
</ins></p></li>
</ul>
</blockquote>
<pre>
template &lt;class U&gt; unique_ptr(U p, <i>see below</i> d) noexcept;
template &lt;class U&gt; unique_ptr(U p, <i>see below</i> d) noexcept;
</pre>
<blockquote>
<p>
1 These constructors behave the same as the constructors that take a
pointer parameter in the primary template except that they shall not
participate in overload resolution unless either
</p>
</blockquote>
</blockquote>
</li>

</ol>

</resolution>

</issue>
