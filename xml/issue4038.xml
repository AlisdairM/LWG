<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4038" status="WP">
<title><code>std::text_encoding::aliases_view</code> should have constexpr iterators</title>
<section><sref ref="[text.encoding.aliases]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>16 Jan 2024</date>
<priority>99</priority>

<discussion>
<p>
<code>aliases_view::begin()</code> and <code>aliases_view::end()</code>
are constexpr functions, but there is no requirement that you can use
the returned iterator and sentinel in constant expressions.
</p>

<note>2024-03-12; Reflector poll</note>
<p>
Set status to Tentatively Ready after seven votes in favour during reflector poll.
</p>

<note>Tokyo 2024-03-23; Status changed: Voting &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4971"/>.
</p>

<ol>
<li><p>Modify <sref ref="[text.encoding.aliases]"/> as indicated:</p>

<blockquote>
<blockquote>
<pre>
struct text_encoding::aliases_view : ranges::view_interface&lt;text_encoding::aliases_view&gt; {
  constexpr <i>implementation-defined</i> begin() const;
  constexpr <i>implementation-defined</i> end() const;
};
</pre>
</blockquote>
<p>
-1-
<code>text_encoding::aliases_view</code> models <code>copyable</code>,
<code>ranges::view</code>, <code>ranges::random_access_range</code>,
and <code>ranges::borrowed_range</code>.
</p>
<p>
-2-
Both <code>ranges::range_value_t&lt;text_encoding::aliases_view&gt;</code>
and <code>ranges::range_reference_t&lt;text_encoding::aliases_view&gt;</code>
denote <code>const char*</code>.
</p>
<p>
<ins>
-?-
<code>ranges::iterator_t&lt;text_encoding::aliases_view&gt;</code>
is a constexpr iterator (<sref ref="[iterator.requirements.general]"/>).
</ins>
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
