<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3237" status="WP">
<title>LWG 3038 and 3190 have inconsistent PRs</title>
<section><sref ref="[mem.poly.allocator.mem]"/></section>
<submitter>Casey Carter</submitter>
<date>18 Jul 2019</date>
<priority>2</priority>

<discussion>
<p>
Both LWG <iref ref="3038"/> and LWG <iref ref="3190"/> deal with how to respond to requests to allocate 
"<tt>n * sizeof(T)</tt>" bytes of memory when <tt>n * sizeof(T)</tt> is not sufficient storage for 
<tt>n</tt> objects of type <tt>T</tt>, i.e., when <tt>n &gt; SIZE_MAX / sizeof(T)</tt>. LWG 
<iref ref="3038"/> changed <tt>polymorphic_allocator::allocate</tt> to throw <tt>length_error</tt> upon 
detecting this condition, whereas LWG <iref ref="3190"/> changed <tt>allocator::allocate</tt> to 
throw <tt>bad_array_new_length</tt>. It's peculiar that two standard library components which allocate 
memory both detect this condition but handle it by throwing different exception types; for consistency, 
the two should be harmonized.
<p/>
Reflector discussion of 3190 seemed to achieve consensus that <tt>bad_array_new_length</tt> was 
the better option. Unlike <tt>length_error</tt>, <tt>bad_array_new_length</tt> derives from 
<tt>bad_alloc</tt> so we can make this change without altering the invariant that allocation functions 
either succeed or throw an exception derived from <tt>bad_alloc</tt>.
<p/>
Further, <a href="http://wg21.link/p0339r6">P0339R6</a> "<tt>polymorphic_allocator&lt;&gt;</tt> as a 
vocabulary type" recently added the function template "<tt>template&lt;class T&gt; T* 
allocate_object(size_t n = 1);</tt>" to <tt>std::pmr::polymorphic_allocator</tt>, which is another 
instance of the "allocate memory for <tt>n</tt> objects of type <tt>T</tt>" pattern. 
<sref ref="[mem.poly.allocator.mem]"/> paragraph 8.1 specifies that <tt>allocate_object</tt> throws 
<tt>length_error</tt> when <tt>SIZE_MAX / sizeof(T) &lt; n</tt>, presumably for consistency with <tt>std::pmr::polymorphic_allocator::allocate</tt> specified in paragraph 1. <tt>allocate_object</tt>'s 
behavior should be consistent with <tt>allocator::allocate</tt> and 
<tt>polymorphic_allocator::allocate</tt> so we have a single means of communicating "request for 
allocation of unrepresentable size" errors in the Standard Library.
</p>

<note>2020-02 Moved to Immediate on Thursday afternoon in Prague.</note>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4820">N4820</a>.</p>

<ol>
<li><p>Modify <sref ref="[mem.poly.allocator.mem]"/> as indicated:</p>

<blockquote>
<pre>
[[nodiscard]] Tp* allocate(size_t n);
</pre><blockquote>
<p>
-1- <i>Effects:</i> If <tt>SIZE_MAX / sizeof(Tp) &lt; n</tt>, throws 
<tt><del>length_error</del><ins>bad_array_new_length</ins></tt>. 
Otherwise equivalent to:
</p>
<blockquote><pre>
return static_cast&lt;Tp*&gt;(memory_rsrc-&gt;allocate(n * sizeof(Tp), alignof(Tp)));
</pre>
</blockquote>
</blockquote>
[&hellip;]
<pre>
template&lt;class T&gt;
  T* allocate_object(size_t n = 1);
</pre><blockquote>
<p>
-8- <i>Effects:</i> Allocates memory suitable for holding an array of <tt>n</tt> objects of type 
<tt>T</tt>, as follows:
</p>
<ol style="list-style-type: none">
<li><p>(8.1) &mdash; if <tt>SIZE_MAX / sizeof(T) &lt; n</tt>, throws 
<tt><del>length_error</del><ins>bad_array_new_length</ins></tt>,</p></li>
<li><p>(8.2) &mdash; otherwise equivalent to:</p>
<blockquote><pre>
return static_cast&lt;T*&gt;(allocate_bytes(n*sizeof(T), alignof(T)));
</pre></blockquote>
</li>
</ol>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>
</issue>
