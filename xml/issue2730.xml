<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2730" status="Open">
<title><tt>numeric_limits</tt> primary template definition</title>
<section><sref ref="[numeric.limits]"/></section>
<submitter>Richard Smith</submitter>
<date>9 Jun 2016</date>
<priority>3</priority>

<discussion>
<p>
I've received this report at the <a href="mailto:cxxeditor@gmail.com">project editor mail alias</a>, and it seems like it may be worthy of a LWG issue:
</p>
<blockquote class="note">
<p>
I recently had this problem: 
</p>
<ul>
<li>I was storing data in a vector of <tt>__uint128_t</tt>s</li>
<li>I used a sorting library which used <tt>numeric_limits&lt;T&gt;::max()</tt> as a sentinel value</li>
<li>GCC's libstdc++ provides a <tt>numeric_limits</tt> specialisation for that type, but</li>
<li>Clang's libc++ does not.</li>
</ul>
<p>
This broke the sorting for me on different platforms, and it was quite difficult to determine why. If the default 
<tt>numeric_limits</tt> didn't default to <tt>0</tt>s and <tt>false</tt> values (18.3.2.4 of N4582), and instead 
<tt>static_assert</tt>ed, causing my code to not compile, I would have found the solution immediately.
<p/>
I know that <tt>__uint128_t</tt> is non-standard, so neither GCC nor Clang is doing the wrong thing nor the right thing 
here. I could just submit a patch to libc++ providing the specialisations, but it doesn't fix the problem at its core.
<p/>
I am wondering, what is the rationale behind the defaults being <tt>0</tt> and <tt>false</tt>? It seems like it is 
inviting a problem for any future numeric types, whether part of a library, compiler extension, and possibly even 
future updates to C++'s numeric types. I think it would be much better to prevent code that tries to use 
unspecified <tt>numeric_limits</tt> from compiling.
</p>
</blockquote>
<p>
An alternative to this suggestion would be to still define the primary template, but not provide any of the members 
except <tt>is_specialized</tt>. Either way, this would make <tt>numeric_limits</tt> members SFINAEable.
<p/>
Along the same lines, one might wonder why the members that only make sense for floating-point types are required to 
be defined to nonsense values for integer types.
</p>

<note>2016-11-12, Issaquah</note>
<p>Sat PM: This looks like a good idea. Jonathan and Marshall will do post C++17 implementations and report back.</p>

<note>2018-11 San Diego Thursday night issue processing</note>
<p>See Walter's paper <paper num="P0437"/> for ideas and/or future directions.</p>

<note>2023-04</note>
<p>See Walter's paper <paper num="P1841"/> for the preferred direction.</p>
</discussion>

<resolution>
</resolution>

</issue>
