<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2449" status="New">
<title><tt>vector::insert</tt> invalidates <tt>end()</tt>?</title>
<section><sref ref="[vector.modifiers]"/></section>
<submitter>Marc Glisse</submitter>
<date>21 Oct 2014</date>
<priority>3</priority>

<discussion>
<p>
this issue is based on the discussion <a href="https://groups.google.com/a/isocpp.org/d/topic/std-discussion/oYvKscnl280/discussion">here</a>.
<p/>
<sref ref="[vector.modifiers]"/> says about <tt>vector::insert</tt>: "If no reallocation happens, all the iterators and references 
before the insertion point remain valid." This doesn't seem to guarantee anything about the iterator <em>at</em> the point of insertion.
<p/>
The question comes from people asking if the following is valid, assuming a sufficient call to <tt>reserve()</tt> was done first:
</p>
<blockquote><pre>
v.insert(v.end(), v.begin(), v.end());
</pre></blockquote>
<p>
It could fail for an implementation using a sentinel for the end of the vector, but I don't know of any (it would be quite 
inconvenient). And for any implementation using a simple position as iterator (pointer (possibly in a wrapper), or base+offset), 
this is needlessly restrictive. The fact that this alternative:
</p>
<blockquote><pre>
v.insert(v.end(), &amp;v[0], &amp;v[0]+v.size())
</pre></blockquote>
<p>
is arguably valid (again assuming a large enough <tt>reserve()</tt>) makes it a bit confusing that the first version isn't 
(<sref ref="[sequence.reqmts]"/> has a precondition that iterator arguments to <tt>insert()</tt> do not point into the sequence, 
but <tt>vector::insert</tt> is more refined and seems to give enough guarantees that it cannot fail).
<p/>
Then we might as well say that <tt>vector</tt> iterators act as positions, and that after a reallocation-free operation an 
iterator points to the same position, whatever may be there now&hellip;
</p>
</discussion>

<resolution>
</resolution>

</issue>
