<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3016" status="NAD">
<title><tt>optional</tt> and over-aligned types</title>
<section><sref ref="[optional.optional]"/></section>
<submitter>Tim Song</submitter>
<date>4 Sep 2017</date>
<priority>3</priority>

<discussion>
<p>
LWG issue <iref ref="2555"/> added "It is implementation-defined whether over-aligned types are supported (C++14 &sect;3.11)."
to the specification of <tt>std::experimental::optional</tt> in LFTS, however that issue wasn't moved until <tt>optional</tt> had 
already been merged to the IS working paper, so it isn't present in the specification of <tt>std::optional</tt>. Should the 
same rule be added for <tt>std::optional</tt> as well?
</p>

<note>2017-11 Albuquerque Wednesday night issues processing</note>
<p>Priority set to 3; Casey to provide rationale for closing as NAD.</p>

<p>2018-11 Closed as NAD with the adoption of <a href="https://wg21.link/P0899R1">P0899R1</a></p>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4687">N4687</a>.</p>

<ol>
<li><p>Edit <sref ref="[optional.optional]"/> p1 as indicated:</p>
<blockquote>
<p>
[&hellip;] The contained value shall be allocated in a region of the <tt>optional&lt;T&gt;</tt> storage suitably aligned 
for the type <tt>T</tt>. <ins>It is implementation-defined whether over-aligned types are supported 
(<sref ref="[basic.align]" />).</ins> When an object of type <tt>optional&lt;T&gt;</tt> is contextually converted to 
<tt>bool</tt>, the conversion returns <tt>true</tt> if the object contains a value; otherwise the conversion returns 
<tt>false</tt>.
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
