<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4187" status="New">
<title>`bitset::reference` should be const-assignable</title>
<section><sref ref="[template.bitset]"/></section>
<submitter>Arthur O'Dwyer</submitter>
<date>21 Dec 2024</date>
<priority>99</priority>

<discussion>
<p>
LWG <iref ref="3638"/>, which proposes changes to <tt>vector&lt;bool&gt;::reference</tt>, is related. 
Should <tt>vector&lt;bool&gt;::reference</tt> and <tt>bitset&lt;N&gt;::reference</tt> behave differently 
in any respect? I think there's no good reason for them to behave differently, and good technical 
incentives to permit them to behave the same. We already have implementation divergence: libc++ makes 
`bitset::reference` const-assignable, whereas libstdc++ and MS STL do not. This means that libc++'s 
`bitset::reference` successfully avoids false positives from Arthur's proposed -Wassign-to-class-rvalue 
diagnostic, while libstdc++'s does not (See <a href="https://godbolt.org/z/4e96j7rvv">Godbolt</a>).
<p/>
The proposed resolution applies <a href="https://wg21.link/P2321#vectorboolreference">P2321</a>'s approach. We 
can't just insert `const` into the existing spec, because ABI. But also, since our goal is consistency 
with the post-P2321 <tt>vector&lt;bool&gt;::reference</tt>, we should do the same thing here as P2321, not invent anything novel.
<p/>
Open questions related to the current P/R:
</p>
<ol>
<li><p>LWG 3638 proposes to add these three `swap` overloads to <tt>vector&lt;bool&gt;::reference</tt>. 
Should we also, consistently, add them to `bitset::reference`? I think we should.</p>
<blockquote><pre>
friend constexpr void swap(reference x, reference y) noexcept;
friend constexpr void swap(reference x, bool&amp; y) noexcept;
friend constexpr void swap(bool&amp; x, reference y) noexcept;
</pre></blockquote>
</li>
<li><p>Both <tt>vector&lt;bool&gt;::reference</tt> and `bitset::reference` right now are specified with</p>
<blockquote><pre>
constexpr reference(const reference&amp;) = default;
</pre></blockquote>
<p>which is meaningless because we don't know the data members of `reference`. So this isn't actually 
specifying that the constructor is trivial, let alone that it's `noexcept`. I think we should re-specify 
both types' copy constructors as simply `constexpr` and `noexcept`; and then if we want them to be trivial, 
we should say so in English prose.</p>
</li>
</ol>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N5001"/>.
</p>

<ol>
<li><p>Modify <sref ref="[template.bitset.general]"/> as indicated:</p>

<blockquote>
<pre>
namespace std {
  template&lt;size_t N&gt; class bitset {
  public:
    // <i>bit reference</i>
    class reference {
    public:
      constexpr reference(const reference&amp;) = default;
      constexpr ~reference();
      constexpr reference&amp; operator=(bool x) noexcept;           // <i>for b[i] = x;</i>
      constexpr reference&amp; operator=(const reference&amp;) noexcept; // <i>for b[i] = b[j];</i>
      <ins>constexpr const reference&amp; operator=(bool x) const noexcept;</ins>
      constexpr bool operator~() const noexcept;                 // <i>flips the bit</i>
      constexpr operator bool() const noexcept;                  // <i>for x = b[i];</i>
      constexpr reference&amp; flip() noexcept;                      // <i>for b[i].flip();</i>
      <ins>friend constexpr void swap(reference x, reference y) noexcept;
      friend constexpr void swap(reference x, bool&amp; y) noexcept;
      friend constexpr void swap(bool&amp; x, reference y) noexcept;</ins>      
    };
    [&hellip;]
  };
  [&hellip;]
}
</pre>
</blockquote>


</li>

</ol>
</resolution>

</issue>
