<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3430" status="New">
<title><tt>std::fstream</tt> &amp; co. should be constructible from <tt>string_view</tt></title>
<section><sref ref="[fstream.syn]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>15 Apr 2020</date>
<priority>99</priority>

<discussion>
<p>
We have:
</p>
<blockquote><pre>
basic_fstream(const char*, openmode);
basic_fstream(const filesystem::path::value_type*, openmode); // wide systems only
basic_fstream(const string&amp;, openmode);
basic_fstream(const filesystem::path&amp;, openmode);
</pre></blockquote>
<p>
I think the omission of a <tt>string_view</tt> overload was intentional, because the underlying OS call 
(such as <tt>fopen</tt>) needs a NTBS. We wanted the allocation required to turn a <tt>string_view</tt> 
into an NTBS to be explicitly requested by the user. But then we added the <tt>path</tt> overload, 
which is callable with a <tt>string_view</tt>. Converting to a <tt>path</tt> is more expensive than 
converting to <tt>std::string</tt>, because a path has to <em>at least</em> construct a <tt>basic_string</tt>, 
and potentially also does an encoding conversion, parses the path, and potentially allocates a sequence 
of <tt>path</tt> objects for the path components.
<p/>
This means the simpler, more obvious code is slower and uses more memory:
</p>
<blockquote><pre>
string_view sv = "foo.txt";
fstream f1(sv); // bad
fstream f2(string(sv)); // good
</pre></blockquote>
<p>
We should just allow passing a <tt>string_view</tt> directly, since it already compiles but 
doesn't do what anybody expects or wants.
<p/>
Even with a <tt>string_view</tt> overload, passing types like <tt>const char16_t*</tt> or <tt>u32string_view</tt> 
will still implicitly convert to <tt>filesystem::path</tt>, but that seems reasonable. In those cases the 
encoding conversion is necessary. For Windows we support construction from <tt>const wchar_t*</tt> but not 
from <tt>wstring</tt> or <tt>wstring_view</tt>, which means those types will convert to <tt>filesystem::path</tt>. 
That seems suboptimal, so we might also want to add <tt>wstring</tt> and <tt>wstring_view</tt> overloads for 
"wide systems only", as per <sref ref="[fstream.syn]"/> p3.
<p/>
Daniel:
<p/>
LWG <iref ref="2883"/> has a more general view on that but does not consider potential cost differences 
in the presence of <tt>path</tt> overloads (Which didn't exist at this point yet).
</p>
</discussion>

<resolution>
</resolution>
</issue>
