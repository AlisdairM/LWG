<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3430" status="WP">
<title><tt>std::fstream</tt> &amp; co. should be constructible from <tt>string_view</tt></title>
<section><sref ref="[fstream.syn]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>15 Apr 2020</date>
<priority>3</priority>

<discussion>
<p>
We have:
</p>
<blockquote><pre>
basic_fstream(const char*, openmode);
basic_fstream(const filesystem::path::value_type*, openmode); // wide systems only
basic_fstream(const string&amp;, openmode);
basic_fstream(const filesystem::path&amp;, openmode);
</pre></blockquote>
<p>
I think the omission of a <tt>string_view</tt> overload was intentional, because the underlying OS call 
(such as <tt>fopen</tt>) needs a NTBS. We wanted the allocation required to turn a <tt>string_view</tt> 
into an NTBS to be explicitly requested by the user. But then we added the <tt>path</tt> overload, 
which is callable with a <tt>string_view</tt>. Converting to a <tt>path</tt> is more expensive than 
converting to <tt>std::string</tt>, because a path has to <em>at least</em> construct a <tt>basic_string</tt>, 
and potentially also does an encoding conversion, parses the path, and potentially allocates a sequence 
of <tt>path</tt> objects for the path components.
<p/>
This means the simpler, more obvious code is slower and uses more memory:
</p>
<blockquote><pre>
string_view sv = "foo.txt";
fstream f1(sv); // bad
fstream f2(string(sv)); // good
</pre></blockquote>
<p>
We should just allow passing a <tt>string_view</tt> directly, since it already compiles but 
doesn't do what anybody expects or wants.
<p/>
Even with a <tt>string_view</tt> overload, passing types like <tt>const char16_t*</tt> or <tt>u32string_view</tt> 
will still implicitly convert to <tt>filesystem::path</tt>, but that seems reasonable. In those cases the 
encoding conversion is necessary. For Windows we support construction from <tt>const wchar_t*</tt> but not 
from <tt>wstring</tt> or <tt>wstring_view</tt>, which means those types will convert to <tt>filesystem::path</tt>. 
That seems suboptimal, so we might also want to add <tt>wstring</tt> and <tt>wstring_view</tt> overloads for 
"wide systems only", as per <sref ref="[fstream.syn]"/> p3.
<p/>
Daniel:
<p/>
LWG <iref ref="2883"/> has a more general view on that but does not consider potential cost differences 
in the presence of <tt>path</tt> overloads (Which didn't exist at this point yet).
</p>

<note>2020-05-09; Reflector prioritization</note>
<p>
Set priority to 3 after reflector discussions.
</p>

<note>2020-08-10; Jonathan comments</note>
<p>
An alternative fix would be to retain the original design and not allow
construction from a <tt>string_view</tt>. The <tt>path</tt> parameters
could be changed to template parameters which are constrained to be exactly
<tt>path</tt>, and not things like <tt>string_view</tt> which can convert
to <tt>path</tt>.
</p>

<note>2020-08-21; Issue processing telecon: send to LEWG</note>
<p>
Just adding support for <tt>string_view</tt> doesn't prevent expensive
conversions from other types that convert to <tt>path</tt>.
Preference for avoiding all expensive implicit conversions to <tt>path</tt>,
maybe via abbreviated function templates:
<pre>
basic_fstream(same_as&lt;filesystem::path&gt; auto const&amp;, openmode);
</pre>
</p>
<p>
It's possible <tt>path_view</tt> will provide a better option at some point.
</p>
<p>
It was noted that <iref ref="2676"/> did intentionally allow conversions
from "strings of character types <code>wchar_t</code>, <code>char16_t</code>,
and <code>char32_t</code>". Those conversions don't need to be implicit
for that to be supported.
</p>

<note>2020-09-11; Tomasz comments and provides wording</note>
<p>
During the <a href="https://wiki.edg.com/bin/view/Wg21summer2020/LWG3430">LEWG 2020-08-24 telecon</a> 
the LEWG provided following guidance on the issue:
</p>
<blockquote style="border-left: 3px solid #ccc;padding-left: 15px;">
<p>
We took one poll (exact wording in the notes) to constrain the constructor which takes 
<tt>filesystem::path</tt> to only take <tt>filesystem::path</tt> and not things convertible to it, 
but only 9 out of 26 people present actually voted. Our interpretation: LWG should go ahead with 
making this change. There is still plenty of time for someone who hasn't yet commented on this to 
bring it up even if it is in a tentatively ready state. It would be nice to see a paper to address 
the problem of the templated path constructor, but no one has yet volunteered to do so. 
Note: the issue description is now a misnomer, as adding a <tt>string_view</tt> constructor 
is no longer being considered at this time.
</p>
</blockquote>
<p>
The proposed P/R  follows original LWG proposal and makes the <tt>path</tt> constructor of the 
<tt>basic_*fstreams</tt> "<tt>explicit</tt>". To adhere to current policy, we refrain from use of 
requires clauses and abbreviated function syntax, and introduce a <i>Constraints</i> element.
</p>

<note>2021-05-21; Reflector poll</note>
<p>
Set status to Tentatively Ready after seven votes in favour during reflector poll.
</p>

<note>2021-06-07 Approved at June 2021 virtual plenary. Status changed: Voting &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4861">N4861</a>.
</p>

<ol>
<li><p>Modify <sref ref="[ifstream]"/>, class template <tt>basic_ifstream</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
[&hellip;]
explicit basic_ifstream(const string&amp; s,
                        ios_base::openmode mode = ios_base::in);
<ins>template&lt;class T&gt;</ins>
explicit basic_ifstream(const <del>filesystem::path</del><ins>T</ins>&amp; s,
                        ios_base::openmode mode = ios_base::in);
[&hellip;]
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[ifstream.cons]"/> as indicated:</p>

<blockquote>
<pre>
explicit basic_ifstream(const string&amp; s,
                        ios_base::openmode mode = ios_base::in);
</pre>
<blockquote>
<p>
<ins>-?- <i>Effects:</i> Equivalent to: <tt>basic_ifstream(s.c_str(), mode)</tt>.</ins>
</p>
</blockquote>
<pre>
<ins>template&lt;class T&gt;</ins>
explicit basic_ifstream(const <del>filesystem::path</del><ins>T</ins>&amp; s,
                        ios_base::openmode mode = ios_base::in);
</pre>
<blockquote>
<p>
<ins>-?- <i>Constraints:</i> <tt>is_same_v&lt;T, filesystem::path&gt;</tt> is <tt>true</tt>.</ins>
<p/>
-3- <i>Effects:</i> Equivalent to: <tt>basic_ifstream(s.c_str(), mode)</tt>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[ofstream]"/>, class template <tt>basic_ofstream</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
[&hellip;]
explicit basic_ofstream(const string&amp; s,
                        ios_base::openmode mode = ios_base::out);
<ins>template&lt;class T&gt;</ins>
explicit basic_ofstream(const <del>filesystem::path</del><ins>T</ins>&amp; s,
                        ios_base::openmode mode = ios_base::out);
[&hellip;]
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[ofstream.cons]"/> as indicated:</p>

<blockquote>
<pre>
explicit basic_ofstream(const string&amp; s,
                        ios_base::openmode mode = ios_base::out);
</pre>
<blockquote>
<p>
<ins>-?- <i>Effects:</i> Equivalent to: <tt>basic_ofstream(s.c_str(), mode)</tt>.</ins>
</p>
</blockquote>
<pre>
<ins>template&lt;class T&gt;</ins>
explicit basic_ofstream(const <del>filesystem::path</del><ins>T</ins>&amp; s,
                        ios_base::openmode mode = ios_base::out);
</pre>
<blockquote>
<p>
<ins>-?- <i>Constraints:</i> <tt>is_same_v&lt;T, filesystem::path&gt;</tt> is <tt>true</tt>.</ins>
<p/>
-3- <i>Effects:</i> Equivalent to: <tt>basic_ofstream(s.c_str(), mode)</tt>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[fstream]"/>, class template <tt>basic_fstream</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
[&hellip;]
explicit basic_fstream(
  const string&amp; s,
  ios_base::openmode mode = ios_base::in | ios_base::out);
<ins>template&lt;class T&gt;</ins>
explicit basic_fstream(
  const <del>filesystem::path</del><ins>T</ins>&amp; s,
  ios_base::openmode mode = ios_base::in | ios_base::out);
[&hellip;]
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[fstream.cons]"/> as indicated:</p>

<blockquote>
<pre>
explicit basic_fstream(
  const string&amp; s,
  ios_base::openmode mode = ios_base::in | ios_base::out);
</pre>
<blockquote>
<p>
<ins>-?- <i>Effects:</i> Equivalent to: <tt>basic_fstream(s.c_str(), mode)</tt>.</ins>
</p>
</blockquote>
<pre>
<ins>template&lt;class T&gt;</ins>
explicit basic_fstream(
  const <del>filesystem::path</del><ins>T</ins>&amp; s,
  ios_base::openmode mode = ios_base::in | ios_base::out);
</pre>
<blockquote>
<p>
<ins>-?- <i>Constraints:</i> <tt>is_same_v&lt;T, filesystem::path&gt;</tt> is <tt>true</tt>.</ins>
<p/>
-3- <i>Effects:</i> Equivalent to: <tt>basic_fstream(s.c_str(), mode)</tt>.
</p>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>
</issue>
