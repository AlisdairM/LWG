<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3141" status="New">
<title><tt>CopyConstructible</tt> doesn't preserve source values</title>
<section><sref ref="[concepts.object]"/></section>
<submitter>Casey Carter</submitter>
<date>7 Jul 2018</date>
<priority>2</priority>

<discussion>

<p>
The design intent of the <tt>CopyConstructible</tt> concept has always been that the source of the
constructions it requires be left unmodified. Before <a href="https://wg21.link/p0541r1">P0541R1</a>
reformulated the <tt>Constructible</tt> concept in terms of <tt>is_constructible</tt>, the wording
which is now in <sref ref="[concepts.equality]"/>/5:
<blockquote>
This document uses a notational convention to specify which expressions declared in a
<i>requires-expression</i> modify which inputs: except where otherwise specified, [&hellip;] Operands that
are constant lvalues or rvalues are required to not be modified.
</blockquote>
indirectly enforced that requirement. Unfortunately, <em>nothing</em> in the current wording in
<sref ref="[concept.copyconstructible]"/> enforces that requirement.
</p>

<note>2018-11 Reflector prioritization</note>
<p>Set Priority to 2</p>

<strong>Previous resolution: [SUPERSEDED]</strong>

<blockquote class="note">
<p>This wording is relative to <a href="https://wg21.link/n4762">N4762</a>.</p>

<p>Change <sref ref="[concept.copyconstructible]"/> as indicated:</p>
<blockquote>
<pre>
template&lt;class T&gt;
  concept CopyConstructible =
    MoveConstructible&lt;T&gt; &amp;&amp;
    Constructible&lt;T, T&amp;&gt; &amp;&amp; ConvertibleTo&lt;T&amp;, T&gt; &amp;&amp;
    Constructible&lt;T, const T&amp;&gt; &amp;&amp; ConvertibleTo&lt;const T&amp;, T&gt; &amp;&amp;
    Constructible&lt;T, const T&gt; &amp;&amp; ConvertibleTo&lt;const T, T&gt;;
</pre>
<p>
-1- If <tt>T</tt> is an object type, then let <tt>v</tt> be an lvalue of type (possibly <tt>const</tt>)
<tt>T</tt> or an rvalue of type <tt>const T</tt>. <tt>CopyConstructible&lt;T&gt;</tt> is satisfied
only if
</p><p>
(1.1) &mdash; After the definition <tt>T u = v;</tt>, <tt>u</tt> is equal to <tt>v</tt> <ins>and
<tt>v</tt> is unmodified</ins>.
</p><p>
(1.2) &mdash; <tt>T(v)</tt> is equal to <tt>v</tt> <ins>and does not modify <tt>v</tt></ins>.
</p>
</blockquote>
</blockquote>

<note>2020-02-13 Per LWG review, Casey provides updated P/R wording.</note>

</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4849">N4849</a>.</p>

<p>Change <sref ref="[concept.copyconstructible]"/> as indicated:</p>
<blockquote>
<pre>
template&lt;class T&gt;
  concept copy_constructible =
    move_constructible&lt;T&gt; &amp;&amp;
    constructible_from&lt;T, T&amp;&gt; &amp;&amp; convertible_to&lt;T&amp;, T&gt; &amp;&amp;
    constructible_from&lt;T, const T&amp;&gt; &amp;&amp; convertible_to&lt;const T&amp;, T&gt; &amp;&amp;
    constructible_from&lt;T, const T&gt; &amp;&amp; convertible_to&lt;const T, T&gt;;
</pre>
<p>
-1- If <tt>T</tt> is an object type, then let <tt>v</tt> be an lvalue of type (possibly <tt>const</tt>)
<tt>T</tt> or an rvalue of type <tt>const T</tt>. <tt>T</tt> models <tt>copy_constructible</tt> only if
</p><p>
(1.1) &mdash; After the definition <tt>T u = v;</tt>, <tt>u</tt> is equal to <tt>v</tt> <ins>(<sref ref="[concepts.equality]"/>) and
<tt>v</tt> is not modified</ins>.
</p><p>
(1.2) &mdash; <tt>T(v)</tt> is equal to <tt>v</tt> <ins>and does not modify <tt>v</tt></ins>.
</p>
</blockquote>

</resolution>

</issue>
