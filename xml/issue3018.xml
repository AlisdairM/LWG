<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3018" status="C++20">
<title><tt>shared_ptr</tt> of function type</title>
<section><sref ref="[util.smartptr.shared]"/></section>
<submitter>Agust&iacute;n K-ballo Berg&eacute;</submitter>
<date>13 Sep 2017</date>
<priority>3</priority>

<discussion>
<p>
<tt>shared_ptr</tt> has been designed to support use cases where it owns a pointer to function, and whose deleter 
does something with it. This can be used, for example, to keep a dynamic library loaded for as long as their exported 
functions are referenced.
<p/>
Implementations have overlooked that the <tt>T</tt> in <tt>shared_ptr&lt;T&gt;</tt> can be a function type. It isn't 
immediately obvious from the standard, and it's not possible to tell from the wording that this is intentional.
</p>

<note>2017-11 Albuquerque Wednesday night issues processing</note>
<p>Priority set to 3</p>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>This wording is relative to <a href="https://wg21.link/n4687">N4687</a>.</p>

<ol>
<li><p>Edit <sref ref="[util.smartptr.shared]"/> as indicated:</p>
<blockquote>
<p>
[&hellip;]
<p/>
-2- Specializations of <tt>shared_ptr</tt> shall be <tt>CopyConstructible</tt>, <tt>CopyAssignable</tt>, and 
<tt>LessThanComparable</tt>, allowing their use in standard containers. Specializations of <tt>shared_ptr</tt> shall be 
contextually convertible to <tt>bool</tt>, allowing their use in boolean expressions and declarations in conditions. 
<del>The template parameter <tt>T</tt> of <tt>shared_ptr</tt> may be an incomplete type.</del>
<p/>
<ins>-?- The template parameter <tt>T</tt> of <tt>shared_ptr</tt> may be an incomplete type. <tt>T*</tt> shall be an object 
pointer type or a function pointer type.</ins>
<p/>
[&hellip;]
</p>
</blockquote>
</li>
</ol>
</blockquote>

<note>2020-02-13; Prague</note>
<p>
LWG would prefer to make the new constraint a Mandates-like thing.
</p>

<p><strong>Original resolution [SUPERSEDED]:</strong></p>
<blockquote class = "note">
<p>This wording is relative to <a href="https://wg21.link/n4849">N4849</a>.</p>

<ol>
<li><p>Edit <sref ref="[util.smartptr.shared]"/> as indicated:</p>
<blockquote>
<p>
[&hellip;]
<p/>
-2- Specializations of <tt>shared_ptr</tt> shall be <i>Cpp17CopyConstructible</i>, <i>Cpp17CopyAssignable</i>, and 
<i>Cpp17LessThanComparable</i>, allowing their use in standard containers. Specializations of <tt>shared_ptr</tt> shall be 
contextually convertible to <tt>bool</tt>, allowing their use in boolean expressions and declarations in conditions. 
<del>The template parameter <tt>T</tt> of <tt>shared_ptr</tt> may be an incomplete type.</del>
<p/>
<ins>-?- The template parameter <tt>T</tt> of <tt>shared_ptr</tt> may be an incomplete type. The program is ill-formed
unless <tt>T*</tt> is an object pointer type or a function pointer type.</ins>
<p/>
[&hellip;]
</p>
</blockquote>
</li>
</ol>
</blockquote>

<note>2020-02 Friday AM discussion in Prague.</note>
<p>Marshall provides updated wording; status to Immediate</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4849">N4849</a>.</p>

<ol>
<li><p>Edit <sref ref="[util.smartptr.shared]"/> as indicated:</p>
<blockquote>
<p>
[&hellip;]
<p/>
-2- Specializations of <tt>shared_ptr</tt> shall be <i>Cpp17CopyConstructible</i>, <i>Cpp17CopyAssignable</i>, and 
<i>Cpp17LessThanComparable</i>, allowing their use in standard containers. Specializations of <tt>shared_ptr</tt> shall be 
contextually convertible to <tt>bool</tt>, allowing their use in boolean expressions and declarations in conditions. 
<del>The template parameter <tt>T</tt> of <tt>shared_ptr</tt> may be an incomplete type.</del>
<p/>
<ins>-?- The template parameter <tt>T</tt> of <tt>shared_ptr</tt> may be an incomplete type.
[<i>Note:</i> T may be a function type. <i>-- end note</i>]</ins>
<p/>
[&hellip;]
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
