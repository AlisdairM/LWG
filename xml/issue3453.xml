<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3453" status="New">
<title>Generic code cannot call <tt>ranges::advance(i, s)</tt></title>
<section><sref ref="[range.iter.op.advance]"/><sref ref="[iterator.concept.sentinel]"/></section>
<submitter>Casey Carter</submitter>
<date>18 Jun 2020</date>
<priority>99</priority>

<discussion>
<p>
The specification of the iterator &amp; sentinel overload of <tt>ranges::advance</tt> in <sref ref="[range.iter.op.advance]"/> reads:
</p>
<blockquote style="border-left: 3px solid #ccc;padding-left: 15px;">
<pre>
template&lt;input_or_output_iterator I, sentinel_for&lt;I&gt; S&gt;
  constexpr void ranges::advance(I&amp; i, S bound);
</pre>
<p>
-3- <i>Preconditions:</i> <tt>[i, bound)</tt> denotes a range.
<p/>
-4- <i>Effects:</i>
</p>
<ol style="list-style-type: none">
<li><p>(4.1) &mdash; If <tt>I</tt> and <tt>S</tt> model <tt>assignable_from&lt;I&amp;, S&gt;</tt>, equivalent to 
<tt>i = std::move(bound)</tt>.</p></li>
<li><p>(4.2) &mdash; [&hellip;]</p></li>
</ol>
</blockquote>

<p>
The assignment optimization in bullet 4.1 is just fine for callers with concrete types who can decide whether 
or not to call <tt>advance</tt> depending on the semantics of the assignment performed. However, since this assignment 
operation isn't part of the <tt>input_or_output_iterator</tt> or <tt>sentinel_for</tt> requirements its semantics 
are unknown for arbitrary types. Effectively, generic code is forbidden to call this overload of <tt>advance</tt> when 
<tt>assignable_from&lt;I&amp;, S&gt;</tt> is satisfied and non-generic code must tread lightly. This seems to 
make the library dangerously unusable.

We can correct this problem by either:
</p>
<ol style="list-style-type: upper-alpha">
<li><p>Making the assignment operation in question an optional part of the <tt>sentinel_for</tt> concept with well-defined 
semantics. This concept change should be relatively safe given that <tt>assignable_from&lt;I&amp;, S&gt;</tt> 
requires <tt>common_reference_with&lt;const I&amp;, const S&amp;&gt;</tt>, which is very rarely satisfied 
inadvertently.</p></li>
<li><p>Requiring instead <tt>same_as&lt;I, S&gt;</tt> to trigger the assignment optimization in bullet 4.1 above. 
<tt>S</tt> is <tt>semiregular</tt>, so <tt>i = std::move(s)</tt> is certainly well-formed (and has well-defined 
semantics thanks to <tt>semiregular</tt>) when <tt>I</tt> and <tt>S</tt> are the same type. The optimization will 
not apply in as many cases, but we don't need to make a scary concept change, either.</p></li>
</ol>
</discussion>

<resolution>
<p>
This wording is relative to <a href="http://wg21.link/n4861">N4861</a>. 
<p/>
Wording for both <b>Option A</b> and <b>Option B</b> are provided.
</p>

<p><b>Option A</b>:</p>

<ol>
<li><p>Modify <sref ref="[iterator.concept.sentinel]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class S, class I&gt;
  concept sentinel_for =
    semiregular&lt;S&gt; &amp;&amp;
    input_or_output_iterator&lt;I&gt; &amp;&amp;
    <i>weakly-equality-comparable-with</i>&lt;S, I&gt;; <i>// See <sref ref="[concept.equalitycomparable]"/></i>
</pre>
<blockquote>
<p>
-2- Let <tt>s</tt> and <tt>i</tt> be values of type <tt>S</tt> and <tt>I</tt> such that <tt>[i, s)</tt> denotes a range. 
Types <tt>S</tt> and <tt>I</tt> model <tt>sentinel_for&lt;S, I&gt;</tt> only if
</p>
<ol style="list-style-type: none">
<li><p>(2.1) &mdash; <tt>i == s</tt> is well-defined.</p></li>
<li><p>(2.2) &mdash; If <tt>bool(i != s)</tt> then <tt>i</tt> is dereferenceable and <tt>[++i, s)</tt> denotes a range.</p></li>
<li><p><ins>(2.?) &mdash; <tt>assignable_from&lt;I&amp;, S&gt;</tt> is either modeled or not satisfied.</ins></p></li>
</ol>
</blockquote>
</blockquote>
</li>
</ol>

<p><b>Option B</b>:</p>

<ol>
<li><p>Modify <sref ref="[range.iter.op.advance]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;input_or_output_iterator I, sentinel_for&lt;I&gt; S&gt;
  constexpr void ranges::advance(I&amp; i, S bound);
</pre>
<blockquote>
<p>
-3- <i>Preconditions:</i> <tt>[i, bound)</tt> denotes a range.
<p/>
-4- <i>Effects:</i>
</p>
<ol style="list-style-type: none">
<li><p>(4.1) &mdash; If <tt>I</tt> and <tt>S</tt> model <tt><del>assignable_from&lt;I&amp;, 
S&gt;</del><ins>same_as&lt;I, S&gt;</ins></tt>, equivalent to <tt>i = std::move(bound)</tt>.</p></li>
<li><p>(4.2) &mdash; [&hellip;]</p></li>
</ol>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
