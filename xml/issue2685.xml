<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2685" status="WP">
<title><tt>shared_ptr</tt> deleters must not not throw on move construction</title>
<section><sref ref="[util.smartptr.shared.const]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>3 May 2016</date>
<priority>0</priority>

<discussion>
<p>In <sref ref="[util.smartptr.shared.const]"/> p8 the <tt>shared_ptr</tt> constructors taking
a deleter say:</p>

<blockquote><p>The copy constructor and destructor of <tt>D</tt> shall not throw exceptions.</p></blockquote>

<p>It's been pointed out that this doesn't forbid throwing moves, which
makes it difficult to avoid a leak here:</p>

<p><pre>
struct D {
  D() = default;
  D(const D&amp;) noexcept = default;
  D(D&amp;&amp;) { throw 1; }
  void operator()(int* p) const { delete p; }
};

shared_ptr&lt;int&gt; p{new int, D{}};
</pre></p>

<p>"The copy constructor" should be changed to reflect that the chosen
constructor might not be a copy constructor, and that copies made
using any constructor must not throw.</p>

<p>N.B. the same wording is used for the allocator argument, but that's
redundant because the <tt>Allocator</tt> requirements already forbid exceptions
when copying or moving.
</p>
</discussion>

<resolution>
<p>
[Drafting note: the relevant expressions we're concerned about are
enumerated in the <tt>CopyConstructible</tt> and <tt>MoveConstructible</tt>
requirements, so I see no need to repeat them by saying something
clunky like "Initialization of an object of type <tt>D</tt> from an expression
of type (possibly const) <tt>D</tt> shall not throw exceptions", we can just
refer to them. An alternative would be to define
<tt>NothrowCopyConstructible</tt>, which includes <tt>CopyConstructible</tt> but
requires that construction and destruction do not throw.]
</p>

<p>
Change <sref ref="[util.smartptr.shared.const]"/> p8:
</p>

<blockquote>
<p>
<tt>D</tt> shall be <tt>CopyConstructible</tt> <ins>and such construction shall not
throw exceptions.</ins> The <del>copy constructor and</del> destructor
of <tt>D</tt> shall not throw exceptions.
</p>
</blockquote>

</resolution>

</issue>
