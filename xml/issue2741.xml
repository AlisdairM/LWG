<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2741" status="Open">
<title><tt>is_partitioned</tt> requirements need updating</title>
<section><sref ref="[alg.partitions]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>6 Jul 2016</date>
<priority>3</priority>

<discussion>
<blockquote class="note">
<p>
<i>Requires:</i> <tt>InputIterator</tt>'s value type shall be convertible to <tt>Predicate</tt>'s argument type.
</p>
</blockquote>
<p>
This seems to date from the days of adaptable function objects with an <tt>argument_type</tt> typedef, but in 
modern C++ the predicate might not have an argument type. It could have a function template that accepts various 
arguments, so it doesn't make sense to state requirements in terms of a type that isn't well defined.
</p>

<note>2016-07, Toronto Saturday afternoon issues processing</note>
<p>The proposed resolution needs to be updated because the underlying wording has changed. 
Also, since the sequence is homogeneous, we shouldn't have to say that the expression is well-formed
for all elements in the range; that implies that it need not be well-formed if the range is empty.</p>
<p>Marshall and JW to reword. Status to Open</p>
</discussion>

<resolution>
<p>This wording is relative to N4594.</p>

<ol>
<li><p>Edit <sref ref="[alg.partitions]"/> as indicated:</p>

<blockquote>
<pre>
template &lt;class InputIterator, class Predicate&gt;
bool is_partitioned(InputIterator first, InputIterator last, Predicate pred);
</pre>
<blockquote>
<p>
-1- <i>Requires:</i> <del><tt>InputIterator</tt>'s value type shall be convertible to <tt>Predicate</tt>'s argument 
type</del><ins>The expression <tt>pred(*i)</tt> shall be well-formed for all <tt>i</tt> in <tt>[first, last)</tt></ins>.
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
template &lt;class InputIterator, class OutputIterator1,
          class OutputIterator2, class Predicate&gt;
  pair&lt;OutputIterator1, OutputIterator2&gt;
  partition_copy(InputIterator first, InputIterator last,
                 OutputIterator1 out_true, OutputIterator2 out_false,
                 Predicate pred);
</pre>
<blockquote>
<p>
-12- <i>Requires:</i> <tt>InputIterator</tt>'s value type shall be <tt>CopyAssignable</tt>, and shall be writable 
(<sref ref="[iterator.requirements.general]"/>) to the <tt>out_true</tt> and <tt>out_false</tt> 
<tt>OutputIterator</tt>s, and <del>shall be convertible to <tt>Predicate</tt>'s argument type</del><ins>the
expression <tt>pred(*i)</tt> shall be well-formed for all <tt>i</tt> in <tt>[first, last)</tt></ins>. 
The input range shall not overlap with either of the output ranges.
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
template&lt;class ForwardIterator, class Predicate&gt;
  ForwardIterator partition_point(ForwardIterator first,
                                  ForwardIterator last,
                                  Predicate pred);
</pre>
<blockquote>
<p>
-16- <i>Requires:</i> <del><tt>ForwardIterator</tt>'s value type shall be convertible to <tt>Predicate</tt>'s argument 
type</del><ins>The expression <tt>pred(*i)</tt> shall be well-formed for all <tt>i</tt> in <tt>[first, last)</tt></ins>. 
<tt>[first, last)</tt> shall be partitioned by <tt>pred</tt>, i.e. all elements that satisfy <tt>pred</tt> shall appear 
before those that do not.
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>
</ol>

</resolution>

</issue>
