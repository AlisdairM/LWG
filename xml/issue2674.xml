<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2674" status="WP">
<title>Bidirectional iterator requirement on <code>path::iterator</code>
is very expensive</title>
<section><sref ref="[fs.path.itr]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>15 Sep 2015</date>
<priority>2</priority>

<discussion>
<p>
<sref ref="[fs.path.itr]"/> requires <tt>path::iterator</tt> to be a BidirectionalIterator, which also implies
the ForwardIterator requirement in [forward.iterators] p6 for the following assertion
to pass:
</p>
<blockquote>
<pre>
path p("/");
auto it1 = p.begin();
auto it2 = p.begin();
assert( &amp;*it1 == &amp;*it2 );
</pre>
</blockquote>
<p>This prevents iterators containing a <code>path</code>, or constructing one on the fly when
dereferenced, the object they point to must exist outside the iterators and potentially
outlive them. The only practical way to meet the requirement is for <code>p</code> to hold
a container of child <code>path</code> objects so the iterators can refer to those
children. This makes a <code>path</code> object much larger than would naïvely be
expected.</p>
<p>The Boost and MSVC implementations of Filesystem fail to meet this requirement. The
GCC implementation meets it, but it makes <code>sizeof(path) == 64</code> (for 64-bit) or
<code>sizeof(path) == 40</code> for 32-bit, and makes many path operations
more expensive.</p>

<note>21 Nov 2015 Beman comments:</note>
<p>
The ForwardIterator requirement in
[forward.iterators] "If <tt>a</tt> and <tt>b</tt> are both dereferenceable, then <tt>a == b</tt> if and only if 
<tt>*a</tt> and <tt>*b</tt> are bound to the same object." will be removed by N4560, Working Draft, C++ Extensions for
Ranges. I see no point in requiring something for the File System TS that is expensive,
has never to my knowledge been requested by users, and is going to go away soon anyhow.
The wording I propose below removes the requirement.
</p>

<note><b>Apr 2016 Issue updated to address the C++ Working Paper. Previously addressed File System TS</b></note> 

</discussion>

<resolution>
<p>
This wording is relative to N4582.
</p>

<ol>
<li>
<p>Change <sref ref="[fs.path.itr]"/> paragraph 2:</p>
<blockquote>
<p>A <code>path::iterator</code> is a constant iterator satisfying all the requirements of a bidirectional iterator 
(C++14 §24.1.4 Bidirectional iterators) <ins>except that there is no requirement
that two equal iterators be bound to the same object</ins>. Its <code>value_type</code> is <code>path</code>.</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
