<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2793" status="New">
<title>Awkward conflation of trivial special members of <tt>istream_iterator</tt></title>
<section><sref ref="[istream.iterator.cons]"/></section>
<submitter>Erich Keane</submitter>
<date>9 Nov 2016</date>
<priority>99</priority>

<discussion>
<p>
<b>Addresses GB 68, US 154, US 155</b>
<p/>
The term 'literal type' is dangerous and 
misleading, as text using this term really 
wants to require that a constexpr 
constructor/initialization is called with a 
constant expression, but does not actually 
tie the selected constructor to the type being 
'literal'.
<p/>
Suggested resolution:
<p/>
Verify the uses of the term in the Core and Library specifications and 
replace with something more precise where appropriate.
<p/>
The conflation of trivial copy constructor and literal 
type is awkward. Not all literal types have trivial copy 
constructors, and not all types with trivial copy 
constructors are literal.
<p/>
Suggested resolution:
<p/>
Revise p5 as:
</p>
<blockquote>
<p>
<i>Effects:</i> Constructs a copy of <tt>x</tt>. If <tt>T</tt> has a trivial copy 
constructor, then this constructor shall be a trivial copy constructor.
If <tt>T</tt> has a constexpr copy constructor, then this constructor shall be <tt>constexpr</tt>.
</p>
</blockquote>
<p>
The requirement that the destructor is trivial if <tt>T</tt> is a 
literal type should be generalized to any type <tt>T</tt> with a 
trivial destructor &mdash; this encompasses all literal types, 
as they are required to have a trivial destructor.
<p/>
Suggested resolution:
<p/>
Revise p7 as:
</p>
<blockquote>
<p>
<i>Effects:</i> The iterator is destroyed. If <tt>T</tt> has a trivial 
destructor, then this destructor shall be a trivial destructor.
</p>
</blockquote>

<p>
<strong>Previous resolution [SUPERSEDED]:</strong>
</p>
<blockquote class="note">
<p>This wording is relative to N4606.</p>

<ol>
<li><p>Change <sref ref="[istream.iterator.cons]"/> p1 as indicated:</p>
<blockquote>
<pre>
<i>see below</i> istream_iterator();
</pre>
<blockquote>
<p>
-1- <i>Effects:</i> Constructs the end-of-stream iterator. If <del><tt>T</tt> is a literal 
type</del><ins><tt>is_trivially_constructible_v&lt;T&gt; == true</tt></ins>, then this constructor <del>shall be a</del><ins>is 
a trivial,</ins> <tt>constexpr</tt> constructor.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Change <sref ref="[istream.iterator.cons]"/> p5 as indicated:</p>

<blockquote>
<pre>
istream_iterator(const istream_iterator&amp; x) = default;
</pre>
<blockquote>
<p>
-5- <i>Effects:</i> Constructs a copy of <tt>x</tt>. If <del><tt>T</tt> is a literal 
type</del><ins><tt>is_trivially_copyable_v&lt;T&gt; == true</tt></ins>, then this constructor <del>shall be</del><ins>is</ins> a 
trivial copy constructor.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Change <sref ref="[istream.iterator.cons]"/> p7 as indicated:</p>

<blockquote>
<pre>
~istream_iterator() = default;
</pre>
<blockquote>
<p>
-7- <i>Effects:</i> The iterator is destroyed. If <del><tt>T</tt> is a literal 
type</del><ins><tt>is_trivially_destructible_v&lt;T&gt; == true</tt></ins>, then this destructor <del>shall 
be</del><ins>is</ins> a trivial destructor.
</p>
</blockquote>
</blockquote>
</li>
</ol>

</blockquote>
</discussion>

<resolution>
<p>
Resolve by accepting the wording suggested by <a href="http://wg21.link/p0503r0">P0503R0</a>.
</p>
</resolution>

</issue>
