<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3589" status="New">
<title>The <tt>const</tt> lvalue reference overload of <tt>get</tt> for <tt>subrange</tt> 
does not constrain <tt>I</tt> to be <tt>copyable</tt> when <tt>N == 0</tt></title>
<section><sref ref="[range.subrange]"/></section>
<submitter>Hewill Kang</submitter>
<date>08 Sep 2021</date>
<priority>3</priority>

<discussion>
<p>
The <tt>const</tt> lvalue reference overload of <tt>get</tt> used for <tt>subrange</tt> 
only constraint that <tt>N &lt; 2</tt>, this will cause the "discards qualifiers" error 
inside the function body when applying <tt>get</tt> to the lvalue <tt>subrange</tt> that 
stores a non-<tt>copyable</tt> iterator since its <tt>begin()</tt> is non-<tt>const</tt> 
qualified, we probably need to add a constraint for it.
</p>

<note>2021-09-20; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4892">N4892</a>.
</p>

<ol>
<li><p>Modify <sref ref="[range.subrange]"/> as indicated:</p>

<blockquote>
<pre>
namespace std::ranges {
  [&hellip;]
  template&lt;size_t N, class I, class S, subrange_kind K&gt;
    requires <ins>(</ins>(N <del>&lt; 2</del><ins>== 0 &amp;&amp; copyable&lt;I&gt;) || N == 1</ins>)
    constexpr auto get(const subrange&lt;I, S, K&gt;&amp; r);

  template&lt;size_t N, class I, class S, subrange_kind K&gt;
    requires (N &lt; 2)
    constexpr auto get(subrange&lt;I, S, K&gt;&amp;&amp; r);
}
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.subrange.access]"/> as indicated:</p>

<blockquote>
<pre>
  [&hellip;]
  template&lt;size_t N, class I, class S, subrange_kind K&gt;
    requires <ins>(</ins>(N <del>&lt; 2</del><ins>== 0 &amp;&amp; copyable&lt;I&gt;) || N == 1</ins>)
    constexpr auto get(const subrange&lt;I, S, K&gt;&amp; r);
  template&lt;size_t N, class I, class S, subrange_kind K&gt;
    requires (N &lt; 2)
    constexpr auto get(subrange&lt;I, S, K&gt;&amp;&amp; r);
</pre>
<blockquote>
<p>
-10- <i>Effects</i>: Equivalent to:
</p>
<pre>
if constexpr (N == 0)
  return r.begin();
else
  return r.end();
</pre>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
