<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3917" status="New">
<title>Validity of <tt>allocator&lt;void&gt;</tt> and possibly <tt>polymorphic_allocator&lt;void&gt;</tt> should be clarified</title>
<section><sref ref="[default.allocator]"/><sref ref="[mem.poly.allocator.class]"/></section>
<submitter>Daniel Kr&uuml;gler</submitter>
<date>8 Apr 2023</date>
<priority>99</priority>

<discussion>
<p>
Before <paper num="P0174"/> had been approved for the working paper, the validity of using <tt>void</tt> as template argument for
<tt>std::allocator</tt> was obvious due to the existing specification of the explicit specialization <tt>allocator&lt;void&gt;</tt>.
<p/>
This specialization was first moved to Annex D ([depr.default.allocator]) and later completely eradicated from the working paper via
adoption of <paper num="P0619"/>.
<p/>
The problem is that, since then, we have no explicit wording for <tt>std::allocator</tt> to support <tt>void</tt> as template argument 
any more. We fall now under the constraints for template "components" specified in <sref ref="[res.on.functions]"/> bullet 2.5.
</p>
<blockquote><p>
-2- In particular, the behavior is undefined in the following cases:
</p>
<ol style="list-style-type: none">
<li><p>[&hellip;]</p></li>
<li><p>(2.5) &mdash; If an incomplete type (<sref ref="[basic.types.general]"/>) is used as a template argument when instantiating a 
template component or evaluating a concept, unless specifically allowed for that component.</p></li>
</ol>
</blockquote>
<p>
But no such allowance wording exists for <tt>allocator&lt;void&gt;</tt> nor for <tt>polymorphic_allocator&lt;void&gt;</tt>, more
to the contrary, <sref ref="[allocator.requirements.general]"/> only refers to <i>cv</i>-unqualified object types as value types
and <tt>void</tt> is not an object type.
<p/>
Now we could argue that the wording is clear that instantiations of these are invalid, but there exists at least some indication
that the instantiations are intended to be allowed.
<p/>
As of <sref ref="[coro.generator.promise]"/> bullet (17.3) the static <tt>operator new</tt> members of <tt>std::generator</tt>
mention a fall-back of using <tt>allocator&lt;void&gt;</tt>.
<p/>
<sref ref="[default.allocator.general]"/> says that all specializations of the default allocator meet the allocator completeness 
requirements (<sref ref="[allocator.requirements.completeness]"/>), but albeit this specification does not specifically exclude 
the existence of an incomplete value type, the wording here does also not provide a definite statement, that it is valid (The 
wording originally was provided when we started adding support for (yet) incomplete value types that at some point later will become
complete, but <tt>void</tt> can never be completed), since it is mostly focused on the completeness requirement for the allocator
type itself.
<p/>
The situation is similar (albeit maybe not that strong) for <tt>polymorphic_allocator&lt;void&gt;</tt>, since
<sref ref="[mem.poly.allocator.class]"/> p1 has some unusual wording form that says
</p>
<blockquote><p>
-1- A specialization of class template <tt>pmr::polymorphic_allocator</tt> meets the <i>Cpp17Allocator</i> requirements
(<sref ref="[allocator.requirements.general]"/>) if its template argument is a <i>cv</i>-unqualified object type.
</p></blockquote>
<p>
and says then in p2:
</p>
<blockquote><p>
-2- A specialization of class template <tt>pmr::polymorphic_allocator</tt> meets the allocator completeness requirements
(<sref ref="[allocator.requirements.completeness]"/>) if its template argument is a <i>cv</i>-unqualified object type.
</p></blockquote>
<p>
Again, this wording is not conclusive, whether <tt>void</tt> is intended to be supported, it is certainly not completely ruled
out, but that is not strong enough to counterpart <sref ref="[res.on.functions]"/> (2.5). It is maybe worth pointing out that
for a while we were considering to use <tt>void</tt> as default template argument for <tt>pmr::polymorphic_allocator</tt>,
see e.g. <paper num="P0339r0"/>, but that thought was later replaced by deciding for <tt>std::byte</tt> instead, which
is a complete object type.
<p/>
I assume that at least the intention exists that <tt>std::allocator</tt> is intended to support incomplete types, maybe also
for <tt>polymorphic_allocator</tt>. If <tt>polymorphic_allocator</tt> is intended to support incomplete types as well,
we should also amend <sref ref="[mem.poly.allocator.mem]"/> p1 and p8 with a <i>Mandates:</i> element similarly as we did 
for <tt>std::allocator</tt> via LWG <iref ref="3307"/>.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4944"/>.
</p>

<ol>
<li>
<p>Add the following new paragraph at the end of <sref ref="[default.allocator.general]"/> as indicated:</p>

<blockquote>
<p>
-2- <tt>allocator_traits&lt;allocator&lt;T&gt;&gt;::is_always_equal::value</tt> is <tt>true</tt> for any <tt>T</tt>.
<p/>
<ins>-?- The template parameter <tt>T</tt> of <tt>allocator</tt> may be an incomplete type.</ins>
</p>
</blockquote>
</li>

<li>
<p>Add the following new paragraph at the end of <sref ref="[mem.poly.allocator.class.general]"/> (possibly just after
the class template synopsis) as indicated:</p>

<blockquote>
<p>
<ins>-?- The template parameter <tt>Tp</tt> of <tt>polymorphic_allocator</tt> may be an incomplete type.</ins>
</p>
</blockquote>
</li>

<li>
<p>Modify <sref ref="[mem.poly.allocator.mem]"/> as indicated:</p>

<blockquote class="note">
<p>
[<i>Drafting note:</i> The reference to <tt>sizeof(Tp)</tt> gives indirect evidence that we want to exclude incomplete types
here, but we cannot rely on the "equivalent to" magic formula, because that is defined conditionally]
</p>
</blockquote>

<blockquote>
<pre>
[[nodiscard]] Tp* allocate(size_t n);
</pre>
<blockquote>
<p>
<ins>-?- <i>Mandates:</i> <tt>Tp</tt> is not an incomplete type (<sref ref="[basic.types.general]"/>).</ins>
<p/>
-1- <i>Effects:</i> If <tt>numeric_limits&lt;size_t&gt;::max() / sizeof(Tp) &lt; n</tt>, throws <tt>bad_array_new_length</tt>.
Otherwise equivalent to:
</p>
<blockquote><pre>
return static_cast&lt;Tp*&gt;(memory_rsrc-&gt;allocate(n * sizeof(Tp), alignof(Tp)));
</pre></blockquote>
</blockquote>

<blockquote class="note">
<p>
[<i>Drafting note:</i> We don't need extra wording for the member templates <tt>allocate_object</tt>, <tt>deallocate_object</tt>,
<tt>new_object</tt>, <tt>delete_object</tt>, or <tt>construct</tt>, because their semantics does not depend on template parameter
<tt>Tp</tt> and the general wording of <sref ref="[res.on.functions]"/> (2.5) again requires the completeness of <tt>T</tt> here.
<p/>
For <tt>deallocate</tt> we also omit the completeness requirement (as we did so for <tt>allocator::deallocate</tt>), because 
this is indirectly implied by the existing precondition. ]
</p>
</blockquote>

</blockquote>
</li>
</ol>
</resolution>

</issue>
