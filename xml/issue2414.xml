<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2414" status="New">
<title>Member function reentrancy should be implementation-defined</title>
<section><sref ref="[reentrancy]"/></section>
<submitter>Stephan T. Lavavej</submitter>
<date>1 Jul 2014</date>
<priority>3</priority>

<discussion>
<p>
N3936 <sref ref="[reentrancy]"/>/1 talks about "functions", but that doesn't address the scenario of calling different member 
functions of a single object. Member functions often have to violate and then re-establish invariants. For example, vectors 
often have "holes" during insertion, and element constructors/destructors/etc. shouldn't be allowed to observe the vector 
while it's in this invariant-violating state. The [reentrancy] Standardese should be extended to cover member functions, 
so that implementers can either say that member function reentrancy is universally prohibited, or selectively allowed for 
very specific scenarios.
<p/>
(For clarity, this issue has been split off from LWG <iref ref="2382"/>.)
</p>

<note>2014/11/03 Urbana</note>
<p>
AJM confirmed with SG1 that they had no special concerns with this issue, and LWG should retain ownership.
</p>

</discussion>

<resolution>
<p>This wording is relative to N3936.</p>

<ol>
<li><p>Change <sref ref="[reentrancy]"/> p1 as indicated:</p>
<blockquote>
<p>
-1- Except where explicitly specified in this standard, it is implementation-defined which functions <ins>(including different 
member functions called on a single object)</ins> in the Standard C++ library may be recursively reentered.
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
