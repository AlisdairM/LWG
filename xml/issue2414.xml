<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [
  <!ENTITY nbsp "&#160;">
] >

<issue num="2414" status="Open">
<title>Member function reentrancy should be implementation-defined</title>
<section><sref ref="[reentrancy]"/></section>
<submitter>Stephan T. Lavavej</submitter>
<date>1 Jul 2014</date>
<priority>3</priority>

<discussion>
<p>
N3936 <sref ref="[reentrancy]"/>/1 talks about "functions", but that doesn't address the scenario of calling different member
functions of a single object. Member functions often have to violate and then re-establish invariants. For example, vectors
often have "holes" during insertion, and element constructors/destructors/etc. shouldn't be allowed to observe the vector
while it's in this invariant-violating state. The [reentrancy] Standardese should be extended to cover member functions,
so that implementers can either say that member function reentrancy is universally prohibited, or selectively allowed for
very specific scenarios.
<p/>
(For clarity, this issue has been split off from LWG <iref ref="2382"/>.)
</p>

<note>2014-11-03 Urbana</note>
<p>
AJM confirmed with SG1 that they had no special concerns with this issue, and LWG should retain ownership.
<p/>
AM: this is too overly broad as it also covers calling the exact same member function on a different object<br/>
STL: so you insert into a map, and copying the value triggers another insertion into a different map of the same type<br/>
GR: reentrancy seems to imply the single-threaded case, but needs to consider the multi-threaded case
<p/>
Needs more wording.
</p>
<p>
Move to Open
</p>

<note>2015-07 Telecon Urbana</note>
<p>Marshall to ping STL for updated wording.<br/></p>

<note>2016-05 email from STL</note>
<p>I don't have any better suggestions than my original PR at the moment.</p>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">

<p>This wording is relative to N3936.</p>

<ol>
<li><p>Change <sref ref="[reentrancy]"/> p1 as indicated:</p>
<blockquote>
<p>
-1- Except where explicitly specified in this standard, it is implementation-defined which functions <ins>(including different
member functions called on a single object)</ins> in the Standard C++ library may be recursively reentered.
</p>
</blockquote>
</li>
</ol>
</blockquote>

<note>2021-07-29 Tim suggests new wording</note>
<p>
The "<tt>this</tt> pointer" restriction is modeled on <sref ref="[class.cdtor]"/> p2.
It allows us to continue to specify a member function <tt>f</tt> as calling some other
member function <tt>g</tt>, since any such call would use something obtained
from the first member function's <tt>this</tt> pointer.
<p/>
In all other cases, this wording disallows such "recursion on object" unless both
member functions are <tt>const</tt> (or are treated as such for the
purposes of data race avoidance). Using "access" means that we also cover direct
access to the object representation, such as the following pathological example
<a href="https://quuxplusone.github.io/blog/2021/04/17/pathological-string-appends/">from Arthur O'Dwyer</a>,
which is now undefined:
</p>
<blockquote>
<pre>
std::string s = "hello world";
char *first = (char*)&amp;s;
char *last = (char*)(&amp;s + 1);
s.append(first, last);
</pre>
</blockquote>
</discussion>

<resolution>
<p>This wording is relative to <paper num="N4892"/>.</p>

<ol>
<li><p>Add the following paragraph to <sref ref="[reentrancy]"/>:</p>
<blockquote>
<p>
<ins>-?- During the execution of a standard library non-static member function <i>F</i> on an object,
if that object is accessed through a glvalue that is not obtained, directly or indirectly, from
the <tt>this</tt> pointer of <i>F</i>, in a manner that can conflict (<sref ref="[intro.races]"/>)
with any access that <i>F</i> is permitted to perform (<sref ref="[res.on.data.races]"/>),
the behavior is undefined unless otherwise specified.</ins>
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
