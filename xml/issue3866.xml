<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3866" status="C++23">
<title>Bad <i>Mandates</i> for <tt>expected::transform_error</tt> overloads</title>
<section><sref ref="[expected.object.monadic]"/><sref ref="[expected.void.monadic]"/></section>
<submitter>Casey Carter</submitter>
<date>29 Jan 2023</date>
<priority>99</priority>

<discussion>
<p>
The overloads of <tt>expected::transform_error</tt> mandate that "[type] <tt>G</tt> is a valid value type for <tt>expected</tt>" 
(<sref ref="[expected.object.monadic]"/>/27 and 31 as well as <sref ref="[expected.void.monadic]"/>/24 and 27)). 
<p/>
All of these overloads then instantiate <tt>expected&lt;T, G&gt;</tt> (for some type <tt>T</tt>) which doesn't require 
<tt>G</tt> to be a valid value type for <tt>expected</tt> (<sref ref="[expected.object.general]"/>/2) but instead requires 
that <tt>G</tt> is "a valid template argument for <tt>unexpected</tt>" (<sref ref="[expected.object.general]"/>/2). 
Comparing <sref ref="[expected.object.general]"/>/2 with <sref ref="[expected.un.general]"/>/2 it's clear that there are 
types &mdash; <tt>const int</tt>, for example &mdash; which are valid value types for <tt>expected</tt> but not valid 
template arguments for <tt>unexpected</tt>. Presumably this unimplementable requirement is a typo, and the subject 
paragraphs intended to require that <tt>G</tt> be a valid template argument for <tt>unexpected</tt>. 
</p>

<note>2023-02-06; Reflector poll</note>
<p>
Set status to Tentatively Ready after five votes in favour during reflector poll.
</p>

<note>2023-02-13 Approved at February 2023 meeting in Issaquah. Status changed: Voting &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4928"/>.
</p>

<ol>
<li><p>Modify <sref ref="[expected.object.monadic]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class F&gt; constexpr auto transform_error(F&amp;&amp; f) &amp;;
template&lt;class F&gt; constexpr auto transform_error(F&amp;&amp; f) const &amp;;
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-27- <i>Mandates</i>: <tt>G</tt> is a valid <del>value type for <tt>expected</tt></del><ins>template argument for 
<tt>unexpected</tt> (<sref ref="[expected.un.general]"/>)</ins> and the declaration
</p>
<blockquote><pre>
G g(invoke(std::forward&lt;F&gt;(f), error()));
</pre></blockquote>
<p>
is well-formed.
<p/>
[&hellip;]
</p>
</blockquote>
[&hellip;]
<pre>
template&lt;class F&gt; constexpr auto transform_error(F&amp;&amp; f) &amp;&amp;;
template&lt;class F&gt; constexpr auto transform_error(F&amp;&amp; f) const &amp;&amp;;
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-31- <i>Mandates</i>: <tt>G</tt> is a valid <del>value type for <tt>expected</tt></del><ins>template argument for 
<tt>unexpected</tt> (<sref ref="[expected.un.general]"/>)</ins> and the declaration
</p>
<blockquote><pre>
G g(invoke(std::forward&lt;F&gt;(f), std::move(error())));
</pre></blockquote>
<p>
is well-formed.
<p/>
[&hellip;]
</p>
</blockquote>

</blockquote>
</li>

<li><p>Modify <sref ref="[expected.void.monadic]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class F&gt; constexpr auto transform_error(F&amp;&amp; f) &amp;;
template&lt;class F&gt; constexpr auto transform_error(F&amp;&amp; f) const &amp;;
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-24- <i>Mandates</i>: <tt>G</tt> is a valid <del>value type for <tt>expected</tt></del><ins>template argument for 
<tt>unexpected</tt> (<sref ref="[expected.un.general]"/>)</ins> and the declaration
</p>
<blockquote><pre>
G g(invoke(std::forward&lt;F&gt;(f), error()));
</pre></blockquote>
<p>
is well-formed.
<p/>
[&hellip;]
</p>
</blockquote>
[&hellip;]
<pre>
template&lt;class F&gt; constexpr auto transform_error(F&amp;&amp; f) &amp;&amp;;
template&lt;class F&gt; constexpr auto transform_error(F&amp;&amp; f) const &amp;&amp;;
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-27- <i>Mandates</i>: <tt>G</tt> is a valid <del>value type for <tt>expected</tt></del><ins>template argument for 
<tt>unexpected</tt> (<sref ref="[expected.un.general]"/>)</ins> and the declaration
</p>
<blockquote><pre>
G g(invoke(std::forward&lt;F&gt;(f), std::move(error())));
</pre></blockquote>
<p>
is well-formed.
<p/>
[&hellip;]
</p>
</blockquote>

</blockquote>
</li>

</ol></resolution>

</issue>
