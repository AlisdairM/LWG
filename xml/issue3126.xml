<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3126" status="New">
<title>There's no <tt>std::sub_match::compare(string_view)</tt> overload</title>
<section><sref ref="[re.submatch]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>26 Jun 2018</date>
<priority>3</priority>

<discussion>
<p>
<tt>std::sub_match::compare</tt> can be called with a <tt>basic_string</tt> or a pointer to a null-terminated
character sequence, but can't be called with a <tt>basic_string_view</tt>. To compare to a <tt>string_view</tt>
requires either conversion to <tt>basic_string</tt> (with a potential allocation) or a redundant call to
<tt>traits_type::length</tt> to calculate a length that is already known.
</p>

<note>2018-07-02, Jonathan comments and completes proposed wording</note>
<p>
To make the relational and equality operators for <tt>sub_match</tt> support string views I propose specifying
the semantics, not adding another 12 overloaded operators to namespace <tt>std</tt>, in addition to the 42
already there. This allows them to be implemented as "hidden friends" if the implementation so desires, or to
retain namespace-scope declaration if backwards compatibility with C++11 - C++17 is preferred.
</p>

<note>2018-07-20 Priority set to 3 after reflector discussion</note>
</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4750">N4750</a>.
</p>

<ol>
<li>
<p>Change <sref ref="[re.syn]"/>, header <tt>&lt;regex&gt;</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
#include &lt;initializer_list&gt;

namespace std {
  [&hellip;]
  using csub_match = sub_match&lt;const char*&gt;;
  using wcsub_match = sub_match&lt;const wchar_t*&gt;;
  using ssub_match = sub_match&lt;string::const_iterator&gt;;
  using wssub_match = sub_match&lt;wstring::const_iterator&gt;;

  <del><i>// <sref ref="[re.submatch.op]"/>, sub_match non-member operators</i>
  template&lt;class BiIter&gt;
  bool operator==(const sub_match&lt;BiIter&gt;&amp; lhs, const sub_match&lt;BiIter&gt;&amp; rhs);
  [&hellip;]
  template&lt;class BiIter&gt;
    bool operator&gt;=(const sub_match&lt;BiIter&gt;&amp; lhs,
                   const typename iterator_traits&lt;BiIter&gt;::value_type&amp; rhs);</del>

  template&lt;class charT, class ST, class BiIter&gt;
  basic_ostream&lt;charT, ST&gt;&amp;
  operator&lt;&lt;(basic_ostream&lt;charT, ST&gt;&amp; os, const sub_match&lt;BiIter&gt;&amp; m);
  [&hellip;]
}
</pre>
</blockquote>
</li>

<li>
<p>Change <sref ref="[re.submatch]"/>, class template <tt>sub_match</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
namespace std {
  template&lt;class BidirectionalIterator&gt;
  class sub_match : public pair&lt;BidirectionalIterator, BidirectionalIterator&gt; {
  public:
    using value_type =
      typename iterator_traits&lt;BidirectionalIterator&gt;::value_type;
    [&hellip;]
    int compare(const sub_match&amp; s) const;
    int compare(const string_type&amp; s) const;
    int compare(const value_type* s) const;
    <ins>int compare(basic_string_view&lt;value_type&gt; s) const;</ins>
  };
}
</pre>
</blockquote>
</li>

<li>
<p>Change <sref ref="[re.submatch.members]"/> as indicated:</p>

<blockquote>
<pre>
int compare(const value_type* s) const;
</pre>
<blockquote>
<p>
-7- <i>Returns:</i> <tt>str().compare(s)</tt>.
</p>
</blockquote>
<pre>
<ins>int compare(basic_string_view&lt;value_type&gt; s) const;</ins>
</pre>
<blockquote>
<p>
<ins>-?- <i>Returns:</i> <tt>str().compare(s)</tt>.</ins>
</p>
</blockquote>
</blockquote>
</li>

<li>
<p>Change sub-clause <sref ref="[re.submatch.op]"/> as indicated:</p>

<blockquote>
<p>
<b>31.9.2 <tt>sub_match</tt> non-member operators [re.submatch.op]</b>
</p>
<pre><del>template&lt;class BiIter&gt;
bool operator==(const sub_match&lt;BiIter&gt;&amp; lhs, const sub_match&lt;BiIter&gt;&amp; rhs);</del></pre>
<blockquote>
<p>
<del>-1- <i>Returns:</i> <tt>lhs.compare(rhs) == 0</tt>.</del>
</p>
</blockquote>
<del>[&hellip;]</del>
<pre>
<del>template&lt;class BiIter&gt;
  bool operator&gt;=(const sub_match&lt;BiIter&gt;&amp; lhs,
    const typename iterator_traits&lt;BiIter&gt;::value_type&amp; rhs);</del></pre>
<blockquote>
<p>
<del>-42- <i>Returns:</i> <tt>!(lhs &lt; rhs)</tt>.</del>
</p>
</blockquote>
<pre>
template&lt;class charT, class ST, class BiIter&gt;
  basic_ostream&lt;charT, ST&gt;&amp;
    operator&lt;&lt;(basic_ostream&lt;charT, ST&gt;&amp; os, const sub_match&lt;BiIter&gt;&amp; m);</pre>
<blockquote>
<p>
-43- <i>Returns:</i> <tt>os &lt;&lt; m.str()</tt>.
</p>
</blockquote>
<p>
<ins>Class template <tt>sub_match</tt> provides overloaded relational operators (<sref ref="[expr.rel]"/>) and
equality operators (<sref ref="[expr.eq]"/>) for comparisons with another <tt>sub_match</tt>, with a <tt>string</tt>,
or with a single character. The expressions shown in Table ?? are valid when one of the operands is a type <tt>S</tt>,
that is a specialization of <tt>sub_match</tt>, and the other expression is one of:</ins>
</p>
<ol style="list-style-type: none">
<li><p><ins>(?.?) &mdash; a value <tt>x</tt> of a type <tt>S</tt>, in which case <tt><i>STR</i>(x)</tt> is
<tt>x.str()</tt>;</ins></p></li>
<li><p><ins>(?.?) &mdash; a value <tt>x</tt> of type <tt>basic_string&lt;S::value_type, T, A&gt;</tt> for any types
<tt>T</tt> and <tt>A</tt>, in which case <tt><i>STR</i>(x)</tt> is
<tt>basic_string_view&lt;S::value_type&gt;(x.data(), x.length())</tt>;</ins></p></li>
<li><p><ins>(?.?) &mdash; a value <tt>x</tt> of type <tt>basic_string_view&lt;S::value_type, T&gt;</tt> for
any type <tt>T</tt>, in which case <tt><i>STR</i>(x)</tt> is
<tt>basic_string_view&lt;S::value_type&gt;(x.data(), x.length())</tt>;</ins></p></li>
<li><p><ins>(?.?) &mdash; a value <tt>x</tt> of a type convertible to <tt>const S::value_type*</tt>, in which
case <tt><i>STR</i>(x)</tt> is <tt>basic_string_view&lt;S::value_type&gt;(x)</tt>;</ins></p></li>
<li><p><ins>(?.?) &mdash; a value <tt>x</tt> of type convertible to <tt>S::value_type</tt>, in which case
<tt><i>STR</i>(x)</tt> is <tt>basic_string_view&lt;S::value_type&gt;(&amp;x, 1)</tt>.</ins></p></li>
</ol>
<table border="1">
<caption><ins>Table ?? &mdash; <tt>sub_match</tt> comparisons</ins></caption>
<tr style="text-align:center">
<th><ins>Expression</ins></th>
<th><ins>Return type</ins></th>
<th><ins>Operational<br/>semantics</ins></th>
</tr>
<tr>
<td>
<ins><tt>s == t</tt></ins>
</td>
<td>
<ins><tt>bool</tt></ins>
</td>
<td>
<ins><tt><i>STR</i>(s).compare(<i>STR</i>(t)) == 0</tt></ins>
</td>
</tr>
<tr>
<td>
<ins><tt>s != t</tt></ins>
</td>
<td>
<ins><tt>bool</tt></ins>
</td>
<td>
<ins><tt><i>STR</i>(s).compare(<i>STR</i>(t)) != 0</tt></ins>
</td>
</tr>
<tr>
<td>
<ins><tt>s &lt; t</tt></ins>
</td>
<td>
<ins><tt>bool</tt></ins>
</td>
<td>
<ins><tt><i>STR</i>(s).compare(<i>STR</i>(t)) &lt; 0</tt></ins>
</td>
</tr>
<tr>
<td>
<ins><tt>s &gt; t</tt></ins>
</td>
<td>
<ins><tt>bool</tt></ins>
</td>
<td>
<ins><tt><i>STR</i>(s).compare(<i>STR</i>(t)) &gt; 0</tt></ins>
</td>
</tr>
<tr>
<td>
<ins><tt>s &lt;= t</tt></ins>
</td>
<td>
<ins><tt>bool</tt></ins>
</td>
<td>
<ins><tt><i>STR</i>(s).compare(<i>STR</i>(t)) &lt;= 0</tt></ins>
</td>
</tr>
<tr>
<td>
<ins><tt>s &gt;= t</tt></ins>
</td>
<td>
<ins><tt>bool</tt></ins>
</td>
<td>
<ins><tt><i>STR</i>(s).compare(<i>STR</i>(t)) &gt;= 0</tt></ins>
</td>
</tr>
</table>

</blockquote>
</li>

</ol>
</resolution>

</issue>
