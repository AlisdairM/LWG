<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3466" status="New">
<title>Specify the requirements for <tt>promise</tt>/<tt>future</tt>/<tt>shared_future</tt> consistently</title>
<section><sref ref="[futures.promise]"/></section>
<submitter>Tomasz Kami&nacute;ski</submitter>
<date>18 Jul 2020</date>
<priority>3</priority>

<discussion>
<p>
The resolution of the LWG <iref ref="3458"/> clearly specified the requirement that
<tt>future</tt>/<tt>shared_future</tt> are ill-formed in situations when <tt>T</tt> is native array
or function type. This requirement was not strictly necessary for <tt>future&lt;T&gt;</tt> 
as it was already ill-formed due the signature of the <tt>get</tt> function (that would be 
ill-formed in such case), however it was still added for consistency of specification.
Similar, requirement should be introduced for the <tt>promise&lt;T&gt;</tt>, for which
any call to <tt>get_future()</tt> would be ill-formed, if <tt>T</tt> is of array or function type.
<p/>
[Note: <tt>promise&lt;int[10]&gt;</tt> is ill-formed for libstdc++ and libc++, see
<a href="https://godbolt.org/z/ffTW99">this code</a>]
</p>

<note>2020-07-26; Reflector prioritization</note>
<p>
Set priority to 3 after reflector discussions. Tim Song made the suggestion to replace the P/R wording
by the following alternative wording:
</p>
<blockquote><p>
<ins>For the primary template, <tt>R</tt> shall be an object type that meets the <i>Cpp17Destructible</i> requirements.</ins>
</p></blockquote>
</discussion>

<resolution>
<p>
This wording is relative to <a href="http://wg21.link/n4861">N4861</a>. 
</p>

<blockquote class="note">
<p>
Ideally the wording below would use a <i>Mandates:</i> element, but due to the still open
issue LWG <iref ref="3193"/> the wording below uses instead the more general "ill-formed"
vocabulary.
</p>
</blockquote>

<ol>
<li><p>Modify <sref ref="[futures.promise]"/> as indicated:</p>

<blockquote>
<blockquote>
<pre>
namespace std {
  template&lt;class R&gt;
  class promise {
    [&hellip;]
  };
  [&hellip;]
}
</pre>
</blockquote>
<p>
<ins>-?- If <tt>is_array_v&lt;R&gt;</tt> is <tt>true</tt> or <tt>is_function_v&lt;R&gt;</tt> is <tt>true</tt>, 
the program is ill-formed.</ins>
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
