<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3394" status="New">
<title><tt>ranges::basic_istream_view::<i>iterator</i></tt> has an empty <tt>iterator_traits</tt></title>
<section><sref ref="[range.istream.iterator]"/></section>
<submitter>Patrick Palka</submitter>
<date>9 Feb 2020</date>
<priority>2</priority>

<discussion>
<p>
Every instantiation of <tt>ranges::basic_istream_view::<i>iterator</i></tt> has an empty
<tt>iterator_traits</tt>, i.e. the type
</p>
<blockquote><pre>
iterator_traits&lt;ranges::basic_istream_view&lt;Val, CharT, Traits&gt;::iterator&gt;
</pre></blockquote>
<p>
has no members.
<p/>
This happens because <tt>basic_istream_view::<i>iterator</i></tt> neither models
<tt><i>cpp17-iterator</i></tt> (since this concept requires copyability, which this
iterator is by design not) nor does it define all four of the member
types <tt>difference_type</tt>, <tt>value_type</tt>, <tt>reference</tt>, and 
<tt>iterator_category</tt> (it is missing <tt>reference</tt>). Therefore by 
<sref ref="[iterator.traits]"/> p3, this iterator's specialization of 
<tt>iterator_traits</tt> will be empty if generated from the 
<tt>iterator_traits</tt> primary template.
<p/>
Since <tt>basic_istream_view::iterator</tt> is indeed an iterator, its
<tt>iterator_traits</tt> should certainly not be empty. The simplest solution
here is to define the member type <tt>reference</tt> in the definition of
<tt>basic_istream_view::iterator</tt>, which will enable its <tt>iterator_traits</tt>
specialization to be appropriately populated from the primary template.
</p>

<note>2020-02-10; Jonathan comments</note>
<p>
Jonathan and Casey have concerns about the proposed resolution. Casey: The wording makes it look
as if this iterator is supposed to be an <tt><i>cpp17-input-iterator</i></tt>.
<p/>
See also LWG <iref ref="3283"/> and  <iref ref="3289"/>.
</p>

<note>2020-02 Prioritized as P2 Monday morning in Prague</note>

<strong>Previous resolution [SUPERSEDED]:</strong>
<blockquote class="note">
<p>This wording is relative to <a href="https://wg21.link/n4849">N4849</a>.</p>

<ol>
<li><p>Modify <sref ref="[range.istream.iterator]"/>, class template 
<tt>basic_istream_view::<i>iterator</i></tt> synopsis, as indicated:</p>

<blockquote>
<pre>
namespace std::ranges {
  template&lt;class Val, class CharT, class Traits&gt;
  class basic_istream_view&lt;Val, CharT, Traits&gt;::<i>iterator</i> { <i>// exposition only</i>
  public:
    using iterator_category = input_iterator_tag;
    using difference_type = ptrdiff_t;
    using value_type = Val;
    <ins>using reference = Val&amp;;</ins>

    <i>iterator</i>() = default;
    [&hellip;]
  };
}
</pre>
</blockquote>
</li>

</ol>
</blockquote>

<note>2020-02-13, Prague</note>
<p>
LWG decided for NAD: The <tt>ranges::basic_istream_view::iterator</tt> is a move-only type 
and thus cannot meet the <i>Cpp17</i> requirements (even <tt>output_iterator_tag</tt>), as such it should not 
specialize <tt>iterator_traits</tt>, to avoid misleading results when it is passed to new algorithms.
<p/>
A related issue, LWG <iref ref="3397"/>, is supposed to take care for a problem with the definition of the
<tt>iterator_category</tt> member type of this template.
</p>
</discussion>

<resolution>
</resolution>

</issue>
