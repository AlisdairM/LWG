<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3531" status="New">
<title>LWG 3025 broke previous valid code</title>
<section><sref ref="[map.overview]"/><sref ref="[multimap.overview]"/>
<sref ref="[unord.map.overview]"/><sref ref="[unord.multimap.overview]"/></section>
<submitter>Mike Spertus</submitter>
<date>9 Mar 2021</date>
<priority>3</priority>

<discussion>
<p>
The resolution for LWG <iref ref="3025"/> enabled code like the following to be accepted:
</p>
<blockquote><pre>
map m1{{pair{1, 2}, {3, 4}}, less&lt;int&gt;()};
</pre></blockquote>
<p>
but breaks code that had been previously working like the following
</p>
<blockquote><pre>
using value_type = pair&lt;const int, int&gt;;

map m2{{value_type{1, 2}, {3, 4}}, less&lt;int&gt;()};
</pre></blockquote>
<p>
as shown <a href="https://godbolt.org/z/rz3fb9">on godbolt</a>.
<p/>
[Acknowledgment to Tim Song and Arthur O'Dwyer for independently pointing out this case on the LWG mailing list]
</p>

<note>2021-04-20; Reflector poll</note>
<p>
Priority set to 3. Three preferences expressed for Option B, none for A.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4878">N4878</a>.
</p>

<blockquote class="note">
<p>
We present two <em>partial</em> wording options for <tt>std::map</tt>, denoted by <b>(A)</b> and <b>(B)</b> below. 
If the committee accepts one of them, we will complete them to all key-value containers.
</p>
</blockquote>

<ol style="list-style-type: none">
<li><p><b>(A)</b> Wording option 1: In this option, we restore the deduction guide that was removed in LWG 
<iref ref="3025"/> while maintaining the one that was added, <a href="https://godbolt.org/z/j74n9W"/> demonstrates 
this working.</p>
<ol>
<li><p>Modify <sref ref="[map.overview]"/> as indicated:</p>
<blockquote>
<pre>
[&hellip;]
template&lt;class Key, class T, class Compare = less&lt;Key&gt;,
         class Allocator = allocator&lt;pair&lt;const Key, T&gt;&gt;&gt;
  map(initializer_list&lt;pair&lt;Key, T&gt;&gt;, Compare = Compare(), Allocator = Allocator())
    -&gt; map&lt;Key, T, Compare, Allocator&gt;;
    
<ins>template&lt;class Key, class T, class Compare = less&lt;Key&gt;,
         class Allocator = allocator&lt;pair&lt;const Key, T&gt;&gt;&gt;
  map(initializer_list&lt;pair&lt;const Key, T&gt;&gt;, Compare = Compare(), Allocator = Allocator())
    -&gt; map&lt;Key, T, Compare, Allocator&gt;;</ins>

template&lt;class InputIterator, class Allocator&gt;
  map(InputIterator, InputIterator, Allocator)
    -&gt; map&lt;<i>iter-key-type</i>&lt;InputIterator&gt;, <i>iter-mapped-type</i>&lt;InputIterator&gt;,
           less&lt;<i>iter-key-type</i>&lt;InputIterator&gt;&gt;, Allocator&gt;;
           
template&lt;class Key, class T, class Allocator&gt;
  map(initializer_list&lt;pair&lt;Key, T&gt;&gt;, Allocator) -&gt; map&lt;Key, T, less&lt;Key&gt;, Allocator&gt;;           
           
<ins>template&lt;class Key, class T, class Allocator&gt;
  map(initializer_list&lt;pair&lt;const Key, T&gt;&gt;, Allocator) -&gt; map&lt;Key, T, less&lt;Key&gt;, Allocator&gt;;</ins>
[&hellip;]
</pre>
</blockquote>
</li>
</ol>
</li>

<li><p><b>(B)</b> Wording option 2: This one follows <a href="https://lists.isocpp.org/lib/2019/08/13091.php">Tim Song's suggestion</a>: 
"It seems that the cleanest fix is to 1) disallow the <tt>initializer_list&lt;value_type&gt;</tt> constructors from being 
used for CTAD, and 2) change the guides to use <tt>remove_const_t&lt;Key&gt;</tt>." This change has been tested locally 
with g++ similar to the above godbolt.</p>
<ol>
<li><p>Modify <sref ref="[map.overview]"/> as indicated:</p>
<blockquote><pre>
[&hellip;]
<i>// types</i>
using key_type = Key;
using mapped_type = T;
using value_type = <ins>type_identity_t&lt;</ins>pair&lt;const Key, T&gt;<ins>&gt;</ins>;
[&hellip;]

template&lt;class Key, class T, class Compare = less&lt;<ins>remove_const_t&lt;</ins>Key<ins>&gt;</ins>&gt;,
         class Allocator = allocator&lt;pair&lt;const Key, T&gt;&gt;&gt;
  map(initializer_list&lt;pair&lt;Key, T&gt;&gt;, Compare = Compare(), Allocator = Allocator())
    -&gt; map&lt;<ins>remove_const_t&lt;</ins>Key<ins>&gt;</ins>, T, Compare, Allocator&gt;;
    
template&lt;class InputIterator, class Allocator&gt;
  map(InputIterator, InputIterator, Allocator)
    -&gt; map&lt;<i>iter-key-type</i>&lt;InputIterator&gt;, <i>iter-mapped-type</i>&lt;InputIterator&gt;,
           less&lt;<i>iter-key-type</i>&lt;InputIterator&gt;&gt;, Allocator&gt;;
           
template&lt;class Key, class T, class Allocator&gt;
  map(initializer_list&lt;pair&lt;Key, T&gt;&gt;, Allocator) 
    -&gt; map&lt;<ins>remove_const_t&lt;</ins>Key<ins>&gt;</ins>, T, less&lt;<ins>remove_const_t&lt;</ins>Key<ins>&gt;</ins>&gt;, Allocator&gt;;           

[&hellip;]
</pre></blockquote>
</li>
</ol>
</li>
</ol>

</resolution>

</issue>
