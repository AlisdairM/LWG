<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3525" status="New">
<title><tt>uses_allocator_construction_args</tt> fails to handle types convertible to <tt>pair</tt></title>
<section><sref ref="[allocator.uses.construction]"/></section>
<submitter>Tim Song</submitter>
<date>23 Feb 2021</date>
<priority>99</priority>

<discussion>
<p>
As currently specified, the following program is ill-formed (and appears to have been since LWG <iref ref="2975"/>):
</p>
<blockquote><pre>
struct S {
  operator std::pair&lt;const int, int&gt;() const {
    return {};
  }
};

void f() {
  std::pmr::map&lt;int, int&gt; s;
  s.emplace(S{});
}
</pre></blockquote>
<p>
There's no matching overload for <tt>uses_allocator_construction_args&lt;pair&lt;const int, int&gt;&gt;(alloc, S&amp;&amp;)</tt>, 
since <tt>S</tt> is not a <tt>pair</tt> and every overload for constructing <tt>pair</tt>s that takes one 
non-allocator argument expects a <tt>pair</tt> from which template arguments can be deduced.
</p>
</discussion>

<resolution>
</resolution>

</issue>
