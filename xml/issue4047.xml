<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4047" status="New">
<title>Explicitly specifying template arguments for <tt>std::swap</tt> should not be supported</title>
<section><sref ref="[namespace.std]"/></section>
<submitter>Jiang An</submitter>
<date>25 Jan 2024</date>
<priority>4</priority>

<discussion>
<p>
<tt>std::swap</tt> overloads are separately declared in many standard library headers. It is likely expected 
that when a program includes correct headers for standard library types to be swapped, a <tt>std::swap</tt> call, 
with template argument deduced from arguments, selects the correct overload.
<p/>
However, if one explicitly specifies template arguments for a <tt>std::swap</tt> call, there would be possibly 
undesired overloads for which templates arguments are fully obtained, and thus undesired instantiation and 
ill-formed may be triggered.
<p/>
Perhaps we should explicitly state that explicitly specifying templates for <tt>std::swap</tt> is unsupported 
(having unspecified effects and possibly ill-formed), like taking address of non-address functions 
(<sref ref="[namespace.std]"/>/6) and explicitly specifying template arguments for most standard algorithms 
(<sref ref="[algorithms.requirements]"/>/15), to avoid possible reading that there are some guarantees, derived 
from signatures of overloads, for doing so.
</p>

<note>2024-03-15; Reflector poll</note>
<p>
Set priority to 4 after reflector poll.
</p>
<p> NAD - if a user does this and it breaks, so be it.</p>
<p>NAD as an issue creating a new kind of library policy for the first time.
Needs a paper.</p>
<p>
Not unique to <code>std::swap</code>. We should forbid this throughout
the standard library.
</p>

</discussion>

<resolution>
</resolution>

</issue>
