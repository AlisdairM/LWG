<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3190" status="C++20">
<title><tt>std::allocator::allocate</tt> sometimes returns too little storage</title>
<section><sref ref="[allocator.members]"/></section>
<submitter>Casey Carter</submitter>
<date>20 Feb 2019</date>
<priority>3</priority>

<discussion>
<p>
<sref ref="[allocator.members]"/>/2 says:
</p>
<blockquote style="border-left: 3px solid #ccc;padding-left: 15px;">
<p>
-2- <i>Returns:</i> A pointer to the initial element of an array of storage of size <tt>n * sizeof(T)</tt>, aligned 
appropriately for objects of type <tt>T</tt>.
</p>
</blockquote>
<p>
As in LWG <iref ref="3038"/>, we should not return too little storage for n objects of size <tt>sizeof(T)</tt>, e.g. 
when <tt>n</tt> is <tt>SIZE_MAX / 2</tt> and <tt>T</tt> is <tt>short</tt>.
</p>

<note>2019-03-05 Priority set to 3 after reflector discussion</note>

<note>2019 Cologne Wednesday night</note>
<p>Status to Ready; will open additional issue to reconcile this and <iref ref="3038"/></p>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4800">N4800</a>.</p>

<ol>
<li><p>Change <sref ref="[allocator.members]"/> as indicated:</p>

<blockquote>
<pre>
[[nodiscard]] T* allocate(size_t n);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-4- <i>Throws:</i> <ins><tt>bad_array_new_length</tt> if <tt>SIZE_MAX / sizeof(T) &lt; n</tt>, or</ins> <tt>bad_alloc</tt> 
if the storage cannot be obtained.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>
</issue>
