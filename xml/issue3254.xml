<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3254" status="Tentatively Ready">
<title>Strike <tt>stop_token</tt>'s <tt>operator!=</tt></title>
<section><sref ref="[stoptoken]"/></section>
<submitter>Casey Carter</submitter>
<date>6 Aug 2019</date>
<priority>0</priority>

<discussion>
<p>
In the shiny new world of the future, we need not declare overloads of <tt>operator!=</tt> that 
<tt>return !(x == y);</tt> the rewrite rule in <sref ref="[over.match.oper]"/> para 3.4.3 
achieves the same effect. Consequently, we should not declare such unnecessary 
<tt>operator!=</tt> overloads. The synopsis of class <tt>stop_token</tt> in <sref ref="[stoptoken]"/> 
declares exactly such an <tt>operator!=</tt> friend which should be struck.
</p>
<note>01-2020 Moved to Tentatively Ready after 5 positive votes on the reflector.</note>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4830">N4830</a>.</p>

<ol>
<li><p>Modify <sref ref="[stoptoken]"/>, class <tt>stop_token</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
namespace std {
  class stop_token {
  public:  
    [&hellip;]
    [[nodiscard]] friend bool operator==(const stop_token&amp; lhs, const stop_token&amp; rhs) noexcept;
    <del>[[nodiscard]] friend bool operator!=(const stop_token&amp; lhs, const stop_token&amp; rhs) noexcept;</del>
    friend void swap(stop_token&amp; lhs, stop_token&amp; rhs) noexcept;
  };
}
</pre>
</blockquote>

</li>

<li><p>Modify <sref ref="[stoptoken.cmp]"/> and <sref ref="[stoptoken.special]"/> as indicated:</p>

<blockquote>
<p>
<b>32.3.3.3 <ins>Non-member functions</ins><del>Comparisons</del> [stoptoken.<ins>nonmembers</ins><del>cmp</del>]</b>
</p>
<pre>
[[nodiscard]] bool operator==(const stop_token&amp; lhs, const stop_token&amp; rhs) noexcept;
</pre>
<blockquote>
<p>
-1- <i>Returns:</i> <tt>true</tt> if <tt>lhs</tt> and <tt>rhs</tt> have ownership of the same stop 
state or if both <tt>lhs</tt> and <tt>rhs</tt> do not have ownership of a stop state; otherwise <tt>false</tt>.
</p>
</blockquote>
<pre>
<del>[[nodiscard]] bool operator!=(const stop_token&amp; lhs, const stop_token&amp; rhs) noexcept;</del>
</pre>
<blockquote>
<p>
<del>-2- <i>Returns:</i> <tt>!(lhs==rhs)</tt>.</del>
</p>
</blockquote>
<p>
<del><b>32.3.3.4 Specialized algorithms [stoptoken.special]</b></del>
</p>
<pre>
friend void swap(stop_token&amp; x, stop_token&amp; y) noexcept;
</pre>
<blockquote>
<p>
-1- <i>Effects:</i> Equivalent to: <tt>x.swap(y)</tt>.
</p>
</blockquote>
</blockquote>

</li>
</ol>

</resolution>
</issue>
