<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2895" status="New">
<title>Passing function types to <tt>result_of</tt> and <tt>is_callable</tt></title>
<section><sref ref="[meta.rel]"/></section>
<submitter>Great Britain</submitter>
<date>3 Feb 2017</date>
<priority>99</priority>

<discussion>
<b>Addresses GB 55</b>

<p>It is becoming more and more apparent that using a function type as the template argument to <tt>result_of</tt> causes 
annoying problems. That was done because C++03 didn't have variadic templates, so it allowed an arbitrary number of types 
to be smuggled into the template via a single parameter, but it's a hack and unnecessary in C++ today. 
<tt>result_of&lt;F(Args...)&gt;</tt> has absolutely nothing to do with a function type that returns <tt>F</tt>, and the 
syntactic trickery using a function type has unfortunate consequences such as top-level <i>cv</i>-qualifiers and arrays 
decaying (because those are the rules for function types).</p>
<p>It might be too late to change <tt>result_of</tt>, but we should not repeat the same mistake for <tt>std::is_callable</tt>.</p>

<p>Proposed change: Possibly get rid of the <tt>is_callable&lt;Fn(ArgTypes?...), R&gt;</tt> specialization. Change the 
primary template <tt>is_callable&lt;class, class R = void&gt; to is_callable&lt;class Fn, class.. ArgTypes?&gt;</tt> and 
define a separate template such as <tt>is_callable_r&lt;class R, class Fn, class... ArgTypes?&gt;</tt> for the version 
that checks the return type. The resulting inconsistency might need to be resolved/improved upon.
</p>

<note>2017-02, pre-Kona</note>
<p>See also LWG <iref ref="2927"/></p>
</discussion>

<resolution>
<p>
</p>
</resolution>

</issue>
