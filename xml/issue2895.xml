<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2895" status="Resolved">
<title>Passing function types to <tt>result_of</tt> and <tt>is_callable</tt></title>
<section><sref ref="[meta.rel]"/></section>
<submitter>Great Britain</submitter>
<date>3 Feb 2017</date>
<priority>99</priority>

<discussion>
<b>Addresses GB 55</b>

<p>It is becoming more and more apparent that using a function type as the template argument to <tt>result_of</tt> causes 
annoying problems. That was done because C++03 didn't have variadic templates, so it allowed an arbitrary number of types 
to be smuggled into the template via a single parameter, but it's a hack and unnecessary in C++ today. 
<tt>result_of&lt;F(Args...)&gt;</tt> has absolutely nothing to do with a function type that returns <tt>F</tt>, and the 
syntactic trickery using a function type has unfortunate consequences such as top-level <i>cv</i>-qualifiers and arrays 
decaying (because those are the rules for function types).</p>
<p>It might be too late to change <tt>result_of</tt>, but we should not repeat the same mistake for <tt>std::is_callable</tt>.</p>

<p>Proposed change: Possibly get rid of the <tt>is_callable&lt;Fn(ArgTypes?...), R&gt;</tt> specialization. Change the 
primary template <tt>is_callable&lt;class, class R = void&gt; to is_callable&lt;class Fn, class.. ArgTypes?&gt;</tt> and 
define a separate template such as <tt>is_callable_r&lt;class R, class Fn, class... ArgTypes?&gt;</tt> for the version 
that checks the return type. The resulting inconsistency might need to be resolved/improved upon.
</p>

<note>2017-02, pre-Kona</note>
<p>See also LWG <iref ref="2927"/>.</p>

<note>2017-02-22, Daniel comments and provides concrete wording</note>
<p>
The approach chosen to resolve this issue is a merger with LWG <iref ref="2928"/>, that is the <tt>callable</tt>
traits are also renamed to <tt>invocable</tt>.
</p>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>
This wording is relative to <a href="http://wg21.link/n4640">N4640</a>.
</p>

<ol>
<li><p>Modify <sref ref="[meta.type.synop]"/>, header <tt>&lt;type_traits&gt;</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
[&hellip;]
<i>// 20.15.6, type relations</i>
[&hellip;]

<del>template &lt;class, class R = void&gt; struct is_callable; // not defined
template &lt;class Fn, class... ArgTypes, class R&gt;
struct is_callable&lt;Fn(ArgTypes...), R&gt;;</del>
<ins>template &lt;class Fn, class... ArgTypes&gt; struct is_invocable;
template &lt;class R, class Fn, class... ArgTypes&gt; struct is_invocable_r;</ins>

<del>template &lt;class, class R = void&gt; struct is_nothrow_callable; // not defined
template &lt;class Fn, class... ArgTypes, class R&gt;
struct is_nothrow_callable&lt;Fn(ArgTypes...), R&gt;;</del>
<ins>template &lt;class Fn, class... ArgTypes&gt; struct is_nothrow_invocable;
template &lt;class R, class Fn, class... ArgTypes&gt; struct is_nothrow_invocable_r;</ins>

[&hellip;]

<i>// 20.15.6, type relations</i>
[&hellip;]
<del>template &lt;class T, class R = void&gt; constexpr bool is_callable_v
= is_callable&lt;T, R&gt;::value;
template &lt;class T, class R = void&gt; constexpr bool is_nothrow_callable_v
= is_nothrow_callable&lt;T, R&gt;::value;</del>
<ins>template &lt;class Fn, class... ArgTypes&gt; constexpr bool is_invocable_v
= is_invocable&lt;Fn, ArgTypes...&gt;::value;
template &lt;class R, class Fn, class... ArgTypes&gt; constexpr bool is_invocable_r_v
= is_invocable_r&lt;R, Fn, ArgTypes...&gt;::value;
template &lt;class Fn, class... ArgTypes&gt; constexpr bool is_nothrow_invocable_v
= is_nothrow_invocable&lt;Fn, ArgTypes...&gt;::value;
template &lt;class R, class Fn, class... ArgTypes&gt; constexpr bool is_nothrow_invocable_r_v
= is_nothrow_invocable_r&lt;R, Fn, ArgTypes...&gt;::value;</ins>
[&hellip;]
</pre>
</blockquote>

</li>

<li><p>Modify <sref ref="[meta.rel]"/>, Table 44 &mdash; "Type relationship predicates", as indicated:</p>

<blockquote>
<table border="1">
<caption>Table 44 &mdash; Type relationship predicates</caption>

<tr>
<td colspan="3" align="center">
<tt>[&hellip;]</tt>
</td>
</tr>

<tr>
<td>
<tt>template &lt;class Fn, class...<br/> 
ArgTypes<del>, class R</del>&gt;<br/> 
struct is_<ins>invocable</ins><del>callable&lt;<br/> 
Fn(ArgTypes...), R&gt;</del>;</tt>
</td>
<td>
The expression<br/>
<tt><i>INVOKE</i>(declval&lt;Fn&gt;(),<br/>
declval&lt;ArgTypes&gt;()...<del>,<br/>
R</del>)</tt> is well formed when treated<br/>
as an unevaluated operand
</td>
<td>
<tt>Fn</tt><del>, <tt>R</tt>,</del> and all types in the<br/>
parameter pack <tt>ArgTypes</tt> shall<br/>
be complete types, <i>cv</i> <tt>void</tt>, or<br/>
arrays of unknown bound.
</td>
</tr>

<tr>
<td>
<ins><tt>template &lt;class R, class Fn, class...<br/> 
ArgTypes&gt;<br/> 
struct is_invocable_r;</tt></ins>
</td>
<td>
<ins>The expression<br/>
<tt><i>INVOKE</i>(declval&lt;Fn&gt;(),<br/>
declval&lt;ArgTypes&gt;()...,<br/>
R)</tt> is well formed when treated<br/>
as an unevaluated operand</ins>
</td>
<td>
<ins><tt>Fn</tt>, <tt>R</tt>, and all types in the<br/>
parameter pack <tt>ArgTypes</tt> shall<br/>
be complete types, <i>cv</i> <tt>void</tt>, or<br/>
arrays of unknown bound.</ins>
</td>
</tr>

<tr>
<td>
<tt>template &lt;class Fn, class...<br/> 
ArgTypes<del>, class R</del>&gt;<br/> 
struct is_nothrow_<ins>invocable</ins><del>callable&lt;<br/> 
Fn(ArgTypes...), R&gt;</del>;</tt>
</td>
<td>
<tt>is_<ins>invocable</ins><del>callable</del>_v&lt;<br/>
<ins>Fn, ArgTypes...</ins><del>Fn(ArgTypes...), R</del>&gt;</tt> is<br/>
<tt>true</tt> and the expression<br/>
<tt><i>INVOKE</i>(declval&lt;Fn&gt;(),<br/>
declval&lt;ArgTypes&gt;()...<del>,<br/>
R</del>)</tt> is known not to throw any<br/>
exceptions
</td>
<td>
<tt>Fn</tt><del>, <tt>R</tt>,</del> and all types in the<br/>
parameter pack <tt>ArgTypes</tt> shall<br/>
be complete types, <i>cv</i> <tt>void</tt>, or<br/>
arrays of unknown bound.
</td>
</tr>

<tr>
<td>
<ins><tt>template &lt;class R, class Fn, class...<br/> 
ArgTypes, class R&gt;<br/> 
struct is_nothrow_invocable_r;</tt></ins>
</td>
<td>
<ins><tt>is_invocable_r_v&lt;<br/>
R, Fn, ArgTypes...&gt;</tt> is<br/>
<tt>true</tt> and the expression<br/>
<tt><i>INVOKE</i>(declval&lt;Fn&gt;(),<br/>
declval&lt;ArgTypes&gt;()...,<br/>
R)</tt> is known not to throw any<br/>
exceptions</ins>
</td>
<td>
<ins><tt>Fn</tt>, <tt>R</tt>, and all types in the<br/>
parameter pack <tt>ArgTypes</tt> shall<br/>
be complete types, <i>cv</i> <tt>void</tt>, or<br/>
arrays of unknown bound.</ins>
</td>
</tr>

</table>
</blockquote>
</li>

</ol>
</blockquote>

<note>2017-02-24, Daniel comments</note>
<p>
I suggest to apply the paper d0604r0 instead, available on the Kona LWG wiki.
</p>

<note>2017-03-12, post-Kona</note>
<p>Resolved by p0604r0.</p>
</discussion>

<resolution>
</resolution>

</issue>
