<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3154" status="WP">
<title><tt>Common</tt> and <tt>CommonReference</tt> have a common defect</title>
<section><sref ref="[concept.common]"/></section>
<submitter>Casey Carter</submitter>
<date>10 Aug 2018</date>
<priority>0</priority>

<discussion>
<p>
The semantic requirements of both <tt>Common</tt>
(<sref ref="[concept.common]"/>):
</p>
<blockquote>
<p>
-2- Let <tt>C</tt> be <tt>common_­type_­t&lt;T, U&gt;</tt>. Let <tt>t</tt> be a
function whose return type is <tt>T</tt>, and let <tt>u</tt> be a function whose
return type is <tt>U</tt>. <tt>Common&lt;T, U&gt;</tt> is satisfied only if:
</p><p>
(2.1) &mdash; <tt>C(t())</tt> equals <tt>C(t())</tt> if and only if <tt>t()</tt>
is an equality-preserving expression (<sref ref="[concepts.equality]"/>).
</p><p>
(2.2) &mdash; <tt>C(u())</tt> equals <tt>C(u())</tt> if and only if <tt>u()</tt>
is an equality-preserving expression (<sref ref="[concepts.equality]"/>).
</p>
</blockquote>
<p>
and similarly <tt>CommonReference</tt> (<sref ref="[concept.commonreference]"/>):
</p>
<blockquote>
<p>
-2- Let <tt>C</tt> be <tt>common_­reference_­t&lt;T, U&gt;</tt>. Let <tt>t</tt> be
a function whose return type is <tt>T</tt>, and let <tt>u</tt> be a function
whose return type is <tt>U</tt>. <tt>CommonReference&lt;T, U&gt;</tt> is
satisfied only if:
</p><p>
(2.1) &mdash; <tt>C(t())</tt> equals <tt>C(t())</tt> if and only if <tt>t()</tt>
is an equality-preserving expression (<sref ref="[concepts.equality]"/>).
</p><p>
(2.2) &mdash; <tt>C(u())</tt> equals <tt>C(u())</tt> if and only if <tt>u()</tt>
is an equality-preserving expression.
</p>
</blockquote>
<p>
don't properly reflect the intended design that conversions to the common type /
common reference type are identity-preserving: in other words, that converting
two values to the common type produces equal results if and only if the values
were initially equal. The phrasing "<tt>C(E)</tt> equals <tt>C(E)</tt> if and only if <tt>E</tt> is an equality-preserving expression" is also clearly
defective regardless of the intended design: the assertion "<tt>E</tt> is not
equality-preserving" does not imply that every evaluation of <tt>E</tt> produces
different results.
</p>
<note>2018-08 Batavia Monday issue prioritization</note>
<p>Priority set to 0, status to 'Tentatively Ready'</p>
<note>2018-11, Adopted in San Diego</note>
</discussion>

<resolution>

<p>This wording is relative to <a href="https://wg21.link/n4762">N4762</a>.</p>

<ul>
<li><p>Modify <sref ref="[concept.commonref]"/> p2 as follows:</p>
<blockquote>
<p>
-2- Let <tt>C</tt> be <tt>common_­reference_­t&lt;T, U&gt;</tt>. Let <del><tt>t</tt>
be a function whose return type is</del> <ins><tt>t1</tt> and <tt>t2</tt> be
equality-preserving expressions (<sref ref="[concepts.equality]"/>) such that
<tt>decltype((t1))</tt> and <tt>decltype((t2))</tt> are each</ins> <tt>T</tt>,
and let <del><tt>u</tt> be a function whose return type is</del> <ins><tt>u1</tt>
and <tt>u2</tt> be equality-preserving expressions such that
<tt>decltype((u1))</tt> and <tt>decltype((u2))</tt> are each</ins> <tt>U</tt>.
<ins><tt>T</tt> and <tt>U</tt> model</ins> <tt>CommonReference&lt;T, U&gt;</tt> <del>is satisfied</del> only if:
</p><p>
(2.1) &mdash; <tt>C(t<ins>1</ins><del>()</del>)</tt> equals
<tt>C(t<ins>2</ins><del>()</del>)</tt> if and only if
<tt>t<ins>1</ins><del>()</del></tt> <ins>equals <tt>t2</tt>, and</ins>
<del>is an equality-preserving expression (<sref ref="[concepts.equality]"/>).</del>
</p><p>
(2.2) &mdash; <tt>C(u<ins>1</ins><del>()</del>)</tt> equals
<tt>C(u<ins>2</ins><del>()</del>)</tt> if and only if
<tt>u<ins>1</ins><del>()</del></tt> <ins>equals <tt>u2</tt></ins>
<del>is an equality-preserving expression</del>.
</p>
</blockquote>
</li>
<li><p>Modify <sref ref="[concept.common]"/> p2 similarly:</p>
<blockquote>
<p>
-2- Let <tt>C</tt> be <tt>common_­type_­t&lt;T, U&gt;</tt>. Let <del><tt>t</tt> be
a function whose return type is</del> <ins><tt>t1</tt> and <tt>t2</tt> be
equality-preserving expressions (<sref ref="[concepts.equality]"/>) such that
<tt>decltype((t1))</tt> and <tt>decltype((t2))</tt> are each</ins> <tt>T</tt>,
and let <del><tt>u</tt> be a function whose return type is</del> <ins><tt>u1</tt>
and <tt>u2</tt> be equality-preserving expressions such that
<tt>decltype((u1))</tt> and <tt>decltype((u2))</tt> are each</ins> <tt>U</tt>.
<ins><tt>T</tt> and <tt>U</tt> model</ins> <tt>Common&lt;T, U&gt;</tt> <del>is
satisfied</del> only if:
</p><p>
(2.1) &mdash; <tt>C(t<ins>1</ins><del>()</del>)</tt> equals
<tt>C(t<ins>2</ins><del>()</del>)</tt> if and only if
<tt>t<ins>1</ins><del>()</del></tt> <ins>equals <tt>t2</tt>, and</ins>
<del>is an equality-preserving expression (<sref ref="[concepts.equality]"/>).</del>
</p><p>
(2.2) &mdash; <tt>C(u<ins>1</ins><del>()</del>)</tt> equals
<tt>C(u<ins>2</ins><del>()</del>)</tt> if and only if
<tt>u<ins>1</ins><del>()</del></tt> <ins>equals <tt>u2</tt></ins>
<del>is an equality-preserving expression (<sref ref="[concepts.equality]"/>)</del>.
</p>
</blockquote>
</li>
</ul>
</resolution>

</issue>
