<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2696" status="Tentatively Ready">
<title>Interaction between <tt>make_shared</tt> and <tt>enable_shared_from_this</tt> is underspecified</title>
<section><sref ref="[util.smartptr.shared.create]"/></section>
<submitter>Joe Gottman</submitter>
<date>2 Apr 2016</date>
<priority>2</priority>

<discussion>
<p>
For each public constructor of <tt>std::shared_ptr</tt>, the standard says that constructor <i>enables 
<tt>shared_from_this</tt></i> if that constructor is expected to initialize the internal <tt>weak_ptr</tt> 
of a contained <tt>enable_shared_from_this&lt;X&gt;</tt> object. But there are other ways to construct 
a <tt>shared_ptr</tt> than by using a public constructor. The template functions <tt>make_shared</tt> 
and <tt>allocate_shared</tt> both require calling a private constructor, since no public constructor 
can fulfill the requirement that at most one allocation is made. The standard does not specify that 
that private constructor enables <tt>shared_from_this</tt>; therefore in the following code:
</p>
<blockquote><pre>
struct Foo : public std::enable_shared_from_this&lt;Foo&gt; {};

int main() {
  auto p = std::make_shared&lt;Foo&gt;();
  assert(p == p-&gt;shared_from_this());
  return 0;
}
</pre></blockquote>
<p>
it is unspecified whether the assertion will fail.
</p>

<note>2016-05 Issues Telecom</note>
<p>
Jonathan Wakely to provide updated wording.
</p>

<note>2016-08 Chicago</note>
<p>Monday PM: Move to Tentatively Ready</p>
</discussion>

<resolution>
<p>
This wording is relative to N4582.
</p>
<ol>
<li><p>Change <sref ref="[util.smartptr.shared.create]"/> indicated:</p>

<blockquote><pre>
template&lt;class T, class... Args&gt; shared_ptr&lt;T&gt; make_shared(Args&amp;&amp;... args);
template&lt;class T, class A, class... Args&gt;
  shared_ptr&lt;T&gt; allocate_shared(const A&amp; a, Args&amp;&amp;... args);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-6- <i>Remarks</i>: <ins>The <tt>shared_ptr</tt> constructor called by this function enables <tt>shared_from_this</tt> 
with the address of the newly constructed object of type <tt>T</tt>.</ins> Implementations should perform no more than 
one memory allocation. [<i>Note</i>: This provides efficiency equivalent to an intrusive smart 
pointer. &mdash; <i>end note</i>]
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
