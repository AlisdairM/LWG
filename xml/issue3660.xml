<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3660" status="New">
<title><tt>iterator_traits&lt;common_iterator&gt;::pointer</tt> should conform to &sect;[iterator.traits]</title>
<section><sref ref="[common.iter.types]"/></section>
<submitter>Casey Carter</submitter>
<date>20 Jan 2022</date>
<priority>99</priority>

<discussion>
<p>
<sref ref="[iterator.traits]"/>/1 says:
</p>
<blockquote style="border-left: 3px solid #ccc;padding-left: 15px;">
<p>
[&hellip;] In addition, the types
</p>
<blockquote><pre>
iterator_traits&lt;I&gt;::pointer
iterator_traits&lt;I&gt;::reference
</pre></blockquote>
<p>
shall be defined as the iterator's pointer and reference types; that is, for an iterator object <tt>a</tt> of class
type, the same type as <tt>decltype(a.operator-&gt;())</tt> and <tt>decltype(*a)</tt>, respectively. The type 
<tt>iterator_traits&lt;I&gt;::pointer</tt> shall be <tt>void</tt> for an iterator of class type <tt>I</tt> 
that does not support <tt>operator-&gt;</tt>. [&hellip;]
</p>
</blockquote>
<p>
<sref ref="[common.iter.types]"/>/1 slightly contradicts this:
</p>
<blockquote style="border-left: 3px solid #ccc;padding-left: 15px;">
<p>
The nested <i>typedef-name</i>s of the specialization of <tt>iterator_traits</tt> for 
<tt>common_iterator&lt;I, S&gt;</tt> are defined as follows.
</p>
<ol style="list-style-type:none">
<li><p>[&hellip;]</p></li>
<li><p>(1.3) &mdash; If the expression <tt>a.operator-&gt;()</tt> is well-formed, where <tt>a</tt> is an lvalue of 
type <tt>const common_iterator&lt;I, S&gt;</tt>, then <tt>pointer</tt> denotes the type of that expression. Otherwise, 
<tt>pointer</tt> denotes <tt>void</tt>.</p></li>
</ol>
</blockquote>
<p>
"The type of <tt>a.operator-&gt;()</tt>" is not necessarily the same as <tt>decltype(a.operator-&gt;())</tt>: 
when the expression is an lvalue or xvalue of type <tt>T</tt>, "the type of <tt>a.operator-&gt;()</tt>" is <tt>T</tt> 
but <tt>decltype(a.operator-&gt;())</tt> is either <tt>T&amp;</tt> or <tt>T&amp;&amp;</tt>. An implementation 
therefore cannot conform to the requirements of both cited paragraphs for some specializations of <tt>common_iterator</tt>.
<p/>
The most likely explanation for this contradiction is that the writer of the phrase 
"type of <tt>a.operator-&gt;()</tt>" was not cognizant of the difference in meaning and intended to actually write 
<tt>decltype(a.operator-&gt;())</tt>.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4901"/>. 
</p>

<blockquote class="note">
<p>
[<i>Drafting Note:</i> The wording change below includes an additional drive-by fix that ensures that the last
sentence "Otherwise, <tt>pointer</tt> denotes <tt>void</tt>" cannot be misinterpreted (due to the leading "If") 
to apply also for a situation when the outcome of the expression <tt>a.operator-&gt;()</tt> for a non-<tt>const</tt> 
<tt>common_iterator&lt;I, S&gt;</tt> is reflected upon.] 
</p>
</blockquote>


<ol>
<li><p>Modify <sref ref="[common.iter.types]"/> as indicated:</p>

<blockquote>
<p>
-1- The nested <i>typedef-name</i>s of the specialization of <tt>iterator_traits</tt> for 
<tt>common_iterator&lt;I, S&gt;</tt> are defined as follows.
</p>
<ol style="list-style-type:none">
<li><p>[&hellip;]</p></li>
<li><p>(1.3) &mdash; <ins>Let <tt>a</tt> denote an lvalue of type <tt>const common_iterator&lt;I, 
S&gt;</tt>.</ins> If the expression <tt>a.operator-&gt;()</tt> is well-formed, <del>where <tt>a</tt> 
is an lvalue of type <tt>const common_iterator&lt;I, S&gt;</tt>,</del> then <tt>pointer</tt> denotes 
<ins><tt>decltype(a.operator-&gt;())</tt></ins><del>the type of that expression</del>. Otherwise, 
<tt>pointer</tt> denotes <tt>void</tt>.</p></li>
</ol>
</blockquote>
</li>
</ol>
</resolution>

</issue>
