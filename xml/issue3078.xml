<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3078" status="New">
<title><tt>directory_entry</tt>, <tt>directory_iterator</tt> and <tt>recursive_directory_iterator</tt> perform needless path copies</title>
<section><sref ref="[fs.class.directory.entry]"/><sref ref="[fs.class.directory.iterator]"/>
<sref ref="[fs.class.rec.dir.itr]"/></section>
<submitter>Gor Nishanov</submitter>
<date>5 Mar 2018</date>
<priority>3</priority>

<discussion>
<p>
An implementation of <tt>directory_entry</tt> class is likely to store a <tt>filesystem::path</tt> as a member.
Constructors and assign member functions take <tt>filesystem::path</tt> by <tt>const&amp;</tt> thus forcing 
creation of a copy.
<p/>
An implementation of <tt>directory_iterator</tt> class is likely to store a <tt>directory_entry</tt> or a 
<tt>path</tt> as a part of its state. Constructors take <tt>filesystem::path</tt> by <tt>const&amp;</tt> 
thus forcing creation of a copy.
<p/>
An implementation of <tt>recursive_directory_iterator</tt> class is likely to store a <tt>directory_entry</tt> 
or a <tt>path</tt> as a part of its state. Constructors take <tt>filesystem::path</tt> by <tt>const&amp;</tt> 
thus forcing creation of a copy. 
<p/>
Suggested resolution:
<p/>
Add overloads to <tt>directory_entry</tt>, <tt>directory_iterator</tt>, and <tt>recursive_directory_iterator</tt>
that take <tt>filesystem::path</tt> by <tt>&amp;&amp;</tt>.
<p/>
Make it unspecified in case an exception is thrown from those new members where an argument was moved from or not.
</p>
<blockquote><pre>
explicit directory_entry(const filesystem::path&amp; p);
<ins>explicit directory_entry(filesystem::path&amp;&amp; p);</ins>
directory_entry(const filesystem::path&amp; p, error_code&amp; ec);
<ins>directory_entry(filesystem::path&amp;&amp; p, error_code&amp; ec);</ins>

void directory_entry::assign(const filesystem::path&amp; p);
<ins>void directory_entry::assign(filesystem::path&amp;&amp; p);</ins>
void directory_entry::assign(const filesystem::path&amp; p, error_code&amp; ec);
<ins>void directory_entry::assign(filesystem::path&amp;&amp; p, error_code&amp; ec);</ins>

explicit directory_iterator(const path&amp; p);
<ins>explicit directory_iterator(path&amp;&amp; p);</ins>
directory_iterator(const path&amp; p, directory_options options);
<ins>directory_iterator(path&amp;&amp; p, directory_options options);</ins>
directory_iterator(const path&amp; p, error_code&amp; ec) noexcept;
<ins>directory_iterator(path&amp;&amp; p, error_code&amp; ec) noexcept;</ins>
directory_iterator(const path&amp; p, directory_options options, error_code&amp; ec) noexcept;
<ins>directory_iterator(path&amp;&amp; p, directory_options options, error_code&amp; ec) noexcept;</ins>

explicit recursive_directory_iterator(const path&amp; p);
<ins>explicit recursive_directory_iterator(path&amp;&amp; p);</ins>
recursive_directory_iterator(const path&amp; p, directory_options options);
<ins>recursive_directory_iterator(path&amp;&amp; p, directory_options options);</ins>
recursive_directory_iterator(const path&amp; p, directory_options options, error_code&amp; ec) noexcept;
<ins>recursive_directory_iterator(path&amp;&amp; p, directory_options options, error_code&amp; ec) noexcept;</ins>
recursive_directory_iterator(const path&amp; p, error_code&amp; ec) noexcept;
<ins>recursive_directory_iterator(path&amp;&amp; p, error_code&amp; ec) noexcept;</ins>
</pre></blockquote>

<note>2018-03-20 Priority set to 3 after discussion on the reflector.</note>
</discussion>

<resolution>
</resolution>

</issue>
