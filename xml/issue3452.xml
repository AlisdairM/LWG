<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3452" status="New">
<title>Are views really supposed to have strict O<tt>(1)</tt> destruction?</title>
<section><sref ref="[range.view]"/></section>
<submitter>Mathias Stearn</submitter>
<date>16 Jun 2020</date>
<priority>99</priority>

<discussion>
<p>
The second bullet of <sref ref="[range.view]"/> paragraph 3 says
"Examples of views are:[&hellip;]
A range type that holds its elements by <tt>shared_ptr</tt>
and shares ownership with all its copies".
That clearly does not have O<tt>(1)</tt> destruction in all cases.
However, that does seem like a useful type of view,
and is related to the discussions around the proposed <tt>std::generator</tt>.
</p>

<p>
What is the purpose of requiring O(1) destruction?
Would it still be achieved by weakening it slightly to something like
"If <i>N</i> copies and/or moves are made from a view that yields <i>M</i> values,
destroying all of them takes time proportional to at worst O<tt>(<i>N</i>+<i>M</i>)</tt>"?
This in particular prevents the O<tt>(<i>N</i>*<i>M</i>)</tt> case that I think the rules
are trying to prevent, while still allowing some more interesting types of views.
</p>

<p>
If instead we actually really do want strict O<tt>(1)</tt> destruction, then the example needs to be fixed.
</p>
</discussion>

<resolution>
<p>
</p>
</resolution>

</issue>
