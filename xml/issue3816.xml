<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3816" status="WP">
<title><tt>flat_map</tt> and <tt>flat_multimap</tt> should impose sequence container requirements</title>
<section><sref ref="[flat.map.overview]"/><sref ref="[flat.multimap.overview]"/></section>
<submitter>Tomasz Kami≈Ñski</submitter>
<date>08 Nov 2022</date>
<priority>99</priority>

<discussion>
<p>
This is resolution of <b><a href="https://github.com/cplusplus/nbballot/issues/519">US 42-103</a></b>
(<sref ref="[flat.map.overview]"/> p6 <sref ref="[flat.multimap.overview]"/> p6 Clearing when restoring invariants).
</p>

<p>
Currently both <sref ref="[flat.map.overview]"/> p7 and <sref ref="[flat.multimap.overview]"/> p7
claims that <tt>flat_(multi)map</tt> supports "Any sequence container (<sref ref="[sequence.reqmts]"/>) 
<tt>C</tt> supporting <i>Cpp17RandomAccessIterator</i>", which arguably includes <tt>std::array</tt> (see LWG <iref ref="617"/>).
This is incorrect as <tt>std::array</tt> does not provide operations required to restored these adaptors invariant, 
including <tt>clear</tt>. We should require that <tt>C</tt> meets sequence container requirements, and we 
state that fact explicitly in <sref ref="[array.overview]"/> p3: "An <tt>array</tt> meets some of the requirements 
of a sequence container (<sref ref="[sequence.reqmts]"/>)".
</p>

<note>Kona 2022-11-08; Move to Immediate status</note>

<note>2022-11-12 Approved at November 2022 meeting in Kona. Status changed: Immediate &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4917"/>.
</p>

<ol>

<li><p>Modify <sref ref="[flat.map.overview]"/> as indicated:</p>

<blockquote>
<p>
-7- Any <del>sequence container (<sref ref="[sequence.reqmts]"/>)</del><ins>type</ins> <tt>C</tt> <del>supporting 
   <i>Cpp17RandomAccessIterator</i></del><ins>that meets sequence container requirements (<sref ref="[sequence.reqmts]"/>)</ins> 
    can be used to instantiate <tt>flat_map</tt>, as long as <ins><tt>C::iterator</tt> meets the <i>Cpp17RandomAccessIterator</i> 
    requirements and</ins> invocations of member functions <tt>C::size</tt> and <tt>C::max_size</tt> 
    do not exit via an exception. In particular, <tt>vector</tt> (<sref ref="[vector]"/>) and <tt>deque</tt> 
    (<sref ref="[deque]"/>) can be used. 
</p>
</blockquote>
</li>

<li><p>Modify <sref ref="[flat.multimap.overview]"/> as indicated:</p>

<blockquote>
<p>
-7- Any <del>sequence container (<sref ref="[sequence.reqmts]"/>)</del><ins>type</ins> <tt>C</tt> <del>supporting 
    <i>Cpp17RandomAccessIterator</i></del><ins>that meets sequence container requirements (<sref ref="[sequence.reqmts]"/>)</ins> 
    can be used to instantiate <tt>flat_multimap</tt>, as long as <ins><tt>C::iterator</tt> meets the <i>Cpp17RandomAccessIterator</i> 
    requirements and</ins> invocations of member functions <tt>C::size</tt> and <tt>C::max_size</tt> do not exit via an 
    exception. In particular, <tt>vector</tt> (<sref ref="[vector]"/>) and <tt>deque</tt> (<sref ref="[deque]"/>) can be used. 
</p>
</blockquote>
</li>


</ol>
</resolution>

</issue>
