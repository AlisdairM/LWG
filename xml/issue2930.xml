<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2930" status="NAD">
<title>Are implementations allowed to split non-member functions into several overloads?</title>
<section><sref ref="[global.functions]"/></section>
<submitter>Morwenn</submitter>
<date>4 Feb 2017</date>
<priority>99</priority>

<discussion>
<p>
Section <sref ref="[member.functions]"/> makes it clear that standard library implementers are allowed to "replace a 
member function with default arguments with two or more member functions with equivalent behavior". However, it is 
unclear when reading <sref ref="[global.functions]"/> whether implementers are allowed to perform the same transformation 
for non-member functions. <sref ref="[global.functions]"/> p3 mentions that "an implementation shall not declare a 
non-member function signature with additional default arguments", but does not explicitly forbid to replace a function 
with default arguments with more functions with equivalent behavior.
<p/>
The standard should make it clear whether such a transformation is conforming or not, probably through a note 
[global.functions].
<p/>
Link to the <a href="https://groups.google.com/a/isocpp.org/forum/#!topic/std-discussion/nOtuY0aXReE">Standard Discussion forum</a>.
</p>

<note>2017-03-04, Kona</note>
<p>We believe that [member.functions]p2 is clear.</p>
</discussion>

<resolution>
<p>
</p>
</resolution>

</issue>

