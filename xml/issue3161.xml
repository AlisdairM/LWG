<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3161" status="Open">
<title>Container adapters mandate use of <tt>emplace_back</tt> but don't require it</title>
<section><sref ref="[stack]"/> <sref ref="[queue]"/></section>
<submitter>Marshall Clow</submitter>
<date>2 Oct 2018</date>
<priority>99</priority>

<discussion>
<p>
<sref ref="[stack]"/> p1 says:
</p>
<blockquote>
Any sequence container supporting operations <tt>back()</tt>, <tt>push_back()</tt> and <tt>pop_back()</tt> can be used to
instantiate <tt>stack</tt>.
</blockquote>

<p>but then in <sref ref="[stack.defn]"/> we have the following code:</p>
<pre>
template&lt;class... Args&gt;
  decltype(auto) emplace(Args&amp;&amp;... args)
    { return c.emplace_back(std::forward&lt;Args&gt;(args)...); }
</pre>

<p>The same pattern appears in <sref ref="[queue]"/>.</p>

<p>I see two ways to resolve this:</p>
<p>The first is to add <tt>emplace_back()</tt> to the list of requirements for underlying containers for <tt>stack</tt> and <tt>queue</tt></p>

<p>The second is to replace the calls to <tt>c.emplace_back(std::forward&lt;Args&gt;(args)...)</tt> with <tt>c.emplace(c.end(), std::forward&lt;Args&gt;(args)...)</tt>. We can do this w/o messing with the list above because <tt>emplace</tt> is part of the sequence container requirements, while <tt>emplace_back</tt> is not. I checked the libc++ implementation of <tt>vector</tt>, <tt>deque</tt>, and <tt>list</tt>, and they all do the same thing for <tt>emplace(end(), ...)</tt> and <tt>emplace_back(...)</tt>.</p>

<note>2019-02; Kona Wednesday night issue processing</note>
<p>Status to Open; Casey to provide updated wording, and re-vote on reflector.</p>
<p>Polls were: NAD - 5-1-3; "Option B" - 2-5-2 and "Probe the container" - 7-2-0</p>


<strong>Previous resolution [SUPERSEDED]:</strong>
<blockquote class="note">
<p>This wording is relative to <a href="https://wg21.link/n4762">N4762</a>.</p>

<blockquote class="note">
I have prepared two mutually exclusive options.
<br/>Option A a requirement for <tt>emplace_back</tt> to the underlying container.
<br/>Option B one replaces the calls to <tt>emplace_back</tt> with calls to <tt>emplace</tt>.
</blockquote>

<p><b>Option A</b></p>
<ol>
<li><p>Edit <sref ref="[stack]"/>, as indicated:</p>
<p>Any sequence container supporting operations <tt>back()</tt>, <tt>push_back()</tt>,  <ins><tt>emplace_back()</tt></ins> and <tt>pop_back()</tt> can be used to instantiate <tt>stack</tt>. </p>
</li>

<li><p>Edit <sref ref="[queue.defn]"/>, as indicated:</p>
<p>Any sequence container supporting operations <tt>front()</tt>, <tt>back()</tt>, <tt>push_back()</tt>,  <ins><tt>emplace_back()</tt></ins> and <tt>pop_front()</tt> can be used to instantiate <tt>queue</tt>. </p>
</li>
</ol>

<p><b>Option B</b></p>
<ol>
<li><p>Edit <sref ref="[stack.defn]"/>, class template <tt>stack</tt> definition, as indicated:</p>
<blockquote><pre>
template&lt;class... Args&gt;
  decltype(auto) emplace(Args&amp;&amp;... args)
    { return c.emplace<del>_back</del>(<ins>c.end(), </ins>std::forward&lt;Args&gt;(args)...); }
</pre></blockquote>
</li>

<li><p>Edit <sref ref="[queue.defn]"/>, class template <tt>queue</tt> definition, as indicated:</p>
<blockquote><pre>
template&lt;class... Args&gt;
  decltype(auto) emplace(Args&amp;&amp;... args)
    { return c.emplace<del>_back</del>(<ins>c.end(), </ins>std::forward&lt;Args&gt;(args)...); }
</pre></blockquote>
</li>
</ol>
</blockquote>

<note>2020-05 Casey provides new wording</note>
This is the "probe for <tt>emplace_back</tt> with fallback to <tt>emplace</tt>" approach that LWG
wanted to see wording for in Kona.

</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4861">N4861</a>.</p>

<ol>
<li><p>Edit <sref ref="[stack.defn]"/>, class template <tt>stack</tt> definition, as indicated:</p>
<blockquote><pre>
template&lt;class... Args&gt;
  decltype(auto) emplace(Args&amp;&amp;... args) {
    <ins>if constexpr (requires { c.emplace_back(std::forward&lt;Args&gt;(args)...); }) {</ins>
      return c.emplace_back(std::forward&lt;Args&gt;(args)...);
    <ins>} else {</ins>
      <ins>return c.emplace(c.end(), std::forward&lt;Args&gt;(args)...);</ins>
    <ins>}</ins>
  }
</pre></blockquote>
</li>

<li><p>Edit <sref ref="[queue.defn]"/>, class template <tt>queue</tt> definition, as indicated:</p>
<blockquote><pre>
template&lt;class... Args&gt;
  decltype(auto) emplace(Args&amp;&amp;... args) {
    <ins>if constexpr (requires { c.emplace_back(std::forward&lt;Args&gt;(args)...); }) {</ins>
      return c.emplace_back(std::forward&lt;Args&gt;(args)...);
    <ins>} else {</ins>
      <ins>return c.emplace(c.end(), std::forward&lt;Args&gt;(args)...);</ins>
    <ins>}</ins>
  }
</pre></blockquote>
</li>
</ol>

</resolution>

</issue>
