<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2968" status="New">
<title>Inconsistencies between <tt>basic_string reserve</tt> and <tt>vector/unordered_map/unordered_set reserve</tt> functions</title>
<section><sref ref="[string.capacity]"/></section>
<submitter>Andrew Luo</submitter>
<date>30 May 2017</date>
<priority>99</priority>

<discussion>
<p>
According to <sref ref="[string.capacity]"/> paragraph 11:
</p>
<blockquote>
<p>
-11- <i>Effects:</i> After <tt>reserve()</tt>, <tt>capacity()</tt> is greater or equal to the argument of <tt>reserve</tt>. 
[<i>Note:</i> Calling <tt>reserve()</tt> with a <tt>res_arg</tt> argument less than <tt>capacity()</tt> is in effect a 
non-binding shrink request. A call with <tt>res_arg &lt;= size()</tt> is in effect a non-binding shrink-to-fit 
request. &mdash; <i>end note</i>]
</p>
</blockquote>
<p>
A call to <tt>basic_string</tt>'s <tt>reserve</tt> function with <tt>res_arg &lt;= size()</tt> is taken as a non-binding 
request to shrink the capacity, whereas for <tt>vector</tt> (and similarly for <tt>unordered_map</tt> and <tt>unordered_set</tt>)
according to <sref ref="[vector.capacity]"/> p3:
</p>
<blockquote>
<p>
-3- <i>Effects:</i> A directive that informs a <tt>vector</tt> of a planned change in size, so that it can manage 
the storage allocation accordingly. After <tt>reserve()</tt>, <tt>capacity()</tt> is greater or equal to the argument 
of reserve if reallocation happens; and equal to the previous value of <tt>capacity()</tt> otherwise. Reallocation happens
at this point if and only if the current capacity is less than the argument of <tt>reserve()</tt>. If an exception
is thrown other than by the move constructor of a non-<tt>CopyInsertable</tt> type, there are no effects.
</p>
</blockquote>
<p>
The problem here is that the different behavior makes it that writing template code where the template argument type is a 
container type (for example <tt>std::string</tt> or <tt>std::vector&lt;char&gt;</tt>) calls to <tt>reserve</tt> can have 
different meaning depending on which container type the template is instantiated with. It might be a minor issue but 
it would be nice to fix the inconsistency. I ran into an issue around this when I was porting code from MSVC++ to G++ 
(For <tt>basic_string</tt>, MSVC++'s STL implementation, based on Dinkumware, ignores the call if <tt>res_arg &lt; capacity()</tt> 
whereas GCC's STL implementation, libstdc++ will actually shrink the string. For the code I wrote this caused a huge 
performance issue since we were reallocating the entire string with every call to <tt>reserve</tt>. Of course we could have 
worked around it by doing the <tt>res_arg &lt; capacity()</tt> check ourselves, but I think this inconsistency in the 
standard isn't desirable).
<p/>
My proposal is to change <sref ref="[string.capacity]"/> paragraph 11 to read:
</p>
<blockquote>
<p>
-11- <i>Effects:</i> After <tt>reserve()</tt>, <tt>capacity()</tt> is greater or equal to the argument of <tt>reserve</tt> 
if reallocation happens; and equal to the previous value of <tt>capacity()</tt> otherwise. Reallocation happens at 
this point if and only if the current capacity is less than the argument of <tt>reserve()</tt>.
</p>
</blockquote>
<p>
I realize that this causes the <tt>basic_string::reserve</tt> to no longer have the secondary property of shrinking, 
but this is what <tt>shrink_to_fit</tt> is for.
</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4659">N4659</a>.</p>

<ol>
<li>
<p>Edit <sref ref="[string.capacity]"/> as indicated:</p>

<blockquote>
<pre>
void reserve(size_type res_arg=0);
</pre>
<blockquote>
<p>
-10- The member function <tt>reserve()</tt> is a directive that informs a <tt>basic_string</tt> object of a planned change
in size, so that it can manage the storage allocation accordingly.
<p/>
-11- <i>Effects:</i> After <tt>reserve()</tt>, <tt>capacity()</tt> is greater or equal to the argument of <tt>reserve</tt><ins>,
if reallocation happens; and equal to the previous value of <tt>capacity()</tt> otherwise. Reallocation happens at this point 
if and only if the current capacity is less than the argument of <tt>reserve()</tt></ins>. 
<del>[<i>Note:</i> Calling <tt>reserve()</tt> with a <tt>res_arg</tt> argument less than <tt>capacity()</tt> is in effect a 
non-binding shrink request. A call with <tt>res_arg &lt;= size()</tt> is in effect a non-binding shrink-to-fit 
request. &mdash; <i>end note</i>]</del>
<p/>
-12- <i>Throws:</i> <tt>length_error</tt> if <tt>res_arg &gt; max_size()</tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
