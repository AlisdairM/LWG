<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3047" status="New">
<title><tt>atomic</tt> compound assignment operators can cause undefined behavior when corresponding 
<tt>fetch_<i>meow</i></tt> members don't</title>
<section><sref ref="[atomics.types.int]"/><sref ref="[atomics.types.pointer]"/><sref ref="[atomics.types.memop]"/></section>
<submitter>Tim Song</submitter>
<date>15 Dec 2017</date>
<priority>3</priority>

<discussion>
<p>
Given <tt>atomic&lt;int&gt; meow{INT_MAX};</tt>, <tt>meow.fetch_add(1)</tt> has well-defined behavior because <sref ref="[atomics.types.int]"/> p7 says that
<blockquote>
<p>
<i>Remarks:</i> For signed integer types, arithmetic is defined to use two's complement representation. There are no undefined results.
</p>
</blockquote>
but <tt>meow += 1</tt> and <tt>++meow</tt> have undefined behavior, because these operator functions are defined (by, respectively, 
<sref ref="[atomics.types.int]"/> p8 and <sref ref="[atomics.types.memop]"/>) to be equivalent to <tt>return fetch_add(1) + 1;</tt>, 
and so the addition of 1 to the result of <tt>fetch_add</tt> &mdash; which causes an integer overflow in this case &mdash; occurs 
outside the protection of <tt>fetch_add</tt> magic. Additionally, the return value might differ from what <tt>fetch_add</tt> actually
wrote since that addition isn't required to use two's complement. This seems like a trap for the unwary. Is it intended?
<p/>
A similar issue affects the <tt>atomic&lt;T*&gt;</tt> partial specialization for pointers.
</p>
<note>2018-01; Priority set to 3 after mailing list discussion</note>

<note>2019-04-15; JF Bastien comments and provides wording</note>
<p>
As  in <a href="http://wiki.edg.com/bin/view/Wg21sandiego2018/LWGD1236Review">LWG during the San Diego 2018 meeting</a>, 
Jens removed LWG 3047 from <a href="http://wg21.link/p1236r1">"P1236R1: Alternative Wording for P0907R4 Signed Integers are 
Two's Complement"</a>.
</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4810">N4810</a>.</p>

<ol>
<li><p>Modify <sref ref="[atomics.ref.int]"/> as indicated:</p>

<blockquote>
<pre>
<i>integral</i> operator <i>op</i>=(<i>integral</i> operand) const noexcept;
</pre>
<blockquote>
<p>
-7- <i>Effects:</i> Equivalent to: <tt>return 
<ins>static_cast&lt;<i>integral</i>&gt;(static_cast&lt;make_unsigned_t&lt;<i>integral</i>&gt;&gt;(</ins>fetch_<i>key</i>(operand)<ins>)</ins> 
<i>op</i> <ins>static_cast&lt;make_unsigned_t&lt;<i>integral</i>&gt;&gt;(</ins>operand<ins>))</ins>;</tt>
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[atomics.ref.memop]"/> as indicated:</p>

<blockquote>
<pre>
T* operator++() const noexcept;
</pre>
<blockquote>
<p>
-3- <i>Effects:</i> Equivalent to: <tt>return 
<ins>static_cast&lt;T&gt;(static_cast&lt;make_unsigned_t&lt;T&gt;&gt;(</ins>fetch_add(1)<ins>)</ins> + 
<ins>static_cast&lt;make_unsigned_t&lt;T&gt;&gt;(</ins>1<ins>))</ins>;</tt>
</p>
</blockquote>
<pre>
T* operator--(<del>int</del>) const noexcept;
</pre>
<blockquote>
<p>
-4- <i>Effects:</i> Equivalent to: <tt>return 
<ins>static_cast&lt;T&gt;(static_cast&lt;make_unsigned_t&lt;T&gt;&gt;(</ins>fetch_sub(1)<ins>)</ins> - 
<ins>static_cast&lt;make_unsigned_t&lt;T&gt;&gt;(</ins>1<ins>))</ins>;</tt>
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[atomics.types.int]"/> as indicated:</p>

<blockquote>
<pre>
T operator <i>op</i>=(T operand) volatile noexcept;
T operator <i>op</i>=(T operand) noexcept;
</pre>
<blockquote>
<p>
-8- <i>Effects:</i> Equivalent to: <tt>return 
<ins>static_cast&lt;T&gt;(static_cast&lt;make_unsigned_t&lt;T&gt;&gt;(</ins>fetch_<i>key</i>(operand)<ins>)</ins> 
<i>op</i> <ins>static_cast&lt;make_unsigned_t&lt;T&gt;&gt;(</ins>operand<ins>))</ins>;</tt>
</p>
</blockquote>
</blockquote>

<blockquote class="note">
<p>
[<i>Drafting note:</i> <tt>atomic&lt;<i>integral</i>&gt;</tt>'s working for <tt>operator++/operator--</tt> 
is shared with <tt>atomic&lt;T*&gt;</tt>. &mdash; <i>end drafting note</i>]
<p/>
[<i>Drafting note:</i> <tt>atomic&lt;<i>floating-point</i>&gt;</tt> seems to be correct, LWG should confirm 
that it is. &mdash; <i>end drafting note</i>]
</p>
</blockquote>
</li>

<li><p>Modify <sref ref="[atomics.types.pointer]"/> as indicated:</p>

<blockquote>
<pre>
T* operator <i>op</i>=(ptrdiff_t operand) volatile noexcept;
T* operator <i>op</i>=(ptrdiff_t operand) noexcept;
</pre>
<blockquote>
<p>
-8- <i>Effects:</i> Equivalent to: <tt>return 
<ins>reinterpret_cast&lt;T*&gt;(reinterpret_cast&lt;ptrdiff_t&gt;(</ins>fetch_<i>key</i>(operand)<ins>)</ins> 
<i>op</i> operand<ins>)</ins>;</tt>
<p/>
<ins><i>Remarks:</i> The result may be an undefined address, but the operations otherwise have no undefined behavior.</ins>
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[atomics.types.memop]"/> as indicated:</p>

<blockquote>
<pre>
T operator++() volatile noexcept;
T operator++() noexcept;
</pre>
<blockquote>
<p>
-3- <i>Effects:</i> Equivalent to: <tt>return 
<ins>static_cast&lt;T&gt;(static_cast&lt;make_unsigned_t&lt;T&gt;&gt;(</ins>fetch_add(1)<ins>)</ins> + 
<ins>static_cast&lt;make_unsigned_t&lt;T&gt;&gt;(</ins>1<ins>))</ins>;</tt>
</p>
</blockquote>
<pre>
T operator--() volatile noexcept;
T operator--() noexcept;
</pre>
<blockquote>
<p>
-4- <i>Effects:</i> Equivalent to: <tt>return 
<ins>static_cast&lt;T&gt;(static_cast&lt;make_unsigned_t&lt;T&gt;&gt;(</ins>fetch_sub(1)<ins>)</ins> - 
<ins>static_cast&lt;make_unsigned_t&lt;T&gt;&gt;(</ins>1<ins>))</ins>;</tt>
</p>
</blockquote>
</blockquote>

<blockquote class="note">
<p>
[<i>Drafting note:</i> Alternatively, LWG may want to separate the integral overload of <tt>operator++/operator--</tt> 
from that of <tt>atomic&lt;T*&gt;</tt>. <i>end drafting note</i>]
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>