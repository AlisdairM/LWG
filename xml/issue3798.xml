<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3798" status="Voting">
<title>Rvalue reference and <tt>iterator_category</tt></title>
<section><sref ref="[iterator.traits]"/></section>
<submitter>Jiang An</submitter>
<date>22 Oct 2022</date>
<priority>99</priority>

<discussion>
<p>
Since C++11, a forward iterator may have an rvalue reference as its <tt>reference</tt> type. 
I think this is an intentional change made by <paper num="N3066"/>. However, several components 
added (or changed) in C++20/23 recognize an iterator as a <i>Cpp17ForwardIterator</i> (by using 
<tt>forward_iterator_tag</tt> or a stronger iterator category tag type as the <tt>iterator_category</tt> 
type) only if the <tt>reference</tt> type would be an lvalue reference type, which seems a regression.
</p>

<note>2022-11-01; Reflector poll</note>
<p>
Set status to Tentatively Ready after eight votes in favour during reflector poll.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4917"/>.
</p>

<ol>
<li><p>Modify <sref ref="[iterator.traits]"/> as indicated:</p>

<blockquote>
<p>
-2- The definitions in this subclause make use of the following exposition-only concepts:
</p>
<blockquote><pre>
[&hellip;]
template&lt;class I&gt;
concept <i>cpp17-forward-iterator</i> =
  <i>cpp17-input-iterator</i>&lt;I&gt; &amp;&amp; constructible_from&lt;I&gt; &amp;&amp;
  is_<del>lvalue_</del>reference_v&lt;iter_reference_t&lt;I&gt;&gt; &amp;&amp;
  same_as&lt;remove_cvref_t&lt;iter_reference_t&lt;I&gt;&gt;,
          typename indirectly_readable_traits&lt;I&gt;::value_type&gt; &amp;&amp;
  requires(I i) {
    {  i++ } -&gt; convertible_to&lt;const I&amp;&gt;;
    { *i++ } -&gt; same_as&lt;iter_reference_t&lt;I&gt;&gt;;
  };
[&hellip;]
</pre></blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.transform.iterator]"/> as indicated:</p>

<blockquote>
<p>
-2- The member <i>typedef-name</i> <tt>iterator_category</tt> is defined if and only if <i>Base</i> 
models <tt>forward_range</tt>. In that case, <tt><i>iterator</i>::iterator_category</tt> is defined 
as follows: Let <tt>C</tt> denote the type <tt>iterator_traits&lt;iterator_t&lt;<i>Base</i>&gt;&gt;::iterator_category</tt>.
</p>
<ol style="list-style-type: none">
<li><p>(2.1) &mdash; If <tt>is_<del>lvalue_</del>reference_v&lt;invoke_result_t&lt;<i>maybe-const</i>&lt;Const, F&gt;&amp;, 
range_reference_t&lt;<i>Base</i>&gt;&gt;&gt;</tt> is <tt>true</tt>, then</p>
<ol style="list-style-type: none">
<li><p>(2.1.1) &mdash; if <tt>C</tt> models <tt>derived_from&lt;contiguous_iterator_tag&gt;</tt>, 
<tt>iterator_category denotes random_access_iterator_tag</tt>;</p></li>
<li><p>(2.1.2) &mdash; otherwise, <tt>iterator_category</tt> denotes <tt>C</tt>.</p></li>
</ol>
</li>
<li><p>(2.2) &mdash; Otherwise, <tt>iterator_category</tt> denotes <tt>input_iterator_tag</tt>.</p></li>
</ol>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.join.with.iterator]"/> as indicated:</p>

<blockquote>
<p>
-2- The member <i>typedef-name</i> <tt>iterator_category</tt> is defined if and only if <tt><i>ref-is-glvalue</i></tt> 
is <tt>true</tt>, and <tt><i>Base</i></tt> and <tt><i>InnerBase</i></tt> each model <tt>forward_range</tt>. In that case, 
<tt><i>iterator</i>::iterator_category</tt> is defined as follows:
</p>
<ol style="list-style-type: none">
<li><p>(2.1) &mdash; [&hellip;]</p></li>
<li><p>(2.2) &mdash; If</p>
<blockquote><pre>
is_<del>lvalue_</del>reference_v&lt;common_reference_t&lt;iter_reference_t&lt;<i>InnerIter</i>&gt;,
                      iter_reference_t&lt;<i>PatternIter</i>&gt;&gt;&gt;
</pre></blockquote>
<p>
is <tt>false</tt>, <tt>iterator_category</tt> denotes <tt>input_iterator_tag</tt>.
</p>
</li>
<li><p>(2.3) &mdash; [&hellip;]</p></li>
</ol>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.zip.transform.iterator]"/> as indicated:</p>

<blockquote>
<p>
-1- The member <i>typedef-name</i> <tt><i>iterator</i>::iterator_category</tt> is defined if and only if 
<tt><i>Base</i></tt> models <tt>forward_range</tt>. In that case, <tt><i>iterator</i>::iterator_category</tt> 
is defined as follows:
</p>
<ol style="list-style-type: none">
<li><p>(1.1) &mdash; If</p>
<blockquote><pre>
invoke_result_t&lt;<i>maybe-const</i>&lt;Const, F&gt;&amp;, range_reference_t&lt;<i>maybe-const</i>&lt;Const, Views&gt;&gt;...&gt;
</pre></blockquote>
<p>
is not a<del>n lvalue</del> reference, <tt>iterator_category</tt> denotes <tt>input_iterator_tag</tt>.
</p>
</li>
<li><p>(1.2) &mdash; [&hellip;]</p></li>
</ol>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.adjacent.transform.iterator]"/> as indicated:</p>

<blockquote>
<p>
-1- The member <i>typedef-name</i> <tt><i>iterator</i>::iterator_category</tt> is defined as follows:
</p>
<ol style="list-style-type: none">
<li><p>(1.1) &mdash; If 
<tt>invoke_result_t&lt;<i>maybe-const</i>&lt;Const, F&gt;&amp;, <i>REPEAT</i>(range_reference_t&lt;<i>Base</i>&gt;, N)...&gt;</tt>
is not a<del>n lvalue</del> reference, <tt>iterator_category</tt> denotes <tt>input_iterator_tag</tt>.
</p>
</li>
<li><p>(1.2) &mdash; [&hellip;]</p></li>
</ol>
</blockquote>
</li>

</ol>

</resolution>

</issue>
