<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3423" status="New">
<title><tt>std::any_cast</tt> should never return a <i>cv</i>-qualified type</title>
<section><sref ref="[any.nonmembers]"/></section>
<submitter>Casey Carter</submitter>
<date>02 Apr 2020</date>
<priority>3</priority>

<discussion>
<p>
The return type of the non-pointer overloads of <tt>std::any_cast&lt;T&gt;</tt> is <tt>T</tt>. This is silly 
when <tt>T</tt> is <i>cv</i>-qualified (and, since merging <a href="http://wg21.link/p1152">P1152</a> 
"Deprecating volatile" into the working draft, deprecated when <tt>T</tt> is <tt>volatile</tt>-qualified). 
We should strip <i>cv</i>-qualifiers to determine the type returned.
</p>

<note>2020-04-18 Issue Prioritization</note>
<p>Priority to 3 after reflector discussion.</p>
</discussion>

<resolution>
<p>
This wording is relative to <a href="http://wg21.link/n4861">N4861</a>.
</p>

<ol>
<li><p>Modify <sref ref="[any.synop]"/> as indicated:</p>

<blockquote>
<pre>
[&hellip;]
template&lt;class T&gt;
  <ins>remove_cv_t&lt;</ins>T<ins>&gt;</ins> any_cast(const any&amp; operand);
template&lt;class T&gt;
  <ins>remove_cv_t&lt;</ins>T<ins>&gt;</ins> any_cast(any&amp; operand);
template&lt;class T&gt;
  <ins>remove_cv_t&lt;</ins>T<ins>&gt;</ins> any_cast(any&amp;&amp; operand);
[&hellip;]
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[any.nonmembers]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class T&gt;
  <ins>remove_cv_t&lt;</ins>T<ins>&gt;</ins> any_cast(const any&amp; operand);
template&lt;class T&gt;
  <ins>remove_cv_t&lt;</ins>T<ins>&gt;</ins> any_cast(any&amp; operand);
template&lt;class T&gt;
  <ins>remove_cv_t&lt;</ins>T<ins>&gt;</ins> any_cast(any&amp;&amp; operand);
</pre>
<blockquote>
<p>
-4- Let <ins><tt>R</tt> be the type <tt>remove_cv_t&lt;T&gt;</tt>, and</ins> <tt>U</tt> 
be the type <tt>remove_cvref_t&lt;T&gt;</tt>.
<p/>
-5- <i>Mandates:</i> For the first overload, <tt>is_constructible_v&lt;<del>T</del><ins>R</ins>, const U&amp;&gt;</tt> is <tt>true</tt>. 
For the second overload, <tt>is_constructible_v&lt;<del>T</del><ins>R</ins>, U&amp;&gt;</tt> is <tt>true</tt>. For the third overload, 
<tt>is_constructible_v&lt;<del>T</del><ins>R</ins>, U&gt;</tt> is <tt>true</tt>.
<p/>
-6- <i>Returns:</i> For the first and second overload, <tt>static_cast&lt;<del>T</del><ins>R</ins>&gt;(*any_cast&lt;U&gt;(&amp;operand))</tt>. 
For the third overload, <tt>static_cast&lt;<del>T</del><ins>R</ins>&gt;(std::move(*any_cast&lt;U&gt;(&amp;operand)))</tt>.
<p/>
-7- <i>Throws:</i> <tt>bad_any_cast</tt> if <tt>operand.type() != typeid(remove_reference_t&lt;T&gt;)</tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>
</issue>
