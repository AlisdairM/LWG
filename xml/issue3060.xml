<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3060" status="New">
<title><tt>XXX_scan</tt> algorithms are specified to work with move-only <tt>T</tt>, but are 
specified to make <tt><i>N</i></tt> copies of <tt>T</tt> into the destination range</title>
<section><sref ref="[exclusive.scan]"/><sref ref="[inclusive.scan]"/>
<sref ref="[transform.exclusive.scan]"/><sref ref="[transform.inclusive.scan]"/></section>
<submitter>Billy O'Neal III</submitter>
<date>6 Feb 2018</date>
<priority>2</priority>

<discussion>
<p>
All of the scan algorithms ([exclusive.scan], [inclusive.scan], [transform.exclusive.scan], [transform.inclusive.scan]) have language like "If <tt>init</tt> is provided, <tt>T</tt> shall be 
<tt>MoveConstructible</tt> (Table 23); otherwise, <tt>ForwardIterator1</tt>'s value type shall be
<tt>MoveConstructible</tt>.". However, the algorithms operational semantics require that that type 
be written "by copy" to the destination range, making support for move only types impossible.
<p/>
We probably need to examine real implementations of these things and see what requirements are actually 
necessary, as in general <tt><i>GENERALIZED_SUM</i></tt> and <tt><i>GENERALIZED_NONCOMMUTATIVE_SUM</i></tt> 
need to specify the type used to store intermediate calculations.
</p>

<note>2019-01-20 Reflector prioritization</note>
<p>Set Priority to 2</p>
</discussion>

<resolution>
</resolution>

</issue>
