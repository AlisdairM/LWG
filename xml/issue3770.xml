<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3770" status="Voting">
<title><tt>const_sentinel_t</tt> is missing</title>
<section><sref ref="[ranges.syn]"/></section>
<submitter>Hewill Kang</submitter>
<date>05 Sep 2022</date>
<priority>3</priority>

<discussion>
<p>
The type alias pair <tt>const_iterator</tt> and <tt>const_sentinel</tt> 
and the factory function pair <tt>make_const_iterator</tt> and 
<tt>make_const_sentinel</tt> are defined in <tt>&lt;iterator&gt;</tt>, 
however, only <tt>const_iterator_t</tt> exists in <tt>&lt;ranges&gt;</tt>, 
which lacks <tt>const_sentinel_t</tt>, we should add it to ensure consistency.
<p/>
The proposed resolution also lifts the type constraint of <tt>const_iterator_t</tt> 
to <tt>input_range</tt> to make it consistent with <tt>const_iterator</tt>, 
which already requires that its template parameter must model 
<tt>input_iterator</tt>.
</p>

<note>2022-09-23; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
<p/>
Comment from a reviewer:
</p>
<blockquote><p>
"I don't see why we should redundantly constrain <tt>const_iterator_t</tt>
with <tt>input_range</tt>; it's not as if we can make it more ill-formed
or more SFINAE-friendly than it is now."
</p></blockquote>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>
This wording is relative to <paper num="n4917"/>.
</p>

<ol>

<li><p>Modify <sref ref="[ranges.syn]"/>, header <tt>&lt;ranges&gt;</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
#include &lt;compare&gt;              // <i>see <sref ref="[compare.syn]"/></i>
#include &lt;initializer_list&gt;     // <i>see <sref ref="[initializer.list.syn]"/></i>
#include &lt;iterator&gt;             // <i>see <sref ref="[iterator.synopsis]"/></i>

namespace std::ranges {
  [&hellip;]
  template&lt;class T&gt;
    using iterator_t = decltype(ranges::begin(declval&lt;T&amp;&gt;()));                      // freestanding
  template&lt;range R&gt;
    using sentinel_t = decltype(ranges::end(declval&lt;R&amp;&gt;()));                        // freestanding
  template&lt;<ins>input_</ins>range R&gt;
    using const_iterator_t = const_iterator&lt;iterator_t&lt;R&gt;&gt;;                         // freestanding
  <ins>template&lt;range R&gt;
    using const_sentinel_t = const_sentinel&lt;sentinel_t&lt;R&gt;&gt;;                         // freestanding</ins>
  [&hellip;]
}
</pre>
</blockquote>
</li>

</ol>
</blockquote>

<note>2022-09-25; Daniel and Hewill provide alternative wording</note>
<p>
The alternative solution solely adds the suggested <tt>const_sentinel_t</tt> alias template
and doesn't touch the <tt>const_iterator_t</tt> constraints.
</p>

<note>2022-10-12; Reflector poll</note>
<p>Set status to "Tentatively Ready" after seven votes in favour.</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="n4917"/>.
</p>

<ol>

<li><p>Modify <sref ref="[ranges.syn]"/>, header <tt>&lt;ranges&gt;</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
#include &lt;compare&gt;              // <i>see <sref ref="[compare.syn]"/></i>
#include &lt;initializer_list&gt;     // <i>see <sref ref="[initializer.list.syn]"/></i>
#include &lt;iterator&gt;             // <i>see <sref ref="[iterator.synopsis]"/></i>

namespace std::ranges {
  [&hellip;]
  template&lt;class T&gt;
    using iterator_t = decltype(ranges::begin(declval&lt;T&amp;&gt;()));                      // freestanding
  template&lt;range R&gt;
    using sentinel_t = decltype(ranges::end(declval&lt;R&amp;&gt;()));                        // freestanding
  template&lt;range R&gt;
    using const_iterator_t = const_iterator&lt;iterator_t&lt;R&gt;&gt;;                         // freestanding
  <ins>template&lt;range R&gt;
    using const_sentinel_t = const_sentinel&lt;sentinel_t&lt;R&gt;&gt;;                         // freestanding</ins>
  [&hellip;]
}
</pre>
</blockquote>
</li>

</ol>
</resolution>

</issue>
