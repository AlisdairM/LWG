<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3898" status="New">
<title>Possibly unintended preconditions for completion functions of <tt>std::barrier</tt></title>
<section><sref ref="[thread.barrier.class]"/></section>
<submitter>Jiang An</submitter>
<date>02 Mar 2023</date>
<priority>99</priority>

<discussion>
<p>
<sref ref="[thread.barrier.class]"/>/5 currently says:
</p>
<blockquote style="border-left: 3px solid #ccc;padding-left: 15px;">
[&hellip;] <tt>is_nothrow_invocable_v&lt;CompletionFunction&amp;&gt;</tt> shall be <tt>true</tt>.
</blockquote>
<p>
This requirement introduces a kind of undefined behavior and permits implementation divergence. Currently 
<a href="https://github.com/microsoft/STL/blob/16bb556afe5c56fe70a5508a6116842c226dd3be/stl/inc/barrier#L72-L77">MSVC STL</a>
enforces the requirement, while 
<a href="https://github.com/gcc-mirror/gcc/blob/4ea6bfedc8759cef739ae42eee162989112bd85a/libstdc%2B%2B-v3/include/std/barrier">libstdc++</a> 
and 
<a href="https://github.com/llvm/llvm-project/blob/9a77a6f80252288d536b3aa471f241786a54068b/libcxx/include/barrier">libc++</a> 
don't.
<p/>
If implementation divergence is not intended, I don't think it makes much sense to introduce UB in this way. 
I guess we should either strengthen the requirement to require well-formedness affection or relax it.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4928"/>.
</p>

<blockquote class="note">
<p>
[<i>Drafting Note:</i> Two mutually exclusive options are prepared, depicted below by <b>Option A</b> and 
<b>Option B</b>, respectively.] 
</p>
</blockquote>

<p>
<b>Option A:</b> Effectively impose a <i>Mandates:</i> requirement.
</p>

<ol>

<li><p>Modify <sref ref="[thread.barrier.class]"/> as indicated:</p>

<blockquote>
<p>
-5- <tt>CompletionFunction</tt> shall meet the <i>Cpp17MoveConstructible</i> (Table 32) and <i>Cpp17Destructible</i> (Table 36)
requirements. <ins>Instantiation of <tt>barrier&lt;CompletionFunction&gt;</tt> is ill-formed if 
<tt>is_nothrow_invocable_v&lt;CompletionFunction&amp;&gt;</tt> is not 
<tt>true</tt></ins><del><tt>is_nothrow_invocable_v&lt;CompletionFunction&amp;&gt;</tt> shall be <tt>true</tt></del>.
</p>
</blockquote>

</li>

</ol>

<p>
<b>Option B:</b> Clarify that we impose a no-throw precondition here, whose violation causes UB.
</p>

<ol>

<li><p>Modify <sref ref="[thread.barrier.class]"/> as indicated:</p>

<blockquote>
<p>
-3- The <i>phase completion step</i> that is executed at the end of each phase has the following effects:
</p>
<ol style="list-style-type: none">
<li><p>(3.1) &mdash; Invokes the completion function, equivalent to <tt>completion()</tt>. <ins>If any invocation 
to the completion function throws an exception, the behavior is undefined.</ins></p></li>
<li><p>(3.2) &mdash; Unblocks all threads that are blocked on the phase synchronization point.</p></li>
</ol>
<p>
[&hellip;]
<p/>
-5- <tt>CompletionFunction</tt> shall meet the <i>Cpp17MoveConstructible</i> (Table 32) and <i>Cpp17Destructible</i> (Table 36)
requirements. <del><tt>is_nothrow_invocable_v&lt;CompletionFunction&amp;&gt;</tt> shall be <tt>true</tt>.</del>
</p>
</blockquote>

</li>

</ol>
</resolution>

</issue>
