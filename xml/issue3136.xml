<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3136" status="Voting">
<title>[fund.ts.v3] LFTSv3 awkward wording in <tt>propagate_const</tt> requirements</title>
<section><sref ref="[propagate_const.class_type_requirements]"/></section>
<submitter>Thomas K&ouml;ppe</submitter>
<date>2 Jul 2018</date>
<priority>3</priority>

<discussion>
<p><b>Addresses: fund.ts.v3</b></p>
<p>
In the LFTSv3 prospective-working-paper <a href="https://wg21.link/n4758">N4758</a>, [propagate_const.class_type_requirements] 
uses a strange turn of phrase:
</p>
<blockquote><p>
"In this sub-clause, <tt>t</tt> denotes a non-<tt>const</tt> lvalue of type <tt>T</tt>, <tt>ct</tt> is a <tt>const T&amp;</tt> 
bound to <tt>t</tt>, [&hellip;]"
</p></blockquote>
<p>
The last bit is strange: "<tt>ct</tt> is a <tt>const T&amp;</tt> bound to <tt>t</tt>" is not how we usually say things. 
The specification-variables usually denote values, and values can't be references. Perhaps we could just say, 
"<tt>ct</tt> is <tt>as_const(t)</tt>"?
</p>

<note>2018-07-20 Priority set to 3 after reflector discussion</note>
<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>
This wording is relative to <a href="https://wg21.link/n4758">N4758</a>.
</p>

<ol>
<li>
<p>
Edit <sref ref="[propagate_const.class_type_requirements]"/> as indicated:
</p>
<blockquote>
<p>
-1- If <tt>T</tt> is class type then it shall satisfy the following requirements. In this sub-clause <tt>t</tt> denotes 
a non-<tt>const</tt> lvalue of type <tt>T</tt>, <tt>ct</tt> is <del>a 
<tt>const T&amp;</tt> bound to <tt>t</tt></del><ins><tt>as_const(t)</tt></ins>, <tt>element_type</tt> denotes an object type. 
</p>
</blockquote>
</li>
</ol>
</blockquote>

<note>2022-10-12; Jonathan provides improved wording</note>

<note>2022-10-19; Reflector poll</note>
<p>
Set status to "Tentatively Ready" after eight votes in favour in reflector poll.
</p>

</discussion>

<resolution>

<p>
This wording is relative to <paper num="N4920"/>.
</p>

<ol>
<li>
<p>
Edit <sref ref="[propagate_const.requirements]"/> as indicated:
</p>
<blockquote>
<p>-1-
<code>T</code> shall be
<ins>a cv-unqualified pointer-to-object type</ins>
<del>an object pointer type</del>
or a <ins>cv-unqualified</ins>
class type for which
<code>decltype(*declval&lt;T&amp;&gt;())</code> is an lvalue reference
<ins>to object type</ins>;
otherwise the program is ill-formed.
</p>
<p><del>-2-
If <code>T</code> is an array type, reference type, pointer to function type or
pointer to (possibly cv-qualified) <code>void</code>, then the program is
ill-formed.
</del>
</p>
<p>-3-
[<em>Note:</em>
<code>propagate_const&lt;const int*&gt;</code> is well-formed
<ins>but propagate_const&lt;int* const&gt; is not.</ins>
&mdash; <em>end note</em>]
</p>
</blockquote>
</li>

<li>
<p>
Edit <sref ref="[propagate_const.class_type_requirements]"/> as indicated:
</p>
<blockquote>
<p>-1-
If <tt>T</tt> is class type then it shall satisfy the following requirements.
In this sub-clause <tt>t</tt> denotes
<del>a non-<tt>const</tt></del><ins>an</ins>
lvalue of type <tt>T</tt>, <tt>ct</tt>
<del>is a <tt>const T&amp;</tt> bound to <tt>t</tt>, <tt>element_type</tt> denotes an object type.</del>
<ins>denotes <tt>as_const(t)</tt>.</ins>
</p>
</blockquote>
</li>
</ol>

</resolution>

</issue>
