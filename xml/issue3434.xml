<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3434" status="WP">
<title><tt>ios_base</tt> never reclaims memory for <tt>iarray</tt> and <tt>parray</tt></title>
<section><sref ref="[ios.base.cons]"/></section>
<submitter>Alisdair Meredith</submitter>
<date>26 Apr 2020</date>
<priority>99</priority>

<discussion>
<p>
According to <sref ref="[ios.base.storage]"/> the class <tt>ios_base</tt> allocates memory,
represented by two exposition-only pointers, <tt>iarray</tt> and <tt>parray</tt> in response
to calls to <tt>iword</tt> and <tt>pword</tt>. However, the specification for the destructor
in <sref ref="[ios.base.cons]"/> says nothing about reclaiming any allocated memory.
</p>

<note>2020-07-17; Reflector prioritization</note>
<p>
Set priority to 0 and status to Tentatively Ready after six votes in favour during reflector discussions.
</p>
<note>2020-11-09 Approved In November virtual meeting. Status changed: Tentatively Ready &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4861">N4861</a>.
</p>

<ol>
<li><p>Modify <sref ref="[ios.base.cons]"/> as indicated:</p>

<blockquote class="note">
<p>
[<i>Drafting note:</i> Wording modeled on container requirements]
</p>
</blockquote>

<blockquote>
<pre>
~ios_base();
</pre>
<blockquote>
<p>
-2- <i>Effects:</i> Calls each registered callback pair <tt>(fn, idx)</tt> 
(<sref ref="[ios.base.callback]"/>) as <tt>(*fn)(erase_event, *this, idx)</tt> 
at such time that any <tt>ios_base</tt> member function called from within 
<tt>fn</tt> has well-defined results. <ins>Then, any memory obtained is deallocated.</ins>
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>
</issue>
