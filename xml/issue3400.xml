<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3400" status="New">
<title>Does <tt>is_nothrow_convertible</tt> consider destruction of the destination type?</title>
<section><sref ref="[meta.rel]"/></section>
<submitter>Jiang An</submitter>
<date>10 Feb 2020</date>
<priority>99</priority>

<discussion>
<p>
This issue was submitted after a previous <a href="https://github.com/cplusplus/draft/issues/3576">editorial 
change request</a> had been rejected by the project editors.
<p/>
I find that all known implementations (at least 
<a href="https://github.com/microsoft/STL/blob/master/stl/inc/type_traits#L1658">msvcstl</a>, 
<a href="https://github.com/llvm-mirror/libcxx/blob/master/include/type_traits#L1506">libc++</a>, 
<a href="https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/include/std/type_traits#L1458">libstdc++</a> and the sample in <a href="http://wg21.link/p0758r1#Appendix">P0758R1</a>) of <tt>std::is_nothrow_convertible</tt>
may be not clear enough to indicate that whether destruction of the destination type is considered (or not).
<p/>
For example, given a type <tt>Weird</tt> defined as
</p>
<blockquote><pre>
struct Weird 
{
  Weird(int) noexcept {}
  ~Weird() noexcept(false) {}
};
</pre></blockquote>
<p>
Then <tt>std::is_nothrow_convertible_v&lt;int, Weird&gt;</tt> is <tt>false</tt> in every known implementation. 
However, it seems that the conversion itself is <tt>noexcept</tt>.
</p>

<note>2020-02-22, Daniel comments</note>
<p>
This seems to be quite related to the existing issue LWG <iref ref="2116"/>.
</p>
</discussion>

<resolution>
</resolution>
</issue>
