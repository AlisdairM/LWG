<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3697" status="New">
<title>Preconditions of <tt>reference_constructs_from_temporary/reference_converts_from_temporary</tt> seem wrong</title>
<section><sref ref="[meta.unary.prop]"/></section>
<submitter>Jiang An</submitter>
<date>10 May 2022</date>
<priority>3</priority>

<discussion>
<p>
<tt>std::reference_constructs_from_temporary</tt> and <tt>std::reference_converts_from_temporary</tt> are only 
useful when <tt>T</tt> is a reference type, and a reference type is always complete. Whenever <tt>T</tt> is an 
incomplete object type, it's clear that these traits inherit from <tt>std::false_type</tt>, without any further 
detection which may result in UB. However, when <tt>T</tt> is <tt>X&amp;</tt> or <tt>X&amp;&amp;</tt> where 
<tt>X</tt> is an incomplete object type, UB may be needed because of the potentially problematic detection in 
<tt>std::is_constructible</tt> or <tt>std::is_convertible</tt>.
<p/>
I'm not sure whether the general rule in <sref ref="[meta.rqmts]"/>/5 affects these cases.
</p>

<note>2022-05-17; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4910"/>.
</p>

<ol>
<li><p>Modify <sref ref="[meta.type.synop]"/>, Table 46 ([tab:meta.unary.prop]) &mdash; 
"Type property predicates" &mdash; as indicated:</p>

<blockquote>
<table border="1">
<caption>Table 46: Type property predicates [tab:meta.unary.prop]</caption>
<tr>
<th align="center">Template</th>
<th align="center">Condition</th>
<th align="center">Preconditions</th>
</tr>

<tr>
<td colspan="3" align="center">
<tt>&hellip;</tt>
</td>
</tr>

<tr>
<td>
<tt>template&lt;class T, class U&gt;<br/>
struct reference_constructs_from_temporary;</tt>
</td>

<td>
<tt>conjunction_v&lt;is_reference&lt;T&gt;, is_constructible&lt;T, U&gt;&gt;</tt> is<br/> 
<tt>true</tt>, and the initialization <tt>T t(<i>VAL</i>&lt;U&gt;);</tt> binds <tt>t</tt> to a<br/> 
temporary object whose lifetime is extended (<sref ref="[class.temporary]"/>).
</td>

<td>
<ins>If <tt>T</tt> is a reference type, <tt>remove_reference_t&lt;T&gt;</tt><br/> 
and <tt>U</tt></ins><del><tt>T</tt></del> shall be <del>a</del> complete type<ins>s</ins>,<br/>
<i>cv</i> <tt>void</tt>, or <del>an</del> array<ins>s</ins> of unknown bound.
</td>
</tr>

<tr>
<td>
<tt>template&lt;class T, class U&gt;<br/>
struct reference_converts_from_temporary;</tt>
</td>

<td>
<tt>conjunction_v&lt;is_reference&lt;T&gt;, is_convertible&lt;U, T&gt;&gt;</tt> is<br/> 
<tt>true</tt>, and the initialization <tt>T t = <i>VAL</i>&lt;U&gt;;</tt> binds <tt>t</tt> to a<br/> 
temporary object whose lifetime is extended (<sref ref="[class.temporary]"/>).
</td>

<td>
<ins>If</ins> <tt>T</tt> <ins>is a reference type, <tt>remove_reference_t&lt;T&gt;</tt></ins><br/> 
and <tt>U</tt> shall be complete types,<br/>
<i>cv</i> <tt>void</tt>, or arrays of unknown bound.
</td>
</tr>

</table>
</blockquote>

</li>
</ol>
</resolution>

</issue>
