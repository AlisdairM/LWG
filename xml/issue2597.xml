<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2597" status="Tentatively Ready">
<title><tt>std::log</tt> misspecified for complex numbers</title>
<section><sref ref="[complex.transcendentals]"/></section>
<submitter>Thomas Koeppe</submitter>
<date>1 Mar 2016</date>
<priority>3</priority>

<discussion>
<p>
The current specification of <tt>std::log</tt> is inconsistent for complex numbers, specifically, the Returns clause 
(<sref ref="[complex.transcendentals]"/>). On the one hand, it states that the imaginary part of the return value lies 
in the <em>closed</em> interval <tt>[-<i>i</i> &pi;, +<i>i</i> &pi;]</tt>. On the other hand, it says that "the branch 
cuts are along the negative real axis" and "the imaginary part of <tt>log(x)</tt> is <tt>+&pi;</tt> when <tt>x</tt> 
is a negative real number".
</p>
<p>
The inconsistency lies in the difference between the mathematical concept of a branch cut and the nature of floating 
point numbers in C++. The corresponding specification in the C standard makes it clearer that if <tt>x</tt> is a real 
number, then <tt>log(x + 0<i>i</i>) = +&pi;</tt>, but <tt>log(x - 0<i>i</i>) = -&pi;</tt>, i.e. they consider positive 
and negative zero to represent the two different limits of approaching the branch cut from opposite directions. In 
other words, the term "negative real number" is misleading, and in fact there are <em>two distinct</em> real numbers, 
<tt>x + 0<i>i</i></tt> and <tt>x - 0<i>i</i></tt>, that compare equal but whose logarithms differ by <tt>2 &pi; <i>i</i></tt>.
</p>
<p>
The resolution should consist of two parts:
</p>
<ol>
<li><p>Double-check that our usage and definition of "branch cut" is sufficiently unambiguous. The C standard contains 
a lot more wording around this that we don't have in C++.</p></li>
<li><p>Change the Returns clause of <tt>log</tt> appropriately. For example: "When <tt>x</tt> is a negative real number, 
<tt>imag(log(x + 0<i>i</i>))</tt> is <tt>&pi;</tt>, and <tt>imag(log(x - 0<i>i</i>))</tt> is <tt>-&pi;</tt>."</p></li>
</ol>
<p>
Current implementations seem to behave as described in (2). 
(<a href="http://melpon.org/wandbox/permlink/pwBDeGiY3HDtFAh8">Try-it-at-home link</a>)
</p>

<note>2016-11-12, Issaquah</note>
<p>Move to Open - Thomas to provide wording</p>

<note>2016-11-15, Thomas comments and provides wording</note>
<p>
Following LWG discussion in Issaquah, I now propose to resolve this issue by removing the normative requirement on the 
function limits, and instead adding a note that the intention is to match the behaviour of C. This allows implementations 
to use the behaviour of C without having to specify what floating point numbers really are.
<p/>
The change applies to both <tt>std::log</tt> and <tt>std::sqrt</tt>.
<p/>
Updated try-at-home link, see <a href="http://melpon.org/wandbox/permlink/tVYVUNfeZ1yoFnp8">here</a>.
</p>

<note>2017-03-04, Kona</note>
<p>Minor wording update and status to Tentatively Ready.</p>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>
This wording is relative to N4606.
</p>
<ol>
<li><p>Change the "returns" element for <tt>std::log</tt> (<sref ref="[complex.transcendentals]"/> p17):</p>

<blockquote>
<pre>
template&lt;class T&gt; complex&lt;T&gt; log(const complex&lt;T&gt;&amp; x);
</pre>
<blockquote>
<p>
-16- <i>Remarks:</i> The branch cuts are along the negative real axis.
<p/>
-17- <i>Returns:</i> The complex natural (base-&#8495;) logarithm of <tt>x</tt>. For all <tt>x</tt>, <tt>imag(log(x))</tt> 
lies in the interval <tt>[</tt>-&pi;, &pi;<tt>]</tt><del>, and when <tt>x</tt> is a negative real number, <tt>imag(log(x))</tt> 
is &pi;</del>. <ins>[<i>Note:</i> The semantics of <tt>std::log</tt> are intended to be the same in C++ as they are for 
<tt>clog</tt> in C. &mdash; <i>end note</i>]</ins>
</p>
</blockquote>
</blockquote>
</li>

<li><p>Change the "returns" element for <tt>std::sqrt</tt> (<sref ref="[complex.transcendentals]"/> p25):</p>

<blockquote>
<pre>
template&lt;class T&gt; complex&lt;T&gt; sqrt(const complex&lt;T&gt;&amp; x);
</pre>
<blockquote>
<p>
-24- <i>Remarks:</i> The branch cuts are along the negative real axis.
<p/>
-25- <i>Returns:</i> The complex square root of <tt>x</tt>, in the range of the right half-plane. <del>If the argument is a
negative real number, the value returned lies on the positive imaginary axis.</del><ins>[<i>Note:</i> The semantics of 
<tt>std::sqrt</tt> are intended to be the same in C++ as they are for <tt>csqrt</tt> in C. &mdash; <i>end note</i>]</ins>
</p>
</blockquote>
</blockquote>
</li>
</ol>
</blockquote>
</discussion>

<resolution>
<p>
This wording is relative to N4606.
</p>
<ol>
<li><p>Change the "returns" element for <tt>std::log</tt> (<sref ref="[complex.transcendentals]"/> p17):</p>

<blockquote>
<pre>
template&lt;class T&gt; complex&lt;T&gt; log(const complex&lt;T&gt;&amp; x);
</pre>
<blockquote>
<p>
-16- <i>Remarks:</i> The branch cuts are along the negative real axis.
<p/>
-17- <i>Returns:</i> The complex natural (base-&#8495;) logarithm of <tt>x</tt>. For all <tt>x</tt>, <tt>imag(log(x))</tt> 
lies in the interval <tt>[</tt>-&pi;, &pi;<tt>]</tt><del>, and when <tt>x</tt> is a negative real number, <tt>imag(log(x))</tt> 
is &pi;</del>. <ins>[<i>Note:</i> the semantics of this function are intended to be the same in C++ as they are for 
<tt>clog</tt> in C. &mdash; <i>end note</i>]</ins>
</p>
</blockquote>
</blockquote>
</li>

<li><p>Change the "returns" element for <tt>std::sqrt</tt> (<sref ref="[complex.transcendentals]"/> p25):</p>

<blockquote>
<pre>
template&lt;class T&gt; complex&lt;T&gt; sqrt(const complex&lt;T&gt;&amp; x);
</pre>
<blockquote>
<p>
-24- <i>Remarks:</i> The branch cuts are along the negative real axis.
<p/>
-25- <i>Returns:</i> The complex square root of <tt>x</tt>, in the range of the right half-plane. <del>If the argument is a
negative real number, the value returned lies on the positive imaginary axis.</del><ins>[<i>Note:</i> The semantics of 
this function are intended to be the same in C++ as they are for <tt>csqrt</tt> in C. &mdash; <i>end note</i>]</ins>
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
