<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2903" status="Immediate">
<title>The form of initialization for the emplace-constructors is not specified</title>
<section><sref ref="[variant.ctor]"/></section>
<submitter>United States</submitter>
<date>3 Feb 2017</date>
<priority>99</priority>

<discussion>
<b>Addresses US 118</b>

<p>The form of initialization for the emplace-constructors is not specified. We are very clear to mandate "as if by direct 
non-list initialization" for each constructor in <tt>optional</tt>, so there is no ambiguity regarding parens vs. braces. 
That wording idiom should be followed by <tt>variant</tt>.</p>

<p>Proposed change: Insert the phrase "as if direct-non-list-initializing" at appropriate locations in paragraphs 19, 23, 27, and 31</p>

<note>2017-02-20, Marshall adds wording</note>
<note>2017-02-27, Marshall adds wording to cover two more cases</note>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>This wording is relative to <a href="http://wg21.link/n4640">N4640</a>.</p>
<ol>

<li><p>Modify <sref ref="[variant.ctor]"/> paragraph 19 as indicated:</p>
<blockquote>
<i>Effects:</i> Initializes the contained value <ins>as if direct-non-list-initializing an object</ins> of type 
<tt>T</tt> with the arguments <tt>std::forward&lt;Args&gt;(args)...</tt>.
</blockquote>
</li>

<li><p>Modify <sref ref="[variant.ctor]"/> paragraph 23 as indicated:</p>
<blockquote>
<i>Effects:</i> Initializes the contained value as if <ins>direct-non-list-initializing</ins><del>constructing</del> 
an object of type <tt>T</tt> with the arguments <tt>il, std::forward&lt;Args&gt;(args)...</tt>.
</blockquote>
</li>

<li><p>Modify <sref ref="[variant.ctor]"/> paragraph 27 as indicated:</p>
<blockquote>
<i>Effects:</i> Initializes the contained value as if <ins>direct-non-list-initializing</ins><del>constructing</del> 
an object of type <tt>TI</tt> with the arguments <tt>std::forward&lt;Args&gt;(args)...</tt>.
</blockquote>
</li>

<li><p>Modify <sref ref="[variant.ctor]"/> paragraph 31 as indicated:</p>
<blockquote>
<i>Effects:</i> Initializes the contained value as if <ins>direct-non-list-initializing</ins><del>constructing</del> 
an object of type <tt>TI</tt> with the arguments <tt>il, std::forward(args)...</tt>.
</blockquote>
</li>

</ol>
</blockquote>

<note>Kona 2017-02-28</note>
<p>Accepted as Immediate to resolve NB comment.</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4640">N4640</a>.</p>
<ol>

<li><p>Modify <sref ref="[variant.ctor]"/> paragraph 19 as indicated:</p>
<blockquote>
<i>Effects:</i> Initializes the contained value <ins>as if direct-non-list-initializing an object</ins> of type 
<tt>T</tt> with the arguments <tt>std::forward&lt;Args&gt;(args)...</tt>.
</blockquote>
</li>

<li><p>Modify <sref ref="[variant.ctor]"/> paragraph 23 as indicated:</p>
<blockquote>
<i>Effects:</i> Initializes the contained value as if <ins>direct-non-list-initializing</ins><del>constructing</del> 
an object of type <tt>T</tt> with the arguments <tt>il, std::forward&lt;Args&gt;(args)...</tt>.
</blockquote>
</li>

<li><p>Modify <sref ref="[variant.ctor]"/> paragraph 27 as indicated:</p>
<blockquote>
<i>Effects:</i> Initializes the contained value as if <ins>direct-non-list-initializing</ins><del>constructing</del> 
an object of type <tt>TI</tt> with the arguments <tt>std::forward&lt;Args&gt;(args)...</tt>.
</blockquote>
</li>

<li><p>Modify <sref ref="[variant.ctor]"/> paragraph 31 as indicated:</p>
<blockquote>
<i>Effects:</i> Initializes the contained value as if <ins>direct-non-list-initializing</ins><del>constructing</del> 
an object of type <tt>TI</tt> with the arguments <tt>il, std::forward(args)...</tt>.
</blockquote>
</li>

<li><p>Modify <sref ref="[variant.mod]"/> paragraph 6 as indicated:</p>
<blockquote>
<i>Effects:</i> Destroys the currently contained value if <tt>valueless_by_exception()</tt> is false. 
Then <del>direct-</del>initializes the contained value as if 
<ins>direct-non-list-initializing</ins><del>constructing</del> a value of type <tt>TI</tt> with the arguments <tt>std::forward&lt;Args&gt;(args)...</tt>.
</blockquote>
</li>

<li><p>Modify <sref ref="[variant.mod]"/> paragraph 11 as indicated:</p>
<blockquote>
<i>Effects:</i> Destroys the currently contained value if <tt>valueless_by_exception()</tt> is false. 
Then <del>direct-</del>initializes the contained value as if 
<ins>direct-non-list-initializing</ins><del>constructing</del> a value of type <tt>TI</tt> with the arguments <tt>il, std::forward&lt;Args&gt;(args)...</tt>.
</blockquote>
</li>

</ol>
</resolution>

</issue>
