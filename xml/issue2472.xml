<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2472" status="New">
<title>Heterogeneous comparisons in the standard library can result in ambiguities</title>
<section><sref ref="[tuple.rel]"/><sref ref="[allocator.globals]"/><sref ref="[unique.ptr.special]"/>
         <sref ref="[util.smartptr.shared.cmp]"/><sref ref="[time.duration.comparisons]"/>
         <sref ref="[time.point.comparisons]"/><sref ref="[scoped.adaptor.operators]"/>
         <sref ref="[reverse.iter.op==]"/><sref ref="[move.iter.op.comp]"/></section>
<submitter>Richard Smith</submitter>
<date>7 Feb 2015</date>
<priority>3</priority>

<discussion>
<p>
The standard library specifies a lot of heterogeneous comparison operators. For instance:
</p>
<blockquote>
<pre>
template&lt;class... TTypes, class... UTypes&gt;
constexpr bool operator!=(const tuple&lt;TTypes...&gt;&amp;, const tuple&lt;UTypes...&gt;&amp;);
</pre>
</blockquote>
<p>
This has an unfortunate consequence:
</p>
<blockquote>
<pre>
#include &lt;tuple&gt;
#include &lt;utility&gt;

using namespace std::rel_ops;
std::tuple&lt;int&gt; a(0);
bool b = a != a;
</pre>
</blockquote>
<p>
The last line here is ill-formed due to ambiguity: it might be <tt>rel_ops::operator!=</tt>, and it might be the 
heterogeneous tuple <tt>operator!=</tt>. These are not partially ordered, because they have different constraints: 
<tt>rel_ops</tt> requires the types to match, whereas the tuple comparison requires both types to be tuples (but not 
to match). The same thing happens for user code that defines its own unconstrained 
'<tt>template&lt;typename T&gt; operator!=(const T&amp;, const T&amp;)</tt>' rather than using <tt>rel_ops</tt>.
<p/>
One straightforward fix would be to add a homogeneous overload for each heterogeneous comparison:
</p>
<blockquote>
<pre>
template&lt;class... TTypes&gt;
constexpr bool operator!=(const tuple&lt;TTypes...&gt;&amp;, const tuple&lt;TTypes...&gt;&amp;);
</pre>
<p>
This is then unambiguously chosen over the other options in the preceding case. FWIW, libstdc++ already does this 
<a href="https://gcc.gnu.org/onlinedocs/gcc-4.6.4/libstdc++/api/a01065_source.html#l00788">in some cases</a>.
</p>
</blockquote>
</discussion>

<resolution>
</resolution>

</issue>
