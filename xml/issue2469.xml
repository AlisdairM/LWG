<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2469" status="New">
<title>Wrong specification of Requires clause of <tt>operator[]</tt> for <tt>map</tt> and <tt>unordered_map</tt></title>
<section><sref ref="[map.access]"/><sref ref="[unord.map.elem]"/></section>
<submitter>Tomasz Kami&nacute;ski</submitter>
<date>21 Jan 2015</date>
<priority>3</priority>

<discussion>
<p>
The "Requires:" clause for the <tt>operator[]</tt> for the <tt>unordered_map</tt> and <tt>map</tt>, are defining 
separate requirements for insertability into container of <tt>mapped_type</tt> and <tt>key_type</tt>.
<p/>
<sref ref="[map.access]"/> p2: // <tt>T&amp; operator[](const key_type&amp; x);</tt>
<p/>
<i>Requires</i>: <tt>key_type</tt> shall be <tt>CopyInsertable</tt> and <tt>mapped_type</tt> shall be <tt>DefaultInsertable</tt> 
into <tt>*this</tt>.
<p/>
<sref ref="[map.access]"/> p6: // <tt>T&amp; operator[](key_type&amp;&amp; x)</tt>
<p/>
<i>Requires</i>: <tt>mapped_type</tt> shall be <tt>DefaultInsertable</tt> into <tt>*this</tt>.
<p/>
<sref ref="[unord.map.elem]"/> p1: // <tt>mapped_type&amp; operator[](const key_type&amp; k); 
mapped_type&amp; operator[](key_type&amp;&amp; k);</tt>
<p/>
<i>Requires</i>: <tt>mapped_type</tt> shall be <tt>DefaultInsertable</tt> into <tt>*this</tt>. For the first operator, 
<tt>key_type</tt> shall be <tt>CopyInsertable</tt> into <tt>*this</tt>. For the second operator, <tt>key_type</tt> shall 
be <tt>MoveConstructible</tt>.
<p/>
Definition of the appropriate requirements: <sref ref="[container.requirements.general]"/> p15.
<p/>
<tt>T</tt> is <tt>DefaultInsertable</tt> into <tt>X</tt> means that the following expression is well-formed: //p15.1
<p/>
<tt>allocator_traits&lt;A&gt;::construct(m, p)</tt>
<p/>
<tt>T</tt> is <tt>MoveInsertable</tt> into <tt>X</tt> means that the following expression is well-formed:   //p15.3
<p/>
<tt>allocator_traits&lt;A&gt;::construct(m, p, rv)</tt>
<p/>
<tt>T</tt> is <tt>CopyInsertable</tt> into <tt>X</tt> means that, in addition to <tt>T</tt> being <tt>MoveInsertable</tt> 
into <tt>X</tt>, the following expression is well-formed: //p15.4
<p/>
<tt>allocator_traits&lt;A&gt;::construct(m, p, v)</tt>
<p/>
In the context of above definition the requirement "<tt>key_type</tt> shall be <tt>CopyInsertable</tt> into <tt>*this</tt>" 
would mean that the key element of the <tt>pair&lt;const key_type, mapped_type&gt;</tt> (<tt>value_type</tt> of the map) 
should be constructed using separate call to the <tt>construct</tt> method, the same applies for the <tt>mapped_type</tt>. 
Such behavior is explicitly prohibited by <sref ref="[container.requirements.general]"/> p3.
</p>
<blockquote><p>
For the components affected by this sub-clause that declare an allocator_type, objects stored in these 
components shall be constructed using the <tt>allocator_traits&lt;allocator_type&gt;::construct</tt> function and
destroyed using the <tt>allocator_traits&lt;allocator_type&gt;::destroy</tt> function (20.7.8.2). These functions
are called only for the container's element type, not for internal types used by the container.
</p></blockquote>
<p>
It clearly states that <tt>element_type</tt> of the map, must be constructed using allocator for value type, which 
disallows using of separate construction of first and second element, regardless of the fact if it can be actually 
performed without causing undefined behavior.
<p/>
That means that the <tt>MoveInsertable</tt> and similar requirements may only be expressed in terms of <tt>value_type</tt>, 
not its members types.
</p>

<note>2015-02, Cologne</note>
<p>
This issue is related to <iref ref="2464"/>.
</p> 
</discussion>

<resolution>
<p>This wording is relative to N4296.</p>

<p>Accept resolution of the issue issue <iref ref="2464"/> and define <tt>operator[]</tt> as follows 
(This would also address issue <iref ref="2274"/>):</p>

<ol>
<li><p>Change <sref ref="[map.access]"/> as indicated:</p>

<blockquote>
<pre>
T&amp; operator[](const key_type&amp; x);
</pre>
<blockquote><p>
-1- <i>Effects</i>: <del>If there is no key equivalent to <tt>x</tt> in the map, inserts <tt>value_type(x, T())</tt> 
into the map</del><ins>Equivalent to: <tt>try_emplace(x).first-&gt;second</tt></ins>.
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
T&amp; operator[](key_type&amp;&amp; x);
</pre>
<blockquote>
<p>
-5- <i>Effects</i>: <del>If there is no key equivalent to <tt>x</tt> in the map, inserts <tt>value_type(std::move(x), T())</tt> 
into the map</del><ins>Equivalent to: <tt>try_emplace(move(x)).first-&gt;second</tt></ins>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Change <sref ref="[unord.map.elem]"/> as indicated:</p>

<blockquote>
<pre>
mapped_type&amp; operator[](const key_type&amp; k);
mapped_type&amp; operator[](key_type&amp;&amp; k);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-2- <i>Effects</i>: <del>If the <tt>unordered_map</tt> does not already contain an element whose key is equivalent to <tt>k</tt>, 
the first operator inserts the value <tt>value_type(k, mapped_type())</tt> and the second operator inserts the
value <tt>value_type(std::move(k), mapped_type())</tt></del><ins>For the first operator, equivalent to: 
<tt>try_emplace(k).first-&gt;second</tt>; for the second operator, equivalent to: 
<tt>try_emplace(move(k)).first-&gt;second</tt></ins>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
