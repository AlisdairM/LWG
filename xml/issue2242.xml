<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2242" status="NAD">
<title><tt>[uninitialized_]copy_n()</tt> defect</title>
<section><sref ref="[alg.copy]"/> <sref ref="[uninitialized.copy]"/></section>
<submitter>Sean Parent</submitter>
<date>14 Feb 2013</date>
<priority>2</priority>

<discussion>
<p>
<tt>copy_n()</tt> and <tt>uninitialized_copy_n()</tt> only return the output iterator, and not the input iterator. 
Likely the interface was simply copied from the original STL. Unfortunately the interface in the original STL contains a bug.
<p/>
<tt>copy_n()</tt> and <tt>uninitialized_copy_n()</tt> must return the resulting input iterator as well as the output 
iterator (I would suggest returning a pair). Without this, there is no way to continue reading from an actual input 
iterator &mdash; and if it is really a forward iterator, it will cost <tt>n</tt> increments to get back to where you were.
</p>

<note>2016-08 Chicago</note>
<p>Tues PM: refer to LEWG</p>

<note>2017-02 in Kona, LEWG recommends NAD</note>
<p>Potentially breaks lots of things. 
Cannot overload on return type. Pair, tuple, or struct return? 
New name? Needs paper with a new algorithm (copy_n_works)? 
Not an issue for istream iterators (can get stream and get a new iterator). 
Donâ€™t use this function, use ranges.</p>

<note>2017-06-02 Issues Telecom</note>
<p>This change has been made in the Ranges TS.</p>
<p>Resolve as NAD</p>
</discussion>

<resolution>
</resolution>

</issue>
