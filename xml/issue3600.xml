<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3600" status="New">
<title>Making <tt>istream_iterator</tt> copy constructor trivial is an ABI break</title>
<section><sref ref="[istream.iterator.cons]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>23 Sep 2021</date>
<priority>99</priority>

<discussion>
<p>
Libstdc++ never implemented this change made between C++03 and C++11 (by <a href="https://wg21.link/n2994">N2994</a>):
</p>
24.6.1.1 [istream.iterator.cons] p3:
<blockquote>
<pre>
istream_iterator(const istream_iterator&lt;T,charT,traits,Distance&gt;&amp; x) = default;
</pre>
<blockquote>
<p>
-3- <i>Effects:</i> Constructs a copy of <tt>x</tt>. If <tt>T</tt> is a literal type, then this constructor shall 
be a trivial copy constructor.
</p>
</blockquote>
</blockquote>
<p>
This breaks our ABI, as it changes the argument passing convention for the type, meaning this function segfaults 
if compiled with today's libstdc++ and called from one that makes the triviality change:
</p>
<blockquote><pre>
#include &lt;iterator&gt;
#include &lt;istream&gt;

int f(std::istream_iterator&lt;int&gt; i)
{
  return *i++;
}
</pre></blockquote>
<p>
As a result, it's likely that libstdc++ will never implement the change.
<p/>
There is no reason to require this constructor to be trivial. It was required for C++0x at one point, so the type 
could be literal, but that is not true in the current language. We should strike the requirement, to reflect reality. 
MSVC and libc++ are free to continue to define it as defaulted (and so trivial when appropriate) but we should not 
require it from libstdc++. The cost of an ABI break is not worth the negligible benefit from making it trivial.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4892">N4892</a>.
</p>

<ol>
<li><p>Modify <sref ref="[istream.iterator.cons]"/> as indicated:</p>

<blockquote>
<pre>
istream_iterator(const istream_iterator&amp; x) = default;
</pre>
<blockquote>
<p>
-5- <i>Postconditions:</i> <tt>in_stream == x.in_stream</tt> is <tt>true</tt>.
<p/>
<del>-6- <i>Remarks:</i> If <tt>is_trivially_copy_constructible_v&lt;T&gt;</tt> is <tt>true</tt>, 
then this constructor is trivial.</del>
</p>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
