<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3600" status="Voting">
<title>Making <tt>istream_iterator</tt> copy constructor trivial is an ABI break</title>
<section><sref ref="[istream.iterator.cons]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>23 Sep 2021</date>
<priority>3</priority>

<discussion>
<p>
Libstdc++ never implemented this change made between C++03 and C++11 (by <a href="https://wg21.link/n2994">N2994</a>):
</p>
24.6.1.1 [istream.iterator.cons] p3:
<blockquote>
<pre>
istream_iterator(const istream_iterator&lt;T,charT,traits,Distance&gt;&amp; x) = default;
</pre>
<blockquote>
<p>
-3- <i>Effects:</i> Constructs a copy of <tt>x</tt>. If <tt>T</tt> is a literal type, then this constructor shall 
be a trivial copy constructor.
</p>
</blockquote>
</blockquote>
<p>
This breaks our ABI, as it changes the argument passing convention for the type, meaning this function segfaults 
if compiled with today's libstdc++ and called from one that makes the triviality change:
</p>
<blockquote><pre>
#include &lt;iterator&gt;
#include &lt;istream&gt;

int f(std::istream_iterator&lt;int&gt; i)
{
  return *i++;
}
</pre></blockquote>
<p>
As a result, it's likely that libstdc++ will never implement the change.
<p/>
There is no reason to require this constructor to be trivial. It was required for C++0x at one point, so the type 
could be literal, but that is not true in the current language. We should strike the requirement, to reflect reality. 
MSVC and libc++ are free to continue to define it as defaulted (and so trivial when appropriate) but we should not 
require it from libstdc++. The cost of an ABI break is not worth the negligible benefit from making it trivial.
</p>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>
This wording is relative to <a href="https://wg21.link/n4892">N4892</a>.
</p>

<ol>
<li><p>Modify <sref ref="[istream.iterator.cons]"/> as indicated:</p>

<blockquote>
<pre>
istream_iterator(const istream_iterator&amp; x) = default;
</pre>
<blockquote>
<p>
-5- <i>Postconditions:</i> <tt>in_stream == x.in_stream</tt> is <tt>true</tt>.
<p/>
<del>-6- <i>Remarks:</i> If <tt>is_trivially_copy_constructible_v&lt;T&gt;</tt> is <tt>true</tt>, 
then this constructor is trivial.</del>
</p>
</blockquote>
</blockquote>
</li>

</ol>
</blockquote>

<note>2021-09-30; Jonathan revises wording after reflector discussion</note>
<p>
A benefit of triviality is that it is constexpr, want to preserve that.
</p>

<note>2021-10-14; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
</p>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>
This wording is relative to <a href="https://wg21.link/n4892">N4892</a>.
</p>

<ol>
<li><p>Modify the class synopsis in <sref ref="[istream.iterator.general]"/>
as indicated:</p>
<blockquote>
<pre>
constexpr istream_iterator();
constexpr istream_iterator(default_sentinel_t);
istream_iterator(istream_type&amp; s);
<ins>constexpr</ins> istream_iterator(const istream_iterator&amp; x)<del> = default</del>;
~istream_iterator() = default;
istream_iterator&amp; operator=(const istream_iterator&amp;) = default;
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[istream.iterator.cons]"/> as indicated:</p>

<blockquote>
<pre>
  <ins>constexpr</ins> istream_iterator(const istream_iterator&amp; x)<del> = default</del>;
</pre>
<blockquote>
<p>
-5- <i>Postconditions:</i> <tt>in_stream == x.in_stream</tt> is <tt>true</tt>.
</p>
<p>
-6- <i>Remarks:</i> <del>If <tt>is_trivially_copy_constructible_v&lt;T&gt;</tt> is <tt>true</tt>, 
then this constructor is trivial.</del>
<ins>If the initializer <tt>T(x.value)</tt> in the declaration
<tt>auto val = T(x.value);</tt>
is a constant initializer ([expr.const]),
  then this constructor is a constexpr constructor.</ins>
</p>
</blockquote>
</blockquote>
</li>

</ol>
</blockquote>

<note>2022-10-12; Jonathan provides improved wording</note>
<p>
Discussed on the reflector September 2021.
</p>

<note>2022-10-13; Jonathan revises wording to add a noexcept-specifier</note>


<note>2022-11-07; Reflector poll</note>
<p>
Set status to Tentatively Ready after six votes in favour during reflector poll.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4917"/>.
</p>

<ol>
<li><p>Modify the class synopsis in <sref ref="[istream.iterator.general]"/>
as indicated:</p>
<blockquote>
<pre>
constexpr istream_iterator();
constexpr istream_iterator(default_sentinel_t);
istream_iterator(istream_type&amp; s);
<ins>constexpr</ins> istream_iterator(const istream_iterator&amp; x) <ins>noexcept(<i>see below</i>)</ins><del> = default</del>;
~istream_iterator() = default;
istream_iterator&amp; operator=(const istream_iterator&amp;) = default;
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[istream.iterator.cons]"/> as indicated:</p>

<blockquote>
<pre>
  <ins>constexpr</ins> istream_iterator(const istream_iterator&amp; x) <ins>noexcept(<i>see below</i>)</ins><del> = default</del>;
</pre>
<blockquote>
<p>
<del>
-5- <i>Postconditions:</i> <tt>in_stream == x.in_stream</tt> is <tt>true</tt>.
</del>
</p>
<p>
<ins>
-?- <i>Effects:</i> Initializes <tt>in_stream</tt> with <tt>x.in_stream</tt>
and initializes <tt>value</tt> with <tt>x.value</tt>.
</ins>
</p>
<p>
-6- <i>Remarks:</i> <del>If <tt>is_trivially_copy_constructible_v&lt;T&gt;</tt> is <tt>true</tt>,
then this constructor is trivial.</del>
<ins>
An invocation of this constructor may be used in a core constant expression
if and only if the initialization of <tt>value</tt> from <tt>x.value</tt>
is a constant subexpression ([defns.const.subexpr]).
The exception specification is equivalent to
<tt>is_nothrow_copy_constructible_v&lt;T&gt;</tt>.
</ins>
</p>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
