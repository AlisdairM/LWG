<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3957" status="WP">
<title>&sect;[container.alloc.reqmts] The value category of <tt>v</tt> should be claimed</title>
<section><sref ref="[container.alloc.reqmts]"/></section>
<submitter>jim x</submitter>
<date>10 Jul 2023</date>
<priority>99</priority>

<discussion>
<p>
<sref ref="[container.alloc.reqmts]"/> p2 says:
</p>
<blockquote><p>
[&hellip;] an expression <tt>v</tt> of type <tt>T</tt> or <tt>const T</tt>, [&hellip;]
</p></blockquote>
<p>
Then <sref ref="[container.alloc.reqmts]"/> bullet (2.4) says:
</p>
<blockquote><p>
<tt>T</tt> is <i>Cpp17CopyInsertable into <tt>X</tt></i> means that, in addition to <tt>T</tt> being 
<i>Cpp17MoveInsertable</i> into <tt>X</tt>, the following expression is well-formed:
</p>
<blockquote><pre>
allocator_traits&lt;A&gt;::construct(m, p, v)
</pre></blockquote>
</blockquote>
<p>
So, what is the value category of the expression <tt>v</tt>? We didn't explicitly phrase the wording. 
The intent may be that the value category of <tt>v</tt> is any defined value category in <sref ref="[basic.lval]"/>, 
however, the intent is not clear in the current wording. Maybe, we can say:
</p>
<blockquote><p>
[&hellip;] the following expression is well-formed:
</p>
<blockquote><pre>
allocator_traits&lt;A&gt;::construct(m, p, v)
</pre></blockquote>
<p>
for <tt>v</tt> of any value category.
</p>
</blockquote>
<p>
which can make the intent meaning clearer.
</p>

<note>2023-10-27; Reflector poll</note>
<p>
Set status to Tentatively Ready after five votes in favour during reflector poll.
</p>

<note>Kona 2023-11-11; Status changed: Voting &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4950"/>.
</p>

<ol>

<li><p>Modify <sref ref="[container.alloc.reqmts]"/> as indicated:</p>

<blockquote>
<p>
-2- Given an allocator type <tt>A</tt> and given a container type <tt>X</tt> having a <tt>value_type</tt> 
identical to <tt>T</tt> and an <tt>allocator_type</tt> identical to <tt>allocator_traits&lt;A&gt;::rebind_alloc&lt;T&gt;</tt> 
and given an lvalue <tt>m</tt> of type <tt>A</tt>, a pointer <tt>p</tt> of type <tt>T*</tt>, an expression 
<tt>v</tt> <ins>that denotes an lvalue</ins> of type <tt>T</tt> or <tt>const T</tt> <ins>or an rvalue of type <tt>const T</tt></ins>, 
and an rvalue <tt>rv</tt> of type <tt>T</tt>, the following terms are defined. [&hellip;]
</p>
<ol style="list-style-type: none">
<li><p>[&hellip;]</p></li>
<li><p>(2.3) &mdash; <tt>T</tt> is <i>Cpp17MoveInsertable into <tt>X</tt></i> means that the following expression is well-formed:</p>
<blockquote><pre>
allocator_traits&lt;A&gt;::construct(m, p, rv)
</pre></blockquote>
<p>and its evaluation causes the following postcondition to hold: The value of <tt>*p</tt> is equivalent to the value
of <tt>rv</tt> before the evaluation.
<p/>
[<i>Note 1</i>: <tt>rv</tt> remains a valid object. Its state is unspecified &mdash; <i>end note</i>]</p></li>
<li><p>(2.4) &mdash; <tt>T</tt> is <i>Cpp17CopyInsertable into <tt>X</tt></i> means that, in addition to <tt>T</tt> being 
<i>Cpp17MoveInsertable</i> into <tt>X</tt>, the following expression is well-formed:</p>
<blockquote><pre>
allocator_traits&lt;A&gt;::construct(m, p, v)
</pre></blockquote>
<p>and its evaluation causes the following postcondition to hold: The value of <tt>v</tt> is unchanged and is
equivalent to <tt>*p</tt>.</p>
</li>
<li><p>[&hellip;]</p></li>
</ol>
</blockquote>

</li>

</ol>
</resolution>

</issue>
