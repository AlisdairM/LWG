<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2764" status="Dup">
<title>Are <code>&lt;cstddint&gt;</code> macros optional?</title>
<section><sref ref="[cstdint.syn]"/></section>
<submitter>Thomas Koeppe</submitter>
<date>10 Aug 2016</date>
<priority>3</priority>

<discussion>
<p>
Are the macros <code>INT[8, 16, 32, 64]_MAX</code> etc. optional?
<p/>
The entire <code>&lt;cstddint&gt;</code> header is specified to have all types and macros "defined the same as in C". 
But C is also unclear about this: the fixed-width types like <code>int32_t</code> are optional in C and in C++. 
The corresponding macro <code>INT32_MAX</code> is defined in terms of an expression of the same type as the 
"corresponding type converted according to the integral promotions". But if the "corresponding type" does not exist, 
then surely the macro too cannot exist? It seems that the macros should also be optional.
<p/>
Suggested resolution: See e.g. <a href="https://github.com/cplusplus/draft/pull/843">here</a>, or equivalent wording 
to the effect that the macros <code>INT*_MAX</code> etc are defined if and only if the corresponding integer type is 
defined.
<p/>
(Note that the types <code>intptr_t</code> and <code>uintptr_t</code> are also optional.)
</p>

<note>2016-08-11, Richard comments</note>
<p>
C allows other values for <code>N</code> in addition to 8, 16, 32, 64, whereas it appears that C++ does not. 
Is the difference intentional?
</p>

<note>2016-09-09 Issues Resolution Telecon</note>
<p>We need to answer Richard's question before making this ready</p>

<note>2017-03-04, Kona</note>
<p>Close as a duplicate of <ref iref="2820"/> per Thomas' request.</p>
</discussion>

<resolution>
</resolution>

</issue>

