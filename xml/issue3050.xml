<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3050" status="New">
<title>Conversion specification problem in <tt>chrono::duration</tt> constructor</title>
<section><sref ref="[time.duration.cons]"/></section>
<submitter>Barry Revzin</submitter>
<date>22 Jan 2018</date>
<priority>99</priority>

<discussion>
<p>
The converting constructor in <tt>std::chrono::duration</tt> is currently specified as 
(<sref ref="[time.duration.cons]"/> p1):
</p>
<blockquote>
<pre>
template&lt;class Rep2&gt;
  constexpr explicit duration(const Rep2&amp; r); 
</pre>
<blockquote>
<p>
<i>Remarks:</i> This constructor shall not participate in overload resolution unless <tt>Rep2</tt> is 
implicitly convertible to <tt>rep</tt> and [&hellip;]
</p>
</blockquote>
</blockquote>
<p>
But the parameter is of type <tt>Rep2 const</tt>, so we should check that <tt>Rep2 const</tt> is 
implicitly convertible to <tt>rep</tt>, not just <tt>Rep2</tt>. This means that for a type like:
</p>
<blockquote>
<pre>
struct X { operator int64_t() /* not const */; };
</pre>
</blockquote>
<p>
<tt>std::is_constructible_v&lt;std::chrono::seconds, X&gt;</tt> is <tt>true</tt>, but actual 
construction will fail to compile.
</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4713">N4713</a>.</p>

<ol>
<li><p>Modify <sref ref="[time.duration.cons]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class Rep2&gt;
  constexpr explicit duration(const Rep2&amp; r);
</pre>
<blockquote>
<p>
-1- <i>Remarks:</i> This constructor shall not participate in overload resolution unless 
<tt><ins>const</ins> Rep2</tt> is implicitly convertible to <tt>rep</tt> and
<ol style="list-style-type: none">
<li><p>(1.1) &mdash; <tt>treat_as_floating_point_v&lt;rep&gt;</tt> is <tt>true</tt> or</p></li>
<li><p>(1.2) &mdash; <tt>treat_as_floating_point_v&lt;Rep2&gt;</tt> is <tt>false</tt>.</p></li>
</ol>
[&hellip;]
<p/>
-2- <i>Effects:</i> Constructs an object of type <tt>duration</tt>.
<p/>
-3- <i>Postconditions:</i> <tt>count() == static_cast&lt;rep&gt;(r)</tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>