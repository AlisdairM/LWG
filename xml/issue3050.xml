<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3050" status="C++20">
<title>Conversion specification problem in <tt>chrono::duration</tt> constructor</title>
<section><sref ref="[time.duration.cons]"/><sref ref="[time.duration.nonmember]"/></section>
<submitter>Barry Revzin</submitter>
<date>22 Jan 2018</date>
<priority>3</priority>

<discussion>
<p>
The converting constructor in <tt>std::chrono::duration</tt> is currently specified as
(<sref ref="[time.duration.cons]"/> p1):
</p>
<blockquote>
<pre>
template&lt;class Rep2&gt;
  constexpr explicit duration(const Rep2&amp; r);
</pre>
<blockquote>
<p>
<i>Remarks:</i> This constructor shall not participate in overload resolution unless <tt>Rep2</tt> is
implicitly convertible to <tt>rep</tt> and [&hellip;]
</p>
</blockquote>
</blockquote>
<p>
But the parameter is of type <tt>Rep2 const</tt>, so we should check that <tt>Rep2 const</tt> is
implicitly convertible to <tt>rep</tt>, not just <tt>Rep2</tt>. This means that for a type like:
</p>
<blockquote>
<pre>
struct X { operator int64_t() /* not const */; };
</pre>
</blockquote>
<p>
<tt>std::is_constructible_v&lt;std::chrono::seconds, X&gt;</tt> is <tt>true</tt>, but actual
construction will fail to compile.
<p/>
Further analysis of sub-clause <sref ref="[time.duration]"/> revealed similar specification problems in
some other functions.
</p>

<note>2018-06 Rapperswil Thursday issues processing</note>
<p>P3; Status to Open</p>

<note>2018-11 San Diego Thursday night issue processing</note>
<p>Jonathan to provide updated wording; the underlying text has changed.</p>

<note>2018-12-05 Jonathan provides new wording</note>
<p>In San Diego Geoff noticed that the current WP does not use <tt>CR</tt>.
Jonathan provides new wording consistent with the
<a href="https://github.com/cplusplus/draft/pull/1985">editorial changes</a>
that removed <tt>CR</tt>.</p>

<strong>Previous resolution [SUPERSEDED]:</strong>

<blockquote class="note">
<p>This wording is relative to <a href="https://wg21.link/n4713">N4713</a>.</p>

<ol>
<li><p>Modify <sref ref="[time.duration.cons]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class Rep2&gt;
  constexpr explicit duration(const Rep2&amp; r);
</pre>
<blockquote>
<p>
-1- <i>Remarks:</i> This constructor shall not participate in overload resolution unless
<ins><tt>is_convertible_v&lt;const Rep2&amp;, rep&gt;</tt> is <tt>true</tt></ins><del><tt>Rep2</tt>
is implicitly convertible to <tt>rep</tt></del> and
<ol style="list-style-type: none">
<li><p>(1.1) &mdash; <tt>treat_as_floating_point_v&lt;rep&gt;</tt> is <tt>true</tt> or</p></li>
<li><p>(1.2) &mdash; <tt>treat_as_floating_point_v&lt;Rep2&gt;</tt> is <tt>false</tt>.</p></li>
</ol>
[&hellip;]
<p/>
-2- <i>Effects:</i> Constructs an object of type <tt>duration</tt>.
<p/>
-3- <i>Postconditions:</i> <tt>count() == static_cast&lt;rep&gt;(r)</tt>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[time.duration.nonmember]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class Rep1, class Period, class Rep2&gt;
  constexpr duration&lt;common_type_t&lt;Rep1, Rep2&gt;, Period&gt;
    operator*(const duration&lt;Rep1, Period&gt;&amp; d, const Rep2&amp; s);
</pre>
<blockquote>
<p>
-4- <i>Remarks:</i> This operator shall not participate in overload resolution unless
<ins><tt>is_convertible_v&lt;const Rep2&amp;, CR(Rep1, Rep2)&gt;</tt> is
<tt>true</tt></ins><del><tt>Rep2</tt> is implicitly convertible to <tt>CR(Rep1, Rep2)</tt></del>.
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
template&lt;class Rep1, class Rep2, class Period&gt;
  constexpr duration&lt;common_type_t&lt;Rep1, Rep2&gt;, Period&gt;
    operator*(const Rep1&amp; s, const duration&lt;Rep2, Period&gt;&amp; d);
</pre>
<blockquote>
<p>
-6- <i>Remarks:</i> This operator shall not participate in overload resolution unless
<ins><tt>is_convertible_v&lt;const Rep1&amp;, CR(Rep1, Rep2)&gt;</tt> is
<tt>true</tt></ins><del><tt>Rep1</tt> is implicitly convertible to <tt>CR(Rep1, Rep2)</tt></del>.
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
template&lt;class Rep1, class Period, class Rep2&gt;
  constexpr duration&lt;common_type_t&lt;Rep1, Rep2&gt;, Period&gt;
    operator/(const duration&lt;Rep1, Period&gt;&amp; d, const Rep2&amp; s);
</pre>
<blockquote>
<p>
-8- <i>Remarks:</i> This operator shall not participate in overload resolution unless
<ins><tt>is_convertible_v&lt;const Rep2&amp;, CR(Rep1, Rep2)&gt;</tt> is
<tt>true</tt></ins><del><tt>Rep2</tt> is implicitly convertible to <tt>CR(Rep1, Rep2)</tt></del>
and <tt>Rep2</tt> is not a specialization of <tt>duration</tt>.
</p>
</blockquote>
[&hellip;]
<pre>
template&lt;class Rep1, class Period, class Rep2&gt;
  constexpr duration&lt;common_type_t&lt;Rep1, Rep2&gt;, Period&gt;
    operator%(const duration&lt;Rep1, Period&gt;&amp; d, const Rep2&amp; s);
</pre>
<blockquote>
<p>
-11- <i>Remarks:</i> This operator shall not participate in overload resolution unless
<ins><tt>is_convertible_v&lt;const Rep2&amp;, CR(Rep1, Rep2)&gt;</tt> is
<tt>true</tt></ins><del><tt>Rep2</tt> is implicitly convertible to <tt>CR(Rep1, Rep2)</tt></del>
and <tt>Rep2</tt> is not a specialization of <tt>duration</tt>.
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>
</ol>
</blockquote>

<strong>Previous resolution [SUPERSEDED]:</strong>
<blockquote class="note">
<p>This wording is relative to <a href="https://wg21.link/n4791">N4791</a>.</p>

<ol>
<li><p>Modify <sref ref="[time.duration.cons]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class Rep2&gt;
  constexpr explicit duration(const Rep2&amp; r);
</pre>
<blockquote>
<p>
-1- <i>Remarks:</i> This constructor shall not participate in overload resolution unless
<ins><tt>is_convertible_v&lt;const Rep2&amp;, rep&gt;</tt> is <tt>true</tt></ins><del><tt>Rep2</tt>
is implicitly convertible to <tt>rep</tt></del> and
<ol style="list-style-type: none">
<li><p>(1.1) &mdash; <tt>treat_as_floating_point_v&lt;rep&gt;</tt> is <tt>true</tt> or</p></li>
<li><p>(1.2) &mdash; <tt>treat_as_floating_point_v&lt;Rep2&gt;</tt> is <tt>false</tt>.</p></li>
</ol>
[&hellip;]
<p/>
-2- <i>Effects:</i> Constructs an object of type <tt>duration</tt>.
<p/>
-3- <i>Postconditions:</i> <tt>count() == static_cast&lt;rep&gt;(r)</tt>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[time.duration.nonmember]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class Rep1, class Period, class Rep2&gt;
  constexpr duration&lt;common_type_t&lt;Rep1, Rep2&gt;, Period&gt;
    operator*(const duration&lt;Rep1, Period&gt;&amp; d, const Rep2&amp; s);
</pre>
<blockquote>
<p>
-4- <i>Remarks:</i> This operator shall not participate in overload resolution unless
<ins><tt>is_convertible_v&lt;const Rep2&amp;, common_type_t&lt;Rep1, Rep2&gt;&gt;</tt> is
<tt>true</tt></ins><del><tt>Rep2</tt> is implicitly convertible to <tt>common_type_t&lt;Rep1, Rep2&gt;</tt></del>.
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
template&lt;class Rep1, class Rep2, class Period&gt;
  constexpr duration&lt;common_type_t&lt;Rep1, Rep2&gt;, Period&gt;
    operator*(const Rep1&amp; s, const duration&lt;Rep2, Period&gt;&amp; d);
</pre>
<blockquote>
<p>
-6- <i>Remarks:</i> This operator shall not participate in overload resolution unless
<ins><tt>is_convertible_v&lt;const Rep1&amp;, common_type_t&lt;Rep1, Rep2&gt;&gt;</tt> is
<tt>true</tt></ins><del><tt>Rep1</tt> is implicitly convertible to <tt>common_type_t&lt;Rep1, Rep2&gt;</tt></del>.
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
template&lt;class Rep1, class Period, class Rep2&gt;
  constexpr duration&lt;common_type_t&lt;Rep1, Rep2&gt;, Period&gt;
    operator/(const duration&lt;Rep1, Period&gt;&amp; d, const Rep2&amp; s);
</pre>
<blockquote>
<p>
-8- <i>Remarks:</i> This operator shall not participate in overload resolution unless
<ins><tt>is_convertible_v&lt;const Rep2&amp;, common_type_t&lt;Rep1, Rep2&gt;&gt;</tt> is
<tt>true</tt></ins><del><tt>Rep2</tt> is implicitly convertible to <tt>common_type_t&lt;Rep1, Rep2&gt;</tt></del>
and <tt>Rep2</tt> is not a specialization of <tt>duration</tt>.
</p>
</blockquote>
[&hellip;]
<pre>
template&lt;class Rep1, class Period, class Rep2&gt;
  constexpr duration&lt;common_type_t&lt;Rep1, Rep2&gt;, Period&gt;
    operator%(const duration&lt;Rep1, Period&gt;&amp; d, const Rep2&amp; s);
</pre>
<blockquote>
<p>
-11- <i>Remarks:</i> This operator shall not participate in overload resolution unless
<ins><tt>is_convertible_v&lt;const Rep2&amp;, common_type_t&lt;Rep1, Rep2&gt;&gt;</tt> is
<tt>true</tt></ins><del><tt>Rep2</tt> is implicitly convertible to <tt>common_type_t&lt;Rep1, Rep2&gt;</tt></del>
and <tt>Rep2</tt> is not a specialization of <tt>duration</tt>.
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>
</ol>
</blockquote>

<note>2020-02-13, Prague</note>
<p>
Rebase to most recent working draft
</p>

<note>2020-02 Status to Immediate on Thursday night in Prague.</note>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4849">N4849</a>.</p>

<ol>
<li><p>Modify <sref ref="[time.duration.cons]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class Rep2&gt;
  constexpr explicit duration(const Rep2&amp; r);
</pre>
<blockquote>
<p>
-1- <i>Constraints:</i> <tt>is_convertible_v&lt;<ins>const</ins> Rep2<ins>&amp;</ins>, rep&gt;</tt> is <tt>true</tt> and
<ol style="list-style-type: none">
<li><p>(1.1) &mdash; <tt>treat_as_floating_point_v&lt;rep&gt;</tt> is <tt>true</tt> or</p></li>
<li><p>(1.2) &mdash; <tt>treat_as_floating_point_v&lt;Rep2&gt;</tt> is <tt>false</tt>.</p></li>
</ol>
[&hellip;]
<p/>
-2- <i>Postconditions:</i> <tt>count() == static_cast&lt;rep&gt;(r)</tt>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[time.duration.nonmember]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class Rep1, class Period, class Rep2&gt;
  constexpr duration&lt;common_type_t&lt;Rep1, Rep2&gt;, Period&gt;
    operator*(const duration&lt;Rep1, Period&gt;&amp; d, const Rep2&amp; s);
</pre>
<blockquote>
<p>
-4- <i>Constraints:</i> <tt>is_convertible_v&lt;<ins>const</ins> Rep2<ins>&amp;</ins>, common_type_t&lt;Rep1, Rep2&gt;&gt;</tt> is <tt>true</tt>.
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
template&lt;class Rep1, class Rep2, class Period&gt;
  constexpr duration&lt;common_type_t&lt;Rep1, Rep2&gt;, Period&gt;
    operator*(const Rep1&amp; s, const duration&lt;Rep2, Period&gt;&amp; d);
</pre>
<blockquote>
<p>
-6- <i>Constraints:</i> <tt>is_convertible_v&lt;<ins>const</ins> Rep1<ins>&amp;</ins>, common_type_t&lt;Rep1, Rep2&gt;&gt;</tt> is <tt>true</tt>.
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
template&lt;class Rep1, class Period, class Rep2&gt;
  constexpr duration&lt;common_type_t&lt;Rep1, Rep2&gt;, Period&gt;
    operator/(const duration&lt;Rep1, Period&gt;&amp; d, const Rep2&amp; s);
</pre>
<blockquote>
<p>
-8- <i>Constraints:</i> <tt>is_convertible_v&lt;<ins>const</ins> Rep2<ins>&amp;</ins>, common_type_t&lt;Rep1, Rep2&gt;&gt;</tt> 
is <tt>true</tt> and <tt>Rep2</tt> is not a specialization of <tt>duration</tt>.
</p>
</blockquote>
[&hellip;]
<pre>
template&lt;class Rep1, class Period, class Rep2&gt;
  constexpr duration&lt;common_type_t&lt;Rep1, Rep2&gt;, Period&gt;
    operator%(const duration&lt;Rep1, Period&gt;&amp; d, const Rep2&amp; s);
</pre>
<blockquote>
<p>
-12- <i>Constraints:</i> <tt>is_convertible_v&lt;<ins>const</ins> Rep2<ins>&amp;</ins>, common_type_t&lt;Rep1, Rep2&gt;&gt;</tt> 
is <tt>true</tt> and <tt>Rep2</tt> is not a specialization of <tt>duration</tt>.
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
