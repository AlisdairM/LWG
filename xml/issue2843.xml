<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2843" status="C++20">
<title>Unclear behavior of <tt>std::pmr::memory_resource::do_allocate()</tt></title>
<section><sref ref="[mem.res.private]"/></section>
<submitter>Jens Maurer</submitter>
<date>13 Dec 2016</date>
<priority>3</priority>

<discussion>
<p>
The specification of <tt>do_allocate()</tt> (<sref ref="[mem.res.private]"/> p2+p3) says:
</p>
<blockquote>
<p>
<i>Returns:</i> A derived class shall implement this function to return a
pointer to allocated storage (3.7.4.2) with a size of at least <tt>bytes</tt>.
The returned storage is aligned to the specified alignment, if such
alignment is supported (3.11); otherwise it is aligned to <tt>max_align</tt>.
<p/>
<i>Throws:</i> A derived class implementation shall throw an appropriate
exception if it is unable to allocate memory with the requested size
and alignment.
</p>
</blockquote>
<p>
It is unclear whether a request for an unsupported alignment
(e.g. larger than <tt>max_align</tt>) yields an exception or the returned
storage is silently aligned to <tt>max_align</tt>.
<p/>
This is <a href="https://github.com/cplusplus/draft/issues/966">editorial issue #966</a>.
</p>

<note>2017-01-27 Telecon</note>
<p>Priority 3; Marshall to ping Pablo for intent and provide wording.</p>

<note>2017-02-12 Pablo responds and provides wording</note>
<p>The original intent was:</p>
<ul>
  <li>If the alignment is supported by the implementation (see below), then it must use that alignment or else throw.</li>
  <li>If the alignment is not supported it must use max_align else throw.</li>
</ul>
<p>However, the description of do_allocate might have gone stale as the
aligned-allocation proposal made its way into the standard.</p>

<p>The understanding I take from the definition of extended alignment in
(the current text of) 3.11/3 [basic.align] and "assembling an argument
list" in 5.3.4/14 [expr.new] is that it is intended that, when
allocating space for an object with extended alignment in a well-formed
program, the alignment <i>will</i> be honored and <i>will not be</i>
truncated to max_align. I think this is a change from earlier drafts of
the extended-alignment proposal, where silent truncation to <tt>max_align</tt>
was permitted (I could be wrong). Anyway, it seems wrong to ever ignore
the alignment parameter in <tt>do_allocate()</tt>.</p>

<note>2017-11 Albuquerque Wednesday issue processing</note>
<p>Move to Ready.</p>
<note>2018-3-17 Adopted in Jacksonville</note>
</discussion>

<resolution>
<p>Change the specification of <tt>do_allocate()</tt> (<sref ref="[mem.res.private]"/> p2+p3) as follows:</p>

<blockquote>
  <p><i>Returns</i>: A derived class shall implement this function to
  return a pointer to allocated storage (3.7.4.2) with a size of at
  least <tt>bytes</tt><ins>, aligned to the specified
  <tt>alignment</tt></ins>. <del>The returned storage is aligned to the
  specified alignment, if such alignment is supported; otherwise it is
  aligned to <tt>max_align</tt>.</del></p>

<p><i>Throws:</i> A derived class implementation shall throw an
appropriate exception if it is unable to allocate memory with the
requested size and alignment.</p>
</blockquote>
</resolution>

</issue>
