<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2371" status="WP">
<title>[fund.ts] No template aliases defined for new type traits</title>
<section><sref ref="[meta.type.synop]"/></section>
<submitter>Joe Gottman</submitter>
<date>7 Mar 2014</date>
<priority>0</priority>

<discussion>
<p><b>Addresses: fund.ts</b></p>

<p>
The library fundamentals specification defines two new type trait template classes: <tt>invocation_type</tt> and <tt>raw_invocation_type</tt>.  
But it does not define the corresponding template aliases. Note that both of these classes define a member typedef <tt>type</tt> and no 
other public members, so according to the argument in <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3887.pdf">N3887</a> 
the template aliases should be defined.
</p>

<note>2013-06-21 Rapperswil</note>
<p>
Accept for Library Fundamentals TS Working Paper
</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3908.html">N3908</a>.</p>

<ol>
<li><p>Add the following to section 3.3.1[meta.type.synop] of the 
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3908.html#meta">Library Fundamentals specification</a>
as indicated:
</p>

<blockquote><pre>
namespace std {
namespace experimental {
inline namespace fundamentals_v1 {
  [&hellip;]
  <i>// 3.3.2, Other type transformations</i>
  template &lt;class&gt; class invocation_type; <i>// not defined</i>
  template &lt;class F, class... ArgTypes&gt; class invocation_type&lt;F(ArgTypes...)&gt;;
  template &lt;class&gt; class raw_invocation_type; <i>// not defined</i>
  template &lt;class F, class... ArgTypes&gt; class raw_invocation_type&lt;F(ArgTypes...)&gt;;
  
  <ins>template &lt;class T&gt; 
    using invocation_type_t = typename invocation_type&lt;T&gt;::type;
  template &lt;class T&gt; 
    using raw_invocation_type_t = typename raw_invocation_type&lt;T&gt;::type;</ins>
  
} <i>// namespace fundamentals_v1</i>
} <i>// namespace experimental</i>
} <i>// namespace std</i>
</pre></blockquote>
</li>

</ol>
</resolution>

</issue>
