<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3484" status="New">
<title>Should <tt>&lt;stddef.h&gt;</tt> declare <tt>::nullptr_t</tt>?</title>
<section><sref ref="[support.c.headers.other]"/></section>
<submitter>Thomas K&ouml;ppe</submitter>
<date>06 Sep 2020</date>
<priority>3</priority>

<discussion>
<p>
From this <a href="https://github.com/cplusplus/draft/issues/4144">editorial issue request</a>: 
<p/>
The header <tt>&lt;stddef.h&gt;</tt> is currently specified in <sref ref="[support.c.headers.other]"/> 
to not declare a global name corresponding to <tt>std::byte</tt>, but no similar exclusion exists for 
<tt>std::nullptr_t</tt>.
<p/>
Is an oversight or intentional? There does not seem to be an interoperability reason to provide a global 
namespace name <tt>::nullptr_t</tt>, since this construction would be meaningless in C and thus the name 
would not be encountered in code that is both valid C and C++.
<p/>
For lack of justification, I would like to propose to require normatively that no name 
<tt>::nullptr_t</tt> be declared by <tt>&lt;stddef.h&gt;</tt>.
<p/>
Additional notes: The proposing paper <a href="https://wg21.link/n2431">N2431</a> mentions only an addition 
of "<tt>nullptr_t</tt>" to <tt>&lt;cstddef&gt;</tt> and does not discuss the impact on <tt>&lt;stddef.h&gt;</tt>. 
By omission this means the default rules for <tt>&lt;stddef.h&gt;</tt> apply and the global name should exist, 
but this does not provide us with a positive signal of intention.
<p/>
I also realize that this is a rather obscure point, and that vendors are already shipping <tt>::nullptr_t</tt>, 
so I am also happy to drop this issue as not being worth the churn and the increase in implementation complexity 
(since removals don't generally simplify implementations). I would welcome a bit of discussion, though.
</p>

<note>2020-09-29; Priority to P3 after reflector discussions</note>

<note>2022-09-18; Daniel comments</note>
<p>
See also <iref ref="3782"/>, which points out that <tt>nullptr_t</tt> has become a part of the C standard library 
as of C23 (see <a href="https://www.open-std.org/jtc1/sc22/wg14/www/docs/n3042.htm">WG14-N3042</a> and 
<a href="https://www.open-std.org/jtc1/sc22/wg14/www/docs/n3048.htm">WG14-N3048</a>).
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4910"/>.
</p>

<ol>
<li><p>Modify <sref ref="[support.c.headers.other]"/> as indicated:</p>

<blockquote>
<p>
-1- Every C header other than <tt>&lt;complex.h&gt;</tt> (<sref ref="[complex.h.syn]"/>), 
<tt>&lt;iso646.h&gt;</tt> (<sref ref ="[iso646.h.syn]"/>), <tt>&lt;stdalign.h&gt;</tt> 
(<sref ref="[stdalign.h.syn]"/>), <tt>&lt;stdatomic.h&gt;</tt> (<sref ref="[stdatomic.h.syn]"/>), 
<tt>&lt;stdbool.h&gt;</tt> (<sref ref="[stdbool.h.syn]"/>), and <tt>&lt;tgmath.h&gt;</tt> (<sref ref="[tgmath.h.syn]"/>), 
each of which has a name of the form 
<tt>&lt;<i>name</i>.h&gt;</tt>, behaves as if each name placed in the standard library namespace by the 
corresponding <tt>&lt;c<i>name</i>&gt;</tt> header is placed within the global namespace scope, except 
for the functions described in <sref ref="[sf.cmath]"/>, the declaration of <tt>std::byte</tt> <ins>and
<tt>std::nullptr_t</tt></ins> (<sref ref="[cstddef.syn]"/>), and the functions and function templates 
described in <sref ref="[support.types.byteops]"/>. It is unspecified whether these names are first
declared or defined within namespace scope (<sref ref="[basic.scope.namespace]"/>) of the namespace 
<tt>std</tt> and are then injected into the global namespace scope by explicit <i>using-declaration</i>s 
(<sref ref="[namespace.udecl]"/>).
</p>
</blockquote>
</li>

<li><p>In [diff.cpp??] [Editorial note: new compatibility section to be created for C++20], add a new entry:</p>

<blockquote>
<p>
<ins><b>Affected subclause:</b> <sref ref="[support.c.headers.other]"/><br/>
<b>Change:</b> Removal of name <tt>::nullptr_t</tt> from header <tt>&lt;stddef.h&gt;</tt>.<br/>
<b>Rationale:</b> <tt>std::nullptr_t</tt> is a C++-only feature that is not useful for interoperability with ISO C.<br/>
<b>Effect on original feature:</b> Valid C++20 code may fail to compile in this International Standard. Occurrences 
of <tt>#include &lt;stddef.h&gt;</tt> and <tt>nullptr_t</tt> should be replaced with 
<tt>#include &lt;cstddef&gt;</tt> and <tt>std::nullptr_t</tt>.</ins>
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
