<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3948" status="Voting">
<title><tt><i>possibly-const-range</i></tt> and <tt><i>as-const-pointer</i></tt> should be <tt>noexcept</tt></title>
<section><sref ref="[ranges.syn]"/><sref ref="[range.prim.cdata]"/></section>
<submitter>Jiang An</submitter>
<date>20 Jun 2023</date>
<priority>99</priority>

<discussion>
<p>
As of <paper num="P2278R4"/>, several range access CPOs are specified with <tt><i>possibly-const-range</i></tt> 
and <tt><i>as-const-pointer</i></tt>. These helper functions never throw exceptions, but are not marked with 
<tt>noexcept</tt>. As a result, implementations are currently allowed to make a call to 
<tt>ranges::c<i>cpo</i></tt> potentially throwing while the underlying <tt>ranges::<i>cpo</i></tt> call is 
non-throwing, which doesn't seem to be intended.
</p>

<note>2023-10-27; Reflector poll</note>
<p>
Set status to Tentatively Ready after five votes in favour during reflector poll.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4950"/>.
</p>

<ol>
<li><p>Modify <sref ref="[ranges.syn]"/>, header <tt>&lt;ranges&gt;</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
[&hellip;]
// <i><sref ref="[range.as.const]"/>, as const view</i>
template&lt;input_range R&gt;
  constexpr auto&amp; <i>possibly-const-range</i>(R&amp; r) <ins>noexcept</ins> {      // <i>exposition only</i>
    if constexpr (constant_range&lt;const R&gt; &amp;&amp; !constant_range&lt;R&gt;) {
      return const_cast&lt;const R&amp;&gt;(r);
    } else {
      return r;
    }
  }
[&hellip;]
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.prim.cdata]"/> before p1 as indicated:</p>

<blockquote>
<pre>
template&lt;class T&gt;
constexpr auto <i>as-const-pointer</i>(const T* p) <ins>noexcept</ins> { return p; }    // <i>exposition only</i>
</pre>
</blockquote>
</li>

</ol>
</resolution>

</issue>
