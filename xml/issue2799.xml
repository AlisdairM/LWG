<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2799" status="Resolved">
<title><tt>noexcept</tt>-specifications in <tt>shared_future</tt></title>
<section><sref ref="[futures.shared_future]"/></section>
<submitter>Zhihao Yuan</submitter>
<date>11 Nov 2016</date>
<priority>2</priority>

<discussion>
<p>
<b>Addresses GB 62</b>
<p/>
There is an implicit precondition on most <tt>shared_future</tt> operations that 
<tt>valid() == true</tt>, 30.6.7p3. The list of exempted functions seems copied 
directly from class <tt>future</tt>, and would also include copy operations for 
<tt>shared_futures</tt>, which are copyable. Similarly, this would be a wide 
contract that cannot throw, so those members would be marked <tt>noexcept</tt>.
</p>
<p>
Suggested resolution:
<p/>
Revise p3:
<p/>
"The effect of calling any member function other than the move constructor, the copy 
constructor, the destructor, the move-assignment operator, the copy-assignment 
operator, or <tt>valid()</tt> on a <tt>shared_future</tt> object for which 
<tt>valid() == false</tt> is undefined." [&hellip;]
<p/>
Add <tt>noexcept</tt> specification to the copy constructor and copy-assignment operator, 
in the class definition and where those members are specified.
</p>

<note>2016-11-10, Zhihao Yuan comments and provides wording</note>
<p>
This resolution should close LWG <iref ref="2697"/> as well, but that one was filed 
against concurrent TS.
</p>

<note>Issues Telecon 16-Dec-2016</note>
<p>This is also addressed (but in a slightly different way by <a href="http://wg21.link/p0516r0">P0516R0</a></p>

<note>2017-11 Albuquerque Wednesday issue processing</note>
<p>Resolved by <a href="https://wg21.link/p0516">P0516</a>, adopted in Issaquah.</p>
</discussion>

<resolution>
<p>This wording is relative to N4606.</p>

<blockquote class="note">
<p>
[Drafting note: This change supersedes the 1st among 3 edits in LWG <iref ref="2556"/>, 
please omit that edit and apply the one below.]
</p>
</blockquote>

<ol>
<li>
<p>Modify <sref ref="[futures.unique_future]"/>/3 as follows:</p>

<blockquote>
<p>
-3- The effect of calling <del>any member function other than the destructor, the move-assignment operator, 
or <tt>valid</tt></del><ins>the member functions <tt>get</tt>, <tt>wait</tt>, <tt>wait_for</tt>, or 
<tt>wait_until</tt></ins> on a <tt>future</tt> object for which <tt>valid() == false</tt> is undefined. 
[<i>Note:</i> Implementations are encouraged to detect this case and throw an object of type 
<tt>future_error</tt> with an error condition of <tt>future_errc::no_state</tt>. &mdash; <i>end note</i>]
</p>
</blockquote>
</li>

<li>
<p>Change <sref ref="[futures.shared_future]"/> as indicated:</p>

<blockquote>
<p>
-3- The effect of calling <del>any member function other than the destructor, the move-assignment operator, or
<tt>valid()</tt></del><ins>the member functions <tt>get</tt>, <tt>wait</tt>, <tt>wait_for</tt>, or 
<tt>wait_until</tt></ins> on a <tt>shared_future</tt> object for which <tt>valid() == false</tt> is undefined. 
[<i>Note:</i> Implementations are encouraged to detect this case and throw an object of type 
<tt>future_error</tt> with an error condition of <tt>future_errc::no_state</tt>. &mdash; <i>end note</i>]
</p>
<blockquote><pre>
namespace std {
  template &lt;class R&gt;
  class shared_future {
  public:
    shared_future() noexcept;
    shared_future(const shared_future&amp; rhs) <ins>noexcept</ins>;
    shared_future(future&lt;R&gt;&amp;&amp;) noexcept;
    shared_future(shared_future&amp;&amp; rhs) noexcept;
    ~shared_future();
    shared_future&amp; operator=(const shared_future&amp; rhs) <ins>noexcept</ins>;
    shared_future&amp; operator=(shared_future&amp;&amp; rhs) noexcept;
    [&hellip;]
  };
  [&hellip;]
}
</pre></blockquote>
[&hellip;]
<pre>
shared_future(const shared_future&amp; rhs) <ins>noexcept</ins>;
</pre>
<blockquote>
<p>
-7- <i>Effects:</i> [&hellip;]
</p>
</blockquote>
[&hellip;]
<pre>
shared_future&amp; operator=(const shared_future&amp; rhs) <ins>noexcept</ins>;
</pre>
<blockquote>
<p>
-14- <i>Effects:</i> [&hellip;]
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
