<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3014" status="WP">
<title>More <tt>noexcept</tt> issues with filesystem operations</title>
<section><sref ref="[fs.op.copy_file]"/><sref ref="[fs.op.create_directories]"/><sref ref="[fs.op.remove_all]"/></section>
<submitter>Tim Song</submitter>
<date>23 Aug 2017</date>
<priority>99</priority>

<discussion>
<p>
<tt>create_directories</tt> may need to create temporary <tt>path</tt>s, and <tt>remove_all</tt> may need to create temporary 
<tt>path</tt>s and/or <tt>directory_iterator</tt>s. These operations may require a potentially throwing memory allocation.
<p/>
Implementations of <tt>copy_file</tt> may wish to dynamically allocate the buffer used for copying when the underlying OS 
doesn't supply a copy API directly. This can happen indirectly, e.g., by using <tt>&lt;fstream&gt;</tt> facilities to 
perform the copying without supplying a custom buffer. Unless LWG wishes to prohibit using a dynamically allocated buffer 
in this manner, the <tt>noexcept</tt> should be removed.
</p>

<note>2017-11 Albuquerque Wednesday night issues processing</note>
<p>Moved to Ready</p>
<note>2018-3-17 Adopted in Jacksonville</note>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4687">N4687</a>.</p>

<ol>
<li><p>Edit <sref ref="[fs.filesystem.syn]"/>, header <tt>&lt;filesystem&gt;</tt> synopsis, as indicated:</p>
<blockquote>
<pre>
namespace std::filesystem {

  [&hellip;]
  
  bool copy_file(const path&amp; from, const path&amp; to);
  bool copy_file(const path&amp; from, const path&amp; to, error_code&amp; ec) <del>noexcept</del>;
  bool copy_file(const path&amp; from, const path&amp; to, copy_options option);
  bool copy_file(const path&amp; from, const path&amp; to, copy_options option,
                 error_code&amp; ec) <del>noexcept</del>;

  [&hellip;]

  bool create_directories(const path&amp; p);
  bool create_directories(const path&amp; p, error_code&amp; ec) <del>noexcept</del>;
  
  [&hellip;]
  
  uintmax_t remove_all(const path&amp; p);
  uintmax_t remove_all(const path&amp; p, error_code&amp; ec) <del>noexcept</del>;
  
  [&hellip;]
}
</pre>
</blockquote>
</li>

<li><p>Edit <sref ref="[fs.op.copy_file]"/> as indicated:</p>
<blockquote>
<pre>
bool copy_file(const path&amp; from, const path&amp; to);
bool copy_file(const path&amp; from, const path&amp; to, error_code&amp; ec) <del>noexcept</del>;
</pre>
<blockquote>
<p>
-1- <i>Returns:</i> [&hellip;]
<p/>
-2- <i>Throws:</i> [&hellip;]
</p>
</blockquote>
<pre>
bool copy_file(const path&amp; from, const path&amp; to, copy_options options);
bool copy_file(const path&amp; from, const path&amp; to, copy_options options,
               error_code&amp; ec) <del>noexcept</del>;
</pre>
<blockquote>
<p>
-3- <i>Requires:</i> [&hellip;]
<p/>
-4- <i>Effects:</i> [&hellip;]
<p/>
-5- <i>Returns:</i> [&hellip;]
<p/>
-6- <i>Throws:</i> [&hellip;]
<p/>
-7- <i>Complexity:</i> [&hellip;]
</p>
</blockquote>
</blockquote>
</li>

<li><p>Edit <sref ref="[fs.op.create_directories]"/> as indicated:</p>
<blockquote>
<pre>
bool create_directories(const path&amp; p);
bool create_directories(const path&amp; p, error_code&amp; ec) <del>noexcept</del>;
</pre>
<blockquote>
<p>
-1- <i>Effects:</i> [&hellip;]
<p/>
-2- <i>Postconditions:</i> [&hellip;]
<p/>
-3- <i>Returns:</i> [&hellip;]
<p/>
-4- <i>Throws:</i> [&hellip;]
<p/>
-5- <i>Complexity:</i> [&hellip;]
</p>
</blockquote>
</blockquote>
</li>
<li><p>Edit <sref ref="[fs.op.remove_all]"/> as indicated:</p>
<blockquote>
<pre>
uintmax_t remove_all(const path&amp; p);
uintmax_t remove_all(const path&amp; p, error_code&amp; ec) <del>noexcept</del>;
</pre>
<blockquote>
<p>
-1- <i>Effects:</i> [&hellip;]
<p/>
-2- <i>Postconditions:</i> [&hellip;]
<p/>
-3- <i>Returns:</i> [&hellip;]
<p/>
-4- <i>Throws:</i> [&hellip;]
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>
</issue>
