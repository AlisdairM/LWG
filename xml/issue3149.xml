<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3149" status="Voting">
<title><tt>DefaultConstructible</tt> should require default initialization</title>
<section><sref ref="[concept.defaultconstructible]"/></section>
<submitter>Casey Carter</submitter>
<date>09 Aug 2018</date>
<priority>2</priority>

<discussion>
<p>
<tt>DefaultConstructible&lt;T&gt;</tt> is equivalent to
<tt>Constructible&lt;T&gt;</tt> (<sref ref="[concept.constructible]"/>), which
is equivalent to <tt>is_constructible_v&lt;T&gt;</tt>
(<sref ref="[meta.unary.prop]"/>). Per <sref ref="[meta.unary.prop]"/>
<a href="https://wg21.link/meta.unary.prop#8">paragraph 8</a>:
<blockquote>
<p>The predicate condition for a template specialization
<tt>is_Â­constructible&lt;T, Args...&gt;</tt> shall be satisfied if and only if
the following variable definition would be well-formed for some invented
variable <tt>t</tt>:</p>
<blockquote>
<pre>
T t(declval&lt;Args&gt;()...);
</pre>
</blockquote>
</blockquote>
<tt>DefaultConstructible&lt;T&gt;</tt> requires that objects of type <tt>T</tt>
can be
<a href="https://wg21.link/dcl.init#8"><i>value-initialized</i></a>,
rather than
<a href="https://wg21.link/dcl.init#7"><i>default-initialized</i></a>
as intended.
</p>
<p>
The library needs a constraint that requires object types to be
default-initializable: the "rangified" versions of the algorithms in
<sref ref="[uninitialized.construct.default]"/> proposed in
<a href="https://wg21.link/p0896">P0896 "The One Ranges Proposal"</a>, for
example. Users will also want a mechanism to provide such a constraint, and
they're likely to choose <tt>DefaultConstructible</tt> despite its subtle
unsuitability.
</p>
<p>
There are two alternative solutions: (1) change <tt>DefaultConstructible</tt>
to require <i>default-initialization</i>, (2) change
<tt>is_default_constructible_v</tt> to require default-initializaton and specify
the concept in terms of the trait. (2) is probably too breaking a change to be
feasible.
</p>

<note>2018-08-20 Priority set to 2 after reflector discussion</note>
<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<ol>
<li><p>Modify <sref ref="[concept.defaultconstructible]"/> as follows:</p>

<blockquote>
<pre>
template&lt;class T&gt;
  concept DefaultConstructible = Constructible&lt;T&gt; <ins>&amp;&amp; see below</ins>;
</pre>
<p>
<ins>-?- Type <tt>T</tt> models <tt>DefaultConstructible</tt> only if the variable
definition</ins>
<blockquote>
<pre>
<ins>T t;</ins>
</pre>
</blockquote>
<ins>is well-formed for some invented variable <tt>t</tt>. Access checking is
performed as if in a context unrelated to <tt>T</tt>. Only the validity of the
immediate context of the variable initialization is considered.</ins>
</p>
</blockquote>
</li>
</ol>
</blockquote>

<note>2018-08-23 Tim provides updated P/R based on Batavia discussion</note>

<note>2018-10-28 Casey expands the problem statement and the P/R</note>
<p>
During Batavia review of <a href="https://wg21.link/p0896r3">P0896R3</a>, Tim
Song noted that <tt>{}</tt> is not necessarily a valid initializer for a
<tt>DefaultConstructible</tt> type. In this sample program
(see <a href="https://godbolt.org/z/I64p_E">Compiler Explorer</a>):
<blockquote>
<pre>
struct S0 { explicit S0() = default; };
struct S1 { S0 x; }; // Note: aggregate
S1 x;   // Ok
S1 y{}; // ill-formed; copy-list-initializes x from {}
</pre>
</blockquote>
<tt>S1</tt> can be default-initialized, but not list-initialized from an empty
<i>braced-init-list</i>. The consensus among those present was that
<tt>DefaultConstructible</tt> should prohibit this class of pathological types
by requiring that initialization form to be valid.
</p>

<note>2019 Cologne Wednesday night</note>
<p>Status to Ready</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4762">N4762</a>.</p>
<ol>
<li><p>Modify <sref ref="[concept.defaultconstructible]"/> as follows:</p>

<blockquote>
<pre>
<ins>template&lt;class T&gt;
  inline constexpr bool <i>is-default-initializable</i> = <i>see below</i>; // <i>exposition only</i></ins>

template&lt;class T&gt;
  concept DefaultConstructible = Constructible&lt;T&gt; <ins>&amp;&amp; requires { T{}; } &amp;&amp; <i>is-default-initializable</i>&lt;T&gt;</ins>;
</pre>
<p>
<ins>-?- For a type <tt>T</tt>, <tt><i>is-default-initializable</i>&lt;T&gt;</tt> is <tt>true</tt>
if and only if the variable definition</ins>
<blockquote>
<pre>
<ins>T t;</ins>
</pre>
</blockquote>
<ins>is well-formed for some invented variable <tt>t</tt>; otherwise it is <tt>false</tt>. Access checking is
performed as if in a context unrelated to <tt>T</tt>. Only the validity of the
immediate context of the variable initialization is considered.</ins>
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
