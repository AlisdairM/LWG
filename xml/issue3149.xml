<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3149" status="WP">
<title><tt>DefaultConstructible</tt> should require default initialization</title>
<section><sref ref="[concept.defaultconstructible]"/></section>
<submitter>Casey Carter</submitter>
<date>09 Aug 2018</date>
<priority>2</priority>

<discussion>
<p>
<tt>DefaultConstructible&lt;T&gt;</tt> is equivalent to
<tt>Constructible&lt;T&gt;</tt> (<sref ref="[concept.constructible]"/>), which
is equivalent to <tt>is_constructible_v&lt;T&gt;</tt>
(<sref ref="[meta.unary.prop]"/>). Per <sref ref="[meta.unary.prop]"/>
<a href="https://wg21.link/meta.unary.prop#8">paragraph 8</a>:
<blockquote>
<p>The predicate condition for a template specialization
<tt>is_Â­constructible&lt;T, Args...&gt;</tt> shall be satisfied if and only if
the following variable definition would be well-formed for some invented
variable <tt>t</tt>:</p>
<blockquote>
<pre>
T t(declval&lt;Args&gt;()...);
</pre>
</blockquote>
</blockquote>
<tt>DefaultConstructible&lt;T&gt;</tt> requires that objects of type <tt>T</tt>
can be
<a href="https://wg21.link/dcl.init#8"><i>value-initialized</i></a>,
rather than
<a href="https://wg21.link/dcl.init#7"><i>default-initialized</i></a>
as intended.
</p>
<p>
The library needs a constraint that requires object types to be
default-initializable: the "rangified" versions of the algorithms in
<sref ref="[uninitialized.construct.default]"/> proposed in
<a href="https://wg21.link/p0896">P0896 "The One Ranges Proposal"</a>, for
example. Users will also want a mechanism to provide such a constraint, and
they're likely to choose <tt>DefaultConstructible</tt> despite its subtle
unsuitability.
</p>
<p>
There are two alternative solutions: (1) change <tt>DefaultConstructible</tt>
to require <i>default-initialization</i>, (2) change
<tt>is_default_constructible_v</tt> to require default-initializaton and specify
the concept in terms of the trait. (2) is probably too breaking a change to be
feasible.
</p>

<note>2018-08-20 Priority set to 2 after reflector discussion</note>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<ol>
<li><p>Modify <sref ref="[concept.defaultconstructible]"/> as follows:</p>

<blockquote>
<pre>
template&lt;class T&gt;
  concept DefaultConstructible = Constructible&lt;T&gt; <ins>&amp;&amp; see below</ins>;
</pre>
<p>
<ins>-?- Type <tt>T</tt> models <tt>DefaultConstructible</tt> only if the variable
definition</ins>
<blockquote>
<pre>
<ins>T t;</ins>
</pre>
</blockquote>
<ins>is well-formed for some invented variable <tt>t</tt>. Access checking is
performed as if in a context unrelated to <tt>T</tt>. Only the validity of the
immediate context of the variable initialization is considered.</ins>
</p>
</blockquote>
</li>
</ol>
</blockquote>

<note>2018-08-23 Tim provides updated P/R based on Batavia discussion</note>

<note>2018-10-28 Casey expands the problem statement and the P/R</note>
<p>
During Batavia review of <a href="https://wg21.link/p0896r3">P0896R3</a>, Tim
Song noted that <tt>{}</tt> is not necessarily a valid initializer for a
<tt>DefaultConstructible</tt> type. In this sample program
(see <a href="https://godbolt.org/z/I64p_E">Compiler Explorer</a>):
<blockquote>
<pre>
struct S0 { explicit S0() = default; };
struct S1 { S0 x; }; // Note: aggregate
S1 x;   // Ok
S1 y{}; // ill-formed; copy-list-initializes x from {}
</pre>
</blockquote>
<tt>S1</tt> can be default-initialized, but not list-initialized from an empty
<i>braced-init-list</i>. The consensus among those present was that
<tt>DefaultConstructible</tt> should prohibit this class of pathological types
by requiring that initialization form to be valid.
</p>

<note>2019 Cologne Wednesday night</note>
<p>Status to Ready</p>

<note>2019-10-07 Casey rebases P/R onto N4830 and incorporates WG21-approved changes from P1754R1</note>
<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>This wording is relative to <a href="https://wg21.link/n4762">N4762</a>.</p>
<ol>
<li><p>Modify <sref ref="[concept.defaultconstructible]"/> as follows:</p>

<blockquote>
<pre>
<ins>template&lt;class T&gt;
  inline constexpr bool <i>is-default-initializable</i> = <i>see below</i>; // <i>exposition only</i></ins>

template&lt;class T&gt;
  concept DefaultConstructible = Constructible&lt;T&gt; <ins>&amp;&amp; requires { T{}; } &amp;&amp; <i>is-default-initializable</i>&lt;T&gt;</ins>;
</pre>
<p>
<ins>-?- For a type <tt>T</tt>, <tt><i>is-default-initializable</i>&lt;T&gt;</tt> is <tt>true</tt>
if and only if the variable definition</ins>
<blockquote>
<pre>
<ins>T t;</ins>
</pre>
</blockquote>
<ins>is well-formed for some invented variable <tt>t</tt>; otherwise it is <tt>false</tt>. Access checking is
performed as if in a context unrelated to <tt>T</tt>. Only the validity of the
immediate context of the variable initialization is considered.</ins>
</p>
</blockquote>
</li>
</ol>
</blockquote>
<p>
<a href="https://wg21.link/p1754r1">P1754R1 "Rename concepts to <tt>standard_case</tt> for
C++20"</a> - as approved by both LEWG and LWG in Cologne - contained instructions to rename the
<tt>DefaultConstructible</tt> concept to <tt>default_initializable</tt> "If LWG 3151 is accepted."
<iref ref="3151"/> is the unrelated "<tt>ConvertibleTo</tt> rejects conversion from array and
function types"; this issue is intended by P1754R1. Since P1754R1 was applied to the working draft
in Cologne, whereas this issue was only made Ready, we should apply the desired renaming to the P/R
of this issue.
</p>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>This wording is relative to <a href="https://wg21.link/n4830">N4830</a>.</p>

<ol>
<li><p>Modify <sref ref="[concepts.syn]"/>, header <tt>&lt;concepts&gt;</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
[&hellip;]
<i>// <sref ref="[concept.defaultconstructible]"/>, concept default_<del>constructible</del><ins>initializable</ins></i>
template&lt;class T&gt;
concept default_<del>constructible</del><ins>initializable</ins> = <i>see below</i>;
[&hellip;]
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[concept.defaultconstructible]"/> as indicated:</p>

<blockquote>
<p>
<b>18.4.12 Concept <tt>default_<del>constructible</del><ins>initializable</ins></tt> [concept.default<del>constructible</del><ins>initializable</ins>]</b>
</p>
<pre>
<ins>template&lt;class T&gt;
  inline constexpr bool <i>is-default-initializable</i> = <i>see below</i>; // <i>exposition only</i></ins>

template&lt;class T&gt;
  concept default_<del>constructible</del><ins>initializable</ins> = constructible_from&lt;T&gt; <ins>&amp;&amp; requires { T{}; } &amp;&amp; <i>is-default-initializable</i>&lt;T&gt;</ins>;
</pre>
<p>
<ins>-?- For a type <tt>T</tt>, <tt><i>is-default-initializable</i>&lt;T&gt;</tt> is <tt>true</tt>
if and only if the variable definition</ins>
<blockquote>
<pre>
<ins>T t;</ins>
</pre>
</blockquote>
<ins>is well-formed for some invented variable <tt>t</tt>; otherwise it is <tt>false</tt>. Access checking is
performed as if in a context unrelated to <tt>T</tt>. Only the validity of the
immediate context of the variable initialization is considered.</ins>
</p>
</blockquote>
</li>

<li><p>Modify <sref ref="[concepts.object]"/> as indicated:</p>

<blockquote>
<p>
-1- This subclause describes concepts that specify the basis of the value-oriented programming style on which
the library is based.
</p>
<pre>
template&lt;class T&gt;
concept movable = is_object_v&lt;T&gt; &amp;&amp; move_constructible&lt;T&gt; &amp;&amp;
[&hellip;]
template&lt;class T&gt;
concept semiregular = copyable&lt;T&gt; &amp;&amp; default_<del>constructible</del><ins>initializable</ins>&lt;T&gt;;
[&hellip;]
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[memory.syn]"/>, header <tt>&lt;memory&gt;</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
[&hellip;]
namespace ranges {
  template&lt;<i>no-throw-forward-iterator</i> I, <i>no-throw-sentinel</i>&lt;I&gt; S&gt;
    requires default_<del>constructible</del><ins>initializable</ins>&lt;iter_value_t&lt;I&gt;&gt;
      I uninitialized_default_construct(I first, S last);
  template&lt;<i>no-throw-forward-range</i> R&gt;
    requires default_<del>constructible</del><ins>initializable</ins>&lt;range_value_t&lt;R&gt;&gt;
      safe_iterator_t&lt;R&gt; uninitialized_default_construct(R&amp;&amp; r);

  template&lt;<i>no-throw-forward-iterator</i> I&gt;
    requires default_<del>constructible</del><ins>initializable</ins>&lt;iter_value_t&lt;I&gt;&gt;
      I uninitialized_default_construct_n(I first, iter_difference_t&lt;I&gt; n);
}
[&hellip;]
namespace ranges {
  template&lt;<i>no-throw-forward-iterator</i> I, <i>no-throw-sentinel</i>&lt;I&gt; S&gt;
    requires default_<del>constructible</del><ins>initializable</ins>&lt;iter_value_t&lt;I&gt;&gt;
     I uninitialized_value_construct(I first, S last);
  template&lt;<i>no-throw-forward-range</i> R&gt;
    requires default_<del>constructible</del><ins>initializable</ins>&lt;range_value_t&lt;R&gt;&gt;
      safe_iterator_t&lt;R&gt; uninitialized_value_construct(R&amp;&amp; r);

  template&lt;<i>no-throw-forward-iterator</i> I&gt;
    requires default_<del>constructible</del><ins>initializable</ins>&lt;iter_value_t&lt;I&gt;&gt;
      I uninitialized_value_construct_n(I first, iter_difference_t&lt;I&gt; n);
}
[&hellip;]
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[uninitialized.construct.default]"/> as indicated:</p>

<blockquote>
<pre>
namespace ranges {
  template&lt;<i>no-throw-forward-iterator</i> I, <i>no-throw-sentinel</i>&lt;I&gt; S&gt;
    requires default_<del>constructible</del><ins>initializable</ins>&lt;iter_value_t&lt;I&gt;&gt;
      I uninitialized_default_construct(I first, S last);
  template&lt;<i>no-throw-forward-range</i> R&gt;
    requires default_<del>constructible</del><ins>initializable</ins>&lt;range_value_t&lt;R&gt;&gt;
      safe_iterator_t&lt;R&gt; uninitialized_default_construct(Ramp;&amp; r);
}
</pre>
<blockquote>
<p>
-2- <i>Effects:</i> Equivalent to:
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
namespace ranges {
  template&lt;<i>no-throw-forward-iterator</i> I&gt;
    requires default_<del>constructible</del><ins>initializable</ins>&lt;iter_value_t&lt;I&gt;&gt;
      I uninitialized_default_construct_n(I first, iter_difference_t&lt;I&gt; n);
}
</pre>
<blockquote>
<p>
-4- <i>Effects:</i> Equivalent to:
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>


<li><p>Modify <sref ref="[uninitialized.construct.value]"/> as indicated:</p>

<blockquote>
<pre>
namespace ranges {
  template&lt;<i>no-throw-forward-iterator</i> I, <i>no-throw-sentinel</i>&lt;I&gt; S&gt;
    requires default_<del>constructible</del><ins>initializable</ins>&lt;iter_value_t&lt;I&gt;&gt;
      I uninitialized_value_construct(I first, S last);
  template&lt;<i>no-throw-forward-range</i> R&gt;
    requires default_<del>constructible</del><ins>initializable</ins>&lt;range_value_t&lt;R&gt;&gt;
      safe_iterator_t&lt;R&gt; uninitialized_value_construct(R&amp;&amp; r);
}
</pre>
<blockquote>
<p>
-2- <i>Effects:</i> Equivalent to:
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
namespace ranges {
  template&lt;<i>no-throw-forward-iterator</i> I&gt;
    requires default_<del>constructible</del><ins>initializable</ins>&lt;iter_value_t&lt;I&gt;&gt;
      I uninitialized_value_construct_n(I first, iter_difference_t&lt;I&gt; n);
}
</pre>
<blockquote>
<p>
-4- <i>Effects:</i> Equivalent to:
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.semi.wrap]"/> as indicated:</p>

<blockquote>
<p>
-1- Many types in this subclause are specified in terms of an exposition-only class template <tt><i>semiregular-box</i></tt>.
<tt><i>semiregular-box</i>&lt;T&gt;</tt> behaves exactly like <tt>optional&lt;T&gt;</tt> with the following differences:
</p>
<ol style="list-style-type: none">
<li><p>(1.1) &mdash; [&hellip;]</p></li>
<li><p>(1.2) &mdash; If <tt>T</tt> models <tt>default_<del>constructible</del><ins>initializable</ins></tt>, the default constructor of 
<tt><i>semiregular-box</i>&lt;T&gt;</tt> is equivalent to:</p>
<blockquote><pre>
constexpr <i>semiregular-box</i>() noexcept(is_nothrow_default_constructible_v&lt;T&gt;)
  : <i>semiregular-box</i>{in_place}
{ }
</pre></blockquote>
</li>
<li><p>(1.3) &mdash; [&hellip;]</p></li>
</ol>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.istream.view]"/>, Class template <tt>basic_istream_view</tt> synopsis, 
as indicated:</p>

<blockquote>
<pre>
namespace std::ranges {
  [&hellip;]
  template&lt;movable Val, class CharT, class Traits&gt;
    requires default_<del>constructible</del><ins>initializable</ins>&lt;Val&gt; &amp;&amp;
      <i>stream-extractable</i>&lt;Val, CharT, Traits&gt;
  class basic_istream_view : public view_interface&lt;basic_istream_view&lt;Val, CharT, Traits&gt;&gt; {
    [&hellip;]
  }
  [&hellip;]
}
</pre>
</blockquote>
</li>
</ol>
</blockquote>

<note>2019-11-17; Daniel comments and restores wording</note>
<p>
During the Belfast 2019 meeting the concept renaming was not voted in by this issue, but
separately, the accepted wording can be found in <a href="https://wg21.link/p1917r0#3149">P1917R0#3149</a>.
To prevent confusion, the here presented proposed wording has been synchronized with that of the voted in
document.
</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4762">N4762</a>.</p>

<ol>
<li><p>Modify <sref ref="[concept.defaultconstructible]"/> as follows:</p>

<blockquote>
<pre>
<ins>template&lt;class T&gt;
  inline constexpr bool <i>is-default-initializable</i> = <i>see below</i>; // <i>exposition only</i></ins>

template&lt;class T&gt;
  concept DefaultConstructible = Constructible&lt;T&gt; <ins>&amp;&amp; requires { T{}; } &amp;&amp; <i>is-default-initializable</i>&lt;T&gt;</ins>;
</pre>
<p>
<ins>-?- For a type <tt>T</tt>, <tt><i>is-default-initializable</i>&lt;T&gt;</tt> is <tt>true</tt>
if and only if the variable definition</ins>
<blockquote>
<pre>
<ins>T t;</ins>
</pre>
</blockquote>
<ins>is well-formed for some invented variable <tt>t</tt>; otherwise it is <tt>false</tt>. Access checking is
performed as if in a context unrelated to <tt>T</tt>. Only the validity of the
immediate context of the variable initialization is considered.</ins>
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
