<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4207" status="New">
<title>Point of reference for `source_location` is not specified when used in an default template argument</title>
<section><sref ref="[support.srcloc.cons]"/></section>
<submitter>Cassio Neri</submitter>
<date>07 Feb 2025</date>
<priority>99</priority>

<discussion>
<p>
<sref ref="[support.srcloc.cons]"/>/2 in <paper num="N5001"/> says nothing
about using `source_location::current()` in an initializer of a template
parameter. The example below suggests that gcc, clang and msvc seem to agree
on this case. It would be nice if the Standard legitimized current practice.
</p>
<pre><code>
#include &lt;source_location&gt;

template &lt;int i = std::source_location::current().line()&gt; // line 3
struct A {
  static constexpr int value = i;
};

template &lt;int i = std::source_location::current().line()&gt; // line 8
constexpr int f() {
  return i;
}

static_assert(A&lt;&gt;::value == 3); // passes
static_assert(f() == 8); // passes
</code></pre>

<note>2025-02-07; Jonathan provides wording</note>
<p>
For a default argument of a function parameter, `current()` is recommended
to return the location of the caller that makes use of that default argument.
For a default template argument, the location would be determined by the
template's point of instantiation (<sref ref="[temp.point]"/>) which would
not always do what users expect. Using the location of the default template
argument in the template declaration seems sensible and predictable,
and matches existing practice. Arguably, this doesn't need to be stated
because it's just "exactly where the `current()` call appear in the source".
The other cases in the Remarks paragraph are situations where the preferred
location is different, because we want to know where it's used, not defined.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N5001"/>.
</p>

<ol>
<li>
Modify <sref ref="[support.srcloc.cons]"/> as indicated:
<blockquote>
-2- <i>Remarks</i>:
Any call to `current` that appears as a default member initializer
(<sref ref="[class.mem]"/>), or as a subexpression thereof,
should correspond to the location of the constructor definition
or aggregate initialization that uses the default member initializer.
Any call to `current` that appears as a default argument
(<sref ref="[dcl.fct.default]"/>), or as a subexpression thereof,
should correspond to the location of the invocation of the function that
uses the default argument (<sref ref="[expr.call]"/>).
Any call to `current` that appears as a default template argument
(<sref ref="[temp.param]"/>), or as a subexpression thereof,
should correspond to the location where the default template argument
is specified.
</blockquote>
</li>
</ol>
</resolution>

</issue>
