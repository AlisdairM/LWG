<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3130" status="C++20">
<title>&sect;[input.output] needs many <tt>addressof</tt></title>
<section><sref ref="[input.output]"/></section>
<submitter>Tim Song</submitter>
<date>30 Jun 2018</date>
<priority>0</priority>

<discussion>
<p>
There are 27 instances of <tt>&amp;sb</tt> and one instance of <tt>&amp;rhs</tt> in 
Clause <sref ref="[input.output]"/>, each of which needs to use <tt>addressof</tt> because
the operand has a user-provided template type parameter as an associated class and so
the use of unary <tt>&amp;</tt> is subject to ADL hijacking.
</p>

<note>2018-07-20 Status to Tentatively Ready after five positive votes on the reflector.</note>
<note>2018-11, Adopted in San Diego</note>
</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4750">N4750</a>.
</p>

<ol>
<li>
<p>
Change <sref ref="[basic.ios.members]"/> p16 as indicated:
</p>
<blockquote>
<pre>
basic_ios&amp; copyfmt(const basic_ios&amp; rhs);
</pre>
<blockquote>
<p>
-16- <i>Effects:</i> If <tt>(this == <del>&amp;</del><ins>addressof(</ins>rhs<ins>)</ins>)</tt> 
does nothing. [&hellip;]
</p>
</blockquote>
</blockquote>
</li>

<li>
<p>
Change <sref ref="[istringstream.cons]"/> as indicated:
</p>
<blockquote>
<pre>
explicit basic_istringstream(ios_base::openmode which);
</pre>
<blockquote>
<p>
-1- <i>Effects:</i> Constructs an object of class <tt>basic_istringstream&lt;charT, traits&gt;</tt>,
initializing the base class with <tt>basic_istream&lt;charT, traits&gt;(<del>&amp;</del><ins>addressof(</ins>sb<ins>)</ins>)</tt>
(<sref ref="[istream]"/>) and initializing <tt>sb</tt> with 
<tt>basic_stringbuf&lt;charT, traits, Allocator&gt;(which | ios_base::in)</tt> (<sref ref="[stringbuf.cons]"/>).
</p>
</blockquote>
<pre>
explicit basic_istringstream(
  const basic_string&lt;charT, traits, Allocator&gt;&amp; str,
  ios_base::openmode which = ios_base::in);
</pre>
<blockquote>
<p>
-2- <i>Effects:</i> Constructs an object of class <tt>basic_istringstream&lt;charT, traits&gt;</tt>,
initializing the base class with <tt>basic_istream&lt;charT, traits&gt;(<del>&amp;</del><ins>addressof(</ins>sb<ins>)</ins>)</tt>
(<sref ref="[istream]"/>) and initializing <tt>sb</tt> with 
<tt>basic_stringbuf&lt;charT, traits, Allocator&gt;(str, which | ios_base::in)</tt> (<sref ref="[stringbuf.cons]"/>).
</p>
</blockquote>
<pre>
basic_istringstream(basic_istringstream&amp;&amp; rhs);
</pre>
<blockquote>
<p>
-3- <i>Effects:</i> Move constructs from the rvalue <tt>rhs</tt>. This is accomplished
by move constructing the base class, and the contained <tt>basic_stringbuf</tt>.
Next <tt>basic_istream&lt;charT, traits&gt;::set_rdbuf(<del>&amp;</del><ins>addressof(</ins>sb<ins>)</ins>)</tt>
is called to install the contained <tt>basic_stringbuf</tt>.
</p>
</blockquote>
</blockquote>
</li>

<li>
<p>
Change <sref ref="[istringstream.members]"/> p1 as indicated:
</p>
<blockquote>
<pre>
basic_stringbuf&lt;charT, traits, Allocator&gt;* rdbuf() const;
</pre>
<blockquote>
<p>
-1- <i>Returns:</i> <tt>const_cast&lt;basic_stringbuf&lt;charT, traits, Allocator&gt;*&gt;(<del>&amp;</del><ins>addressof(</ins>sb<ins>)</ins>)</tt>.
</p>
</blockquote>
</blockquote>
</li>

<li>
<p>
Change <sref ref="[ostringstream.cons]"/> as indicated:
</p>
<blockquote>
<pre>
explicit basic_ostringstream(ios_base::openmode which);
</pre>
<blockquote>
<p>
-1- <i>Effects:</i> Constructs an object of class <tt>basic_ostringstream&lt;charT, traits&gt;</tt>,
initializing the base class with <tt>basic_ostream&lt;charT, traits&gt;(<del>&amp;</del><ins>addressof(</ins>sb<ins>)</ins>)</tt>
(<sref ref="[ostream]"/>) and initializing <tt>sb</tt> with 
<tt>basic_stringbuf&lt;charT, traits, Allocator&gt;(which | ios_base::out)</tt> (<sref ref="[stringbuf.cons]"/>).
</p>
</blockquote>
<pre>
explicit basic_ostringstream(
  const basic_string&lt;charT, traits, Allocator&gt;&amp; str,
  ios_base::openmode which = ios_base::out);
</pre>
<blockquote>
<p>
-2- <i>Effects:</i> Constructs an object of class <tt>basic_ostringstream&lt;charT, traits&gt;</tt>,
initializing the base class with <tt>basic_ostream&lt;charT, traits&gt;(<del>&amp;</del><ins>addressof(</ins>sb<ins>)</ins>)</tt>
(<sref ref="[ostream]"/>) and initializing <tt>sb</tt> with
<tt>basic_stringbuf&lt;charT, traits, Allocator&gt;(str, which | ios_base::out)</tt> (<sref ref="[stringbuf.cons]"/>).
</p>
</blockquote>
<pre>
basic_ostringstream(basic_ostringstream&amp;&amp; rhs);
</pre>
<blockquote>
<p>
-3- <i>Effects:</i> Move constructs from the rvalue <tt>rhs</tt>. This is accomplished 
by move constructing the base class, and the contained <tt>basic_stringbuf</tt>. 
Next <tt>basic_ostream&lt;charT, traits&gt;::set_rdbuf(<del>&amp;</del><ins>addressof(</ins>sb<ins>)</ins>)</tt>
is called to install the contained <tt>basic_stringbuf</tt>.
</p>
</blockquote>
</blockquote>
</li>

<li>
<p>
Change <sref ref="[ostringstream.members]"/> p1 as indicated:
</p>
<blockquote>
<pre>
basic_stringbuf&lt;charT, traits, Allocator&gt;* rdbuf() const;
</pre>
<blockquote>
<p>
-1- <i>Returns:</i> <tt>const_cast&lt;basic_stringbuf&lt;charT, traits, Allocator&gt;*&gt;(<del>&amp;</del><ins>addressof(</ins>sb<ins>)</ins>)</tt>.
</p>
</blockquote>
</blockquote>
</li>

<li>
<p>
Change <sref ref="[stringstream.cons]"/> as indicated:
</p>
<blockquote>
<pre>
explicit basic_stringstream(ios_base::openmode which);
</pre>
<blockquote>
<p>
-1- <i>Effects:</i> Constructs an object of class <tt>basic_stringstream&lt;charT, traits&gt;</tt>,
initializing the base class with <tt>basic_iostream&lt;charT, traits&gt;(<del>&amp;</del><ins>addressof(</ins>sb<ins>)</ins>)</tt>
(<sref ref="[iostream.cons]"/>) and initializing <tt>sb</tt> with 
<tt>basic_stringbuf&lt;charT, traits, Allocator&gt;(which)</tt>.
</p>
</blockquote>
<pre>
explicit basic_stringstream(
  const basic_string&lt;charT, traits, Allocator&gt;&amp; str,
  ios_base::openmode which = ios_base::out | ios_base::in);
</pre>
<blockquote>
<p>
-2- <i>Effects:</i> Constructs an object of class <tt>basic_stringstream&lt;charT, traits&gt;</tt>,
initializing the base class with <tt>basic_iostream&lt;charT, traits&gt;(<del>&amp;</del><ins>addressof(</ins>sb<ins>)</ins>)</tt>
(<sref ref="[iostream.cons]"/>) and initializing <tt>sb</tt> with 
<tt>basic_stringbuf&lt;charT, traits, Allocator&gt;(str, which)</tt>.
</p>
</blockquote>
<pre>
basic_stringstream(basic_stringstream&amp;&amp; rhs);
</pre>
<blockquote>
<p>
-3- <i>Effects:</i> Move constructs from the rvalue <tt>rhs</tt>. This is accomplished 
by move constructing the base class, and the contained <tt>basic_stringbuf</tt>. 
Next <tt>basic_istream&lt;charT, traits&gt;::set_rdbuf(<del>&amp;</del><ins>addressof(</ins>sb<ins>)</ins>)</tt>
is called to install the contained <tt>basic_stringbuf</tt>.
</p>
</blockquote>
</blockquote>
</li>

<li>
<p>
Change <sref ref="[stringstream.members]"/> p1 as indicated:
</p>
<blockquote>
<pre>
basic_stringbuf&lt;charT, traits, Allocator&gt;* rdbuf() const;
</pre>
<blockquote>
<p>
-1- <i>Returns:</i> <tt>const_cast&lt;basic_stringbuf&lt;charT, traits, Allocator&gt;*&gt;(<del>&amp;</del><ins>addressof(</ins>sb<ins>)</ins>)</tt><ins>.</ins>
</p>
</blockquote>
</blockquote>
</li>

<li>
<p>
Change <sref ref="[ifstream.cons]"/> as indicated:
</p>
<blockquote>
<pre>
basic_ifstream();
</pre>
<blockquote>
<p>
-1- <i>Effects:</i> Constructs an object of class <tt>basic_ifstream&lt;charT, traits&gt;</tt>,
initializing the base class with <tt>basic_istream&lt;charT, traits&gt;(<del>&amp;</del><ins>addressof(</ins>sb<ins>)</ins>)</tt>
(<sref ref="[istream.cons]"/>) and initializing <tt>sb</tt> with 
<tt>basic_filebuf&lt;charT, traits&gt;()</tt> (<sref ref="[filebuf.cons]"/>).
</p>
</blockquote>
<pre>
explicit basic_ifstream(const char* s,
                        ios_base::openmode mode = ios_base::in);
explicit basic_ifstream(const filesystem::path::value_type* s,
                        ios_base::openmode mode = ios_base::in);  // wide systems only; see <sref ref="[fstream.syn]"/>
</pre>
<blockquote>
<p>
-2- <i>Effects:</i> Constructs an object of class <tt>basic_ifstream&lt;charT, traits&gt;</tt>,
initializing the base class with <tt>basic_istream&lt;charT, traits&gt;(<del>&amp;</del><ins>addressof(</ins>sb<ins>)</ins>)</tt>
(<sref ref="[istream.cons]"/>) and initializing <tt>sb</tt> with 
<tt>basic_filebuf&lt;charT, traits&gt;()</tt> (<sref ref="[filebuf.cons]"/>), then calls 
<tt>rdbuf()-&gt;open(s, mode | ios_base::in)</tt>. If that function returns a null pointer, calls <tt>setstate(failbit)</tt>.
</p>
</blockquote>
<p>[&hellip;]</p>
<pre>
basic_ifstream(basic_ifstream&amp;&amp; rhs);
</pre>
<blockquote>
<p>
-4- <i>Effects:</i> Move constructs from the rvalue <tt>rhs</tt>. This is accomplished 
by move constructing the base class, and the contained <tt>basic_filebuf</tt>. 
Next <tt>basic_istream&lt;charT, traits&gt;::set_rdbuf(<del>&amp;</del><ins>addressof(</ins>sb<ins>)</ins>)</tt>
is called to install the contained <tt>basic_filebuf</tt>.
</p>
</blockquote>
</blockquote>
</li>

<li>
<p>
Change <sref ref="[ifstream.members]"/> p1 as indicated:
</p>
<blockquote>
<pre>
basic_filebuf&lt;charT, traits&gt;* rdbuf() const;
</pre>
<blockquote>
<p>
-1- <i>Returns:</i> <tt>const_cast&lt;basic_filebuf&lt;charT, traits&gt;*&gt;(<del>&amp;</del><ins>addressof(</ins>sb<ins>)</ins>)</tt>.
</p>
</blockquote>
</blockquote>
</li>

<li>
<p>
Change <sref ref="[ofstream.cons]"/> as indicated:
</p>
<blockquote>
<pre>
basic_ofstream();
</pre>
<blockquote>
<p>
-1- <i>Effects:</i> Constructs an object of class <tt>basic_ofstream&lt;charT, traits&gt;</tt>,
initializing the base class with <tt>basic_ostream&lt;charT, traits&gt;(<del>&amp;</del><ins>addressof(</ins>sb<ins>)</ins>)</tt>
(<sref ref="[ostream.cons]"/>) and initializing <tt>sb</tt> with 
<tt>basic_filebuf&lt;charT, traits&gt;()</tt> (<sref ref="[filebuf.cons]"/>).
</p>
</blockquote>
<pre>
explicit basic_ofstream(const char* s,
                        ios_base::openmode mode = ios_base::out);
explicit basic_ofstream(const filesystem::path::value_type* s,
                        ios_base::openmode mode = ios_base::out);  // wide systems only; see <sref ref="[fstream.syn]"/>
</pre>
<blockquote>
<p>
-2- <i>Effects:</i> Constructs an object of class <tt>basic_ofstream&lt;charT, traits&gt;</tt>,
initializing the base class with <tt>basic_ostream&lt;charT, traits&gt;(<del>&amp;</del><ins>addressof(</ins>sb<ins>)</ins>)</tt>
(<sref ref="[ostream.cons]"/>) and initializing <tt>sb</tt> with 
<tt>basic_filebuf&lt;charT, traits&gt;()</tt> (<sref ref="[filebuf.cons]"/>), then calls 
<tt>rdbuf()-&gt;open(s, mode | ios_base::out)</tt>. If that function returns a null pointer, calls <tt>setstate(failbit)</tt>.
</p>
</blockquote>
<p>[&hellip;]</p>
<pre>
basic_ofstream(basic_ofstream&amp;&amp; rhs);
</pre>
<blockquote>
<p>
-4- <i>Effects:</i> Move constructs from the rvalue <tt>rhs</tt>. This is accomplished 
by move constructing the base class, and the contained <tt>basic_filebuf</tt>. 
Next <tt>basic_ostream&lt;charT, traits&gt;::set_rdbuf(<del>&amp;</del><ins>addressof(</ins>sb<ins>)</ins>)</tt>
is called to install the contained <tt>basic_filebuf</tt>.
</p>
</blockquote>
</blockquote>
</li>

<li>
<p>
Change <sref ref="[ofstream.members]"/> p1 as indicated:
</p>
<blockquote>
<pre>
basic_filebuf&lt;charT, traits&gt;* rdbuf() const;
</pre>
<blockquote>
<p>
-1- <i>Returns:</i> <tt>const_cast&lt;basic_filebuf&lt;charT, traits&gt;*&gt;(<del>&amp;</del><ins>addressof(</ins>sb<ins>)</ins>)</tt>.
</p>
</blockquote>
</blockquote>
</li>

<li>
<p>
Change <sref ref="[fstream.cons]"/> as indicated:
</p>
<blockquote>
<pre>
basic_fstream();
</pre>
<blockquote>
<p>
-1- <i>Effects:</i> Constructs an object of class <tt>basic_fstream&lt;charT, traits&gt;</tt>,
initializing the base class with <tt>basic_iostream&lt;charT, traits&gt;(<del>&amp;</del><ins>addressof(</ins>sb<ins>)</ins>)</tt>
(<sref ref="[iostream.cons]"/>) and initializing <tt>sb</tt> with 
<tt>basic_filebuf&lt;charT, traits&gt;()</tt>.
</p>
</blockquote>
<pre>
explicit basic_fstream(
  const char* s,
  ios_base::openmode mode = ios_base::in | ios_base::out);
explicit basic_fstream(
  const filesystem::path::value_type* s,
  ios_base::openmode mode = ios_base::in | ios_base::out);  // wide systems only; see <sref ref="[fstream.syn]"/>
</pre>
<blockquote>
<p>
-2- <i>Effects:</i> Constructs an object of class <tt>basic_fstream&lt;charT, traits&gt;</tt>,
initializing the base class with <tt>basic_iostream&lt;charT, traits&gt;(<del>&amp;</del><ins>addressof(</ins>sb<ins>)</ins>)</tt>
(<sref ref="[iostream.cons]"/>) and initializing <tt>sb</tt> with 
<tt>basic_filebuf&lt;charT, traits&gt;()</tt>, then calls <tt>rdbuf()-&gt;open(s, mode)</tt>.
If that function returns a null pointer, calls <tt>setstate(failbit)</tt>.
</p>
</blockquote>
<p>[&hellip;]</p>
<pre>
basic_fstream(basic_fstream&amp;&amp; rhs);
</pre>
<blockquote>
<p>
-4- <i>Effects:</i> Move constructs from the rvalue <tt>rhs</tt>. This is accomplished 
by move constructing the base class, and the contained <tt>basic_filebuf</tt>. 
Next <tt>basic_istream&lt;charT, traits&gt;::set_rdbuf(<del>&amp;</del><ins>addressof(</ins>sb<ins>)</ins>)</tt>
is called to install the contained <tt>basic_filebuf</tt>.
</p>
</blockquote>
</blockquote>
</li>

<li>
<p>
Change <sref ref="[fstream.members]"/> p1 as indicated:
</p>
<blockquote>
<pre>
basic_filebuf&lt;charT, traits&gt;* rdbuf() const;
</pre>
<blockquote>
<p>
-1- <i>Returns:</i> <tt>const_cast&lt;basic_filebuf&lt;charT, traits&gt;*&gt;(<del>&amp;</del><ins>addressof(</ins>sb<ins>)</ins>)</tt>.
</p>
</blockquote>
</blockquote>
</li>

<li>
<p>
Change <sref ref="[syncstream.osyncstream.overview]"/>, class template <tt>basic_osyncstream</tt> synopsis, as indicated:
</p>
<blockquote class="note">
<p>
[<i>Drafting note</i>: The text shown below assumes the application of the proposed resolution of issue <iref ref="3127"/>.]
</p>
</blockquote>
<blockquote>
<pre>
namespace std {
  template&lt;class charT, class traits, class Allocator&gt;
  class basic_osyncstream : public basic_ostream&lt;charT, traits&gt; {
  public:
    [&hellip;]

    // <sref ref="[syncstream.osyncstream.members]"/>, member functions
    void emit();
    streambuf_type* get_wrapped() const noexcept;
    syncbuf_type* rdbuf() const noexcept { return const_cast&lt;syncbuf_type*&gt;(<del>&amp;</del><ins>addressof(</ins>sb<ins>)</ins>); }
    [&hellip;]
  };
}
</pre>
</blockquote>
</li>

<li>
<p>
Change <sref ref="[syncstream.osyncstream.cons]"/> p1 and p4 as indicated:
</p>
<blockquote>
<pre>
basic_osyncstream(streambuf_type* buf, const Allocator&amp; allocator);
</pre>
<blockquote>
<p>
-1- <i>Effects:</i> Initializes <tt>sb</tt> from <tt>buf</tt> and <tt>allocator</tt>. 
Initializes the base class with <tt>basic_ostream<ins>&lt;charT, traits&gt;</ins>(<del>&amp;</del><ins>addressof(</ins>sb<ins>)</ins>)</tt>.
<p/>
-2- [&hellip;]
<p/>
-3- [&hellip;]
</p>
</blockquote>
<pre>
basic_osyncstream(basic_osyncstream&amp;&amp; other) noexcept;
</pre>
<blockquote>
<p>
-4- <i>Effects:</i> Move constructs the base class and <tt>sb</tt> from the corresponding subobjects of <tt>other</tt>,
and calls <tt>basic_ostream&lt;charT, traits&gt;::set_rdbuf(<del>&amp;</del><ins>addressof(</ins>sb<ins>)</ins>)</tt>.
<p/>
-5- [&hellip;]
</p>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
