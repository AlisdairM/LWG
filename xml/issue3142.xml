<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3142" status="New">
<title><tt>std::foo&lt;incomplete&gt;</tt> should be ill-formed NDR</title>
<section><sref ref="[res.on.functions]"/></section>
<submitter>Casey Carter</submitter>
<date>7 Jul 2018</date>
<priority>99</priority>

<discussion>

<p>
<sref ref="[res.on.functions]"/>/2 states:
<blockquote>
<p>
-2- In particular, the effects are undefined in the following cases:
</p><p>
[&hellip;]
</p><p>
(2.5) &mdash; if an incomplete type (<sref ref="[basic.types]"/>) is used as a template argument
when instantiating a template component or evaluating a concept, unless specifically allowed for
that component.
</p>
</blockquote>
While undefined behavior is appropriate for the other cases specified in the earlier bullets, which
describe failure to meet (runtime) semantic requirements, "instantiating a template component or
evaluating a concept" with an incomplete type happens at compile-time, and could potentially be
diagnosed. It would therefore be more appropriate to specify that programs which do so are
ill-formed with no diagnostic required.
</p>

</discussion>

<resolution>

<p>This wording is relative to <a href="https://wg21.link/n4762">N4762</a>.</p>

<p>Change <sref ref="[res.on.functions]"/> as indicated:</p>
<blockquote>
<p>
<del>(2.5) &mdash; if an incomplete type (<sref ref="[basic.types]"/>) is used as a template
argument when instantiating a template component or evaluating a concept, unless specifically
allowed for that component.</del>
</p><p>
<ins>-?- Unless explicitly stated otherwise, a program that instantiates a template component or
evaluates a concept with an incomplete type (<sref ref="[basic.types]"/>) as a template argument is
ill-formed with no diagnostic required.</ins>
</p>
</blockquote>

</resolution>

</issue>
