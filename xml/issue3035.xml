<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3035" status="Tentatively Ready">
<title><tt>std::allocator</tt>'s constructors should be <tt>constexpr</tt></title>
<section><sref ref="[default.allocator]"/></section>
<submitter>Geoffrey Romer</submitter>
<date>11 Nov 2017</date>
<priority>99</priority>

<discussion>
<p>
<tt>std::allocator</tt>'s constructors should be <tt>constexpr</tt>. It's expected to be an empty class as far as I know, 
so this should impose no implementation burden, and it would be useful to permit guaranteed static initialization of 
objects that need to hold a <tt>std::allocator</tt>, but don't have to actually use it until after construction.
</p>

<note>
2017-11-25 Moved to Tentatively Ready after 7 positive votes for P0 on c++std-lib.
</note>
</discussion>

<resolution>
<p>
This wording is relative to <a href="http://wg21.link/n4700">N4700</a>.
</p>
<ol>
<li><p>Change in <sref ref="[default.allocator]"/> as indicated:</p>
<blockquote>
<pre>
namespace std {
  template &lt;class T&gt; class allocator {
  public:
    using value_type = T;
    using propagate_on_container_move_assignment = true_type;
    using is_always_equal = true_type;
    <ins>constexpr</ins> allocator() noexcept;
    <ins>constexpr</ins> allocator(const allocator&amp;) noexcept;
    <ins>constexpr</ins> template &lt;class U&gt; allocator(const allocator&lt;U&gt;&amp;) noexcept;
    ~allocator();
    T* allocate(size_t n);
    void deallocate(T* p, size_t n);
  };
}
</pre>
</blockquote>
</li>
</ol>
</resolution>

</issue>
