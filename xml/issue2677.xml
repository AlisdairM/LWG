<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2677" status="Resolved">
<title><code>directory_entry::status</code> is not allowed to be cached as a quality-of-implementation issue</title>
<section><sref ref="[directory_entry.obs]"/></section>
<submitter>Billy O'Neal</submitter>
<date>03 Mar 2016</date>
<priority>2</priority>

<discussion>
<p>To fix multi-threading problems in <code>directory_entry</code>, caching behavior
was removed from the type. This is bad for performance reasons,
because the values can no longer be cached from the result of <code>readdir</code>
on POSIX platforms, or from <code>FindFirstFile/FindNextFile</code> on Windows.</p>

<p>It appears that the intent was to allow implementers to fill in the
values for <code>directory_entry::status</code> inside <code>directory_iterator</code>, but as
currently specified:</p>

    <blockquote><i>Returns:</i> <code>status(path()[, ec])</code>.</blockquote>

<p>This is not allowed to be cached, because the target of the path can
change. For example, consider the following program:</p>

<pre>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;filesystem&gt;
#include &lt;fstream&gt;

using namespace std;
namespace fs = ::std::filesystem;

void verify(const bool b, const char * const msg) {
    if (!b) {
        printf("fail: %s\n", msg);
        exit(1);
    }
}

void touch_file(const char * const filename) {
    ofstream f(filename);
    f &lt;&lt; '\n' &lt;&lt; endl;
    verify(f.good(), "File write failed");
}

int main() {
    fs::remove_all("subDir");
    fs::create_directory("subDir");
    fs::create_directory("subDir/child");
    touch_file("subDir/child/child");
    fs::current_path("./subDir");
    fs::directory_iterator dir(".");
    ++dir;
    fs::directory_entry entry = *dir;

    verify(entry == "./child",
      "unexpected subdirectory"); //enumerating "subDir" returned the directory "child"

    fs::file_status status = entry.status();
    verify(status.type() == fs::file_type::directory,
        "subDir/child was not a directory");
    fs::current_path("./child");
    status = entry.status(); // REQUIRED to re-stat() on POSIX,
                             // GetFileAttributes() on Windows
    verify(status.type() == fs::file_type::regular,
        "subDir/child/child was not a regular file");
    return 0;
}</pre>

  <p>
    <code>directory_entry</code> should be re-specified to allow implementers to cache
    the value of <code>status(path)</code> at the time <code>irectory_iterator</code> was
    incremented to avoid repeated <code>stat()</code> / <code>GetFileAttributes</code> calls. (This
    may mean additional constructors are necessary for <code>directory_entry</code> as well)
  </p>

<note>2016-04, Issues Telecon</note>
<p>
Beman is working on a paper to address this.
</p>

<note>2016-08, Beman comments</note>
<p>This will be resolved by <a href="http://wg21.link/p0317r1">P0317R1</a>, Directory Entry Caching for Filesystem.</p>
<p>Fri AM: Moved to Tentatively Resolved</p>
</discussion>

<resolution>
<p>
</p>
</resolution>

</issue>
