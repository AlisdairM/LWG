<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2716" status="Tentatively Ready">
<title>Specification of <tt>shuffle</tt> and <tt>sample</tt> disallows lvalue <tt>URNG</tt>s</title>
<section><sref ref="[alg.random.sample]"/><sref ref="[alg.random.shuffle]"/></section>
<submitter>Tim Song</submitter>
<date>24 May 2016</date>
<priority>0</priority>

<discussion>
<p>
<tt>std::shuffle</tt> and <tt>std::sample</tt> each accepts a <tt>UniformRandomNumberGenerator&amp;&amp;</tt> argument 
and says that "<tt>UniformRandomNumberGenerator</tt> shall meet the requirements of a uniform random number generator 
(<sref ref="[rand.req.urng]"/>) type".
<p/>
<sref ref="[rand.req.urng]"/>/2 in turn starts with "A class <tt>G</tt> satisfies the requirements of a uniform random 
number generator if [&hellip;]". 
<p/>
If an lvalue is passed, <tt>UniformRandomNumberGenerator</tt> is a reference type, not a class, and in fact expressions 
like <tt>G::min()</tt> will not compile if <tt>G</tt> is a reference type.</p>
</discussion>

<resolution>
<p>This wording is relative to N4582.</p>
<ol>
<li><p>Edit <sref ref="[alg.random.sample]"/>/1 as indicated:</p>

<blockquote>
<pre>
template&lt;class PopulationIterator, class SampleIterator,
         class Distance, class UniformRandomNumberGenerator&gt;
  SampleIterator sample(PopulationIterator first, PopulationIterator last,
                        SampleIterator out, Distance n,
                        UniformRandomNumberGenerator&amp;&amp; g);
</pre>
<blockquote>
<p>
-1- <i>Requires::</i>
</p>
<ol style="list-style-type: none">
<li>[&hellip;]</li>
<li>(1.6) &mdash; <tt><ins>remove_reference_t&lt;</ins>UniformRandomNumberGenerator<ins>&gt;</ins></tt> 
shall meet the requirements of a uniform random number generator
type (26.6.1.3) whose return type is convertible to <tt>Distance</tt>.</li>
<li>[&hellip;]</li>
</ol>
</blockquote>
</blockquote>
</li>

<li><p>Edit <sref ref="[alg.random.shuffle]"/>/2 as indicated:</p>

<blockquote>
<pre>
template&lt;class RandomAccessIterator, class UniformRandomNumberGenerator&gt;
  void shuffle(RandomAccessIterator first,
               RandomAccessIterator last,
               UniformRandomNumberGenerator&amp;&amp; g);
</pre>
<blockquote>
<p>
-1- [&hellip;]
<p/>
-2- <i>Requires:</i> <tt>RandomAccessIterator</tt> shall satisfy the requirements of <tt>ValueSwappable</tt> (17.6.3.2). 
The type <tt><ins>remove_reference_t&lt;</ins>UniformRandomNumberGenerator<ins>&gt;</ins></tt> shall meet 
the requirements of a uniform random number generator (26.6.1.3) type whose return type is convertible to 
<tt>iterator_traits&lt;RandomAccessIterator&gt;::difference_type</tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
