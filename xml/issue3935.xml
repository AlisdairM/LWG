<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3935" status="Tentatively Ready">
<title><tt>template&lt;class X&gt; constexpr complex&amp; operator=(const complex&lt;X&gt;&amp;)</tt> has no specification</title>
<section><sref ref="[complex]"/></section>
<submitter>Daniel Kr&uuml;gler</submitter>
<date>21 May 2023</date>
<priority>99</priority>

<discussion>
<p>
The class template <tt>complex</tt> synopsis in <sref ref="[complex]"/> shows the following member function template:
</p>
<blockquote><pre>
template&lt;class X&gt; constexpr complex&amp; operator= (const complex&lt;X&gt;&amp;);
</pre></blockquote>
<p>
but does not specify its semantics. This affects a code example such as the following one:
</p>
<blockquote><pre>
#include &lt;complex&gt;

int main()
{
  std::complex&lt;double&gt; zd(1, 1);
  std::complex&lt;float&gt; zf(2, 0);
  zd = zf;
}
</pre></blockquote>
<p>
This problem exists since the 1998 version of the standard (at that time this was declared in subclause [lib.complex]),
and even though this looks like a "copy-assignment-like" operation, its effects aren't implied by our general
<sref ref="[functions.within.classes]"/> wording (a function template is never considered as copy assignment operator,
see <sref ref="[class.copy.assign]"/>).
<p/>
It should be point out that the refactoring done by <paper num="P1467R9"/> had caused some other members to become finally
specified that were not specified before, but in addition to LWG <iref ref="3934"/>'s observation about the missing
specification of the assignment operator taking a value type as parameter, this is now an additional currently unspecified 
member, but unaffected by any decision on LWG <iref ref="3933"/>.
</p>


<note>2023-06-01; Reflector poll</note>
<p>
Set status to Tentatively Ready after eight votes in favour during reflector poll.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4950"/>.
</p>
<ol>

<li>
<p>Add a new prototype specification between the current paragraphs 8 and 9 of <sref ref="[complex.member.ops]"/> as indicated:</p>

<blockquote class="note">
<p>
[<i>Drafting note</i>: Similar to the proposed wording for LWG <iref ref="3934"/>, the wording form used below intentionally 
deviates from the rest of the [complex.member.ops] wording forms, because it seems much simpler and clearer to follow the wording 
forms used that specify the effects of <tt>imag</tt> and <tt>real</tt> functions plus borrowing relevant parts from 
<sref ref="[complex.members]"/> p2.]
</p>
</blockquote>

<blockquote>
<pre>
constexpr complex&amp; operator/=(const T&amp; rhs);
</pre>
<blockquote>
<p>
[&hellip;]
</p>
</blockquote>
<pre>
<ins>template&lt;class X&gt; constexpr complex&amp; operator=(const complex&lt;X&gt;&amp; rhs);</ins>
</pre>
<blockquote>
<p>
<ins>-?- <i>Effects</i>: Assigns the value <tt>rhs.real()</tt> to the real part and the value 
<tt>rhs.imag()</tt> to the imaginary part of the complex value <tt>*this</tt>.</ins>
<p/>
<ins>-?- <i>Returns</i>: <tt>*this</tt>.</ins>
</p>
</blockquote>
<pre>
template&lt;class X&gt; constexpr complex&amp; operator+=(const complex&lt;X&gt;&amp; rhs);
</pre>
<blockquote>
<p>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>

</ol>

</resolution>

</issue>
