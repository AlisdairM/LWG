<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2976" status="WP">
<title>Dangling <tt>uses_allocator</tt> specialization for <tt>packaged_task</tt></title>
<section><sref ref="[futures.task]"/><sref ref="[future.syn]"/><sref ref="[futures.task.nonmembers]"/></section>
<submitter>Tim Song</submitter>
<date>13 Jun 2017</date>
<priority>3</priority>

<discussion>
<p>
When LWG <iref ref="2921"/> removed allocator support from <tt>packaged_task</tt>, it forgot
to remove the <tt>uses_allocator</tt> partial specialization.
</p>

<note>
2017-06-26 Moved to Tentatively Ready after 6 positive votes on c++std-lib.
</note>

<note>2017-06-26, Billy O'Neal reopens</note>
<p>
I think <iref ref="2921"/> was resolved in error. If <tt>promise&lt;T&gt;</tt> can have an allocator, there's no 
reason for <tt>packaged_task&lt;T&gt;</tt> to not have one. If we remove it from <tt>packaged_task</tt> we should 
remove it from <tt>promise</tt> as well.
<p/>
Note that I am not objecting to removing allocator support here, I'm objecting to the "remove it because this looks 
like <tt>std::function</tt>" case. <tt>packaged_task</tt> has none of the <tt>std::function</tt> problems because 
the function inside a given <tt>packaged_task</tt> is not reassignable.
<p/>
If LWG decides to remove allocator support here then there are more bits that need to be struck, e.g. 
<a href="http://eel.is/c++draft/futures#task.members-5.3">[futures.task.members] (5.3)</a>.
</p>

<note>2017-06-26, Tim updates P/R to remove more dangling bits.</note>
<p>
The additional point in the P/R effectively reverts the second part of the resolution of <iref ref="2752"/>.
<p/>
The alternative resolution for this issue is, of course, to just revert the resolution of 2921. In that case <iref ref="2245"/> needs to be reopened.
</p>

<note>2016-07, Toronto Saturday afternoon issues processing</note>
<p>Status to Ready</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4659">N4659</a>.</p>

<ol>
<li>
<p>Modify <sref ref="[future.syn]"/>, header <tt>&lt;future&gt;</tt> synopsis, and
<sref ref="[futures.task]"/>, class template <tt>packaged_task</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
<del>template &lt;class R, class Alloc&gt;
struct uses_allocator&lt;packaged_task&lt;R&gt;, Alloc&gt;;</del>
</pre>
</blockquote>
</li>

<li>
<p>Modify <sref ref="[futures.task.nonmembers]"/> as indicated:</p>

<blockquote>
<pre>
<del>template &lt;class R, class Alloc&gt;
  struct uses_allocator&lt;packaged_task&lt;R&gt;, Alloc&gt;
    : true_type { };</del>
</pre>
<blockquote>
<p>
<del>-2- <i>Requires:</i> <tt>Alloc</tt> shall be an Allocator (20.5.3.5).</del>
</p>
</blockquote>
</blockquote>
</li>

<li>
<p>Modify <sref ref="[futures.task.members]"/>/5 as indicated:</p>

<blockquote>
<pre>
template &lt;class F&gt;
  packaged_task(F&amp;&amp; F);
</pre>
<blockquote>
<p>
-2- <i>Requires:</i> [&hellip;]
</p>
<p>
-3- <i>Remarks:</i> [&hellip;]
</p>
<p>
-4- <i>Effects:</i> [&hellip;]
</p>
<p>
-5- <i>Throws:</i>
<blockquote>
<p> <del> &mdash; A</del><ins>a</ins>ny exceptions thrown by the copy or move constructor of <tt>f</tt><del>.</del><ins>, or</ins> </p>
<p> <del>&mdash; For the first version,</del> <tt>bad_alloc</tt> if memory for the internal data structures could not be allocated.</p>
<p> <del>&mdash; For the second version, any exceptions thrown by <tt>allocator_traits&lt;Allocator&gt;::template rebind_traits&lt;<i>unspecified</i>&gt;::allocate</tt>.</del></p>
</blockquote>
</p>
</blockquote>
</blockquote>
</li>

</ol>

</resolution>

</issue>
