<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3738" status="Voting">
<title>Missing preconditions for <tt>take_view</tt> constructor</title>
<section><sref ref="[range.take.view]"/></section>
<submitter>Hewill Kang</submitter>
<date>15 Jul 2022</date>
<priority>99</priority>

<discussion>
<p>
When <tt>V</tt> does not model <tt>sized_range</tt>, <tt>take_view::begin</tt> returns 
<tt>counted_iterator(ranges::begin(<i>base_</i>), <i>count_</i>)</tt>. Since the 
<tt>counted_iterator</tt> constructor (<sref ref="[counted.iter.const]"/>) already has 
a precondition that <tt>n &gt;= 0</tt>, we should add this to <tt>take_view</tt> as well,
which is consistent with <tt>drop_view</tt>.
</p>

<note>2022-08-23; Reflector poll</note>
<p>
Set status to Tentatively Ready after eight votes in favour during reflector poll.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4910"/>.
</p>

<ol>

<li><p>Modify <sref ref="[range.take.view]"/> as indicated:</p>

<blockquote>
<pre>
constexpr take_view(V base, range_difference_t&lt;V&gt; count);
</pre>
<blockquote>
<p>
<ins>-?- <i>Preconditions</i>: <tt>count &gt;= 0</tt> is <tt>true</tt>.</ins>
</p>
<p>
-1- <i>Effects</i>: Initializes <tt><i>base_</i></tt> with <tt>std::move(base)</tt> and 
<tt><i>count_</i></tt> with <tt>count</tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
