<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3886" status="Tentatively Ready">
<title>Monad mo' problems</title>
<section><sref ref="[optional.optional.general]"/><sref ref="[expected.object.general]"/></section>
<submitter>Casey Carter</submitter>
<date>13 Feb 2023</date>
<priority>3</priority>

<discussion>
<p>
While implementing <paper num="P2505R5"/> "Monadic Functions for <tt>std::expected</tt>" we found it odd that
the template type parameter for the assignment operator that accepts an argument by forwarding reference is
defaulted, but the template type parameter for <tt>value_or</tt> is not. For consistency, it would seem that
<tt><i>meow</i>.value_or(<i>woof</i>)</tt> should accept the same arguments <tt><i>woof</i></tt> as does
<tt><i>meow</i> = <i>woof</i></tt>, even when those arguments are braced-initializers.
<p/>
That said, it would be peculiar to default the template type parameter of <tt>value_or</tt> to <tt>T</tt>
instead of <tt>remove_cv_t&lt;T&gt;</tt>. For <tt>expected&lt;const vector&lt;int&gt;, int&gt; <i>meow</i>{unexpect, 42};</tt>,
for example, <tt><i>meow</i>.value_or({1, 2, 3})</tt> would create a temporary <tt>const vector&lt;int&gt;</tt>
for the argument and return a copy of that argument. Were the default template argument instead
<tt>remove_cv_t&lt;T&gt;</tt>, <tt><i>meow</i>.value_or({1, 2, 3})</tt> could move construct its return value
from the argument <tt>vector&lt;int&gt;</tt>. For the same reason, the constructor that accepts a forwarding
reference with a default template argument of <tt>T</tt> should default that argument to <tt>remove_cv_t&lt;T&gt;</tt>.
<p/>
For consistency, it would be best to default the template argument of the perfect-forwarding construct,
perfect-forwarding assignment operator, and <tt>value_or</tt> to <tt>remove_cv_t&lt;T&gt;</tt>. Since all of
the arguments presented apply equally to <tt>optional</tt>, we believe <tt>optional</tt> should be changed
consistently with <tt>expected</tt>. MSVCSTL has prototyped these changes successfully.
</p>

<note>2023-03-22; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
</p>
<note>2024-09-18; Reflector poll</note>
<p>
Set status to Tentatively Ready after six votes in favour during reflector poll.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4928"/>.
</p>

<ol>
<li><p>Modify <sref ref="[optional.optional.general]"/> as indicated:</p>

<blockquote>
<pre>
namespace std {
  template&lt;class T&gt;
  class optional {
  public:
    [&hellip;]
    template&lt;class U = <ins>remove_cv_t&lt;</ins>T<ins>&gt;</ins>&gt;
      constexpr explicit(<i>see below</i>) optional(U&amp;&amp;);
    [&hellip;]
    template&lt;class U = <ins>remove_cv_t&lt;</ins>T<ins>&gt;</ins>&gt; constexpr optional&amp; operator=(U&amp;&amp;);
    [&hellip;]
    template&lt;class U <ins>= remove_cv_t&lt;T&gt;</ins>&gt; constexpr T value_or(U&amp;&amp;) const &amp;;
    template&lt;class U <ins>= remove_cv_t&lt;T&gt;</ins>&gt; constexpr T value_or(U&amp;&amp;) &amp;&amp;;
    [&hellip;]
  };
  [&hellip;]
}
</pre>
</blockquote>

</li>

<li><p>Modify <sref ref="[optional.ctor]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class U = <ins>remove_cv_t&lt;</ins>T<ins>&gt;</ins>&gt; constexpr explicit(<i>see below</i>) optional(U&amp;&amp; v);
</pre>
<blockquote>
<p>
-23- <i>Constraints</i>: [&hellip;]
</p>
</blockquote>
</blockquote>

</li>

<li><p>Modify <sref ref="[optional.assign]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class U = <ins>remove_cv_t&lt;</ins>T<ins>&gt;</ins>&gt; constexpr optional&amp; operator=(U&amp;&amp; v);
</pre>
<blockquote>
<p>
-12- <i>Constraints</i>: [&hellip;]
</p>
</blockquote>
</blockquote>

</li>

<li><p>Modify <sref ref="[optional.observe]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class U <ins>= remove_cv_t&lt;T&gt;</ins>&gt; constexpr T value_or(U&amp;&amp; v) const &amp;;
</pre>
<blockquote>
<p>
-15- <i>Mandates</i>: [&hellip;]
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
template&lt;class U <ins>= remove_cv_t&lt;T&gt;</ins>&gt; constexpr T value_or(U&amp;&amp; v) &amp;&amp;;
</pre>
<blockquote>
<p>
-17- <i>Mandates</i>: [&hellip;]
</p>
</blockquote>
</blockquote>

</li>

<li><p>Modify <sref ref="[expected.object.general]"/> as indicated:</p>

<blockquote>
<pre>
namespace std {
  template&lt;class T, class E&gt;
  class expected {
  public:
    [&hellip;]
    template&lt;class U = <ins>remove_cv_t&lt;</ins>T<ins>&gt;</ins>&gt;
      constexpr explicit(<i>see below</i>) expected(U&amp;&amp; v);
    [&hellip;]
    template&lt;class U = <ins>remove_cv_t&lt;</ins>T<ins>&gt;</ins>&gt; constexpr expected&amp; operator=(U&amp;&amp;);
    [&hellip;]
    template&lt;class U <ins>= remove_cv_t&lt;T&gt;</ins>&gt; constexpr T value_or(U&amp;&amp;) const &amp;;
    template&lt;class U <ins>= remove_cv_t&lt;T&gt;</ins>&gt; constexpr T value_or(U&amp;&amp;) &amp;&amp;;
    [&hellip;]
  };
  [&hellip;]
}
</pre>
</blockquote>

</li>

<li><p>Modify <sref ref="[expected.object.cons]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class U = <ins>remove_cv_t&lt;</ins>T<ins>&gt;</ins>&gt;
  constexpr explicit(!is_convertible_v&lt;U, T&gt;) expected(U&amp;&amp; v);
</pre>
<blockquote>
<p>
-23- <i>Constraints</i>: [&hellip;]
</p>
</blockquote>
</blockquote>

</li>

<li><p>Modify <sref ref="[expected.object.assign]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class U = <ins>remove_cv_t&lt;</ins>T<ins>&gt;</ins>&gt;
  constexpr expected&amp; operator=(U&amp;&amp; v);
</pre>
<blockquote>
<p>
-9- <i>Constraints</i>: [&hellip;]
</p>
</blockquote>
</blockquote>

</li>

<li><p>Modify <sref ref="[expected.object.obs]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class U <ins>= remove_cv_t&lt;T&gt;</ins>&gt; constexpr T value_or(U&amp;&amp; v) const &amp;;
</pre>
<blockquote>
<p>
-16- <i>Mandates</i>: [&hellip;]
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
template&lt;class U <ins>= remove_cv_t&lt;T&gt;</ins>&gt; constexpr T value_or(U&amp;&amp; v) &amp;&amp;;
</pre>
<blockquote>
<p>
-18- <i>Mandates</i>: [&hellip;]
</p>
</blockquote>
</blockquote>

</li>

</ol>
</resolution>

</issue>
