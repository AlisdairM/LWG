<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4074" status="WP">
<title><tt><i>compatible-joinable-ranges</i></tt> is underconstrained</title>
<section><sref ref="[range.join.with.view]"/></section>
<submitter>Hewill Kang</submitter>
<date>21 Apr 2024</date>
<priority>99</priority>

<discussion>
<p>
<tt>join_with_view</tt> requires the value type, reference and rvalue reference of the inner range 
and pattern range to share common (reference) types through <tt><i>compatible-joinable-ranges</i></tt>.
<p/>
However, unlike what <tt>concat_view</tt> and <tt>generator</tt> do, this concept only requires that 
these three types be valid and does not further check the relationship between them to be compatible 
with the <tt>indirectly_readable</tt> requirement for <tt>input_iterator</tt>.
This results in a validly-constructed <tt>join_with_view</tt> that may not model <tt>input_range</tt>, 
which seems unintended.
<p/>
The proposed resolution aliases <tt><i>compatible-joinable-ranges</i></tt> to <tt><i>concatable</i></tt> 
i.e. specialization for two ranges to fully constrain, and I believe this could also be a better fit for 
LWG <iref ref="3971"/>.
</p>

<superseded>
<p>
This wording is relative to <paper num="N4981"/>.
</p>

<ol>
<li><p>Modify <sref ref="[range.join.with.view]"/> as indicated:</p>
  
<blockquote>
<pre>
namespace std::ranges {
  template&lt;class R, class P&gt;
    concept <i>compatible-joinable-ranges</i> = <ins><i>concatable</i>&lt;R, P&gt;;</ins>  // <i>exposition only</i>
        <del>common_with&lt;range_value_t&lt;R&gt;, range_value_t&lt;P&gt;&gt; &amp;&amp;
        common_reference_with&lt;range_reference_t&lt;R&gt;, range_reference_t&lt;P&gt;&gt; &amp;&amp;
        common_reference_with&lt;range_rvalue_reference_t&lt;R&gt;, range_rvalue_reference_t&lt;P&gt;&gt;;</del>
  
  [&hellip;]
}
</pre>
</blockquote>
</li>

</ol>
</superseded>

<note>2024-04-24; Hewill Kang provides improved wording</note>

<note>2024-05-08; Reflector poll</note>
<p>
Set status to Tentatively Ready after five votes in favour during reflector poll.
</p>

<note>St. Louis 2024-06-29; Status changed: Voting &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4981"/>.
</p>

<ol>
<li><p>Modify <sref ref="[ranges.syn]"/> as indicated:</p>
  
<blockquote>
<pre>
#include &lt;compare&gt;              // <i>see <sref ref="[compare.syn]"/></i>
#include &lt;initializer_list&gt;     // <i>see <sref ref="[initializer.list.syn]"/></i>
#include &lt;iterator&gt;             // <i>see <sref ref="[iterator.synopsis]"/></i>

namespace std::ranges {
  [&hellip;]
  // <i><sref ref="[range.join.with]"/></i>, <i>join with view</i>
  <del>template&lt;class R, class P&gt;
    concept <i>compatible-joinable-ranges</i> = <i>see below</i>; // <i>exposition only</i></del>

  template&lt;input_range V, forward_range Pattern&gt;
    requires <del>view&lt;V&gt; &amp;&amp; input_range&lt;range_reference_t&lt;V&gt;&gt;
          &amp;&amp; view&lt;Pattern&gt;
          &amp;&amp; <i>compatible-joinable-ranges</i>&lt;range_reference_t&lt;V&gt;, Pattern&gt;</del>
          <ins><i>see below</i></ins>
  class join_with_view;                                                             // <i>freestanding</i>
  [&hellip;]
}
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.join.with.view]"/> as indicated:</p>
  
<blockquote>
<pre>
namespace std::ranges {
  <del>template&lt;class R, class P&gt;
    concept <i>compatible-joinable-ranges</i> =            // <i>exposition only</i>
        common_with&lt;range_value_t&lt;R&gt;, range_value_t&lt;P&gt;&gt; &amp;&amp;
        common_reference_with&lt;range_reference_t&lt;R&gt;, range_reference_t&lt;P&gt;&gt; &amp;&amp;
        common_reference_with&lt;range_rvalue_reference_t&lt;R&gt;, range_rvalue_reference_t&lt;P&gt;&gt;;</del>
  
  [&hellip;]

  template&lt;input_range V, forward_range Pattern&gt;
    requires view&lt;V&gt; &amp;&amp; input_range&lt;range_reference_t&lt;V&gt;&gt;
          &amp;&amp; view&lt;Pattern&gt;
          &amp;&amp; <i><del>compatible-joinable-ranges</del><ins>concatable</ins></i>&lt;range_reference_t&lt;V&gt;, Pattern&gt;
  class join_with_view : public view_interface&lt;join_with_view&lt;V, Pattern&gt;&gt; {
    [&hellip;]
    constexpr auto begin() const
      requires forward_range&lt;const V&gt; &amp;&amp;
               forward_range&lt;const Pattern&gt; &amp;&amp;
               is_reference_v&lt;range_reference_t&lt;const V&gt;&gt; &amp;&amp;
               input_range&lt;range_reference_t&lt;const V&gt;&gt; <ins>&amp;&amp;
               <i>concatable</i>&lt;range_reference_t&lt;const V&gt;, const Pattern&gt;</ins> {
      return <i>iterator</i>&lt;true&gt;{*this, ranges::begin(<i>base_</i>)};
    }
    [&hellip;]
    constexpr auto end() const
      requires forward_range&lt;const V&gt; &amp;&amp; forward_range&lt;const Pattern&gt; &amp;&amp;
               is_reference_v&lt;range_reference_t&lt;const V&gt;&gt; &amp;&amp;
               input_range&lt;range_reference_t&lt;const V&gt;&gt; <ins>&amp;&amp;
               <i>concatable</i>&lt;range_reference_t&lt;const V&gt;, const Pattern&gt;</ins> {
      [&hellip;]
    }
  };
}
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.join.with.iterator]"/> as indicated:</p>
  
<blockquote>
<pre>
namespace std::ranges {
  template&lt;input_range V, forward_range Pattern&gt;
    requires view&lt;V&gt; &amp;&amp; input_range&lt;range_reference_t&lt;V&gt;&gt;
          &amp;&amp; view&lt;Pattern&gt; &amp;&amp; <i><del>compatible-joinable-ranges</del><ins>concatable</ins></i>&lt;range_reference_t&lt;V&gt;, Pattern&gt;
  template&lt;bool Const&gt;
  class join_with_view&lt;V, Pattern&gt;::<i>iterator</i> {
    [&hellip;]
  };
}
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.join.with.sentinel]"/> as indicated:</p>
  
<blockquote>
<pre>
namespace std::ranges {
  template&lt;input_range V, forward_range Pattern&gt;
    requires view&lt;V&gt; &amp;&amp; input_range&lt;range_reference_t&lt;V&gt;&gt;
          &amp;&amp; view&lt;Pattern&gt; &amp;&amp; <i><del>compatible-joinable-ranges</del><ins>concatable</ins></i>&lt;range_reference_t&lt;V&gt;, Pattern&gt;
  template&lt;bool Const&gt;
  class join_with_view&lt;V, Pattern&gt;::<i>sentinel</i> {
    [&hellip;]
  };
}
</pre>
</blockquote>
</li>

</ol>
</resolution>

</issue>
