<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3889" status="New">
<title><tt>std::(ranges::)destroy_at</tt> should destroy array elements in the decreasing index order</title>
<section><sref ref="[specialized.destroy]"/></section>
<submitter>Jiang An</submitter>
<date>17 Feb 2023</date>
<priority>99</priority>

<discussion>
<p>
Currently, <tt>std::(ranges::)destroy_at</tt> is specified to destroy array elements in the increasing index order 
(<sref ref="[specialized.destroy]"/>/1.1), which is inconsistent with the decreasing order specified in the core language 
(<sref ref="[class.dtor]"/>/13) and the order for arrays created by <tt>std::make_shared</tt> and 
<tt>std::allocate_shared</tt> (mandated by LWG <iref ref="3005"/>).
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4928"/>.
</p>

<ol>

<li><p>Modify <sref ref="[specialized.destroy]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class T&gt;
  constexpr void destroy_at(T* location);

namespace ranges {
  template&lt;destructible T&gt;
    constexpr void destroy_at(T* location) noexcept;
}
</pre>
<blockquote>
<p>
-1- <i>Effects:</i>
</p>
<ol style="list-style-type: none">
<li><p>(1.1) &mdash; If <tt>T</tt> is an array type, equivalent to <tt>destroy(<ins>rbegin</ins><del>begin</del>(*location), <ins>rend</ins><del>end</del>(*location))</tt>.</p></li>
<li><p>(1.2) &mdash; Otherwise, equivalent to <tt>location-&gt;~T()</tt>.</p></li>
</ol>
</blockquote>
</blockquote>

</li>

</ol>
</resolution>

</issue>
