<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3336" status="Resolved">
<title>How does <tt>std::vformat</tt> handle exception thrown by formatters?</title>
<section><sref ref="[format.functions]"/></section>
<submitter>Tam S. B.</submitter>
<date>11 Nov 2019</date>
<priority>2</priority>

<discussion>
<p>
The specification for <tt>std::vformat</tt> in <sref ref="[format.functions]"/>/7 says
</p>
<blockquote>
<p>
<i>Throws:</i> <tt>format_error</tt> if <tt>fmt</tt> is not a format string.
</p>
</blockquote>
<p>
It seems unclear whether <tt>vformat</tt> throws when an exception is thrown by the <tt>formatter</tt>, 
e.g. when the format string is valid, but the corresponding argument cannot be formatted with the given 
format string.
<p/>
For example, the <tt>"c"</tt> format specifier is specified to throw <tt>format_error</tt> if the 
corresponding argument is not in the range of representable values for <tt>charT</tt> 
(Table 60 [tab:format.type.int]). It seems unclear whether <tt>vformat</tt> propagates this exception.
<p/>
It also appears unclear whether <tt>vformat</tt> may throw other types of exception (e.g. <tt>bad_alloc</tt>) 
when the formatter or the constructor of <tt>std::string</tt> result throws.
</p>

<note>2019-11-20 Issue Prioritization</note>
<p>Priority to 2 after reflector discussion.</p>

<note>2019-11-20; Victor Zverovich provides initial wording</note>

<strong>Previous resolution [SUPERSEDED]:</strong>
<blockquote class="note">
<p>This wording is relative to <a href="https://wg21.link/n4835">N4835</a>.</p>

<blockquote class="note">
<p>
[<i>Drafting Note:</i> LWG <iref ref="3340"/> has considerable wording overlap with this issue.
If LWG <iref ref="3336"/> is applied at the same meeting or later than LWG <iref ref="3340"/>, 
please refer to <b>Option A</b> in LWG <iref ref="3340"/> as a guideline how to apply the merge.]
</p>
</blockquote>

<ol>
<li><p>Before <sref ref="[format.functions]"/> insert a new sub-clause as indicated:</p>

<blockquote>
<p>
<ins><b>20.20.? Error reporting [format.err.report]</b></ins>
<p/>
<ins>-?- Formatting functions throw exceptions to report formatting and other errors. They throw 
<tt>format_error</tt> if an argument <tt>fmt</tt> is passed that is not a format string and 
propagate exceptions thrown by <tt>formatter</tt> specializations and iterator operations. Failure 
to allocate storage is reported by throwing an exception as described in 
<sref ref="[res.on.exception.handling]"/>.</ins>
</p>
</blockquote>
</li>

<li><p>Modify <sref ref="[format.functions]"/> as indicated:</p>

<blockquote>
<pre>
string vformat(string_view fmt, format_args args);
wstring vformat(wstring_view fmt, wformat_args args);
string vformat(const locale&amp; loc, string_view fmt, format_args args);
wstring vformat(const locale&amp; loc, wstring_view fmt, wformat_args args);
</pre>
<blockquote>
<p>
-6- [&hellip;]
<p/>
-7- <i>Throws:</i> <del><tt>format_error</tt> if <tt>fmt</tt> is not a format string</del><ins>As specified in <sref ref="[format.err.report]"/></ins>.
</p>
</blockquote>
[&hellip;]
<pre>
template&lt;class Out&gt;
  Out vformat_to(Out out, string_view fmt, format_args_t&lt;Out, char&gt; args);
template&lt;class Out&gt;
  Out vformat_to(Out out, wstring_view fmt, format_args_t&lt;Out, wchar_t&gt; args);
template&lt;class Out&gt;
  Out vformat_to(Out out, const locale&amp; loc, string_view fmt,
                 format_args_t&lt;Out, char&gt; args);
template&lt;class Out&gt;
  Out vformat_to(Out out, const locale&amp; loc, wstring_view fmt,
                 format_args_t&lt;Out, wchar_t&gt; args);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-15- <i>Throws:</i> <del><tt>format_error</tt> if <tt>fmt</tt> is not a format string</del><ins>As specified in <sref ref="[format.err.report]"/></ins>.
</p>
</blockquote>
[&hellip;]
<pre>
template&lt;class Out, class... Args&gt;
  format_to_n_result&lt;Out&gt; format_to_n(Out out, iter_difference_t&lt;Out&gt; n,
                                      string_view fmt, const Args&amp;... args);
template&lt;class Out, class... Args&gt;
  format_to_n_result&lt;Out&gt; format_to_n(Out out, iter_difference_t&lt;Out&gt; n,
                                      wstring_view fmt, const Args&amp;... args);
template&lt;class Out, class... Args&gt;
  format_to_n_result&lt;Out&gt; format_to_n(Out out, iter_difference_t&lt;Out&gt; n,
                                      const locale&amp; loc, string_view fmt,
                                      const Args&amp;... args);
template&lt;class Out, class... Args&gt;
  format_to_n_result&lt;Out&gt; format_to_n(Out out, iter_difference_t&lt;Out&gt; n,
                                      const locale&amp; loc, wstring_view fmt,
                                      const Args&amp;... args);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-21- <i>Throws:</i> <del><tt>format_error</tt> if <tt>fmt</tt> is not a format string</del><ins>As specified in <sref ref="[format.err.report]"/></ins>.
</p>
</blockquote>
[&hellip;]
<pre>
template&lt;class... Args&gt;
  size_t formatted_size(string_view fmt, const Args&amp;... args);
template&lt;class... Args&gt;
  size_t formatted_size(wstring_view fmt, const Args&amp;... args);
template&lt;class... Args&gt;
  size_t formatted_size(const locale&amp; loc, string_view fmt, const Args&amp;... args);
template&lt;class... Args&gt;
  size_t formatted_size(const locale&amp; loc, wstring_view fmt, const Args&amp;... args);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-25- <i>Throws:</i> <del><tt>format_error</tt> if <tt>fmt</tt> is not a format string</del><ins>As specified in <sref ref="[format.err.report]"/></ins>.
</p>
</blockquote>
</blockquote>
</li>

</ol>

</blockquote>

<note>2020-02-12, Prague; LWG discussion</note>
<p>
Resolved by LWG <iref ref="3340"/>.
</p>
</discussion>

<resolution>
<p>
Resolved by LWG <iref ref="3340"/>.
</p>
</resolution>
</issue>
