<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3036" status="Tentatively Ready">
<title><tt>polymorphic_allocator::destroy</tt> is extraneous</title>
<section><sref ref="[mem.poly.allocator.class]"/></section>
<submitter>Casey Carter</submitter>
<date>15 Nov 2017</date>
<priority>3</priority>

<discussion>
<p>
<tt>polymorphic_allocator</tt>'s member function <tt>destroy</tt> is exactly
equivalent to the default implementation of <tt>destroy</tt> in
<tt>allocator_traits</tt> (<sref ref="[allocator.traits.members]"/> para 6). It
should be struck from <tt>polymorphic_allocator</tt> as it provides no value.
</p>

<note>28-Nov-2017 Mailing list discussion - set priority to P3</note>
<p>PJ says that Dinkumware is shipping an implementation of <tt>polymorphic_allocator</tt> with <tt>destroy</tt>, so removing it would be a breaking change for him.</p>

<note>2019-02; Kona Wednesday night issue processing</note>
<p>Status to Open; revisit once <a href="https://wg21.link/P0339">P0339</a> lands. Poll taken was 5-3-2 in favor of removal.</p>

<note>2020-10-05; Jonathan provides new wording</note>
<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>
Wording relative to <a href="https://wg21.link/n4700">N4700</a>.
</p>

<ol>
<li>
<p>
Strike the declaration of <tt>destroy</tt> from the synopsis of class
<tt>polymorphic_allocator</tt> in <sref ref="[mem.poly.allocator.class]"/>:
</p>
<blockquote>
<pre>
template &lt;class T1, class T2, class U, class V&gt;
  void construct(pair&lt;T1,T2&gt;* p, pair&lt;U, V&gt;&amp;&amp; pr);

<del>template &lt;class T&gt;</del>
  <del>void destroy(T* p);</del>

polymorphic_allocator select_on_container_copy_construction() const;
</pre>
</blockquote>
</li>

<li>
<p>
Strike the specification of <tt>destroy</tt> in <sref ref="[mem.poly.allocator.mem]"/>:
</p>
<blockquote>
[&hellip;]

<pre>
<del>template &lt;class T&gt;</del>
  <del>void destroy(T* p);</del>
</pre>

<p><del>14 Effects: As if by <tt>p->~T()</tt>.</del></p>

[&hellip;]
</blockquote>
</li>
</ol>
</blockquote>

<note>2020-10-11; Reflector poll</note>
<p>
Moved to Tentatively Ready after seven votes in favour.
</p>
</discussion>

<resolution>
<p>
Wording relative to <a href="https://wg21.link/n4861">N4861</a>.
</p>

<ol>
<li>
<p>
Strike the declaration of <tt>destroy</tt> from the synopsis of class
<tt>polymorphic_allocator</tt> in <sref ref="[mem.poly.allocator.class]"/>:
</p>
<blockquote>
<pre>
template &lt;class T1, class T2, class U, class V&gt;
  void construct(pair&lt;T1,T2&gt;* p, pair&lt;U, V&gt;&amp;&amp; pr);

<del>template &lt;class T&gt;</del>
  <del>void destroy(T* p);</del>

polymorphic_allocator select_on_container_copy_construction() const;
</pre>
</blockquote>
</li>

<li>
<p>
Adjust the specification of <tt>delete_object</tt> in <sref ref="[mem.poly.allocator.mem]"/>:
</p>
<blockquote>
<pre>
template &lt;class T&gt;
  void delete_object(T* p);
</pre>

<p>-13- Effects: Equivalent to:</p>
<blockquote><pre>
  <ins>allocator_traits&lt;polymorphic_allocator&gt;::</ins>destroy(<ins>*this, </ins>p);
  deallocate_object(p);
</pre></blockquote>
</blockquote>
</li>

<li>
<p>
Strike the specification of <tt>destroy</tt> in <sref ref="[mem.poly.allocator.mem]"/>:
</p>
<blockquote>
[&hellip;]

<pre>
<del>template &lt;class T&gt;</del>
  <del>void destroy(T* p);</del>
</pre>

<p><del>-17- Effects: As if by <tt>p->~T()</tt>.</del></p>

[&hellip;]
</blockquote>
</li>

<li>
<p>Add a new subclause to Annex D:</p>
<blockquote>
<p>
<ins>
<strong>D.?? Deprecated <tt>polymorphic_allocator</tt> member function</strong>
</ins>
</p>
<p>
<ins>
-1- The following member is declared in addition to those members specified in
<sref ref="[mem.poly.allocator.mem]"/>:
</ins>
</p>
<blockquote><pre><ins>
namespace std::pmr {
  template&lt;class Tp = byte&gt;
  class polymorphic_allocator {
  public:
    template &lt;class T&gt;
      void destroy(T* p);
  };
}
</ins></pre></blockquote>
<pre><ins>
template &lt;class T&gt;
  void destroy(T* p);
</ins></pre>
<p><ins>-1- Effects: As if by <tt>p->~T()</tt>.</ins></p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
