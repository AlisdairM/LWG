<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2850" status="C++17">
<title><tt>std::function</tt> move constructor does unnecessary work</title>
<section><sref ref="[func.wrap.func.con]"/></section>
<submitter>Geoffrey Romer</submitter>
<date>15 Dec 2016</date>
<priority>0</priority>

<discussion>
<p>
Consider [func.wrap.func.con]/p5:
</p>
<blockquote><pre>
function(function&amp;&amp; f);
</pre>
<blockquote>
<p>
<i>Effects:</i> If <tt>!f</tt>, <tt>*this</tt> has no target; otherwise, move constructs the target of <tt>f</tt> into the target 
of <tt>*this</tt>, leaving <tt>f</tt> in a valid state with an unspecified value.
</p>
</blockquote>
</blockquote>
<p>
By my reading, this wording requires the move constructor of <tt>std::function</tt> to construct an entirely new target object. 
This is silly: in cases where the target is held in separately allocated memory (i.e. where the target doesn't fit in 
<tt>std::function</tt>'s internal buffer, if any), <tt>std::function</tt>'s move constructor can be implemented by simply 
transferring ownership of the existing target object (which is a simple pointer assignment), so this requirement forces an 
unnecessary constructor invocation and probably an unnecessary allocation (the latter can be avoided with something like 
double-buffering, but ew). Fixing this would technically be a visible change, but I have a hard time imagining reasonable 
code that would be broken by it, especially since both libstdc++ and libc++ already do the sensible thing, constructing a 
new target only if the target is held in an internal buffer, and otherwise assigning pointers.
</p>

<note>2017-01-27 Telecon</note>
<p>Priority 0</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4618">N4618</a>.</p>

<ol>
<li><p>Edit <sref ref="[func.wrap.func.con]"/>/5 as indicated:</p>

<blockquote class="note">
<p>
<i>Drafting note:</i> The "equivalent to ... before the construction" wording is based on the wording for <tt>MoveConstructible</tt>.
</p>
</blockquote>

<blockquote>
<pre>
function(function&amp;&amp; f);
</pre>
<blockquote>
<p>
-5- <i><del>Effects</del><ins>Postconditions</ins>:</i> If <tt>!f</tt>, <tt>*this</tt> has no target; otherwise, <del>move 
constructs the target of <tt>f</tt> into the target of <tt>*this</tt>, leaving <tt>f</tt></del><ins>the target of <tt>*this</tt> 
is equivalent to the target of <tt>f</tt> before the construction, and <tt>f</tt> is</ins> in a valid state with an 
unspecified value.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
