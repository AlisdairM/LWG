<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3974" status="New">
<title><tt>mdspan::operator[]</tt> should not copy <tt>OtherIndexTypes</tt></title>
<section><sref ref="[mdspan.mdspan.members]"/></section>
<submitter>Casey Carter</submitter>
<date>12 Aug 2023</date>
<priority>99</priority>

<discussion>
<p>
The wording for <tt>mdspan</tt>'s <tt>operator[]</tt> overloads that accept <tt>span</tt> and <tt>array</tt> is in 
<sref ref="[mdspan.mdspan.members]"/> paragraphs 5 and 6:
</p>
<blockquote><pre>
template&lt;class OtherIndexType&gt;
  constexpr reference operator[](span&lt;OtherIndexType, rank()&gt; indices) const;
template&lt;class OtherIndexType&gt;
  constexpr reference operator[](const array&lt;OtherIndexType, rank()&gt;&amp; indices) const;
</pre>
<p>
-5- <i>Constraints</i>:
</p>
<ol style="list-style-type: none">
<li><p>(5.1) &mdash; <tt>is_convertible_v&lt;const OtherIndexType&amp;, index_type&gt;</tt> is <tt>true</tt>, and</p></li>
<li><p>(5.2) &mdash; <tt>is_nothrow_constructible_v&lt;index_type, const OtherIndexType&amp;&gt;</tt> is <tt>true</tt>.</p></li>
</ol>
<p>
-6- <i>Effects</i>: Let <tt>P</tt> be a parameter pack such that
</p>
<blockquote><pre>
is_same_v&lt;make_index_sequence&lt;rank()&gt;, index_sequence&lt;P...&gt;&gt;
</pre></blockquote>
<p>
is <tt>true</tt>. Equivalent to:
</p>
<blockquote><pre>
return operator[](as_const(indices[P])...);
</pre></blockquote>
</blockquote>
<p>
The equivalent code calls the other <tt>operator[]</tt> overload:
</p>
<blockquote><pre>
template&lt;class... OtherIndexTypes&gt;
  constexpr reference operator[](OtherIndexTypes... indices) const;
</pre></blockquote>
<p>
with a pack of <tt>const OtherIndexType</tt> lvalues, but we notably haven't required <tt>OtherIndexTypes</tt> to be copyable &mdash; 
we only require that we can convert them to <tt>index_type</tt>. While one could argue that the use in "<i>Effects</i>: equivalent to" 
implies a requirement of copyability, it's odd that this implicit requirement would be the only requirement for copyable 
<tt>OtherIndexTypes</tt> in the spec. We could fix this by changing the <tt>operator[]</tt> overload accepting <tt>OtherIndexTypes</tt> 
to take them by <tt>const&amp;</tt>, but that would be inconsistent with virtually every other place in the spec where types 
convertible to <tt>index_type</tt> are taken by-value. I think the best localized fix is to perform the conversion to <tt>index_type</tt> 
in the "<i>Effects</i>: equivalent to" code so the actual arguments have type <tt>index_type</tt> which we know is copyable.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4958"/>.
</p>

<ol>

<li><p>Modify the <sref ref="[mdspan.mdspan.members]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class OtherIndexType&gt;
  constexpr reference operator[](span&lt;OtherIndexType, rank()&gt; indices) const;
template&lt;class OtherIndexType&gt;
  constexpr reference operator[](const array&lt;OtherIndexType, rank()&gt;&amp; indices) const;
</pre>
<blockquote>
<p>
-5- <i>Constraints</i>:
</p>
<ol style="list-style-type: none">
<li><p>(5.1) &mdash; <tt>is_convertible_v&lt;const OtherIndexType&amp;, index_type&gt;</tt> is <tt>true</tt>, and</p></li>
<li><p>(5.2) &mdash; <tt>is_nothrow_constructible_v&lt;index_type, const OtherIndexType&amp;&gt;</tt> is <tt>true</tt>.</p></li>
</ol>
<p>
-6- <i>Effects</i>: Let <tt>P</tt> be a parameter pack such that
</p>
<blockquote><pre>
is_same_v&lt;make_index_sequence&lt;rank()&gt;, index_sequence&lt;P...&gt;&gt;
</pre></blockquote>
<p>
is <tt>true</tt>. Equivalent to:
</p>
<blockquote><pre>
return operator[](<ins>extents_type::<i>index-cast</i>(</ins>as_const(indices[P])<ins>)</ins>...);
</pre></blockquote>
</blockquote>
</blockquote>

</li>
</ol>
</resolution>

</issue>
