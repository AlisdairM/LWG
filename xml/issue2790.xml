<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2790" status="Review">
<title>Missing specification of <tt>istreambuf_iterator::operator-&gt;</tt></title>
<section><sref ref="[istreambuf.iterator]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>9 Nov 2016</date>
<priority>3</priority>

<discussion>
<p>
<b>Addresses GB 59</b>
<p/>
There is no specification for <tt>istreambuf_iterator::operator-&gt;</tt>. This 
operator appears to have been added for C++11 by LWG issue <iref ref="659"/>, 
which gave the signature, but also lacked specification.
</p>

<note>2016-11-08, Jonathan comments and suggests wording</note>
<p>
There is no good option here, and implementations either return
<tt>nullptr</tt>, or return the address of a temporary, or don't even provide
the member at all. We took polls to decide whether to remove
<tt>istreambuf_iterator::operator-&gt;</tt>, or specify it to return <tt>nullptr</tt>, and
the preferred option was to remove it. It was noted that in the Ranges
TS input iterators no longer require <tt>operator-&gt;</tt> anyway, and the
library never tries to use it.
</p>

<note>Issues Telecom 16-Dec-2016</note>
<p>Move to Review</p>
</discussion>

<resolution>
<p>This wording is relative to N4606.</p>

<blockquote class="note">
<p>
This reverts LWG <iref ref="659"/>.
</p>
</blockquote>

<ol>
<li><p>Remove the note in paragraph 1 of <sref ref="[istreambuf.iterator]"/>:</p>
<blockquote>
<p>
The class template <tt>istreambuf_iterator</tt> defines an input iterator (24.2.3) that reads successive characters
from the streambuf for which it was constructed. <tt>operator*</tt> provides access to the current input character, if
any. <del>[<i>Note:</i> <tt>operator-&gt;</tt> may return a proxy. &mdash; <i>end note</i>]</del> Each time <tt>operator++</tt> 
is evaluated, the iterator advances to the next input character. [&hellip;]
</p>
</blockquote>
</li>

<li><p>Remove the member from the class synopsis in <sref ref="[istreambuf.iterator]"/>:</p>

<blockquote>
<pre>
charT operator*() const;
<del>pointer operator-&gt;() const;</del>
istreambuf_iterator&amp; operator++();
proxy operator++(int);
</pre>
</blockquote>
</li>
</ol>
</resolution>

</issue>
