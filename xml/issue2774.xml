<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2774" status="New">
<title><tt>std::function</tt> construction vs assignment</title>
<section><sref ref="[func.wrap.func.con]"/></section>
<submitter>Barry Revzin</submitter>
<date>14 Sep 2016</date>
<priority>99</priority>

<discussion>
<p>
I think there's a minor defect in the <tt>std::function</tt> interface. The constructor template is:
</p>
<blockquote><pre>
template &lt;class F&gt; function(F f);
</pre></blockquote>
<p>
while the assignment operator template is 
</p>
<blockquote><pre>
template &lt;class F&gt; function&amp; operator=(F&amp;&amp; f);
</pre></blockquote>
<p>
The latter came about as a result of LWG <iref ref="1288"/>, but that one was dealing with a specific issue that 
wouldn't have affected the constructor. I think the constructor should also take <tt>f</tt> by forwarding reference, 
this saves a move in the lvalue/xvalue cases and is also just generally more consistent. Should just make sure 
that it's stored as <tt>std::decay_t&lt;F&gt;</tt> instead of <tt>F</tt>. 
<p/>
Is there any reason to favor a by-value constructor over a forwarding-reference constructor?
</p>
</discussion>

<resolution>
</resolution>

</issue>

