<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3860" status="WP">
<title><tt>range_common_reference_t</tt> is missing</title>
<section><sref ref="[ranges.syn]"/></section>
<submitter>Hewill Kang</submitter>
<date>24 Jan 2023</date>
<priority>99</priority>

<discussion>
<p>
For the alias template <tt>iter_<i>meow</i>_t</tt> in <tt>&lt;iterator&gt;</tt>, there are almost all corresponding 
<tt>range_<i>meow</i>_t</tt> in <tt>&lt;ranges&gt;</tt>, except for <tt>iter_common_reference_t</tt>, which is used to 
calculate the common reference type shared by <tt>reference</tt> and <tt>value_type</tt> of the iterator.
<p/>
Given that it has a highly similar formula form to <tt>iter_const_reference_t</tt>, and the latter has a corresponding sibling, 
I think we should add a <tt>range_common_reference_t</tt> for <tt>&lt;ranges&gt;</tt>.
<p/>
This increases the consistency of the two libraries and simplifies the text of getting common reference from a range. 
Since C++23 brings proxy iterators and <tt>tuple</tt> enhancements, I believe such introduction can bring some value.
</p>

<note>2023-02-06; Reflector poll</note>
<p>
Set status to Tentatively Ready after seven votes in favour during reflector poll.
</p>

<note>2023-02-13 Status changed: Voting &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4928"/>.
</p>

<ol>
<li><p>Modify <sref ref="[ranges.syn]"/>, header <tt>&lt;ranges&gt;</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
#include &lt;compare&gt;              // <i>see <sref ref="[compare.syn]"/></i>
#include &lt;initializer_list&gt;     // <i>see <sref ref="[initializer.list.syn]"/></i>
#include &lt;iterator&gt;             // <i>see <sref ref="[iterator.synopsis]"/></i>

namespace std::ranges {
  [&hellip;]
  template&lt;range R&gt;
    using range_reference_t = iter_reference_t&lt;iterator_t&lt;R&gt;&gt;;                      // <i>freestanding</i>
  template&lt;range R&gt;
    using range_const_reference_t = iter_const_reference_t&lt;iterator_t&lt;R&gt;&gt;;          // <i>freestanding</i>
  template&lt;range R&gt;
    using range_rvalue_reference_t = iter_rvalue_reference_t&lt;iterator_t&lt;R&gt;&gt;;        // <i>freestanding</i>
  <ins>template&lt;range R&gt;
    using range_common_reference_t = iter_common_reference_t&lt;iterator_t&lt;R&gt;&gt;;        // <i>freestanding</i></ins>
  [&hellip;]
}
</pre>
</blockquote>
</li>

</ol>
</resolution>

</issue>
