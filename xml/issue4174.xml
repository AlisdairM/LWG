<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4174" status="SG1">
<title>How does [atomics.order] p3 apply when then modification is an initialization?</title>
<section><sref ref="[atomics.order]"/></section>
<submitter>jim x</submitter>
<date>13 Nov 2024</date>
<priority>3</priority>

<discussion>
<p>
Consider this example
</p>
<blockquote><pre>
std::atomic&lt;int&gt; v = 0;
// thread 1:
v.load(std::memory_order::seq_cst);
//thread 2:
v.store(1,std::memory_order::seq_cst);
</pre></blockquote>
<p>
If the load operation reads the value `0`, how are load and store operations ordered in the single total order? 
According to <sref ref="[atomics.order]"/> p3 (emphasize mine)
</p>
<blockquote style="border-left: 3px solid #ccc;padding-left: 15px;">
<p>
An atomic operation <i>A</i> on some atomic object <i>M</i> is <i>coherence-ordered before</i> 
another atomic operation <i>B</i> on <i>M</i> if
</p>
<ol style="list-style-type: none">
<li><p>[&hellip;]</p></li>
<li><p>(3.3) &mdash; <i>A</i> and <i>B</i> are not the same atomic read-modify-write operation, 
and there exists an <b>atomic modification <i>X</i></b> of <i>M</i> such that <i>A</i> reads the value stored by 
<i>X</i> and <i>X</i> precedes <i>B</i> in the modification order of <i>M</i>, or</p></li>
</ol>
</blockquote>
<p>
According to <sref ref="[atomics.types.operations]"/> p3 (emphasize mine)
</p>
<blockquote style="border-left: 3px solid #ccc;padding-left: 15px;">
<i>Effects</i>: Initializes the object with the value <tt>desired</tt>. <b>Initialization is not an atomic operation</b> 
(<sref ref="[intro.multithread]"/>).
</blockquote>
<p>
So, how does <sref ref="[atomics.order]"/> p3 apply to this example such that the load operation precedes 
the store operation in the single total order <i>S</i>?
</p>

<note>2025-02-07; Reflector poll</note>
<p>
Set priority to 3 after reflector poll. Send to SG1.
</p>
<p>
LWG found the issue unclear and felt it was missing context that would
help understand it properly.
</p>
<p>
In
<a href="https://github.com/cplusplus/CWG/issues/641">cplusplus/CWG/issues/641</a>
the following example was given:
<blockquote>
<pre>
std::atomic&lt;bool&gt; a = false;
std::atomic&lt;bool&gt; b = false;
int v = 0;
// thread 1:
a.store(true, seq_cst);
if(b.load(seq_cst)== false){
   v = 1;  // #1
}
//thread 2:
b.store(true, seq_cst);
if(a.load(seq_cst)== false){
   v = 2; // #2
}
</pre>
To prove whether #1 and #2 can have data race, we should prove whether
it's possible that `a` and `b` simultaneously read `false`.
This proof equals whether there can be a valid single total order in this case.
To determine the order of `b.load` and `b.store` when `b.load` reads
the initialization value `false`, <sref ref="[atomics.order]"/> p3.3
should apply here.
However, the initialization is not an atomic modification
such that `X` cannot be that value.
</blockquote>
</p>

<p>
A possible fix is to amend <sref ref="[atomics.order]"/>/3.3 to say something
like this:
<blockquote>
(3.3) A and B are not the same atomic read-modify-write operation, and
<ins>either</ins>
<ol style="list-style-type: none">
<li><ins>(3.3.1)</ins>
there exists an atomic modification X of M such that A reads
the value stored by X and X precedes B in the modification order of M<ins>,
or</ins>
</li>
<li><ins>(3.3.2)
A reads the initial value of X and B modifies M</ins>, or
</li>
</ol>
</blockquote>
</p>

</discussion>

<resolution>
<p>
</p>
</resolution>

</issue>
