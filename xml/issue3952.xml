<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3952" status="New">
<title><tt>iter_common_reference_t</tt> does not conform to the definition of <tt>indirectly_readable</tt></title>
<section><sref ref="[iterator.synopsis]"/><sref ref="[const.iterators.alias]"/><sref ref="[const.iterators.iterator]"/></section>
<submitter>Hewill Kang</submitter>
<date>28 Jun 2023</date>
<priority>99</priority>

<discussion>
<p>
The <tt>indirectly_readable</tt> concept (<sref ref="[iterator.concept.readable]"/>) requires 
<tt>iter_reference_t&lt;In&gt;&amp;&amp;</tt> and <tt>iter_value_t&lt;In&gt;&amp;</tt> to model 
<tt>common_reference_with</tt>, which ensures that the input iterator always has a common reference type.
<p/>
However, <tt>iter_common_reference_t</tt> for computing such types is defined as
<tt>common_reference_t&lt;iter_reference_t&lt;T&gt;, <i>indirect-value-t</i>&lt;T&gt;&gt;</tt>.
<p/>
It is  unclear why the formula here drop the <tt>&amp;&amp;</tt> part of <tt>iter_reference_t&lt;In&gt;</tt>, 
but theoretically it is not completely equivalent to the former, <a href="https://godbolt.org/z/h6GKn6oss">for example</a>:    
</p>
<blockquote><pre>
#include &lt;iterator&gt;

struct Ref {
  Ref(const Ref&amp;) = delete;
};

struct Val {
  operator const Ref&amp;() const &amp;;
};

struct I {
  using value_type = Val;
  using difference_type = int;
  Ref operator*() const;
  I&amp; operator++();
  I operator++(int);
};

static_assert(std::input_iterator&lt;I&gt;);
using reference  = std::iter_reference_t&lt;I&gt;;
using value_type = std::iter_value_t&lt;I&gt;;
static_assert(std::same_as&lt;std::common_reference_t&lt;reference&amp;&amp;, value_type&amp;&amp;gt;, const Ref&amp;&amp;gt;);
static_assert(std::same_as&lt;std::common_reference_t&lt;reference  , value_type&amp;&amp;gt;,       Ref &gt;);

std::iter_value_t&lt;I&gt; val;
std::iter_common_reference_t&lt;I&gt; cr = val; // <span style="color:red;font-weight:bolder">failed</span>
</pre></blockquote>
<p>
In the above example, <tt>input_iterator</tt> ensures that the iterator's lvalue value type and rvalue reference type 
can be bound to its common reference type, namely <tt>const Ref&amp;</tt>, but the type calculated by 
<tt>iter_common_reference_t</tt> is <tt>Ref</tt>, which cannot be bound by both.
<p/>
The proposed resolution re-adds the <tt>&amp;&amp;</tt> to <tt>iter_reference_t&lt;In&gt;</tt> in formulas of similar 
form to conform to the definition of <tt>indirectly_readable</tt>.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4950"/>.
</p>

<ol>
<li><p>Modify <sref ref="[iterator.synopsis]"/>, header <tt>&lt;iterator&gt;</tt> synopsis, as indicated:</p>


<blockquote>
<pre>
[&hellip;]
template&lt;indirectly_readable T&gt;
  using iter_common_reference_t =                                                 // <i>freestanding</i>
    common_reference_t&lt;iter_reference_t&lt;T&gt;<ins>&amp;&amp;</ins>, <i>indirect-value-t</i>&lt;T&gt;&gt;;
[&hellip;]
</pre>
</blockquote>

</li>

<li><p>Modify <sref ref="[const.iterators.alias]"/> as indicated:</p>


<blockquote>
<pre>
template&lt;indirectly_readable It&gt;
  using iter_const_reference_t =
    common_reference_t&lt;const iter_value_t&lt;It&gt;&amp;&amp;, iter_reference_t&lt;It&gt;<ins>&amp;&amp;</ins>&gt;;
</pre>
</blockquote>

</li>

<li><p>Modify <sref ref="[const.iterators.iterator]"/> as indicated:</p>


<blockquote>
<pre>
namespace std {
  template&lt;class I&gt;
    concept <i>not-a-const-iterator</i> = <i>see below</i>;                   // <i>exposition only</i>

  template&lt;indirectly_readable I&gt;
    using <i>iter-const-rvalue-reference-t</i> =                       // <i>exposition only</i>
      common_reference_t&lt;const iter_value_t&lt;I&gt;&amp;&amp;, iter_rvalue_reference_t&lt;I&gt;<ins>&amp;&amp;</ins>&gt;;
  [&hellip;]
};
</pre>
</blockquote>

</li>
</ol>
</resolution>

</issue>
