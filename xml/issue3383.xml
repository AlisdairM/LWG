<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3383" status="C++20">
<title>&sect;[time.zone.leap.nonmembers] <tt>sys_seconds</tt> should be replaced with <tt>seconds</tt></title>
<section><sref ref="[time.zone.leap.nonmembers]"/></section>
<submitter>Jiang An</submitter>
<date>30 Jan 2020</date>
<priority>1</priority>

<discussion>
<p>
In <a href="https://wg21.link/n4849">N4849</a> <sref ref="[time.zone.leap.nonmembers]"/>/12, the type 
template parameter <tt>Duration</tt> is constrained by <tt>three_way_comparable_with&lt;sys_seconds&gt;</tt>. 
However, since <tt>std::chrono::sys_seconds</tt> is a time point type and <tt>Duration</tt> must be a 
duration type, they can never be compared directly via <tt>operator&lt;=&gt;</tt>.
<p/>
I guess that the actual intent is comparing <tt>Duration</tt> with the duration type of 
<tt>std::chrono::sys_seconds</tt>, i.e. <tt>std::chrono::seconds</tt>. And thus <tt>sys_seconds</tt> 
should be replaced with <tt>seconds</tt> here.
</p>

<note>2020-02 Prioritized as P1 Monday morning in Prague</note>

<strong>Previous resolution [SUPERSEDED]:</strong>
<blockquote class="note">
<p>This wording is relative to <a href="https://wg21.link/n4849">N4849</a>.</p>

<ol>
<li><p>Modify <sref ref="[time.syn]"/>, header <tt>&lt;chrono&gt;</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
namespace std {
  [&hellip;]
  namespace chrono {
    [&hellip;]
    template&lt;three_way_comparable_with&lt;<del>sys_</del>seconds&gt; Duration&gt;
      auto operator&lt;=&gt;(const leap&amp; x, const sys_time&lt;Duration&gt;&amp; y);
    [&hellip;]
  }
  [&hellip;]
}
</pre>
<blockquote>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[time.zone.leap.nonmembers]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;three_way_comparable_with&lt;<del>sys_</del>seconds&gt; Duration&gt;
  constexpr auto operator&lt;=&gt;(const leap&amp; x, const sys_time&lt;Duration&gt;&amp; y) noexcept;
</pre>
<blockquote>
<p>
-12- <i>Returns:</i> <tt>x.date() &lt;=&gt; y</tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</blockquote>

<note>2020-02-10, Prague; Howard suggests alternative wording</note>
<p>
The below shown alternative wording does more directly describe the constrained code (by comparing 
<tt>time_point</tt>s), even though in the very end the code specifying the effects finally goes down 
to actually return <tt>x.date().time_since_epoch() &lt;=&gt; y.time_since_epoch()</tt> (thus comparing 
<tt>duration</tt>s).
</p>

<strong>Previous resolution [SUPERSEDED]:</strong>
<blockquote class="note">
<p>This wording is relative to <a href="https://wg21.link/n4849">N4849</a>.</p>

<ol>
<li><p>Modify <sref ref="[time.syn]"/>, header <tt>&lt;chrono&gt;</tt> synopsis, as indicated:</p>

<blockquote class="note">
<p>
The synopsis does provide an additional drive-by fix to eliminate the mismatch of the <tt>constexpr</tt>
and <tt>noexcept</tt> in declaration and prototype specification.
</p>
</blockquote>

<blockquote>
<pre>
namespace std {
  [&hellip;]
  namespace chrono {
    [&hellip;]
    template&lt;<del>three_way_comparable_with&lt;sys_seconds&gt;</del><ins>class</ins> Duration&gt;
      <ins>requires three_way_comparable_with&lt;sys_seconds, sys_time&lt;Duration&gt;&gt;</ins>
        <ins>constexpr</ins> auto operator&lt;=&gt;(const leap&amp; x, const sys_time&lt;Duration&gt;&amp; y) <ins>noexcept</ins>;
    [&hellip;]
  }
  [&hellip;]
}
</pre>
<blockquote>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[time.zone.leap.nonmembers]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;<del>three_way_comparable_with&lt;sys_seconds&gt;</del><ins>class</ins> Duration&gt;
  <ins>requires three_way_comparable_with&lt;sys_seconds, sys_time&lt;Duration&gt;&gt;</ins>
    constexpr auto operator&lt;=&gt;(const leap&amp; x, const sys_time&lt;Duration&gt;&amp; y) noexcept;
</pre>
<blockquote>
<p>
-12- <i>Returns:</i> <tt>x.date() &lt;=&gt; y</tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</blockquote>

<note>2020-02-11, Prague; Daniel suggests alternative wording</note>
<p>
During today's LWG discussion of this issue the observation was made that there also exists a 
mismatch regarding the <tt>noexcept</tt> specifier for both declarations, but for this second deviation
a corresponding change does <em>not</em> seem to be a good drive-by fix candidate, because we have a
function template here that allows supporting user-defined types, whose comparison may throw (Note 
that the corresponding <tt>operator&lt;=&gt;</tt> or other comparison function declarations of the 
<tt>duration</tt> and <tt>time_point</tt> templates are <em>not</em> specified as <tt>noexcept</tt> 
function templates). The revised wording below does therefore intentionally <em>not</em> change the
currently existing <tt>noexcept</tt>-specifier mismatch, but a separate issue should instead be
opened for the general <tt>noexcept</tt>-specifier mismatches for all comparison function templates
of <tt>std::chrono::leap</tt>. Daniel has volunteered to take care for this issue.
</p>

<note>2020-02 Moved to Immediate on Tuesday in Prague.</note>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4849">N4849</a>.</p>

<ol>
<li><p>Modify <sref ref="[time.syn]"/>, header <tt>&lt;chrono&gt;</tt> synopsis, as indicated:</p>

<blockquote class="note">
<p>
[<i>Drafting note:</i> The synopsis does provide an additional drive-by fix to eliminate the mismatch of the 
<tt>constexpr</tt> in declaration and prototype specification, but does <em>not</em> so for a similar
mismatch of the exception-specifications of both declarations.]
</p>
</blockquote>

<blockquote>
<pre>
namespace std {
  [&hellip;]
  namespace chrono {
    [&hellip;]
    template&lt;<del>three_way_comparable_with&lt;sys_seconds&gt;</del><ins>class</ins> Duration&gt;
      <ins>requires three_way_comparable_with&lt;sys_seconds, sys_time&lt;Duration&gt;&gt;</ins>
        <ins>constexpr</ins> auto operator&lt;=&gt;(const leap&amp; x, const sys_time&lt;Duration&gt;&amp; y);
    [&hellip;]
  }
  [&hellip;]
}
</pre>
<blockquote>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[time.zone.leap.nonmembers]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;<del>three_way_comparable_with&lt;sys_seconds&gt;</del><ins>class</ins> Duration&gt;
  <ins>requires three_way_comparable_with&lt;sys_seconds, sys_time&lt;Duration&gt;&gt;</ins>
    constexpr auto operator&lt;=&gt;(const leap&amp; x, const sys_time&lt;Duration&gt;&amp; y) noexcept;
</pre>
<blockquote>
<p>
-12- <i>Returns:</i> <tt>x.date() &lt;=&gt; y</tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
