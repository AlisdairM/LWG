<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2575" status="WP">
<title>[fund.ts.v2] <tt>experimental::function::assign</tt> should be removed</title>
<section><sref ref="[func.wrap.func]"/></section>
<submitter>Tim Song</submitter>
<date>20 Dec 2015</date>
<priority>0</priority>

<discussion>
<p><b>Addresses: fund.ts.v2</b></p>
<p>
Following the lead of LWG <iref ref="2385"/>, the <tt>assign(F&amp;&amp;, const A&amp;)</tt> member function template in 
<tt>std::experimental::function</tt> makes no sense (it causes undefined behavior unless the allocator passed compares equal 
to the one already used by <tt>*this</tt>) and should be removed.
</p>

<note>2016-02, Issues Telecon</note>
<p>
P0; move to Tentatively Ready.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4562.html">N4562</a>.
</p>

<ol>
<li><p>Edit <sref ref="[func.wrap.func]"/>, class template <tt>function</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
namespace std {
  namespace experimental {
  inline namespace fundamentals_v2 {
    [&hellip;]
    template&lt;class R, class... ArgTypes&gt;
    class function&lt;R(ArgTypes...)&gt; {
    public:
      [&hellip;]
      void swap(function&amp;);
      <del>template&lt;class F, class A&gt; void assign(F&amp;&amp;, const A&amp;);</del>
      [&hellip;]
    };
    [&hellip;]
  } // namespace fundamentals_v2
  } // namespace experimental
  [&hellip;]
} // namespace std
</pre>
</blockquote>

</li>
</ol>
</resolution>

</issue>
