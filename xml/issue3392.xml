<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3392" status="New">
<title><tt>ranges::distance()</tt> cannot be used on a move-only iterator with a sized sentinel</title>
<section><sref ref="[range.iter.op.distance]"/></section>
<submitter>Patrick Palka</submitter>
<date>7 Feb 2020</date>
<priority>99</priority>

<discussion>
<p>
One cannot use <tt>ranges::distance(I, S)</tt> to compute the distance between a
move-only <tt>counted_iterator</tt> and the <tt>default_sentinel</tt>. In other words,
the following is invalid
</p>
<blockquote><pre>
// iter is a counted_iterator with an move-only underlying iterator
ranges::distance(iter, default_sentinel);
</pre></blockquote>
<p>
and yet
</p>
<blockquote><pre>
(default_sentinel - iter);
</pre></blockquote>
<p>
is valid. The first example is invalid because <tt>ranges::distance()</tt> takes
its first argument by value so when invoking it with an iterator lvalue
argument the iterator must be copyable, which a move-only iterator is
not. The second example is valid because <tt>counted_iterator::operator-()</tt>
takes its iterator argument by <tt>const</tt> reference, so it doesn't require
copyability of the <tt>counted_iterator</tt>.
<p/>
This incongruency poses an inconvenience in generic code which uses
<tt>ranges::distance()</tt> to efficiently compute the distance between two
iterators or between an iterator-sentinel pair. Although it's a bit of
an edge case, it would be good if <tt>ranges::distance()</tt> does the right
thing when the iterator is a move-only lvalue with a sized sentinel.
<p/>
If this is worth fixing, one solution might be to define a separate
overload of <tt>ranges::distance(I, S)</tt> that takes its arguments by <tt>const</tt>
reference, as follows.
</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4849">N4849</a>.</p>

<ol>
<li><p>Modify <sref ref="[iterator.synopsis]"/>, header <tt>&lt;iterator&gt;</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
#include &lt;concepts&gt;

namespace std {
  [&hellip;]
  <i>// <sref ref="[range.iter.ops]"/>, range iterator operations</i>
  namespace ranges {
    [&hellip;]
    <i>// <sref ref="[range.iter.op.distance]"/>, ranges::distance</i>
    template&lt;input_or_output_iterator I, sentinel_for&lt;I&gt; S&gt;
      <ins>requires (!sized_sentinel_for&lt;S, I&gt;)</ins>
        constexpr iter_difference_t&lt;I&gt; distance(I first, S last);
    <ins>template&lt;input_or_output_iterator I, sized_sentinel_for&lt;I&gt; S&gt;
      constexpr iter_difference_t&lt;I&gt; distance(const I&amp; first, const S&amp; last);</ins>
    template&lt;range R&gt;
      constexpr range_difference_t&lt;R&gt; distance(R&amp;&amp; r);
    [&hellip;]
  }
  [&hellip;]
}
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.iter.op.distance]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;input_or_output_iterator I, sentinel_for&lt;I&gt; S&gt;
  <ins>requires (!sized_sentinel_for&lt;S, I&gt;)</ins>
    constexpr iter_difference_t&lt;I&gt; ranges::distance(I first, S last);
</pre>
<blockquote>
<p>
-1- <i>Preconditions:</i> <tt>[first, last)</tt> denotes a range<del>, or <tt>[last, first)</tt> denotes a range 
and <tt>S</tt> and <tt>I</tt> model <tt>same_as&lt;S, I&gt; &amp;&amp; sized_sentinel_for&lt;S, I&gt;</tt></del>.
<p/>
-2- <i>Effects:</i> <del>If <tt>S</tt> and <tt>I</tt> model <tt>sized_sentinel_for&lt;S, I&gt;</tt>, returns 
<tt>(last - first)</tt>; otherwise, r</del><ins>R</ins>eturns the number of increments needed to get from 
<tt>first</tt> to <tt>last</tt>.
</p>
</blockquote>
<pre>
<ins>template&lt;input_or_output_iterator I, sized_sentinel_for&lt;I&gt; S&gt;
  constexpr iter_difference_t&lt;I&gt; ranges::distance(const I&amp; first, const S&amp; last);</ins>
</pre>
<blockquote>
<p>
<ins>-?- <i>Preconditions:</i> <tt>S</tt> and <tt>I</tt> model <tt>sized_sentinel_for&lt;S, I&gt;</tt>and either:</ins>
<ol style="list-style-type: none"> 
<li><p><ins>(?.1) &mdash; <tt>[first, last)</tt> denotes a range, or</ins></p></li>
<li><p><ins>(?.2) &mdash; <tt>[last, first)</tt> denotes a range and <tt>S</tt> and <tt>I</tt> model 
<tt>same_as&lt;S, I&gt;</tt>.</ins></p></li>
</ol>
<p/>
<ins>-? <i>Effects:</i> Returns <tt>(last - first)</tt>;</ins>
</p>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
