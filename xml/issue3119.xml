<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3119" status="Voting">
<title>Program-definedness of closure types</title>
<section><sref ref="[defns.program.defined.spec]"/></section>
<submitter>Hubert Tong</submitter>
<date>9 Jun 2018</date>
<priority>2</priority>

<discussion>
<p>
The description of closure types in <sref ref="[expr.prim.lambda.closure]"/> says:
</p>
<blockquote>
<p>
An implementation may define the closure type differently [&hellip;]
</p>
</blockquote>
<p>
The proposed resolution to LWG <iref ref="2139"/> defines a "program-defined type" to be a
</p>
<blockquote>
<p>
class type or enumeration type that is not part of the C++ standard library and not defined by the implementation,
or an instantiation of a program-defined specialization
</p>
</blockquote>
<p>
I am not sure that the intent of whether closure types are or are not program-defined types is clearly
conveyed by the wording.
</p>

<note>2018-06-23 after reflector discussion</note>
<p>Priority set to 2</p>

<note>2018-08-14 Casey provides additional discussion and a Proposed Resolution</note>
<p>
We use the term "program-defined" in the library specification to ensure that
two users cannot create conflicts in a component in namespace <tt>std</tt> by
specifying different behaviors for the same type. For example, we allow users to
specialize <tt>common_type</tt> when at least one of the parameters is a
program-defined type. Since two users cannot define the same program-defined
type, this rule prevents two users (or libraries) defining the same
specialization of <tt>std::common_type</tt>.
</p><p>
Since it's guaranteed that even distinct utterances of identical lambda
expressions produce closures with distinct types
(<sref ref="[expr.prim.lambda.closure]"/>), adding closure types to our term
"program-defined type" is consistent with the intended use despite that such
types are technically defined by the implementation.
</p>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>This wording is relative to <a href="https://wg21.link/n4762">N4762</a>.</p>

<ul>
<li><p>Modify <sref ref="[defns.prog.def.type]"/> as follows:</p>
<blockquote>
<b>program-defined type</b><br/>
class type or enumeration type that is not part of the C++ standard library and
not defined by the implementation <ins>(except for closure types
(<sref ref="[expr.prim.lambda.closure]"/>) for program-defined lambda
expressions)</ins>, or an instantiation of a program-defined specialization
</blockquote>
</li>
</ul>
</blockquote>

<note>2018-08-23 Batavia Issues processing</note>
<p>Updated wording</p>

<note>2018-11 San Diego Thursday night issue processing</note>
<p>Status to Ready.</p>
</discussion>

<resolution>

<p>This wording is relative to <a href="https://wg21.link/n4762">N4762</a>.</p>

<ul>
<li><p>Modify <sref ref="[defns.prog.def.type]"/> as follows:</p>
<blockquote>
<b>program-defined type</b><br/>
<ins>non-closure </ins>class type or enumeration type that is not part of the 
C++ standard library and not defined by the implementation, 
<ins>or a closure type of a non-implementation-provided lambda expression, </ins>
or an instantiation of a program-defined specialization
</blockquote>
</li>
</ul>

</resolution>

</issue>
