<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2424" status="Review">
<title>29.5 should state that atomic types are not trivially copyable</title>
<section><sref ref="[atomics.types.generic]"/></section>
<submitter>Jens Maurer</submitter>
<date>14 Aug 2014</date>
<priority>2</priority>

<discussion>
<p>
Otherwise, one could use <tt>memcpy</tt> to save and restore the value according to 3.9p2.
<p/>
It seems the core language rules in <sref ref="[class]"/>p6 with <sref ref="[class.copy]"/>p12 
(trivial copy constructor) etc. and <sref ref="[dcl.fct.def.default]"/>p5 (user-provided) say 
that the atomic types are trivially copyable, which is bad. We shouldn't rely on future core 
changes in that area and simply say in the library section <sref ref="[atomics.types.generic]"/> 
that these very special types are not trivially copyable.
</p>

<note>2014-11 Urbana</note>
<p>
Lawrence:Definition of "trivially copyable" has been changing.
</p>
<p>
Doesn't hurt to add proposed change, even if the sentence is redundant
</p>
<p>
Move to Review.
</p>

<note>2015-02 Cologne</note>
<p>
GR has a minor problem with the style of the wording. VV has major issues with implementability.
</p>

<note>2015-03-22, Jens Maurer responses to Cologne discussion</note>
<p>
A library implementation could provide a partial specialization for <tt>is_trivially_copyable&lt;atomic&lt;T&gt;&gt;</tt>, 
to ensure that any such type query would return <tt>false</tt>.
<p/>
Assuming such a specialization would be provided, how could a conforming program observe that per 
language rules an <tt>atomic</tt> specialization would actually be trivially copyable if there 
is no way to call the (deleted) copy constructor or copy assignment operator?
<p/>
The sole effect of the suggested addition of the constraining sentence is that it would make a user program
non-conforming that attempts to invoke <tt>memcpy</tt> (and the like) on <tt>atomic</tt> types, since that
would invoke undefined behaviour.
</p>

<note>2015-05 Lenexa, SG1 response</note>
<p>
SG1 is fine with P/R (and agrees it's needed), but LWG may want to
check the details; it's not entirely an SG1 issue.
</p>

<note>2015-05-05 Lenexa</note>
<p>Marshall: This was discussed on the telecon. Alisdair was going to write something to Mike and send it to Core.</p>
<p>Hwrd: Core says that deleted copies are trivially copyable, which makes no sense to Library people.</p>
<p>STL: There doesn't appear to be a Core issue about it.</p>
</discussion>

<resolution>
<ol>
<li><p>Change <sref ref="[atomics.types.generic]"/>p3 as indicated:</p>

<blockquote>
<p>
Specializations and instantiations of the <tt>atomic</tt> template shall have a deleted copy constructor, a deleted
copy assignment operator, and a constexpr value constructor. <ins>They are not trivially copyable 
types (<sref ref="[basic.types]"/>).</ins>
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
