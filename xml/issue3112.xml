<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3112" status="Voting">
<title><tt>system_error</tt> and <tt>filesystem_error</tt> constructors taking a <tt>string</tt> may not be able 
to meet their postconditions</title>
<section><sref ref="[syserr.syserr.members]"/><sref ref="[fs.filesystem_error.members]"/></section>
<submitter>Tim Song</submitter>
<date>10 May 2018</date>
<priority>0</priority>

<discussion>
<p>
The constructors of <tt>system_error</tt> and <tt>filesystem_error</tt> taking a <tt>std::string</tt> <tt>what_arg</tt> 
are specified to have a postcondition of <tt>string(what()).find(what_arg) != string::npos</tt> (or the equivalent with 
<tt>string_view</tt>). This is not possible if <tt>what_arg</tt> contains an embedded null character.
</p>

<note>2019-01-20 Reflector prioritization</note>
<p>Set Priority to 0 and status to Tentatively Ready</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4727">N4727</a>.</p>

<blockquote class="note"> 
<p>
<i>Drafting note:</i> This contains a drive-by editorial change to use <tt>string_view</tt> for these postconditions rather 
than <tt>string</tt>.
</p>
</blockquote>

<ol>
<li><p>Edit <sref ref="[syserr.syserr.members]"/> p1-4 as indicated:</p>
<blockquote>
<pre>
system_error(error_code ec, const string&amp; what_arg);
</pre>
<blockquote>
<p>
-1- <i>Effects:</i> Constructs an object of class <tt>system_error</tt>.
<p/>
-2- <i>Postconditions:</i> <tt>code() == ec</tt> and <tt>string<ins>_view</ins>(what()).find(what_arg<ins>.c_str()</ins>) 
!= string<ins>_view</ins>::npos</tt>.
</p>
</blockquote>
<pre>
system_error(error_code ec, const char* what_arg);
</pre>
<blockquote>
<p>
-3- <i>Effects:</i> Constructs an object of class <tt>system_error</tt>.
<p/>
-4- <i>Postconditions:</i> <tt>code() == ec</tt> and <tt>string<ins>_view</ins>(what()).find(what_arg) 
!= string<ins>_view</ins>::npos</tt>.
</p>
</blockquote>
</blockquote>
</li>
<li><p>Edit <sref ref="[syserr.syserr.members]"/> p7-10 as indicated:</p>
<blockquote>
<pre>
system_error(int ev, const error_category&amp; ecat, const std::string&amp; what_arg);
</pre>
<blockquote>
<p>
-7- <i>Effects:</i> Constructs an object of class <tt>system_error</tt>.
<p/>
-8- <i>Postconditions:</i> <tt>code() == error_code(ev, ecat)</tt> and <tt>string<ins>_view</ins>(what()).find(what_arg<ins>.c_str()</ins>) 
!= string<ins>_view</ins>::npos</tt>.
</p>
</blockquote>
<pre>
system_error(int ev, const error_category&amp; ecat, const char* what_arg);
</pre>
<blockquote>
<p>
-9- <i>Effects:</i> Constructs an object of class <tt>system_error</tt>.
<p/>
-10- <i>Postconditions:</i> <tt>code() == error_code(ev, ecat)</tt> and <tt>string<ins>_view</ins>(what()).find(what_arg) 
!= string<ins>_view</ins>::npos</tt>.
</p>
</blockquote>
</blockquote>
</li>
<li><p>Edit <sref ref="[fs.filesystem_error.members]"/> p2-4 as indicated:</p>
<blockquote>
<pre>
filesystem_error(const string&amp; what_arg, error_code ec);
</pre>
<blockquote>
<p>
-2- <i>Postconditions:</i>
</p>
<ul>
<li> <tt>code() == ec</tt>, </li>
<li> <tt>path1().empty() == true</tt>,</li>
<li> <tt>path2().empty() == true</tt>, and</li>
<li> <tt>string_view(what()).find(what_arg<ins>.c_str()</ins>) != string_view::npos</tt>.</li>
</ul>
</blockquote>
<pre>
filesystem_error(const string&amp; what_arg, const path&amp; p1, error_code ec);
</pre>
<blockquote>
<p>
-3- <i>Postconditions:</i>
</p>
<ul>
<li> <tt>code() == ec</tt>, </li>
<li> <tt>path1()</tt> returns a reference to the stored copy of <tt>p1</tt>,</li>
<li> <tt>path2().empty() == true</tt>, and</li>
<li> <tt>string_view(what()).find(what_arg<ins>.c_str()</ins>) != string_view::npos</tt>.</li>
</ul>
</blockquote>
<pre>
filesystem_error(const string&amp; what_arg, const path&amp; p1, const path&amp; p2, error_code ec);
</pre>
<blockquote>
<p>
-4- <i>Postconditions:</i>
</p>
<ul>
<li> <tt>code() == ec</tt>, </li>
<li> <tt>path1()</tt> returns a reference to the stored copy of <tt>p1</tt>,</li>
<li> <tt>path2()</tt> returns a reference to the stored copy of <tt>p2</tt>,</li>
<li> <tt>string_view(what()).find(what_arg<ins>.c_str()</ins>) != string_view::npos</tt>.</li>
</ul>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
