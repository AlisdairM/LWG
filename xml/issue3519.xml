<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3519" status="New">
<title> Incomplete synopses for <tt>&lt;random&gt;</tt> classes</title>
<section><sref ref="[rand.eng]"/><sref ref="[rand.adapt]"/><sref ref="[rand.dist]"/></section>
<submitter>Jens Maurer</submitter>
<date>02 Feb 2021</date>
<priority>99</priority>

<discussion>
<p>
The synopses for the engine and distribution classes in <tt>&lt;random&gt;</tt> do
not show declarations <tt>operator==</tt>, <tt>operator!=</tt>, <tt>operator&lt;&lt;</tt>, 
and <tt>operator&gt;&gt;</tt>, although they are part of the engine and distribution requirements.
<p/>
Suggested resolution:
<p/>
Add these operators as hidden friends to the respective class synopses.
</p>

<note>2021-02-07: Daniel provides concrete wording</note>
<p>
The proposed wording attempts to use a conservative approach in regard to exception specifications. Albeit 
<sref ref="[rand.eng.general]"/> p3 says that "no function described in <sref ref="[rand.eng]"/> throws 
an exception" (unless specified otherwise), not all implementations have marked the equality operators 
as <tt>noexcept</tt> (But some do for their engines, such as VS 2019). [No implementations marks the IO 
stream operators as <tt>noexcept</tt> of-course, because these cannot be prevented to throw exceptions in 
general by design].
<p/>
The wording also uses hidden friends of the IO streaming operators ("inserters and extractors") as
suggested by the issue discussion, but it should be noted that at least some existing implementations use 
free function templates for their distributions.
<p/>
Note that we intentionally don't declare any <tt>operator!=</tt>, because the auto-generated form already has
the right semantics. The wording also covers the engine adaptor class templates because similar requirements 
apply to them.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4878">N4878</a>. 
</p>

<ol>
<li><p>Modify <sref ref="[rand.eng.lcong]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class UIntType, UIntType a, UIntType c, UIntType m&gt;
class linear_congruential_engine {
  [&hellip;]
  <i>// constructors and seeding functions</i>
  [&hellip;]
  
  <ins><i>// equality operators</i></ins>
  <ins>friend bool operator==(const linear_congruential_engine&amp; x, const linear_congruential_engine&amp; y);</ins>

  <i>// generating functions</i>
  [&hellip;]
  
  <ins><i>// inserters and extractors</i></ins>
  <ins>template&lt;class charT, class traits&gt;
    friend basic_ostream&lt;charT, traits&gt;&amp;
      operator&lt;&lt;(basic_ostream&lt;charT, traits&gt;&amp; os, const linear_congruential_engine&amp; x);
  template&lt;class charT, class traits&gt;
    friend basic_istream&lt;charT, traits&gt;&amp;
      operator&gt;&gt;(basic_istream&lt;charT, traits&gt;&amp; is, linear_congruential_engine&amp; x);</ins>
};
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[rand.eng.mers]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class UIntType, size_t w, size_t n, size_t m, size_t r,
            UIntType a, size_t u, UIntType d, size_t s,
            UIntType b, size_t t,
            UIntType c, size_t l, UIntType f&gt;
class mersenne_twister_engine {
  [&hellip;]
  <i>// constructors and seeding functions</i>
  [&hellip;]
  
  <ins><i>// equality operators</i></ins>
  <ins>friend bool operator==(const mersenne_twister_engine&amp; x, const mersenne_twister_engine&amp; y);</ins>

  <i>// generating functions</i>
  [&hellip;]
  
  <ins><i>// inserters and extractors</i></ins>
  <ins>template&lt;class charT, class traits&gt;
    friend basic_ostream&lt;charT, traits&gt;&amp;
      operator&lt;&lt;(basic_ostream&lt;charT, traits&gt;&amp; os, const mersenne_twister_engine&amp; x);
  template&lt;class charT, class traits&gt;
    friend basic_istream&lt;charT, traits&gt;&amp;
      operator&gt;&gt;(basic_istream&lt;charT, traits&gt;&amp; is, mersenne_twister_engine&amp; x);</ins>
};
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[rand.eng.sub]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class UIntType, size_t w, size_t s, size_t r&gt;
class subtract_with_carry_engine {
  [&hellip;]
  <i>// constructors and seeding functions</i>
  [&hellip;]
  
  <ins><i>// equality operators</i></ins>
  <ins>friend bool operator==(const subtract_with_carry_engine&amp; x, const subtract_with_carry_engine&amp; y);</ins>

  <i>// generating functions</i>
  [&hellip;]
  
  <ins><i>// inserters and extractors</i></ins>
  <ins>template&lt;class charT, class traits&gt;
    friend basic_ostream&lt;charT, traits&gt;&amp;
      operator&lt;&lt;(basic_ostream&lt;charT, traits&gt;&amp; os, const subtract_with_carry_engine&amp; x);
  template&lt;class charT, class traits&gt;
    friend basic_istream&lt;charT, traits&gt;&amp;
      operator&gt;&gt;(basic_istream&lt;charT, traits&gt;&amp; is, subtract_with_carry_engine&amp; x);</ins>
};
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[rand.adapt.disc]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class Engine, size_t p, size_t r&gt;
class discard_block_engine {
  [&hellip;]
  <i>// constructors and seeding functions</i>
  [&hellip;]
  
  <ins><i>// equality operators</i></ins>
  <ins>friend bool operator==(const discard_block_engine&amp; x, const discard_block_engine&amp; y);</ins>

  <i>// generating functions</i>
  [&hellip;]
  
  <ins><i>// inserters and extractors</i></ins>
  <ins>template&lt;class charT, class traits&gt;
    friend basic_ostream&lt;charT, traits&gt;&amp;
      operator&lt;&lt;(basic_ostream&lt;charT, traits&gt;&amp; os, const discard_block_engine&amp; x);
  template&lt;class charT, class traits&gt;
    friend basic_istream&lt;charT, traits&gt;&amp;
      operator&gt;&gt;(basic_istream&lt;charT, traits&gt;&amp; is, discard_block_engine&amp; x);</ins>
};
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[rand.adapt.ibits]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class Engine, size_t w, class UIntType&gt;
class independent_bits_engine {
  [&hellip;]
  <i>// constructors and seeding functions</i>
  [&hellip;]
  
  <ins><i>// equality operators</i></ins>
  <ins>friend bool operator==(const independent_bits_engine&amp; x, const independent_bits_engine&amp; y);</ins>

  <i>// generating functions</i>
  [&hellip;]
  
  <ins><i>// inserters and extractors</i></ins>
  <ins>template&lt;class charT, class traits&gt;
    friend basic_ostream&lt;charT, traits&gt;&amp;
      operator&lt;&lt;(basic_ostream&lt;charT, traits&gt;&amp; os, const independent_bits_engine&amp; x);
  template&lt;class charT, class traits&gt;
    friend basic_istream&lt;charT, traits&gt;&amp;
      operator&gt;&gt;(basic_istream&lt;charT, traits&gt;&amp; is, independent_bits_engine&amp; x);</ins>
};
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[rand.adapt.shuf]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class Engine, size_t k&gt;
class shuffle_order_engine {
  [&hellip;]
  <i>// constructors and seeding functions</i>
  [&hellip;]
  
  <ins><i>// equality operators</i></ins>
  <ins>friend bool operator==(const shuffle_order_engine&amp; x, const shuffle_order_engine&amp; y);</ins>

  <i>// generating functions</i>
  [&hellip;]
  
  <ins><i>// inserters and extractors</i></ins>
  <ins>template&lt;class charT, class traits&gt;
    friend basic_ostream&lt;charT, traits&gt;&amp;
      operator&lt;&lt;(basic_ostream&lt;charT, traits&gt;&amp; os, const shuffle_order_engine&amp; x);
  template&lt;class charT, class traits&gt;
    friend basic_istream&lt;charT, traits&gt;&amp;
      operator&gt;&gt;(basic_istream&lt;charT, traits&gt;&amp; is, shuffle_order_engine&amp; x);</ins>
};
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[rand.dist.uni.int]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class IntType = int&gt;
class uniform_int_distribution {
  [&hellip;]
  <i>// constructors and reset functions</i>
  [&hellip;]
  
  <ins><i>// equality operators</i></ins>
  <ins>friend bool operator==(const uniform_int_distribution&amp; x, const uniform_int_distribution&amp; y);</ins>

  <i>// generating functions</i>
  [&hellip;]
  
  <i>// property functions</i>
  [&hellip;]
  
  <ins><i>// inserters and extractors</i></ins>
  <ins>template&lt;class charT, class traits&gt;
    friend basic_ostream&lt;charT, traits&gt;&amp;
      operator&lt;&lt;(basic_ostream&lt;charT, traits&gt;&amp; os, const uniform_int_distribution&amp; x);
  template&lt;class charT, class traits&gt;
    friend basic_istream&lt;charT, traits&gt;&amp;
      operator&gt;&gt;(basic_istream&lt;charT, traits&gt;&amp; is, uniform_int_distribution&amp; x);</ins>
};
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[rand.dist.uni.real]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class RealType = double&gt;
class uniform_real_distribution {
  [&hellip;]
  <i>// constructors and reset functions</i>
  [&hellip;]
  
  <ins><i>// equality operators</i></ins>
  <ins>friend bool operator==(const uniform_real_distribution&amp; x, const uniform_real_distribution&amp; y);</ins>

  <i>// generating functions</i>
  [&hellip;]
  
  <i>// property functions</i>
  [&hellip;]
  
  <ins><i>// inserters and extractors</i></ins>
  <ins>template&lt;class charT, class traits&gt;
    friend basic_ostream&lt;charT, traits&gt;&amp;
      operator&lt;&lt;(basic_ostream&lt;charT, traits&gt;&amp; os, const uniform_real_distribution&amp; x);
  template&lt;class charT, class traits&gt;
    friend basic_istream&lt;charT, traits&gt;&amp;
      operator&gt;&gt;(basic_istream&lt;charT, traits&gt;&amp; is, uniform_real_distribution&amp; x);</ins>
};
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[rand.dist.bern.bernoulli]"/> as indicated:</p>

<blockquote>
<pre>
class bernoulli_distribution {
  [&hellip;]
  <i>// constructors and reset functions</i>
  [&hellip;]
  
  <ins><i>// equality operators</i></ins>
  <ins>friend bool operator==(const bernoulli_distribution&amp; x, const bernoulli_distribution&amp; y);</ins>

  <i>// generating functions</i>
  [&hellip;]
  
  <i>// property functions</i>
  [&hellip;]
  
  <ins><i>// inserters and extractors</i></ins>
  <ins>template&lt;class charT, class traits&gt;
    friend basic_ostream&lt;charT, traits&gt;&amp;
      operator&lt;&lt;(basic_ostream&lt;charT, traits&gt;&amp; os, const bernoulli_distribution&amp; x);
  template&lt;class charT, class traits&gt;
    friend basic_istream&lt;charT, traits&gt;&amp;
      operator&gt;&gt;(basic_istream&lt;charT, traits&gt;&amp; is, bernoulli_distribution&amp; x);</ins>
};
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[rand.dist.bern.bin]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class IntType = int&gt;
class binomial_distribution {
  [&hellip;]
  <i>// constructors and reset functions</i>
  [&hellip;]
  
  <ins><i>// equality operators</i></ins>
  <ins>friend bool operator==(const binomial_distribution&amp; x, const binomial_distribution&amp; y);</ins>

  <i>// generating functions</i>
  [&hellip;]
  
  <i>// property functions</i>
  [&hellip;]
  
  <ins><i>// inserters and extractors</i></ins>
  <ins>template&lt;class charT, class traits&gt;
    friend basic_ostream&lt;charT, traits&gt;&amp;
      operator&lt;&lt;(basic_ostream&lt;charT, traits&gt;&amp; os, const binomial_distribution&amp; x);
  template&lt;class charT, class traits&gt;
    friend basic_istream&lt;charT, traits&gt;&amp;
      operator&gt;&gt;(basic_istream&lt;charT, traits&gt;&amp; is, binomial_distribution&amp; x);</ins>
};
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[rand.dist.bern.geo]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class IntType = int&gt;
class geometric_distribution {
  [&hellip;]
  <i>// constructors and reset functions</i>
  [&hellip;]
  
  <ins><i>// equality operators</i></ins>
  <ins>friend bool operator==(const geometric_distribution&amp; x, const geometric_distribution&amp; y);</ins>

  <i>// generating functions</i>
  [&hellip;]
  
  <i>// property functions</i>
  [&hellip;]
  
  <ins><i>// inserters and extractors</i></ins>
  <ins>template&lt;class charT, class traits&gt;
    friend basic_ostream&lt;charT, traits&gt;&amp;
      operator&lt;&lt;(basic_ostream&lt;charT, traits&gt;&amp; os, const geometric_distribution&amp; x);
  template&lt;class charT, class traits&gt;
    friend basic_istream&lt;charT, traits&gt;&amp;
      operator&gt;&gt;(basic_istream&lt;charT, traits&gt;&amp; is, geometric_distribution&amp; x);</ins>
};
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[rand.dist.bern.negbin]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class IntType = int&gt;
class negative_binomial_distribution {
  [&hellip;]
  <i>// constructors and reset functions</i>
  [&hellip;]
  
  <ins><i>// equality operators</i></ins>
  <ins>friend bool operator==(const negative_binomial_distribution&amp; x, const negative_binomial_distribution&amp; y);</ins>

  <i>// generating functions</i>
  [&hellip;]
  
  <i>// property functions</i>
  [&hellip;]
  
  <ins><i>// inserters and extractors</i></ins>
  <ins>template&lt;class charT, class traits&gt;
    friend basic_ostream&lt;charT, traits&gt;&amp;
      operator&lt;&lt;(basic_ostream&lt;charT, traits&gt;&amp; os, const negative_binomial_distribution&amp; x);
  template&lt;class charT, class traits&gt;
    friend basic_istream&lt;charT, traits&gt;&amp;
      operator&gt;&gt;(basic_istream&lt;charT, traits&gt;&amp; is, negative_binomial_distribution&amp; x);</ins>
};
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[rand.dist.pois.poisson]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class IntType = int&gt;
class poisson_distribution {
  [&hellip;]
  <i>// constructors and reset functions</i>
  [&hellip;]
  
  <ins><i>// equality operators</i></ins>
  <ins>friend bool operator==(const poisson_distribution&amp; x, const poisson_distribution&amp; y);</ins>

  <i>// generating functions</i>
  [&hellip;]
  
  <i>// property functions</i>
  [&hellip;]
  
  <ins><i>// inserters and extractors</i></ins>
  <ins>template&lt;class charT, class traits&gt;
    friend basic_ostream&lt;charT, traits&gt;&amp;
      operator&lt;&lt;(basic_ostream&lt;charT, traits&gt;&amp; os, const poisson_distribution&amp; x);
  template&lt;class charT, class traits&gt;
    friend basic_istream&lt;charT, traits&gt;&amp;
      operator&gt;&gt;(basic_istream&lt;charT, traits&gt;&amp; is, poisson_distribution&amp; x);</ins>
};
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[rand.dist.pois.exp]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class RealType = double&gt;
class exponential_distribution {
  [&hellip;]
  <i>// constructors and reset functions</i>
  [&hellip;]
  
  <ins><i>// equality operators</i></ins>
  <ins>friend bool operator==(const exponential_distribution&amp; x, const exponential_distribution&amp; y);</ins>

  <i>// generating functions</i>
  [&hellip;]
  
  <i>// property functions</i>
  [&hellip;]
  
  <ins><i>// inserters and extractors</i></ins>
  <ins>template&lt;class charT, class traits&gt;
    friend basic_ostream&lt;charT, traits&gt;&amp;
      operator&lt;&lt;(basic_ostream&lt;charT, traits&gt;&amp; os, const exponential_distribution&amp; x);
  template&lt;class charT, class traits&gt;
    friend basic_istream&lt;charT, traits&gt;&amp;
      operator&gt;&gt;(basic_istream&lt;charT, traits&gt;&amp; is, exponential_distribution&amp; x);</ins>
};
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[rand.dist.pois.gamma]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class RealType = double&gt;
class gamma_distribution {
  [&hellip;]
  <i>// constructors and reset functions</i>
  [&hellip;]
  
  <ins><i>// equality operators</i></ins>
  <ins>friend bool operator==(const gamma_distribution&amp; x, const gamma_distribution&amp; y);</ins>

  <i>// generating functions</i>
  [&hellip;]
  
  <i>// property functions</i>
  [&hellip;]
  
  <ins><i>// inserters and extractors</i></ins>
  <ins>template&lt;class charT, class traits&gt;
    friend basic_ostream&lt;charT, traits&gt;&amp;
      operator&lt;&lt;(basic_ostream&lt;charT, traits&gt;&amp; os, const gamma_distribution&amp; x);
  template&lt;class charT, class traits&gt;
    friend basic_istream&lt;charT, traits&gt;&amp;
      operator&gt;&gt;(basic_istream&lt;charT, traits&gt;&amp; is, gamma_distribution&amp; x);</ins>
};
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[rand.dist.pois.weibull]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class RealType = double&gt;
class weibull_distribution {
  [&hellip;]
  <i>// constructors and reset functions</i>
  [&hellip;]
  
  <ins><i>// equality operators</i></ins>
  <ins>friend bool operator==(const weibull_distribution&amp; x, const weibull_distribution&amp; y);</ins>

  <i>// generating functions</i>
  [&hellip;]
  
  <i>// property functions</i>
  [&hellip;]
  
  <ins><i>// inserters and extractors</i></ins>
  <ins>template&lt;class charT, class traits&gt;
    friend basic_ostream&lt;charT, traits&gt;&amp;
      operator&lt;&lt;(basic_ostream&lt;charT, traits&gt;&amp; os, const weibull_distribution&amp; x);
  template&lt;class charT, class traits&gt;
    friend basic_istream&lt;charT, traits&gt;&amp;
      operator&gt;&gt;(basic_istream&lt;charT, traits&gt;&amp; is, weibull_distribution&amp; x);</ins>
};
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[rand.dist.pois.extreme]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class RealType = double&gt;
class extreme_value_distribution {
  [&hellip;]
  <i>// constructors and reset functions</i>
  [&hellip;]
  
  <ins><i>// equality operators</i></ins>
  <ins>friend bool operator==(const extreme_value_distribution&amp; x, const extreme_value_distribution&amp; y);</ins>

  <i>// generating functions</i>
  [&hellip;]
  
  <i>// property functions</i>
  [&hellip;]
  
  <ins><i>// inserters and extractors</i></ins>
  <ins>template&lt;class charT, class traits&gt;
    friend basic_ostream&lt;charT, traits&gt;&amp;
      operator&lt;&lt;(basic_ostream&lt;charT, traits&gt;&amp; os, const extreme_value_distribution&amp; x);
  template&lt;class charT, class traits&gt;
    friend basic_istream&lt;charT, traits&gt;&amp;
      operator&gt;&gt;(basic_istream&lt;charT, traits&gt;&amp; is, extreme_value_distribution&amp; x);</ins>
};
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[rand.dist.norm.normal]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class RealType = double&gt;
class normal_distribution {
  [&hellip;]
  <i>// constructors and reset functions</i>
  [&hellip;]
  
  <ins><i>// equality operators</i></ins>
  <ins>friend bool operator==(const normal_distribution&amp; x, const normal_distribution&amp; y);</ins>

  <i>// generating functions</i>
  [&hellip;]
  
  <i>// property functions</i>
  [&hellip;]
  
  <ins><i>// inserters and extractors</i></ins>
  <ins>template&lt;class charT, class traits&gt;
    friend basic_ostream&lt;charT, traits&gt;&amp;
      operator&lt;&lt;(basic_ostream&lt;charT, traits&gt;&amp; os, const normal_distribution&amp; x);
  template&lt;class charT, class traits&gt;
    friend basic_istream&lt;charT, traits&gt;&amp;
      operator&gt;&gt;(basic_istream&lt;charT, traits&gt;&amp; is, normal_distribution&amp; x);</ins>
};
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[rand.dist.norm.lognormal]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class RealType = double&gt;
class lognormal_distribution {
  [&hellip;]
  <i>// constructors and reset functions</i>
  [&hellip;]
  
  <ins><i>// equality operators</i></ins>
  <ins>friend bool operator==(const lognormal_distribution&amp; x, const lognormal_distribution&amp; y);</ins>

  <i>// generating functions</i>
  [&hellip;]
  
  <i>// property functions</i>
  [&hellip;]
  
  <ins><i>// inserters and extractors</i></ins>
  <ins>template&lt;class charT, class traits&gt;
    friend basic_ostream&lt;charT, traits&gt;&amp;
      operator&lt;&lt;(basic_ostream&lt;charT, traits&gt;&amp; os, const lognormal_distribution&amp; x);
  template&lt;class charT, class traits&gt;
    friend basic_istream&lt;charT, traits&gt;&amp;
      operator&gt;&gt;(basic_istream&lt;charT, traits&gt;&amp; is, lognormal_distribution&amp; x);</ins>
};
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[rand.dist.norm.chisq]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class RealType = double&gt;
class chi_squared_distribution {
  [&hellip;]
  <i>// constructors and reset functions</i>
  [&hellip;]
  
  <ins><i>// equality operators</i></ins>
  <ins>friend bool operator==(const chi_squared_distribution&amp; x, const chi_squared_distribution&amp; y);</ins>

  <i>// generating functions</i>
  [&hellip;]
  
  <i>// property functions</i>
  [&hellip;]
  
  <ins><i>// inserters and extractors</i></ins>
  <ins>template&lt;class charT, class traits&gt;
    friend basic_ostream&lt;charT, traits&gt;&amp;
      operator&lt;&lt;(basic_ostream&lt;charT, traits&gt;&amp; os, const chi_squared_distribution&amp; x);
  template&lt;class charT, class traits&gt;
    friend basic_istream&lt;charT, traits&gt;&amp;
      operator&gt;&gt;(basic_istream&lt;charT, traits&gt;&amp; is, chi_squared_distribution&amp; x);</ins>
};
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[rand.dist.norm.cauchy]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class RealType = double&gt;
class cauchy_distribution {
  [&hellip;]
  <i>// constructors and reset functions</i>
  [&hellip;]
  
  <ins><i>// equality operators</i></ins>
  <ins>friend bool operator==(const cauchy_distribution&amp; x, const cauchy_distribution&amp; y);</ins>

  <i>// generating functions</i>
  [&hellip;]
  
  <i>// property functions</i>
  [&hellip;]
  
  <ins><i>// inserters and extractors</i></ins>
  <ins>template&lt;class charT, class traits&gt;
    friend basic_ostream&lt;charT, traits&gt;&amp;
      operator&lt;&lt;(basic_ostream&lt;charT, traits&gt;&amp; os, const cauchy_distribution&amp; x);
  template&lt;class charT, class traits&gt;
    friend basic_istream&lt;charT, traits&gt;&amp;
      operator&gt;&gt;(basic_istream&lt;charT, traits&gt;&amp; is, cauchy_distribution&amp; x);</ins>
};
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[rand.dist.norm.f]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class RealType = double&gt;
class fisher_f_distribution {
  [&hellip;]
  <i>// constructors and reset functions</i>
  [&hellip;]
  
  <ins><i>// equality operators</i></ins>
  <ins>friend bool operator==(const fisher_f_distribution&amp; x, const fisher_f_distribution&amp; y);</ins>

  <i>// generating functions</i>
  [&hellip;]
  
  <i>// property functions</i>
  [&hellip;]
  
  <ins><i>// inserters and extractors</i></ins>
  <ins>template&lt;class charT, class traits&gt;
    friend basic_ostream&lt;charT, traits&gt;&amp;
      operator&lt;&lt;(basic_ostream&lt;charT, traits&gt;&amp; os, const fisher_f_distribution&amp; x);
  template&lt;class charT, class traits&gt;
    friend basic_istream&lt;charT, traits&gt;&amp;
      operator&gt;&gt;(basic_istream&lt;charT, traits&gt;&amp; is, fisher_f_distribution&amp; x);</ins>
};
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[rand.dist.norm.t]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class RealType = double&gt;
class student_t_distribution {
  [&hellip;]
  <i>// constructors and reset functions</i>
  [&hellip;]
  
  <ins><i>// equality operators</i></ins>
  <ins>friend bool operator==(const student_t_distribution&amp; x, const student_t_distribution&amp; y);</ins>

  <i>// generating functions</i>
  [&hellip;]
  
  <i>// property functions</i>
  [&hellip;]
  
  <ins><i>// inserters and extractors</i></ins>
  <ins>template&lt;class charT, class traits&gt;
    friend basic_ostream&lt;charT, traits&gt;&amp;
      operator&lt;&lt;(basic_ostream&lt;charT, traits&gt;&amp; os, const student_t_distribution&amp; x);
  template&lt;class charT, class traits&gt;
    friend basic_istream&lt;charT, traits&gt;&amp;
      operator&gt;&gt;(basic_istream&lt;charT, traits&gt;&amp; is, student_t_distribution&amp; x);</ins>
};
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[rand.dist.samp.discrete]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class IntType = int&gt;
class discrete_distribution {
  [&hellip;]
  <i>// constructors and reset functions</i>
  [&hellip;]
  
  <ins><i>// equality operators</i></ins>
  <ins>friend bool operator==(const discrete_distribution&amp; x, const discrete_distribution&amp; y);</ins>

  <i>// generating functions</i>
  [&hellip;]
  
  <i>// property functions</i>
  [&hellip;]
  
  <ins><i>// inserters and extractors</i></ins>
  <ins>template&lt;class charT, class traits&gt;
    friend basic_ostream&lt;charT, traits&gt;&amp;
      operator&lt;&lt;(basic_ostream&lt;charT, traits&gt;&amp; os, const discrete_distribution&amp; x);
  template&lt;class charT, class traits&gt;
    friend basic_istream&lt;charT, traits&gt;&amp;
      operator&gt;&gt;(basic_istream&lt;charT, traits&gt;&amp; is, discrete_distribution&amp; x);</ins>
};
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[rand.dist.samp.pconst]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class RealType = double&gt;
class piecewise_constant_distribution {
  [&hellip;]
  <i>// constructors and reset functions</i>
  [&hellip;]
  
  <ins><i>// equality operators</i></ins>
  <ins>friend bool operator==(const piecewise_constant_distribution&amp; x, const piecewise_constant_distribution&amp; y);</ins>

  <i>// generating functions</i>
  [&hellip;]
  
  <i>// property functions</i>
  [&hellip;]
  
  <ins><i>// inserters and extractors</i></ins>
  <ins>template&lt;class charT, class traits&gt;
    friend basic_ostream&lt;charT, traits&gt;&amp;
      operator&lt;&lt;(basic_ostream&lt;charT, traits&gt;&amp; os, const piecewise_constant_distribution&amp; x);
  template&lt;class charT, class traits&gt;
    friend basic_istream&lt;charT, traits&gt;&amp;
      operator&gt;&gt;(basic_istream&lt;charT, traits&gt;&amp; is, piecewise_constant_distribution&amp; x);</ins>
};
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[rand.dist.samp.plinear]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class RealType = double&gt;
class piecewise_linear_distribution {
  [&hellip;]
  <i>// constructors and reset functions</i>
  [&hellip;]
  
  <ins><i>// equality operators</i></ins>
  <ins>friend bool operator==(const piecewise_linear_distribution&amp; x, const piecewise_linear_distribution&amp; y);</ins>

  <i>// generating functions</i>
  [&hellip;]
  
  <i>// property functions</i>
  [&hellip;]
  
  <ins><i>// inserters and extractors</i></ins>
  <ins>template&lt;class charT, class traits&gt;
    friend basic_ostream&lt;charT, traits&gt;&amp;
      operator&lt;&lt;(basic_ostream&lt;charT, traits&gt;&amp; os, const piecewise_linear_distribution&amp; x);
  template&lt;class charT, class traits&gt;
    friend basic_istream&lt;charT, traits&gt;&amp;
      operator&gt;&gt;(basic_istream&lt;charT, traits&gt;&amp; is, piecewise_linear_distribution&amp; x);</ins>
};
</pre>
</blockquote>
</li>
</ol>
</resolution>

</issue>
