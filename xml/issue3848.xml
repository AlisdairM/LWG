<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3848" status="C++23">
<title><tt>adjacent_view</tt>, <tt>adjacent_transform_view</tt> and <tt>slide_view</tt> missing <tt>base</tt> accessor</title>
<section>
<sref ref="[range.adjacent.view]"/>
<sref ref="[range.adjacent.transform.view]"/>
<sref ref="[range.slide.view]"/>
</section>
<submitter>Hewill Kang</submitter>
<date>06 Jan 2023</date>
<priority>99</priority>

<discussion>
<p>
Like most range adaptors, these three views accept a single range
and store it as a member variable. 
However, they do not provide a <tt>base()</tt> member function for accessing
the underlying range, which seems like an oversight.
</p>

<note>2023-02-01; Reflector poll</note>
<p>
Set status to Tentatively Ready after seven votes in favour during reflector poll.
</p>

<note>2023-02-13 Status changed: Voting &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4917"/>.
</p>

<ol>
<li><p>Modify <sref ref="[range.adjacent.view]"/> as indicated:</p>

<blockquote>
<blockquote>
<pre>
namespace std::ranges {
  template&lt;forward_range V, size_t N&gt;
    requires view&lt;V&gt; &amp;&amp; (N &gt; 0)
  class adjacent_view : public view_interface&lt;adjacent_view&lt;V, N&gt;&gt; {
    V <i>base_</i> = V();                      <i>// exposition only</i>
    [&hellip;]
  public:
    adjacent_view() requires default_initializable&lt;V&gt; = default;
    constexpr explicit adjacent_view(V base);

    <ins>constexpr V base() const &amp; requires copy_constructible&lt;V&gt; { return <i>base_</i>; }</ins>
    <ins>constexpr V base() &amp;&amp; { return std::move(<i>base_</i>); }</ins>
    [&hellip;]
  };
}
</pre>
</blockquote>
</blockquote>
</li>
<li><p>Modify <sref ref="[range.adjacent.transform.view]"/> as indicated:</p>
<blockquote>
<blockquote>
<pre>
namespace std::ranges {
  template&lt;forward_range V, move_constructible F, size_t N&gt;
    requires view&lt;V&gt; &amp;&amp; (N &gt; 0) &amp;&amp; is_object_v&lt;F&gt; &amp;&amp;
             regular_invocable&lt;F&amp;, <i>REPEAT</i>(range_reference_t&lt;V&gt;, N)...&gt; &amp;&amp;
             <i>can-reference</i>&lt;invoke_result_t&lt;F&amp;, <i>REPEAT</i>(range_reference_t&lt;V&gt;, N)...&gt;&gt;
  class adjacent_transform_view : public view_interface&lt;adjacent_transform_view&lt;V, F, N&gt;&gt; {
    <i>movable-box</i>&lt;F&gt; <i>fun_</i>;                        <i>// exposition only</i>
    adjacent_view&lt;V, N&gt; <i>inner_</i>;                 <i>// exposition only</i>

    using <i>InnerView</i> = adjacent_view&lt;V, N&gt;;      <i>// exposition only</i>
    [&hellip;]
  public:
    adjacent_transform_view() = default;
    constexpr explicit adjacent_transform_view(V base, F fun);

    <ins>constexpr V base() const &amp; requires copy_constructible&lt;<i>InnerView</i>&gt; { return <i>inner_</i>.base(); }</ins>
    <ins>constexpr V base() &amp;&amp; { return std::move(<i>inner_</i>).base(); }</ins>
    [&hellip;]
  };
}
</pre>
</blockquote>
</blockquote>
</li>
<li><p>Modify <sref ref="[range.slide.view]"/> as indicated:</p>

<blockquote>
<blockquote>
<pre>
namespace std::ranges {
  [&hellip;]
  template&lt;forward_range V&gt;
    requires view&lt;V&gt;
  class slide_view : public view_interface&lt;slide_view&lt;V&gt;&gt; {
    V <i>base_</i>;                            <i>// exposition only</i>
    range_difference_t&lt;V&gt; <i>n_</i>;           <i>// exposition only</i>
    [&hellip;]
  public:
    constexpr explicit slide_view(V base, range_difference_t&lt;V&gt; n);

    <ins>constexpr V base() const &amp; requires copy_constructible&lt;V&gt; { return <i>base_</i>; }</ins>
    <ins>constexpr V base() &amp;&amp; { return std::move(<i>base_</i>); }</ins>
    [&hellip;]
  };
  [&hellip;]
}
</pre>
  </blockquote>
  </blockquote>
  </li>

</ol>
</resolution>

</issue>
