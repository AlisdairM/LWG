<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3773" status="C++23">
<title><tt>views::zip_transform</tt> still requires <tt>F</tt> to be <tt>copy_constructible</tt> when empty pack</title>
<section><sref ref="[range.zip.transform.overview]"/></section>
<submitter>Hewill Kang</submitter>
<date>12 Sep 2022</date>
<priority>99</priority>

<discussion>
<p>
After <paper num="P2494R2"/>, range adaptors only require callable to be
<tt>move_constructible</tt>, however, for <tt>views::zip_transform</tt>,
when empty pack, it still requires callable to be <tt>copy_constructible</tt>.
We should relax this requirement, too.
</p>

<note>2022-09-23; Reflector poll</note>
<p>
Set status to Tentatively Ready after seven votes in favour during reflector poll.
</p>

<note>2022-11-12 Approved at November 2022 meeting in Kona. Status changed: Voting &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4910"/>.
</p>

<ol>
<li>
<p>Modify <sref ref="[range.zip.transform.overview]"/> as indicated:</p>
<blockquote>
<p>
-2- The name <tt>views::zip_transform</tt> denotes a customization point object
(<sref ref="[customization.point.object]"/>). 
Let <tt>F</tt> be a subexpression,
and let <tt>Es...</tt> be a pack of subexpressions.
</p>
<ol style="list-style-type:none">
<li><p>(2.1) — If <tt>Es</tt> is an empty pack, let <tt>FD</tt> be <tt>decay_t&lt;decltype((F))&gt;</tt>.</p>
<ol style="list-style-type:none">
<li><p>(2.1.1) — If <tt><ins>move_constructible</ins><del>copy_constructible</del>&lt;FD&gt; &amp;&amp; regular_invocable&lt;FD&amp;&gt;</tt> is <tt>false</tt>, or if <tt>decay_t&lt;invoke_result_t&lt;FD&amp;&gt;&gt;</tt> is not an object type, <tt>views::zip_transform(F, Es...)</tt> is ill-formed.</p></li>
<li><p>(2.1.2) — Otherwise, the expression <tt>views::zip_transform(F, Es...)</tt> is expression-equivalent to</p>
<pre>
      ((void)F, auto(views::empty&lt;decay_t&lt;invoke_result_t&lt;FD&amp;&gt;&gt;&gt;))</pre>
</li>
</ol>
</li>
<li><p>(2.2) — Otherwise, the expression <tt>views::zip_transform(F, Es...)</tt> is expression-equivalent to <tt>zip_transform_view(F, Es...)</tt>.</p></li>
</ol>
</blockquote>
</li>
</ol>
</resolution>

</issue>
