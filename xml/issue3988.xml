<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3988" status="SG9">
<title>Should <tt>as_const_view</tt> and <tt>basic_const_iterator</tt> provide <tt>base()</tt>?</title>
<section><sref ref="[const.iterators]"/><sref ref="[range.as.const.view]"/></section>
<submitter>Hewill Kang</submitter>
<date>28 Aug 2023</date>
<priority>3</priority>

<discussion>
<p>
Currently, both <tt>as_const_view</tt> and <tt>basic_const_iterator</tt> provide <tt>base()</tt> members to 
return the underlying range and iterator, which seems to expose vulnerabilities in modifying them:
</p>
<blockquote><pre>
#include &lt;vector&gt;
#include &lt;ranges&gt;

int main() {
  std::vector v{1, 2, 3};
  
  auto f = [](std::span&lt;int&gt;::const_iterator i) {
    *i.base() = 4;
  };
  f(std::span{v}.cbegin());

  auto g = [](const std::ranges::constant_range auto&amp; r) {
    r.begin().base()[1] = 5;
    r.base()[2] = 6;
  };
  g(std::ranges::as_const_view(v));

  // v now becomes [4, 5, 6]
}
</pre></blockquote>
<p>
I don't think such a shortcut should be provided as it doesn't seem to be the intention and could be harmful.
</p>

<note>2023-10-30; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
Send to SG9.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4958"/>.
</p>

<ol>

<li><p>Modify <sref ref="[const.iterators.iterator]"/>, class template <tt>basic_const_iterator</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
namespace std {
  [&hellip;]

  template&lt;input_iterator Iterator&gt;
  class basic_const_iterator {
    [&hellip;]
    <del>constexpr const Iterator&amp; base() const &amp; noexcept;</del>
    <del>constexpr Iterator base() &amp;&amp;;</del>
    [&hellip;]
  };
}
</pre>
</blockquote>

</li>

<li><p>Modify <sref ref="[const.iterators.ops]"/> as indicated:</p>

<blockquote>
<pre>
<del>constexpr const Iterator&amp; base() const &amp; noexcept;</del>
</pre>
<blockquote>
<p>
<del>-4- <i>Effects</i>: Equivalent to: <tt>return <i>current_</i>;</tt></del>
</p>
</blockquote>
<pre>
<del>constexpr Iterator base() &amp;&amp;;</del>
</pre>
<blockquote>
<p>
<del>-5- <i>Effects</i>: Equivalent to: <tt>return std::move(<i>current_</i>);</tt></del>
</p>
</blockquote>
</blockquote>

</li>

<li><p>Modify <sref ref="[range.as.const.view]"/> as indicated:</p>

<blockquote>
<pre>
namespace std::ranges {
  template&lt;view V&gt;
    requires input_range&lt;V&gt;
  class as_const_view : public view_interface&lt;as_const_view&lt;V&gt;&gt; {
    [&hellip;]
    <del>constexpr V base() const &amp; requires copy_constructible&lt;V&gt; { return <i>base_</i>; }</del>
    <del>constexpr V base() &amp;&amp; { return std::move(<i>base_</i>); }</del>
    [&hellip;]
  };
}
</pre>
</blockquote>

</li>

</ol>
</resolution>

</issue>
