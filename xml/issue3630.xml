<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3630" status="New">
<title>Inconsistent <code>basic_regex</code> construction and assignment from iterator range</title>
<section><sref ref="[re.regex.construct]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>31 Oct 2021</date>
<priority>4</priority>

<discussion>
<p>
We have:
</p>

<pre>
template&lt;class ForwardIterator&gt;
  basic_regex(ForwardIterator first, ForwardIterator last,
              flag_type f = regex_constants::ECMAScript);
</pre>

<p>
and:
</p>

<pre>
template&lt;class InputIterator&gt;
  basic_regex&amp; assign(InputIterator first, InputIterator last,
                          flag_type f = regex_constants::ECMAScript);
</pre>

<p>
Ignoring the lack of proper requirements (which is LWG <iref ref="3341"/>),
why does the constructor take forward iterators,
but the assign function takes input iterators?
Why could construction from input iterators not be implemented as simply
<code>assign(first, last, f)</code>?
</p>

<p>
The current constructor signature is the result of <paper num="N2409"/>
which was resolving LWG <iref ref="682"/>.
It looks like the <code>assign</code> function should have been changed
at the same time, to keep them consistent.
I see no reason why they can't both take input iterators.
The meta-programming needed to avoid an additional string copy for the
input iterator case is trivial with <code>if constexpr</code>
and C++20 iterator concepts.
</p>

<note>2022-01-29; Reflector poll</note>
<p>
Set priority to 4 after reflector poll.
</p>

</discussion>

<resolution>
<p>
</p>
</resolution>

</issue>
