<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3267" status="New">
<title>Rebound allocators and <tt>is_always_equal</tt></title>
<section><sref ref="[allocator.requirements]"/></section>
<submitter>FrankHB1989</submitter>
<date>27 Aug 2019</date>
<priority>99</priority>

<discussion>
<p>
[allocator.requirements] does not mention the interaction between <tt>is_always_equal</tt> 
and allocator rebinding. As the result, a rebound allocator may have different 
<tt>is_always_equal::value</tt> to the original allocator.
<p/>
Further, for an allocator type <tt>X</tt> satisfying 
<tt>std::allocator_type&lt;X&gt;::is_always_equal::value == true</tt>, rebound allocators 
of <tt>X</tt> with same type are not guaranteed equal.
<p/>
Consider:
</p>
<ol>
<li><p><tt>X</tt> is used as an allocator for <tt>value_type</tt> used in a node-based container;</p></li>
<li><p><tt>Y</tt> is the rebound allocator type for the node type used in the implementation;</p></li>
<li><p><tt>b1</tt> and <tt>b2</tt> are values of <tt>Y</tt> from different allocator objects.</p></li>
</ol>
<p>
Then, <tt>std::allocator_type&lt;X&gt;::is_always_equal::value == true</tt> does not necessarily 
imply <tt>b1 == b2</tt>.
<p/>
Since some of containers in the standard have already explicitly relied on <tt>is_always_equal</tt> 
of allocators for their <tt>value_type</tt> (notably, in the exception specification of the move 
assignment), this can cause subtle problems.
<p/>
In general, the implementation of the move assignment operator of such a container can not avoid 
allocation for new nodes when <tt>!std::allocator_traits&lt;Y&gt;::propagate_on_container_move_assignment::value 
&amp;&amp; b1 != b2</tt>. This can throw, and it can clash with the required exception specification 
based on <tt>std::allocator_traits&lt;value_type&gt;::is_always_equal</tt>:
</p>
<blockquote><pre>
#include &lt;utility&gt;
#include &lt;memory&gt;
#include &lt;new&gt;
#include &lt;map&gt;
#include &lt;functional&gt; 
#include &lt;type_traits&gt; 

using K = int;
using V = int;
using P = std::pair&lt;const K, V&gt;; 

bool stop_alloc; 

template&lt;typename T&gt;
struct AT
{
  using value_type = T; 

  std::shared_ptr&lt;void&gt; sp = {}; 

  templatetypename U&gt;
  struct rebind
  {
    using other = AT&lt;U&gt;;
  }; 

  using is_always_equal = std::is_same&lt;T, P&gt;; 

  AT() : sp(is_always_equal::value ? nullptr : new T*()) {}

  AT(const AT&amp; a) = default;

  template&lt;typename U&gt;
  AT(const AT&lt;U>&amp; a) noexcept : sp(a.sp) {} 

  T* allocate(std::size_t size)
  {
    if (stop_alloc)
      throw std::bad_alloc();
    return static_cast&lt;T*&gt;(::operator new(size * sizeof(T)));
  } 

  void deallocate(T* p, std::size_t)
  {
    ::operator delete(p);
  }

  friend bool operator==(const AT&amp; x, const AT&amp; y) noexcept
  {
    return !x.sp.owner_before(y.sp) &amp;&amp; !y.sp.owner_before(x.sp);
  } 

  friend bool operator!=(const AT&amp; x, const AT&amp; y) noexcept 
  {
    return !(x == y);
  }

};

using A = AT&lt;P&gt;; 

int main()
{
  // Some sanity checks:
  static_assert(std::is_same_v&lt;A::template rebind&lt;A::value_type&gt;::other, A&gt;);
  // For any U:
  using U = int;
  static_assert(std::is_same_v&lt;A::template rebind&lt;U&gt;::other::template rebind&lt;A::value_type&gt;::other, A&gt;); 

  using C = std::less&lt;&gt;;
  using M = std::map&lt;K, V, C, A&gt;; 

  // As required by the current wording of the container move operator:
  using always_equal = std::allocator_traits&lt;A&gt;::is_always_equal;
  constexpr bool std_nothrow = always_equal::value &amp;&amp; std::is_nothrow_move_assignable_v&lt;C&gt;;
  static_assert(std_nothrow);

  // For conforming implementations:
  // static_assert(!(std_nothrow &amp;&amp; !std::is_nothrow_move_assignable&lt;M&gt;::value)); 

  M m{{K(), V()}}, m2;
  auto a = m.get_allocator(); 

  a.sp = std::make_shared&lt;int&gt;(42);
  stop_alloc = true;

  try
  {
    // Call terminate with conforming implementations. This does not work on libstdc++.
    m2 = std::move(m);
    // For libstdc++, terminate on allocator-extended move constructor call.
    //    M m3(std::move(m), a);
  }
  catch(...)
  {}
}
</pre></blockquote>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4830">N4830</a>.</p>

<blockquote class="note">
<p>
[<i>Drafting note:</i> Additional questions: Is it necessary to ensure that<br/>
<tt>X::propagate_on_container_copy_assignment::value == Y::propagate_on_container_copy_assignment::value</tt>?]
</p>
</blockquote>

<ol>
<li><p>Modify <sref ref="[allocator.requirements]"/>, Table [tab:cpp17.allocator] 
"<tt><i>Cpp17Allocator</i></tt> requirements" as indicated:</p>
<blockquote>
<table border="1">
<caption>Table 34 &mdash; <tt><i>Cpp17Allocator</i></tt> requirements [tab:cpp17.allocator]</caption>
<tr>
<th>Expression</th>
<th>Return type</th>
<th>Assertion&#47;note<br/>pre-&#47;post-condition</th>
<th>Default</th>
</tr>

<tr>
<td colspan="4" align="center">
<tt>&hellip;</tt>
</td>
</tr>

<tr>
<td>
<tt>typename<br/>
X::template<br/>
rebind&lt;U&gt;::other</tt>
</td>
<td>
<tt>Y</tt>
</td>
<td>
For all <tt>U</tt> (including <tt>T</tt>),<br/>
<tt>Y::template<br/>
rebind&lt;T&gt;::other</tt> is <tt>X</tt>.<br/>
<ins><tt>XX::is_always_equal::value == YY::is_always_equal::value</tt><br/>
is <tt>true</tt>.</ins>
</td>
<td>
See Note A,<br/>
below.
</td>
</tr>

<tr>
<td colspan="4" align="center">
<tt>&hellip;</tt>
</td>
</tr>

</table>
</blockquote>
</li>
</ol>

</resolution>
</issue>
