<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3111" status="Open">
<title>Too strong precondition on <code>basic_string</code> constructor</title>
<section><sref ref="[string.cons]"/></section>
<submitter>Andrzej Krzemienski</submitter>
<date>9 May 2018</date>
<priority>99</priority>

<discussion>
<p>
The following is the spec for <code>basic_string</code> constructor taking a pointer and a size in 
<a href="http://wg21.link/n4741">N4741</a> ([string.cons]/12-14):
</p>
<blockquote>
<p>
<code>basic_string(const charT* s, size_type n, const Allocator&amp; a = Allocator());</code>
</p>
<p>
<sup>(12)</sup> <em>Requires:</em> <code>s</code> points to an array of at least <code>n</code> elements of <code>charT</code>.
</p>
<p>
<sup>(13)</sup> <em>Effects:</em> Constructs an object of class <code>basic_string</code> and determines its 
initial string value from the array of <code>charT</code> of length <code>n</code> whose first element is designated 
by <code>s</code>.
</p>
<p>
<sup>(14)</sup> <em>Postconditions:</em> <code>data()</code> points at the first element of an allocated copy of 
the array whose first element is pointed at by <code>s</code>, <code>size()</code> is equal to <code>n</code>, and 
<code>capacity()</code> is a value at least as large as <code>size()</code>.
</p>
</blockquote>

<p>
This implies that passing a null pointer and a zero size to this constructor is violating the precondition, as null 
pointer cannot be described as "pointing to an array of at least <code>n</code> elements of <code>charT</code>". 
On the other hand, being able to pass <code>{nullptr, 0}</code> is essential for <code>basic_string</code> to be 
able to inter-operate with other containers that are allowed to use the null pointer value to represent sequences 
of size zero:
</p>
<blockquote><pre>
std::vector&lt;char&gt; v{};
assert(v.data() == nullptr); <em>// on some implementations</em>
std::string s(v.data(), v.size()); <em>// nullptr on some implementations</em>
</pre></blockquote>

<p>
This has been already acknowledged as a defect in issue <iref ref="2235"/> and applied, but the resolution still implies 
a too strong precondition.
</p>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>
This wording is relative to <a href="http://wg21.link/n4741">N4741</a>.
</p>

<ol>
<li>
<p>Edit <sref ref="[string.cons]"/> as indicated:</p>

<blockquote>
<pre>
basic_string(const charT* s, size_type n, const Allocator&amp; a = Allocator());
</pre>
<blockquote>
<p>
-12- <i>Requires:</i> <ins>Unless <tt>n == 0</tt>,</ins> <tt>s</tt> points to an array of at least <tt>n</tt> elements 
of <tt>charT</tt>.
<p/>
-13- <i>Effects:</i> Constructs an object of class <tt>basic_string</tt> and<ins>, unless <tt>n == 0</tt>,</ins> determines 
its initial string value from the array of <tt>charT</tt> of length <tt>n</tt> whose first element is designated by <tt>s</tt>.
<p/>
-14- <i>Postconditions:</i> <ins>If <tt>n != 0</tt>, then</ins> <tt>data()</tt> points at the first element of an allocated 
copy of the array whose first element is pointed at by <tt>s</tt><del>,</del><ins>;</ins> <tt>size()</tt> is equal to 
<tt>n</tt>, and <tt>capacity()</tt> is a value at least as large as <tt>size()</tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</blockquote>

<note>
2016-06-04 Marshall provides alternate resolution
</note>

</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4750">N4750</a>.</p>

<ol>
<li>
<p>Edit <sref ref="[string.cons]"/> as indicated:</p>
<blockquote>
<pre>
basic_string(const charT* s, size_type n, const Allocator&amp; a = Allocator());
</pre>
<blockquote>
<p>
-12- <i>Requires:</i> <ins><tt>[s, s + n)</tt> is a valid range</ins><del><tt>s</tt> points to an array of at least <tt>n</tt> elements of <tt>charT</tt></del>.
</p>
<p>
-13- <i>Effects:</i> Constructs an object of class <tt>basic_string</tt> and determines 
its initial string value from the <ins>range <tt>[s, s + n)</tt></ins><del>array of <tt>charT</tt> of length <tt>n</tt> whose first element is designated by <tt>s</tt></del>.
</p>
-14- <i>Postconditions:</i> <del><tt>data()</tt> points at the first element of an allocated 
copy of the array whose first element is pointed at by <tt>s</tt>, </del><tt>size()</tt> is equal to 
<tt>n</tt>, <del>and </del><tt>capacity()</tt> is a value at least as large as <tt>size()</tt><ins>, and <tt>traits::compare(data(), s, n) == 0</tt></ins>.
<p>
</p>
</blockquote>
</blockquote>

</li>
</ol>

</resolution>

</issue>
