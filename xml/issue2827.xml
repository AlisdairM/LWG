<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2827" status="New">
<title><tt>is_trivially_constructible</tt> and non-trivial destructors</title>
<section><sref ref="[meta.unary.prop]"/></section>
<submitter>Richard Smith </submitter>
<date>17 Nov 2016</date>
<priority>99</priority>

<discussion>
<blockquote><pre>
struct S 
{
  ~S(); // non-trivial
};

static_assert(std::is_trivially_constructible&lt;S&gt;::value, "");
</pre></blockquote>
<p>
Should the assert pass? Implementations disagree.
<p/>
Per <sref ref="[meta.unary.prop]"/>'s Table 38, this trait looks at whether the following variable definition is 
known to call no operation that is not trivial:
</p>
<blockquote><pre>
S t(create&lt;Args&gt;()...);
</pre></blockquote>
<p>
... where <tt>Args</tt> is an empty pack in this case. That variable definition results in a call to the <tt>S</tt> destructor. 
Should that call be considered by the trait?
</p>
</discussion>

<resolution>
</resolution>

</issue>
