<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2827" status="New">
<title><tt>is_trivially_constructible</tt> and non-trivial destructors</title>
<section><sref ref="[meta.unary.prop]"/></section>
<submitter>Richard Smith</submitter>
<date>17 Nov 2016</date>
<priority>3</priority>

<discussion>
<blockquote><pre>
struct S 
{
  ~S(); // non-trivial
};

static_assert(std::is_trivially_constructible&lt;S&gt;::value, "");
</pre></blockquote>
<p>
Should the assert pass? Implementations disagree.
<p/>
Per <sref ref="[meta.unary.prop]"/>'s Table 38, this trait looks at whether the following variable definition is 
known to call no operation that is not trivial:
</p>
<blockquote><pre>
S t(create&lt;Args&gt;()...);
</pre></blockquote>
<p>
... where <tt>Args</tt> is an empty pack in this case. That variable definition results in a call to the <tt>S</tt> destructor. 
Should that call be considered by the trait?
</p>

<note>2017-01-27 Telecon</note>
<p>Priority 3</p>
<p>This issue interacts with <iref ref="2116"/></p>

<note>2020-01-24; Peter Dimov comments</note>
<p>
<tt>std::is_trivially_copy_constructible_v&lt;D&gt;</tt>, where <tt>D</tt> is
</p>
<blockquote><pre>
struct D
{
  ~D() {}
};
</pre></blockquote>
<p>
reports <tt>false</tt>. This is because the definition of
<tt>is_trivially_copy_constructible</tt> requires the invented variable 
definition <tt>T t(declval&lt;Args&gt;()...);</tt>, which in our case is 
<tt>D t(declval&lt;D&gt;());</tt>, to not call any nontrivial operations.
<p/>
This is interpreted by implementations to include the destructor call,
presumably for consistency with <tt>is_nothrow_copy_constructible</tt>. 
But that's wrong; the copy constructor <em>is</em> trivial.
<p/>
As a consequence, <tt>variant&lt;D&gt;</tt> also doesn't have a trivial 
copy constructor, which causes (completely unnecessary) inefficiencies 
when said <tt>variant</tt> is copied.
</p>

<note>2023-05-25; May 2023 mailing</note>
<p>Alisdair provided <paper num="P2842R0"/>.</p>

</discussion>

<resolution>
</resolution>

</issue>
