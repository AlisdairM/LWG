<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2839" status="WP">
<title>Self-move-assignment of library types, again</title>
<section><sref ref="[lib.types.movedfrom]"/><sref ref="[res.on.arguments]"/><sref ref="[container.requirements.general]"/></section>
<submitter>Tim Song</submitter>
<date>9 Dec 2016</date>
<priority>2</priority>

<discussion>
<p>
LWG <iref ref="2468"/>'s resolution added to <tt>MoveAssignable</tt> the requirement to tolerate self-move-assignment,
but that does nothing for library types that aren't explicitly specified to meet <tt>MoveAssignable</tt> other than make
those types not meet <tt>MoveAssignable</tt> any longer.
<p/>
To realize the intent here, we need to carve out an exception to <sref ref="[res.on.arguments]"/>'s restriction for
move assignment operators and specify that self-move-assignment results in valid but unspecified state unless otherwise
specified. The proposed wording below adds that to <sref ref="[lib.types.movedfrom]"/> since it seems to fit well with the
theme of the current paragraph in that section.
<p/> In addition, to address the issue with <sref ref="[container.requirements.general]"/> noted in LWG
<iref ref="2468"/>'s discussion, the requirement tables in that subclause will need to be edited in a way similar to
LWG <iref ref="2468"/>.
</p>

<note>2017-01-27 Telecon</note>
<p>Priority 2</p>

<note>2018-1-26 issues processing telecon</note>
<p>Status to 'Open'; Howard to reword using 'MoveAssignable'.</p>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>This wording is relative to <a href="https://wg21.link/n4618">N4618</a>.</p>

<ol>
<li><p>Add a new paragraph at the end of <sref ref="[lib.types.movedfrom]"/>:</p>
<blockquote>
<p>
-1- Objects of types defined in the C++ standard library may be moved from (12.8). Move operations may be
explicitly specified or implicitly generated. Unless otherwise specified, such moved-from objects shall be
placed in a valid but unspecified state.
<p/>
<ins>-?- An object of a type defined in the C++ standard library may be move-assigned (<sref ref="[class.copy.assign]"/>)
to itself. Such an assignment places the object in a valid but unspecified state unless otherwise specified.</ins>
</p>
</blockquote>
</li>

<li><p>Add a note at the end of <sref ref="[res.on.arguments]"/>/1, bullet 3, as indicated:</p>
<blockquote>
<p>
-1- Each of the following applies to all arguments to functions defined in the C++ standard library, unless
explicitly stated otherwise.
</p>
<ol style="list-style-type: none">
<li><p>(1.1) &mdash; [&hellip;]</p></li>
<li><p>(1.2) &mdash; [&hellip;]</p></li>
<li><p>(1.3) &mdash; If a function argument binds to an rvalue reference parameter, the implementation may
assume that this parameter is a unique reference to this argument. [<i>Note:</i> If the parameter is a generic parameter
of the form <tt>T&amp;&amp;</tt> and an lvalue of type <tt>A</tt> is bound, the argument binds to an lvalue reference
(14.8.2.1) and thus is not covered by the previous sentence. &mdash; <i>end note</i>] [<i>Note:</i> If a program
casts an lvalue to an xvalue while passing that lvalue to a library function (e.g. by calling the function with the argument
<tt>std::move(x)</tt>), the program is effectively asking that function to treat that lvalue as a temporary.
The implementation is free to optimize away aliasing checks which might be needed if the argument
was an lvalue. &mdash; <i>end note</i>] <ins>[<i>Note:</i> This does not apply to the argument passed to a
move assignment operator (<sref ref="[lib.types.movedfrom]"/>). &mdash; <i>end note</i>]</ins></p></li>
</ol>
</blockquote>
</li>

<li><p>Edit Table 83 "Container requirements" in <sref ref="[container.requirements.general]"/> as indicated:</p>
<blockquote>
<table border="1">
<caption>Table 83 &mdash; Container requirements</caption>
<tr>
<th>Expression</th>
<th>Return type</th>
<th>Operational<br/>semantics</th>
<th>Assertion&#47;note<br/>pre-&#47;post-condition</th>
<th>Complexity</th>
</tr>

<tr>
<td colspan="5" align="center">
<tt>&hellip;</tt>
</td>
</tr>

<tr>
<td><tt>a = rv</tt></td>
<td><tt>T&amp;</tt></td>
<td>All existing elements of <tt>a</tt><br/>
are either move<br/>
assigned to or<br/>
destroyed</td>
<td><ins>post: If <tt>a</tt> and <tt>rv</tt> do not refer to the same object,</ins><br/>
<tt>a</tt> shall be equal to the value that<br/>
<tt>rv</tt> had before this assignment</td>
<td>linear</td>
</tr>

<tr>
<td colspan="5" align="center">
<tt>&hellip;</tt>
</td>
</tr>

</table>
</blockquote>
</li>

<li><p>Edit Table 86 "Allocator-aware container requirements" in <sref ref="[container.requirements.general]"/> as indicated:</p>
<blockquote>
<table border="1">
<caption>Table 86 &mdash;  Allocator-aware container requirements</caption>
<tr>
<th>Expression</th>
<th>Return type</th>
<th>Assertion&#47;note<br/>pre-&#47;post-condition</th>
<th>Complexity</th>
</tr>
<tr>
<td colspan="4" align="center">
<tt>&hellip;</tt>
</td>
</tr>
<tr>
<td><tt>a = rv</tt></td>
<td><tt>T&amp;</tt></td>
<td>
<i>Requires</i>: If <tt>allocator_traits&lt;allocator_type<br/>
&gt;::propagate_on_container_move_assignment::value</tt><br/>
is <tt>false</tt>, <tt>T</tt> is <tt>MoveInsertable</tt><br/>
into <tt>X</tt> and <tt>MoveAssignable</tt>.<br/>
All existing elements of <tt>a</tt> are either<br/>
move assigned to or destroyed.<br/>
post: <ins>If <tt>a</tt> and <tt>rv</tt> do not refer<br/>
to the same object,</ins> <tt>a</tt> shall be equal<br/>
to the value that <tt>rv</tt> had before this assignment</td>
<td>linear</td>
</tr>
<tr>
<td colspan="4" align="center">
<tt>&hellip;</tt>
</td>
</tr>
</table>
</blockquote>
</li>
</ol>
</blockquote>

<note>2018-08-16, Howard comments and provides updated wording</note>
<p>
I agreed to provide proposed wording for LWG 2839 that was reworded to use <tt>MoveAssignable</tt>. The advantage of
this is that <tt>MoveAssignable</tt> specifies the self-assignment case, thus we do not need to repeat ourselves.
</p>

<note>2018-08-23 Batavia Issues processing</note>
<p>Howard and Tim to discuss a revised P/R.</p>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>This wording is relative to <a href="https://wg21.link/n4762">N4762</a>.</p>
<ol>
<li><p>Add a new subsection to <sref ref="[conforming]"/> after <sref ref="[member.functions]"/>:</p>
<blockquote>
<p>
<ins><b>Special members [conforming.special]</b></ins>
<p/>
<ins>Class types defined by the C++ standard library and specified to be default constructible, move constructible,
copy constructible, move assignable, copy assignable, or destructible, shall meet the associated requirements
<i>Cpp17DefaultConstructible</i>, <i>Cpp17MoveConstructible</i>, <i>Cpp17CopyConstructible</i>,
<i>Cpp17MoveAssignable</i>, <i>Cpp17CopyAssignable</i>, and <i>Cpp17Destructible</i>, respectively
(<sref ref="[utility.arg.requirements]"/>).</ins>
</p>
</blockquote>
</li>
</ol>
</blockquote>

<note>2020-06-06 Tim restores and updates P/R following 2020-05-29 telecon discussion</note>
<p>The standard doesn't define phrases like "default constructible" used in the
previous P/R. Moreover, the library provides a variety of wrapper types, and
whether these types meet the semantic requirements of <i>Cpp17Meowable</i>
(and maybe even syntactic, depending on how "copy constructible" is interpreted)
depends on the property of their underlying wrapped types, which might not even
be an object type (e.g., <tt>tuple</tt> or <tt>pair</tt> of references). This is
a large can of worms (see LWG <iref ref="2146"/>) that we don't want to get into.
<p/>
There is a suggestion in the telecon to blanket-exempt move-assignment operators from
the <sref ref="[res.on.arguments]"/> 1.3 requirement. The revised wording below
does not do so, as that would carve out not just self-move-assignment but also
other aliasing scenarios in which the target object owns the source object.
Whether such scenarios should be permitted is outside the scope of this issue,
though notably <tt>assignable_from</tt> (<sref ref="[concept.assignable]"/>)
contains a note alluding to these cases and suggesting that they should be
considered to be outside the domain of <tt>=</tt> entirely.
</p>

<note>2020-07-17; issue processing telecon</note>
<p>
LWG reviewed the latest proposed resolution.
Unanimous consent to move to Ready.
</p>
<note>2020-11-09 Approved In November virtual meeting. Status changed: Ready &rarr; WP.</note>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4861">N4861</a>.</p>

<ol>
<li><p>Add a new paragraph at the end of <sref ref="[lib.types.movedfrom]"/>:</p>
<blockquote>
<p>
-1- Objects of types defined in the C++ standard library may be moved from
(<sref ref="[clss.copy.ctor]"/>). Move operations may be explicitly specified or
implicitly generated. Unless otherwise specified, such moved-from objects shall
be placed in a valid but unspecified state.
<p/>
<ins>-?- An object of a type defined in the C++ standard library may be
move-assigned (<sref ref="[class.copy.assign]"/>) to itself. Unless otherwise
specified, such an assignment places the object in a valid but unspecified state.</ins>
</p>
</blockquote>
</li>

<li><p>Edit <sref ref="[res.on.arguments]"/>/1, bullet 3, as indicated:</p>
<blockquote>
<p>
-1- Each of the following applies to all arguments to functions defined in the C++ standard library, unless
explicitly stated otherwise.
</p>
<ol style="list-style-type: none">
<li><p>(1.1) &mdash; [&hellip;]</p></li>
<li><p>(1.2) &mdash; [&hellip;]</p></li>
<li><p>(1.3) &mdash; If a function argument binds to an rvalue reference parameter, the implementation may
assume that this parameter is a unique reference to this argument<ins>, except that the argument passed to a
move-assignment operator may be a reference to <tt>*this</tt> (<sref ref="[lib.types.movedfrom]"/>)</ins>.
[<i>Note:</i> If the <ins>type of a</ins> parameter is a <del>generic parameter
of the form <tt>T&amp;&amp;</tt> and an lvalue of type <tt>A</tt> is bound, the argument binds to an lvalue reference
(<sref ref="[temp.deduct.call]"/>) and thus is not covered by the previous sentence.</del>
<ins>forwarding reference (<sref ref="[temp.deduct.call]"/>) that is deduced to an lvalue reference type,
then the argument is not bound to an rvalue reference.</ins> &mdash; <i>end note</i>] [<i>Note:</i> If a program
casts an lvalue to an xvalue while passing that lvalue to a library function (e.g. by calling the function with the argument
<tt>std::move(x)</tt>), the program is effectively asking that function to treat that lvalue as a temporary.
The implementation is free to optimize away aliasing checks which might be needed if the argument
was an lvalue. &mdash; <i>end note</i>]</p></li>
</ol>
</blockquote>
</li>

<li><p>Edit Table 73 "Container requirements" in <sref ref="[container.requirements.general]"/> as indicated:</p>
<blockquote>
<table border="1">
<caption>Table 73 &mdash; Container requirements</caption>
<tr>
<th>Expression</th>
<th>Return type</th>
<th>Operational<br/>semantics</th>
<th>Assertion&#47;note<br/>pre-&#47;post-condition</th>
<th>Complexity</th>
</tr>

<tr>
<td colspan="5" align="center">
<tt>&hellip;</tt>
</td>
</tr>

<tr>
<td><tt>a = rv</tt></td>
<td><tt>T&amp;</tt></td>
<td>All existing elements of <tt>a</tt> are either move assigned to or destroyed</td>
<td><i>Postconditions:</i>
<ins>If <tt>a</tt> and <tt>rv</tt> do not refer to the same object,</ins>
<tt>a</tt> is equal to the value that <tt>rv</tt> had before this assignment<ins>.</ins></td>
<td>linear</td>
</tr>

<tr>
<td colspan="5" align="center">
<tt>&hellip;</tt>
</td>
</tr>

</table>
</blockquote>
</li>

<li><p>Edit Table 76 "Allocator-aware container requirements" in <sref ref="[container.requirements.general]"/> as indicated:</p>
<blockquote>
<table border="1">
<caption>Table 86 &mdash;  Allocator-aware container requirements</caption>
<tr>
<th>Expression</th>
<th>Return type</th>
<th>Assertion&#47;note<br/>pre-&#47;post-condition</th>
<th>Complexity</th>
</tr>
<tr>
<td colspan="4" align="center">
<tt>&hellip;</tt>
</td>
</tr>
<tr>
<td><tt>a = rv</tt></td>
<td><tt>T&amp;</tt></td>
<td>
<i>Preconditions</i>: If <tt>allocator_traits&lt;allocator_type&gt;<br/>
::propagate_on_container_move_assignment::value</tt> is <tt>false</tt>,<br/>
<tt>T</tt> is <i>Cpp17MoveInsertable</i>
into <tt>X</tt> and <i>Cpp17MoveAssignable</i>.<br/>
<i>Effects:</i> All existing elements of <tt>a</tt> are either
move assigned to or destroyed.<br/>
<i>Postconditions:</i> <ins>If <tt>a</tt> and <tt>rv</tt> do not refer
to the same object,</ins> <tt>a</tt> is equal
to the value that <tt>rv</tt> had before this assignment.</td>
<td>linear</td>
</tr>
<tr>
<td colspan="4" align="center">
<tt>&hellip;</tt>
</td>
</tr>
</table>
</blockquote>
</li>
</ol>

</resolution>

</issue>
