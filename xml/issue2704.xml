<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2704" status="New">
<title><tt>recursive_directory_iterator</tt>'s members should require '<tt>*this</tt> is dereferenceable'</title>
<section><sref ref="[rec.dir.itr.members]"/><sref ref="[directory_iterator.members]"/></section>
<submitter>Eric Fiselier</submitter>
<date>8 May 2016</date>
<priority>1</priority>

<discussion>
<p>
In <sref ref="[rec.dir.itr.members]"/> the following members are specified as having the requirement 
"<tt>*this != recursive_directory_iterator{}</tt>":
</p>
<ul>
<li><p><tt>options()</tt></p></li>
<li><p><tt>depth()</tt></p></li>
<li><p><tt>recursion_pending()</tt></p></li>
<li><p><tt>operator++</tt></p></li>
<li><p><tt>increment(...)</tt></p></li>
<li><p><tt>pop()</tt></p></li>
<li><p><tt>disable_recursion_pending()</tt></p></li>
</ul>
<p>
This requirement is not strong enough since it still allows non-dereferenceable iterators to invoke these methods. 
For example:
</p>
<blockquote><pre>
recursive_directory_iterator it(".");
recursive_directory_iterator it_copy(it);
assert(it_copy.depth() == 0); // OK
++it;
assert(it_copy.depth() == ???); // Not OK
auto x = *it_copy; // Is this OK?
</pre></blockquote>
<p>
I believe these should instead require that <tt>*this</tt> is dereferenceable, however the current specification 
seems to say that all previous copies of <tt>it</tt> are still dereferenceable although not what they dereference to.
<p/>
[class.directory_iterator] p4:
</p>
<blockquote class="note">
<p>
The result of <tt>operator*</tt> on an end iterator is undefined behavior. For any other iterator value a <tt>const 
recursive_directory_entry&amp;</tt> is returned. The result of <tt>operator-&gt;</tt> on an end iterator is 
undefined behavior. For any other iterator value a <tt>const directory_entry*</tt> is returned.
</p>
</blockquote>
<p>
Is the intention of this clause to make all non-end iterators dereferenceable?
<p/>
One further complication with these methods comes from the specification of <tt>recursive_directory_iterator</tt>'s 
copy/move constructors and assignment operators which specify the following post conditions:
</p>
<ul>
<li><p><tt>this->options() == rhs.options()</tt></p></li>
<li><p><tt>this->depth() == rhs.depth()</tt></p></li>
<li><p><tt>this->recursion_pending() == rhs.recursion_pending()</tt></p></li>
</ul>
<p>
If <tt>rhs</tt> is the end iterator these post conditions are poorly stated.
</p>
</discussion>

<resolution>
<p>
This wording is relative to N4582.
</p>

<blockquote class="note">
<p>
[<i>Drafting note</i>: I have not attempted to fix the specification of the copy/move constructors and assignment 
operators for <tt>recursive_directory_iterator</tt>]
</p>
</blockquote>

<ol>
<li><p>Change <sref ref="[class.directory_iterator]"/> p4 as indicated:</p>
<blockquote class="note">
<p>
[<i>Drafting note</i>: The semantics of <tt>operator*()</tt> and <tt>operator-&gt;</tt> seem to be sufficiently 
specified by the <tt>InputIterator</tt> requirements and the specification of the members so the previous paragraph 
seems redundant. Note that the old language for this section seems to be taken from [istream.iterator], 
so maybe it's needed?
<p/>
Additionally the <tt>increment</tt> method specification references the <tt>InputIterator</tt> requirements directly, 
which would imply invalidation of copies. However the <tt>InputIterator</tt> requirements only say that copies 
"are not required to be dereferenceable", Is more explicit language needed?]
</p>
</blockquote>

<blockquote><p>
-4- <del>The result of <tt>operator*</tt> on an end iterator is undefined behavior. For any other iterator value a <tt>const
directory_entry&amp;</tt> is returned. The result of <tt>operator-&gt;</tt> on an end iterator is undefined behavior. 
For any other iterator value a <tt>const directory_entry*</tt> is returned</del><ins>The end iterator is not 
dereferenceable</ins>.
</p></blockquote>
</li>

<li><p>Insert a new clause before <sref ref="[directory_iterator.members]"/> p10:</p>

<blockquote>
<pre>
directory_iterator&amp; operator++();
directory_iterator&amp; increment(error_code&amp; ec) noexcept;
</pre>
<blockquote>
<p>
<ins>-?- <i>Requires</i>: <tt>*this</tt> shall be dereferenceable.</ins>
</p>
</blockquote>
</blockquote>
</li>

<li><p>Change <sref ref="[rec.dir.itr.members]"/> as indicated:</p>

<blockquote>
<pre>
directory_options options() const;
</pre>
<blockquote>
<p>
-17- <i>Requires</i>: <ins><tt>*this</tt> shall be dereferenceable</ins><del><tt>*this != recursive_directory_iterator()</tt></del>.
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
int depth() const;
</pre>
<blockquote>
<p>
-20- <i>Requires</i>: <ins><tt>*this</tt> shall be dereferenceable</ins><del><tt>*this != recursive_directory_iterator()</tt></del>.
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
bool recursion_pending() const;
</pre>
<blockquote>
<p>
-23- <i>Requires</i>: <ins><tt>*this</tt> shall be dereferenceable</ins><del><tt>*this != recursive_directory_iterator()</tt></del>.
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
recursive_directory_iterator&amp; operator++();
recursive_directory_iterator&amp; increment(error_code&amp; ec) noexcept;
</pre>
<blockquote>
<p>
-26- <i>Requires</i>: <ins><tt>*this</tt> shall be dereferenceable</ins><del><tt>*this != recursive_directory_iterator()</tt></del>.
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
void pop();
</pre>
<blockquote>
<p>
-30- <i>Requires</i>: <ins><tt>*this</tt> shall be dereferenceable</ins><del><tt>*this != recursive_directory_iterator()</tt></del>.
<p/>
[&hellip;]
</p>
</blockquote>
<pre>
void disable_recursion_pending();
</pre>
<blockquote>
<p>
-32- <i>Requires</i>: <ins><tt>*this</tt> shall be dereferenceable</ins><del><tt>*this != recursive_directory_iterator()</tt></del>.
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
