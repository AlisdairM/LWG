<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3195" status="New">
<title>What is the stored pointer value of an empty <tt>weak_ptr</tt>?</title>
<section><sref ref="[util.smartptr.weak.const]"/></section>
<submitter>Casey Carter</submitter>
<date>15 Mar 2019</date>
<priority>99</priority>

<discussion>
<p>
<sref ref="[util.smartptr.weak.const]"/> specifies <tt>weak_ptr</tt>'s default constructor:
</p>
<blockquote>
<pre>
constexpr weak_ptr() noexcept;
</pre>
<blockquote>
<p>
1 <i>Effects:</i> Constructs an empty <tt>weak_ptr</tt> object.
<p/>
2 <i>Ensures:</i> <tt>use_count() == 0</tt>.
</p>
</blockquote>
</blockquote>
<p>
and <tt>shared_ptr</tt> converting constructor template:
</p>
<blockquote>
<pre>
weak_ptr(const weak_ptr&amp; r) noexcept;
template&lt;class Y&gt; weak_ptr(const weak_ptr&lt;Y&gt;&amp; r) noexcept;
template&lt;class Y&gt; weak_ptr(const shared_ptr&lt;Y&gt;&amp; r) noexcept;
</pre>
<blockquote>
<p>
3 <i>Remarks:</i> The second and third constructors shall not participate in overload resolution unless <tt>Y*</tt> is
compatible with <tt>T*</tt>.
<p/>
4 <i>Effects:</i> If <tt>r</tt> is empty, constructs an empty <tt>weak_ptr</tt> object; otherwise, constructs a
<tt>weak_ptr</tt> object that shares ownership with <tt>r</tt> and stores a copy of the pointer stored in <tt>r</tt>.
<p/>
5 <i>Ensures:</i> <tt>use_count() == r.use_count()</tt>.
</p>
</blockquote>
</blockquote>
<p>
Note that neither specifies the value of the stored pointer when the resulting <tt>weak_ptr</tt> is empty.
This didn't matter &mdash; the stored pointer value was unobservable for an empty <tt>weak_ptr</tt> &mdash;
until we added <tt>atomic&lt;weak_ptr&gt;</tt>. <sref ref="[util.smartptr.atomic.weak]"/>/15 says:
</p>
<blockquote>
<p>
<i>Remarks:</i> Two <tt>weak_ptr</tt> objects are equivalent if they store the same pointer value and either
share ownership, or both are empty. The weak form may fail spuriously. See <sref ref="[atomics.types.operations]"/>.
</p>
</blockquote>
<p>
Two empty <tt>weak_ptr</tt> objects that store different pointer values are not equivalent. We <em>could</em>
correct this by changing <sref ref="[util.smartptr.atomic.weak]"/>/15 to "Two <tt>weak_ptr</tt> objects are
equivalent if they are both empty, or if they share ownership and store the same pointer value." In practice,
an implementation of <tt>atomic&lt;weak_ptr&gt;</tt> will CAS on both the ownership (control block pointer)
and stored pointer value, so it seems cleaner to pin down the stored pointer value of an empty <tt>weak_ptr</tt>.
</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4800">N4800</a>.</p>

<ol>
<li><p>Modify <sref ref="[util.smartptr.weak.const]"/> as indicated (note the drive-by edit to cleanup the occurrences of "constructs
an object of class foo"):</p>

<blockquote><pre>
constexpr weak_ptr() noexcept;
</pre>
<blockquote>
<p>
-1- <i>Effects:</i> Constructs an empty <del><tt>weak_ptr</tt></del> object <ins>that stores a null pointer value</ins>.
<p/>
-2- <i>Ensures:</i> <tt>use_count() == 0</tt>.
</p>
</blockquote>
<pre>
weak_ptr(const weak_ptr&amp; r) noexcept;
template&lt;class Y&gt; weak_ptr(const weak_ptr&lt;Y&gt;&amp; r) noexcept;
template&lt;class Y&gt; weak_ptr(const shared_ptr&lt;Y&gt;&amp; r) noexcept;
</pre>
<blockquote>
<p>
-3- <i>Remarks:</i> The second and third constructors shall not participate in overload resolution unless <tt>Y*</tt> is
compatible with <tt>T*</tt>.
<p/>
-4- <i>Effects:</i> If <tt>r</tt> is empty, constructs an empty <del><tt>weak_ptr</tt></del> object <ins>that stores a
null pointer value</ins>; otherwise, constructs a <tt>weak_ptr</tt> object that shares ownership with <tt>r</tt>
and stores a copy of the pointer stored in <tt>r</tt>.
<p/>
-5- <i>Ensures:</i> <tt>use_count() == r.use_count()</tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>
</issue>
