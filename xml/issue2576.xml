<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2576" status="C++17">
<title><tt>istream_iterator</tt> and <tt>ostream_iterator</tt> should use <tt>std::addressof</tt></title>
<section><sref ref="[stream.iterators]"/></section>
<submitter>Tim Song</submitter>
<date>1 Jan 2016</date>
<priority>0</priority>

<discussion>
<p>
To defend against overloaded unary <tt>&amp;</tt>. This includes the constructors of both iterators, and 
<tt>istream_iterator::operator-&gt;</tt>.
<p/>
Note that <tt>{i,o}stream_type</tt> are specializations of <tt>basic_{i,o}stream</tt>, but the constructors might still 
pick up an overloaded <tt>&amp;</tt> via the <tt>traits</tt> template parameter. This change also provides consistency 
with <tt>std::experimental::ostream_joiner</tt> (which uses <tt>std::addressof</tt>).
</p>

<note>2016-02, Issues Telecon</note>
<p>
P0; move to Tentatively Ready.
</p>
</discussion>

<resolution>
<p>
This wording is relative to N4567.
</p>

<ol>
<li><p>Edit <sref ref="[istream.iterator.cons]"/>/3+4 as indicated:</p>

<blockquote>
<pre>
istream_iterator(istream_type&amp; s);
</pre>
<blockquote>
<p>
-3- <i>Effects</i>: Initializes <tt>in_stream</tt> with <tt><del>&amp;s</del><ins>addressof(s)</ins></tt>. <tt>value</tt> 
may be initialized during construction or the first time it is referenced.
<p/>
-4- <i>Postcondition</i>: <tt>in_stream == <del>&amp;s</del><ins>addressof(s)</ins></tt>.
</p>
</blockquote>
</blockquote>

</li>

<li><p>Edit <sref ref="[istream.iterator.ops]"/>/2 as indicated:</p>

<blockquote>
<pre>
const T* operator-&gt;() const;
</pre>
<blockquote>
<p>
-2- <i>Returns</i>: <tt><del>&amp;</del><ins>addressof</ins>(operator*())</tt>.
</p>
</blockquote>
</blockquote>

</li>

<li><p>Edit <sref ref="[ostream.iterator.cons.des]"/>/1+2 as indicated:</p>

<blockquote>
<pre>
ostream_iterator(ostream_type&amp; s);
</pre>
<blockquote>
<p>
-1- <i>Effects</i>: Initializes <tt>out_stream</tt> with <tt><del>&amp;s</del><ins>addressof(s)</ins></tt> and 
<tt>delim</tt> with null.
</p>
</blockquote>
<pre>
ostream_iterator(ostream_type&amp; s, const charT* delimiter);
</pre>
<blockquote>
<p>
-2- <i>Effects</i>: Initializes <tt>out_stream</tt> with <tt><del>&amp;s</del><ins>addressof(s)</ins></tt> and 
<tt>delim</tt> with <tt>delimiter</tt>.
</p>
</blockquote>
</blockquote>

</li>

</ol>
</resolution>

</issue>
