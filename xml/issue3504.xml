<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3504" status="New">
<title><tt>condition_variable::wait_for</tt> is overspecified</title>
<section><sref ref="[thread.condition.condvar]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>18 Nov 2020</date>
<priority>3</priority>

<discussion>
<p>
<sref ref="[thread.condition.condvar]"/> p24 says:
</p>
<blockquote><p>
<i>Effects:</i> Equivalent to: <tt>return wait_until(lock, chrono::steady_clock::now() + rel_time);</tt>
</p></blockquote>
<p>
This is overspecification, removing implementer freedom to make <tt>cv.wait_for(duration&lt;float&gt;(1))</tt> work accurately.
<p/>
The type of <tt>steady_clock::now() + duration&lt;float&gt;(n)</tt> is <tt>time_point&lt;steady_clock, 
duration&lt;float, steady_clock::period&gt;&gt;</tt>. If the steady clock's period is <tt>std::nano</tt> 
and its epoch is the time the system booted, then in under a second a 32-bit <tt>float</tt> becomes unable 
to exactly represent those <tt>time_points</tt>! Every second after boot makes <tt>duration&lt;float, nano&gt;</tt> 
less precise.
<p/>
This means that adding a <tt>duration&lt;float&gt;</tt> to a <tt>time_point</tt> (or <tt>duration</tt>) 
measured in nanoseconds is unlikely to produce an accurate value. Either it will round down to a value less 
than <tt>now()</tt>, or round up to one greater than <tt>now() + 1s</tt>. Either way, the <tt>wait_for(rel_time)</tt> 
doesn't wait for the specified time, and users think the implementation is faulty.
<p/>
A possible solution is to use <tt>steady_clock::now() + ceil&lt;steady_clock::duration&gt;(rel_time)</tt> 
instead. This converts the relative time to a suitably large integer, and then the addition is not affected 
by floating-point rounding errors due to the limited precision of 32-bit <tt>float</tt>. Libstdc++ has been 
doing this for nearly three years. Alternatively, the standard could just say that the relative timeout is 
converted to an absolute timeout measured against the steady clock, and leave the details to the implementation. 
Some implementations might not be affected by the problem (e.g. if the steady clock measures milliseconds, 
or processes only run for a few seconds and use the process start as the steady clock's epoch).
<p/>
This also affects the other overload of <tt>condition_variable::wait_for</tt>, and both overloads of 
<tt>condition_variable_any::wait_for</tt>.
</p>

<note>2020-11-29; Reflector prioritization</note>
<p>
Set priority to 3 during reflector discussions.
</p>
</discussion>

<resolution>
</resolution>

</issue>
