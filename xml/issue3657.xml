<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3657" status="C++23">
<title><tt>std::hash&lt;std::filesystem::path&gt;</tt> is not enabled</title>
<section><sref ref="[fs.class.path]"/></section>
<submitter>Jiang An</submitter>
<date>02 Jan 2022</date>
<priority>99</priority>

<discussion>
<p>
The hash support of <tt>std::filesystem::path</tt> is provided by <tt>std::filesystem::hash_value</tt>, 
but the specialization <tt>std::hash&lt;std::filesystem::path&gt;</tt> is currently disabled. IMO the 
specialization should be enabled, and its <tt>operator()</tt> should return the same value as <tt>hash_value</tt>.
</p>

<note>2022-01-15; Daniel provides wording</note>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>
This wording is relative to <paper num="N4901"/>. 
</p>

<ol>
<li><p>Modify <sref ref="[fs.filesystem.syn]"/>, header <tt>&lt;filesystem&gt;</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
#include &lt;compare&gt; <i>// see <sref ref="[compare.syn]"/></i>

namespace std::filesystem {
  <i>// <sref ref="[fs.class.path]"/>, paths</i>
  class path;

  <i>// <sref ref="[fs.path.nonmember]"/>, path non-member functions</i>
  void swap(path&amp; lhs, path&amp; rhs) noexcept;
  size_t hash_value(const path&amp; p) noexcept;

  [&hellip;]
}

<ins><i>// [fs.path.hash], hash support</i>
namespace std {
  template&lt;class T&gt; struct hash;
  template&lt;&gt; struct hash&lt;filesystem::path&gt;;
}
</ins>
</pre>
</blockquote>
</li>

<li><p>Following subclause <sref ref="[fs.path.nonmember]"/>, introduce a new subclause [fs.path.hash], as indicated:</p>

<blockquote>
<p>
<ins><b>29.12.6.? Hash support [fs.path.hash]</b></ins>
</p>
<pre>
<ins>template&lt;&gt; struct hash&lt;filesystem::path&gt;;</ins>
</pre>
<blockquote>
<p>
<ins>-?- For an object <tt>p</tt> of type <tt>filesystem::path</tt>, <tt>hash&lt;filesystem::path&gt;()(p)</tt> 
shall evaluate to the same result as <tt>hash_value(p)</tt>.</ins>
</p>
</blockquote>
</blockquote>
</li>
</ol>
</blockquote>

<note>2022-01-18; Daniel improves wording based on reflector discussion feedback</note>

<note>2022-01-30; Reflector poll</note>
<p>
Set status to Tentatively Ready after five votes in favour during reflector poll.
</p>

<note>2022-02-10 Approved at February 2022 virtual plenary. Status changed: Tentatively Ready &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4901"/>. 
</p>

<ol>
<li><p>Modify <sref ref="[fs.filesystem.syn]"/>, header <tt>&lt;filesystem&gt;</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
#include &lt;compare&gt; <i>// see <sref ref="[compare.syn]"/></i>

namespace std::filesystem {
  <i>// <sref ref="[fs.class.path]"/>, paths</i>
  class path;

  <i>// <sref ref="[fs.path.nonmember]"/>, path non-member functions</i>
  void swap(path&amp; lhs, path&amp; rhs) noexcept;
  size_t hash_value(const path&amp; p) noexcept;

  [&hellip;]
}

<ins><i>// [fs.path.hash], hash support</i>
namespace std {
  template&lt;class T&gt; struct hash;
  template&lt;&gt; struct hash&lt;filesystem::path&gt;;
}
</ins>
</pre>
</blockquote>
</li>

<li><p>Following subclause <sref ref="[fs.path.nonmember]"/>, introduce a new subclause [fs.path.hash], as indicated:</p>

<blockquote>
<p>
<ins><b>29.12.6.? Hash support [fs.path.hash]</b></ins>
</p>
<pre>
<ins>template&lt;&gt; struct hash&lt;filesystem::path&gt;;</ins>
</pre>
<blockquote>
<p>
<ins>-?- For an object <tt>p</tt> of type <tt>filesystem::path</tt>, <tt>hash&lt;filesystem::path&gt;()(p)</tt> 
evaluates to the same result as <tt>filesystem::hash_value(p)</tt>.</ins>
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
