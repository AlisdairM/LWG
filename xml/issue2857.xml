<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2857" status="C++17">
<title><tt>{variant,optional,any}::emplace</tt> should return the constructed value</title>
<section><sref ref="[optional]"/><sref ref="[variant]"/><sref ref="[any]"/></section>
<submitter>Zhihao Yuan</submitter>
<date>25 Jan 2017</date>
<priority>1</priority>

<discussion>
<p>
When you want to continue operate on the new contained object constructed by <tt>emplace</tt>, you probably 
don't want to go through the type-safe machinery again.
</p>

<note>2017-01-27 Telecon</note>
<p>Priority 1; send to LEWG.</p>

<note>Kona 2017-03-02</note>
<p>Accepted as Immediate because P1.</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4618">N4618</a>.</p>

<ol>
<li><p>Update the following signatures in <sref ref="[optional.optional]"/>, class template <tt>optional</tt> synopsis, 
as indicated:</p>

<blockquote>
<pre>
[&hellip;]
<i>// <sref ref="[optional.assign]"/>, assignment</i>
[&hellip;]
template &lt;class... Args&gt; <del>void</del><ins>T&amp;</ins> emplace(Args&amp;&amp;...);
template &lt;class U, class... Args&gt;
  <del>void</del><ins>T&amp;</ins> emplace(initializer_list&lt;U&gt;, Args&amp;&amp;...);
[&hellip;]
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[optional.assign]"/> as indicated:</p>
<blockquote>
<pre>
template &lt;class... Args&gt; <del>void</del><ins>T&amp;</ins> emplace(Args&amp;&amp;... args);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-27- <i>Postconditions:</i> <tt>*this</tt> contains a value.
<p/>
<ins>-?- <i>Returns:</i> A reference to the new contained value.</ins>
<p/>
-28- <i>Throws:</i> Any exception thrown by the selected constructor of <tt>T</tt>.
</p>
</blockquote>
<pre>
template &lt;class U, class... Args&gt; <del>void</del><ins>T&amp;</ins> emplace(initializer_list&lt;U&gt; il, Args&amp;&amp;... args);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-31- <i>Postconditions:</i> <tt>*this</tt> contains a value.
<p/>
<ins>-?- <i>Returns:</i> A reference to the new contained value.</ins>
<p/>
-32- <i>Throws:</i> Any exception thrown by the selected constructor of <tt>T</tt>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify the following signatures in <sref ref="[variant.variant]"/>, class template <tt>variant</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
[&hellip;]
<i>// <sref ref="[variant.mod]"/>, modifiers</i>
template &lt;class T, class... Args&gt; <del>void</del><ins>T&amp;</ins> emplace(Args&amp;&amp;...);
template &lt;class T, class U, class... Args&gt;
  <del>void</del><ins>T&amp;</ins> emplace(initializer_list&lt;U&gt;, Args&amp;&amp;...);
template &lt;size_t I, class... Args&gt; <del>void</del><ins>variant_alternative_t&lt;I, variant&lt;Types...&gt;&gt;&amp;</ins> emplace(Args&amp;&amp;...);
template &lt;size_t I, class U, class... Args&gt;
  <del>void</del><ins>variant_alternative_t&lt;I, variant&lt;Types...&gt;&gt;&amp;</ins> emplace(initializer_list&lt;U&gt;, Args&amp;&amp;...);
[&hellip;]
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[variant.mod]"/> as indicated:</p>

<blockquote>
<pre>
template &lt;class T, class... Args&gt; <del>void</del><ins>T&amp;</ins> emplace(Args&amp;&amp;... args);
</pre>
<blockquote>
<p>
-1- <i>Effects:</i> Equivalent to <tt><ins>return</ins> emplace&lt;<i>I</i>&gt;(std::forward&lt;Args&gt;(args)...)<ins>;</ins></tt> 
where <tt><i>I</i></tt> is the zero-based index of <tt>T</tt> in <tt>Types...</tt>.
<p/>
[&hellip;]
</p>
</blockquote>

<pre>
template &lt;class T, class U, class... Args&gt;
  <del>void</del><ins>T&amp;</ins> emplace(initializer_list&lt;U&gt; il, Args&amp;&amp;... args);
</pre>
<blockquote>
<p>
-3- <i>Effects:</i> Equivalent to <tt><ins>return</ins> emplace&lt;<i>I</i>&gt;(il, std::forward&lt;Args&gt;(args)...)<ins>;</ins></tt> 
where <tt><i>I</i></tt> is the zero-based index of <tt>T</tt> in <tt>Types...</tt>.
<p/>
[&hellip;]
</p>
</blockquote>

<pre>
template &lt;size_t I, class... Args&gt; <del>void</del><ins>variant_alternative_t&lt;I, variant&lt;Types...&gt;&gt;&amp;</ins> emplace(Args&amp;&amp;... args);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-7- <i>Postconditions:</i> <tt>index()</tt> is <tt>I</tt>.
<p/>
<ins>-?- <i>Returns:</i> A reference to the new contained value.</ins>
<p/>
-8- <i>Throws:</i> Any exception thrown during the initialization of the contained value.
<p/>
[&hellip;]
</p>
</blockquote>

<pre>
template &lt;size_t I, class U, class... Args&gt;
  <del>void</del><ins>variant_alternative_t&lt;I, variant&lt;Types...&gt;&gt;&amp;</ins> emplace(initializer_list&lt;U&gt; il, Args&amp;&amp;... args);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-12- <i>Postconditions:</i> <tt>index()</tt> is <tt>I</tt>.
<p/>
<ins>-?- <i>Returns:</i> A reference to the new contained value.</ins>
<p/>
-13- <i>Throws:</i> Any exception thrown during the initialization of the contained value.
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify the following signatures in <sref ref="[any.class]"/>, class <tt>any</tt> synopsis, as indicated:</p>
<blockquote>
<pre>
[&hellip;]
<i>// <sref ref="[any.modifiers]"/>, modifiers</i>
template &lt;class ValueType, class... Args&gt;
  <del>void</del><ins>decay_t&lt;ValueType&gt;&amp;</ins> emplace(Args&amp;&amp; ...);
template &lt;class ValueType, class U, class... Args&gt;
  <del>void</del><ins>decay_t&lt;ValueType&gt;&amp;</ins> emplace(initializer_list&lt;U&gt;, Args&amp;&amp;...);
[&hellip;]
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[any.modifiers]"/> as indicated:</p>
<blockquote>
<pre>
template &lt;class ValueType, class... Args&gt;
  <del>void</del><ins>decay_t&lt;ValueType&gt;&amp;</ins> emplace(Args&amp;&amp;... args);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-4- <i>Postconditions:</i> <tt>*this</tt> contains a value.
<p/>
<ins>-?- <i>Returns:</i> A reference to the new contained value.</ins>
<p/>
-5- <i>Throws:</i> Any exception thrown by the selected constructor of <tt>T</tt>.
<p/>
[&hellip;]
</p>
</blockquote>

<pre>
template &lt;class ValueType, class U, class... Args&gt;
  <del>void</del><ins>decay_t&lt;ValueType&gt;&amp;</ins> emplace(initializer_list&lt;U&gt; il, Args&amp;&amp;... args);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-10- <i>Postconditions:</i> <tt>*this</tt> contains a value.
<p/>
<ins>-?- <i>Returns:</i> A reference to the new contained value.</ins>
<p/>
-11- <i>Throws:</i> Any exception thrown by the selected constructor of <tt>T</tt>.
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
