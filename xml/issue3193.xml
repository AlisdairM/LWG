<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3193" status="New">
<title><i>Mandates:</i> and <i><del>Expects</del><ins>Preconditions</ins>:</i> elements are not defined for types</title>
<section><sref ref="[structure.specifications]"/></section>
<submitter>Daniel Kr&uuml;gler</submitter>
<date>04 Mar 2019</date>
<priority>3</priority>

<discussion>
<p>
The working paper uses the special elements <i>Mandates:</i>, <i>Expects:</i> as well as 
<i>Requires:</i> to types, albeit <sref ref="[structure.specifications]"/> defines them 
only for functions, for example <sref ref="[structure.specifications]"/> sub-bullet (3.4):
</p>
<blockquote><p>
<i>Expects:</i> the conditions (sometimes termed preconditions) that the function assumes to hold whenever
it is called.
</p></blockquote>
<p>
Examples for such usages on types are (from <a href="https://wg21.link/n4800">N4800</a>):
</p>
<ul>
<li><p><sref ref="[char.traits.typedefs]"/> for types <tt>int_type</tt> and <tt>state_type</tt></p></li>
<li><p><sref ref="[pair.astuple]"/> for <tt>tuple_element&lt;I, pair&lt;T1, T2&gt;&gt;::type</tt></p></li>
<li><p><sref ref="[tuple.helper]"/> for <tt>tuple_element&lt;I, tuple&lt;Types...&gt;&gt;::type</tt></p></li>
<li><p><sref ref="[tuple.traits]"/> for <tt>uses_allocator&lt;tuple&lt;Types...&gt;, Alloc&gt;</tt></p></li>
<li><p>Table 62 &mdash; "Container requirements" for type <tt>XX::value_type</tt></p></li>
<li><p>Table 65 &mdash; "Allocator-aware container requirements" for type <tt>allocator_type</tt></p></li>
<li><p>Table 69 &mdash; "Associative container requirements" for types <tt>X::value_type</tt> and <tt>X::key_compare</tt></p></li>
<li><p>Table 70 &mdash; "Unordered associative container requirements" for types <tt>X::value_type</tt> and <tt>X::key_equal</tt></p></li>
</ul>
<p>
Instead of replacing these elements usages for these places by extra wording to reach the same effects I
recommend to update instead <sref ref="[structure.specifications]"/> to ensure that requirement-expressing elements
are defined in a way that it also allows to express requirements imposed on types by these elements to standardize 
"existing practice". 
<p/>
Considering details, it seems obvious that <i>Mandates:</i>, <i>Expects:</i> as well as <i>Requires:</i> are "suitable"
to be defined for types (With the acceptance of <a href="https://wg21.link/p1463r1">P1463R1</a> there are now also
<i>Mandates:</i> for types such as Table 65 &mdash; "Allocator-aware container requirements" for type <tt>allocator_type</tt>). 
<p/>
For <i>Constraints:</i> the meaning would not be so clear: Should it mean that there is conditionally a type defined or not? 
According to  the submitters knowledge there are currently no known examples for <i>Constraints:</i> to specify 
constraint on types, therefore I'm suggesting to restrict this extension to <i>Mandates:</i>, <i>Expects:</i>, 
and <i>Requires:</i> alone.
</p>

<note>2019-03-15 Priority set to 3 after reflector discussion</note>

<note>2019-03-15; Daniel comments and provides wording</note>
<p>
During the preparation of the wording for this issue it was found that we should allow 
<i>Remarks:</i> elements to be used for other things than functions. One example of imposed 
restrictions can be found in <sref ref="[cmp.common]"/>:
</p>
<blockquote>
<pre>
template&lt;class... Ts&gt;
struct common_comparison_category {
  using type = <i>see below</i>;
};
</pre>
<p>
-2- <i>Remarks:</i> The member <i>typedef-name</i> <tt>type</tt> denotes the common comparison type 
(<sref ref="[class.spaceship]"/>) of <tt>Ts...</tt>, the expanded parameter pack. [&hellip;]
</p>
</blockquote>
<p>
The discussion of this issue speaks of "type" restrictions (versus the specified restrictions on
functions), because even the non-type template argument restrictions of <sref ref="[pair.astuple]"/> 
appear in the context of a member type specification, but there are examples where not really a 
single (member) type is involved, e.g. in the <sref ref="[tuple.helper]"/> example mentioned above. 
<p/>
Another example is when such elements are used for the specification of template specializations, e.g.
in <sref ref="[tuple.helper]"/>:
</p>
<blockquote>
<pre>
template&lt;class T&gt; struct tuple_size;
</pre>
<blockquote>
<p>
-1- <i>Remarks:</i> All specializations of <tt>tuple_size</tt> shall satisfy the 
<i>Cpp17UnaryTypeTrait</i> requirements (<sref ref="[meta.rqmts]"/>) with a base characteristic 
of <tt>integral_constant&lt;size_t, N&gt;</tt> for some <tt>N</tt>.
</p>
</blockquote>
</blockquote>
<p>
Besides class template specializations, a second relevant use-case is the specification of member types 
(Which are not necessarily part of a template), typically within the requirement tables, e.g. in 
Table 62 &mdash; "Container requirements"'s entry <tt>X::value_type</tt>:
</p>
<blockquote>
<p>
<i>Requires:</i> <tt>T</tt> is <i>Cpp17Erasable</i> from <tt>X</tt>
</p>
</blockquote>
<p>
The suggested wording tries to cover the generalization by means of the term "non-function 
entities" in addition to the existing functions to prevent being enforced to enumerate all entities
to which the extended rules apply.
</p>

<strong>Previous resolution [SUPERSEDED]:</strong>
<blockquote class="note">
<p>This wording is relative to <a href="https://wg21.link/n4810">N4810</a>.</p>

<ol>
<li><p>Change <sref ref="[structure.specifications]"/>, as indicated:</p>

<blockquote>
<p>
-3- Descriptions of function semantics contain the following elements (as appropriate)<ins>; some
of these elements may also appear in the description of non-function entities as denoted 
below</ins>: (footnote [&hellip;])
<ol style="list-style-type: none">
<li><p>(3.1) &mdash; <i>Requires:</i> the preconditions <ins>imposed on a non-function entity, 
or</ins> for calling the function.</p></li>
<li><p>(3.2) &mdash; <i>Constraints:</i> [&hellip;]</p></li>
<li><p>(3.3) &mdash; <i>Mandates:</i> the conditions that, if not met, render the program 
ill-formed. [<i>Example:</i> An implementation might express such a condition 
via the <i>constant-expression</i> in a <i>static_assert-declaration</i> (Clause 9). 
If the diagnostic is to be emitted only after the function has been selected by overload resolution, an 
implementation might express such a condition via a <i>constraint-expression</i> 
(<sref ref="[temp.constr.decl]"/>) and also define the function as deleted. &mdash; <i>end example</i>]</p></li>
<li><p>(3.4) &mdash; <i>Expects:</i> the conditions (sometimes termed preconditions) <ins>imposed 
on a non-function entity, or</ins> that the function assumes to hold whenever 
it is called. [<i>Example:</i> An implementation might express such conditions via an attribute such 
as <tt>[[expects]]</tt> (<sref ref="[dcl.attr.contract]"/>) <ins>on a function declaration</ins>. 
However, some such conditions might not lend themselves to expression via code. &mdash; 
<i>end example</i>]</p></li> <li><p>[&hellip;]</p></li>
<li><p>(3.11) &mdash; <i>Remarks:</i> additional semantic constraints <del>on the function</del>.</p></li>
<li><p>[&hellip;]</p></li>
</ol>
</p>
</blockquote>
</li>

<li><p>Change <sref ref="[res.on.required]"/>, as indicated:</p>

<blockquote>
<p>
-1- Violation of any preconditions specified in a <del>function's</del> <i>Requires:</i> element 
results in undefined behavior unless the function's <i>Throws:</i> element specifies 
throwing an exception when <del>the</del><ins>a function's</ins> precondition is violated.
<p/>
-2- Violation of any preconditions specified in a<ins>n</ins> <del>function's</del> <i>Expects:</i> 
element results in undefined behavior.
</p>
</blockquote>
</li>
</ol></blockquote>

<note>2020-05-01; Daniel adjusts wording to recent working draft</note>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4861">N4861</a>.</p>

<ol>
<li><p>Change <sref ref="[structure.specifications]"/>, as indicated:</p>

<blockquote>
<p>
-3- Descriptions of function semantics contain the following elements (as appropriate)<ins>; some
of these elements may also appear in the description of non-function entities as denoted 
below</ins>: (footnote [&hellip;])
<ol style="list-style-type: none">
<li><p>(3.1) &mdash; <i>Constraints:</i> [&hellip;]</p></li>
<li><p>(3.2) &mdash; <i>Mandates:</i> the conditions that, if not met, render the program 
ill-formed. [<i>Example:</i> An implementation might express such a condition 
via the <i>constant-expression</i> in a <i>static_assert-declaration</i> (<sref ref="[dcl.pre]"/>). 
If the diagnostic is to be emitted only after the function has been selected by overload resolution, an 
implementation might express such a condition via a <i>constraint-expression</i> 
(<sref ref="[temp.constr.decl]"/>) and also define the function as deleted. &mdash; <i>end example</i>]</p></li>
<li><p>(3.3) &mdash; <i>Preconditions:</i> the conditions <ins>imposed 
on a non-function entity, or</ins> that the function assumes to hold whenever 
it is called.</p></li> <li><p>[&hellip;]</p></li>
<li><p>(3.10) &mdash; <i>Remarks:</i> additional semantic constraints <del>on the function</del>.</p></li>
<li><p>[&hellip;]</p></li>
</ol>
</p>
</blockquote>
</li>

<li><p>Change <sref ref="[res.on.expects]"/>, as indicated:</p>

<blockquote>
<p>
-1- Violation of any preconditions specified in a <del>function's</del> <i>Preconditions:</i> 
element results in undefined behavior.
</p>
</blockquote>
</li>

<li><p>Change <sref ref="[depr.res.on.required]"/>, as indicated:</p>

<blockquote class="note">
<p>
[<i>Drafting note:</i> Interestingly, albey the <i>Requires:</i> element has nearly vanished, the
issue is still relevant, see <sref ref="[depr.meta.types]"/>]
</p>
</blockquote>

<blockquote>
<p>
-1- Violation of any preconditions specified in a <del>function's</del> <i>Requires:</i> element 
results in undefined behavior unless the function's <i>Throws:</i> element specifies 
throwing an exception when <del>the</del><ins>a function's</ins> precondition is violated.
</p>
</blockquote>
</li>
</ol>
</resolution>
</issue>
