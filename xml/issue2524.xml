<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2524" status="Open">
<title><tt>generate_canonical</tt> can occasionally return 1.0</title>
<section><sref ref="[rand.dist.pois.exp]"/></section>
<submitter>Michael Pr&auml;hofer</submitter>
<date>20 Aug 2015</date>
<priority>2</priority>

<discussion>
<p>Original title was: <tt>exponential_distribution&lt;float&gt;</tt> sometimes returns inf.</p>

<p>
The random number distribution class template <tt>exponential_distribution&lt;float&gt;</tt> may return "inf" as can be seen from the following example program:
</p>
<blockquote>
<pre>
// compiled with
// g++ -std=c++11 Error_exp_distr.cpp

#include &lt;iostream&gt;
#include &lt;random&gt;
#include &lt;bitset&gt;

int main(){
  unsigned long long h;
  std::mt19937_64 mt1(1);
  std::mt19937_64 mt2(1);
  mt1.discard(517517);
  mt2.discard(517517);
  std::exponential_distribution&lt;float&gt; dis(1.0);
  h = mt2();
  std::cout &lt;&lt; std::bitset&lt;64&gt;(h) &lt;&lt; " " &lt;&lt; (float) -log(1 - h/pow(2, 64)) &lt;&lt; " " 
            &lt;&lt; -log(1 - (float) h/pow(2, 64)) &lt;&lt; " " &lt;&lt; dis(mt1) &lt;&lt; std::endl;
  h = mt2();
  std::cout &lt;&lt; std::bitset&lt;64&gt;(h) &lt;&lt; " " &lt;&lt; (float) -log(1 - h/pow(2, 64)) &lt;&lt; " " 
            &lt;&lt; -log(1 - (float) h/pow(2, 64)) &lt;&lt; " " &lt;&lt; dis(mt1) &lt;&lt; std::endl;
}
</pre>
</blockquote>
<p>
output:
</p>
<blockquote>
<pre>
0110010110001001010011000111000101001100111110100001110011100001 0.505218 0.505218 0.505218
1111111111111111111111111101010011000110011110011000110101100110 18.4143 inf inf
</pre>
</blockquote>
<p>
The reason seems to be that converting a <tt>double x</tt> in the range <tt>[0, 1)</tt> to <tt>float</tt> may result in <tt>1.0f</tt> 
if <tt>x</tt> is close enough to <tt>1</tt>. I see two possibilities to fix that:
</p>
<ol>
<li><p>use internally <tt>double</tt> (or <tt>long double</tt>?) and then convert the result at the very end to <tt>float</tt>.</p></li>
<li><p>take only 24 random bits and convert them to a <tt>float x</tt> in the range <tt>[0, 1)</tt> and then return <tt>-log(1 - x)</tt>.</p></li>
</ol>

<p>
I have not checked if <tt>std::exponential_distribution&lt;double&gt;</tt> has the same problem:
For <tt>float</tt> on the average 1 out of 2<sup>24</sup> (~10<sup>7</sup>) draws returns "inf", which is easily confirmed.
For <tt>double</tt> on the average 1 out of 2<sup>53</sup> (~10<sup>16</sup>) draws might return "inf", which I have not tested.
</p>

<p><b>Marshall:</b><br/>
I don't think the problem is in <tt>std::exponential_distribution</tt>; but rather in <tt>generate_canonical</tt>.
</p>

<p>Consider:
<blockquote><pre>
std::mt19937_64 mt2(1);
mt2.discard(517517);
std::cout &lt;&lt; std::hexfloat &lt;&lt; std::generate_canonical&lt;float, std::numeric_limits&lt;float&gt;::digits&gt;(mt2) &lt;&lt; std::endl;
std::cout &lt;&lt; std::hexfloat &lt;&lt; std::generate_canonical&lt;float, std::numeric_limits&lt;float&gt;::digits&gt;(mt2) &lt;&lt; std::endl;
std::cout &lt;&lt; std::hexfloat &lt;&lt; std::generate_canonical&lt;float, std::numeric_limits&lt;float&gt;::digits&gt;(mt2) &lt;&lt; std::endl;
</pre></blockquote>
<p/>
which outputs:
<p/>
<blockquote><pre>
0x1.962532p-2
0x1p+0
0x1.20d0cap-3
</pre></blockquote>

but <tt>generate_canonical</tt> is defined to return a result in the range [0, 1).
</p>

<note>2015-10, Kona Saturday afternoon</note>
<p>Options: </p>
<ul>
<li>1) NAD, make it work. E.g. nudge slightly, making the hightest result return the highest allowable value (next_after). This might change the distribution slightly.</li>
<li>2) Re-run the algorithm when you get a 1. This changes the specification in that it makes extra calls to the random engine.</li>
<li>3) Something else</li>
</ul>

<p>WEB: The one thing we cannot tolerate is any output range other than [0, 1).</p>
<p>WEB: I believe there may be a documented algorithm for the generator, and perhaps it's possible to discover en-route that the algorithm produces the wrong result and fix it.</p>
<p>MC: No. I analyzed this once, and here it is: the algorithm is in [rand.util.canonical], and it's all fine until p5. The expression <tt>S/R^k</tt> is mathematically less than one, but it may round to one.</p>
<p>GR: Could we change the rounding mode for the computation? </p>
<p>HH: No, because the rounding mode is global, not thread-local.</p>
<p>AM: SG1 wants to get rid of the floating point environment. </p>
<p>STL: The problem is that the standard specifies the implementation, and the implementation doesn't work.</p>
<p>MC: I'm not sure if nudging it down will introduce a subtle bias.</p>
<p>EF: I worry about how the user's choice of floating point environment affects the behaviour.</p>
<p>MS offers to run the topic past colleagues.</p>
<p>MC: Will set the status to open. STL wants to rename the issue. WEB wants to be able to find the issue by its original name still.</p>

<p>Mike Spertus to run the options past his mathematical colleagues, and report back.</p>

<note>2017-11 Albuquerque Wednesday issue processing</note>
<p>Choice: Rerun the algorithm if it gets 1.0.</p>
<p>Thomas K to provide wording; Marshall and STL to review.</p>
</discussion>

<resolution>
</resolution>

</issue>
