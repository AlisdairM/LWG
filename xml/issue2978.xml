<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2978" status="New">
<title>Hash support for <tt>pmr::string</tt> and friends</title>
<section><sref ref="[basic.string.hash]"/><sref ref="[string.syn]"/></section>
<submitter>Tim Song</submitter>
<date>14 Jun 2017</date>
<priority>99</priority>

<discussion>
<p>
In most cases, <tt>std::pmr::<i>meow</i></tt> is a drop-in replacement for <tt>std::<i>meow</i></tt>. The exception is
<tt>std::pmr::{,w,u16,u32}string</tt>, because unlike their <tt>std::</tt> counterparts, they don't come with enabled 
<tt>std::hash</tt> specializations.
</p>
<p>
The P/R below simply adds <tt>std::hash</tt> specializations for those four typedefs. An alternative approach, for which wording can be
produced if desired, is to make the <tt>hash</tt> specializations for <tt>basic_string</tt> allocator-agnostic, similar to the partial
specialization of <tt>hash</tt> for <tt>vector&lt;bool&gt;</tt>.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4659">N4659</a>.
</p>
<ol>
<li><p> Edit <sref ref="[string.syn]" />, header <tt>&lt;string&gt;</tt> synopsis, as indicated:</p>
<blockquote>
<pre>
<ins>  namespace pmr {
    template &lt;class charT, class traits = char_traits&lt;charT&gt;&gt;
      using basic_string = std::basic_string&lt;charT, traits, polymorphic_allocator&lt;charT&gt;&gt;;

    using string    = basic_string&lt;char&gt;;
    using u16string = basic_string&lt;char16_t&gt;;
    using u32string = basic_string&lt;char32_t&gt;;
    using wstring   = basic_string&lt;wchar_t&gt;;
  }</ins>
  
  // <sref ref="[string.syn]" />, hash support
  template&lt;class T&gt; struct hash;
  template&lt;&gt; struct hash&lt;string&gt;;
  template&lt;&gt; struct hash&lt;u16string&gt;;
  template&lt;&gt; struct hash&lt;u32string&gt;;
  template&lt;&gt; struct hash&lt;wstring&gt;;
<ins>  template&lt;&gt; struct hash&lt;pmr::string&gt;;
  template&lt;&gt; struct hash&lt;pmr::u16string&gt;;
  template&lt;&gt; struct hash&lt;pmr::u32string&gt;;
  template&lt;&gt; struct hash&lt;pmr::wstring&gt;;</ins>

<del>  namespace pmr {
    template &lt;class charT, class traits = char_traits&lt;charT&gt;&gt;
      using basic_string = std::basic_string&lt;charT, traits, polymorphic_allocator&lt;charT&gt;&gt;;

    using string    = basic_string&lt;char&gt;;
    using u16string = basic_string&lt;char16_t&gt;;
    using u32string = basic_string&lt;char32_t&gt;;
    using wstring   = basic_string&lt;wchar_t&gt;;
  }</del>
</pre>
</blockquote>
</li>
<li><p> Edit <sref ref="[basic.string.hash]" /> as indicated:</p>
<blockquote>
<pre>
  template&lt;&gt; struct hash&lt;string&gt;;
  template&lt;&gt; struct hash&lt;u16string&gt;;
  template&lt;&gt; struct hash&lt;u32string&gt;;
  template&lt;&gt; struct hash&lt;wstring&gt;;
<ins>  template&lt;&gt; struct hash&lt;pmr::string&gt;;
  template&lt;&gt; struct hash&lt;pmr::u16string&gt;;
  template&lt;&gt; struct hash&lt;pmr::u32string&gt;;
  template&lt;&gt; struct hash&lt;pmr::wstring&gt;;</ins>
</pre>
<blockquote>
<p>
  -1- If <tt>S</tt> is one of these string types, <tt>SV</tt> is the corresponding string view type, and <tt>s</tt> is an object of type <tt>S</tt>, then <tt>hash&lt;S&gt;()(s) == hash&lt;SV&gt;()(SV(s))</tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
