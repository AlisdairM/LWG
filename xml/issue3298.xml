<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3298" status="New">
<title>Range adaptors introduced by P1035 do not require <tt>viewable_range</tt></title>
<section><sref ref="[range.take.while.view]"/><sref ref="[range.drop.view]"/>
<sref ref="[range.drop.while.view]"/></section>
<submitter>Christopher Di Bella</submitter>
<date>24 Sep 2019</date>
<priority>99</priority>

<discussion>
<p>
After adoption of <a href="http://wg21.link/p1035">P1035</a> range adaptor closure is described 
to take a <tt>viewable_range</tt> as input, and return a view as output. The deduction-guides 
for <tt>take_while_view</tt>, <tt>drop_view</tt>, and <tt>drop_while_view</tt> do not currently 
impose the <tt>viewable_range</tt> requirement.
</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4830">N4830</a>.</p>

<ol>
<li><p>Modify <sref ref="[range.take.while.view]"/>, class template <tt>take_while_view</tt> synopsis, 
as indicated:</p>

<blockquote>
<pre>
namespace std::ranges {
  [&hellip;]
  template&lt;<del>class</del><ins>input_range</ins> R, class Pred&gt;
    <ins>requires viewable_range&lt;R&gt; &amp;&amp; 
        indirect_unary_predicate&lt;const Pred, iterator_t&lt;R&gt;&gt;</ins>
      take_while_view(R&amp;&amp;, Pred) -&gt; take_while_view&lt;all_view&lt;R&gt;, Pred&gt;;
}
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.drop.view]"/>, class template <tt>drop_view</tt> synopsis, 
as indicated:</p>

<blockquote>
<pre>
namespace std::ranges {
  [&hellip;]
  template&lt;<del>class</del><ins>input_range</ins> R&gt;
    <ins>requires viewable_range&lt;R&gt;</ins>
      drop_view(R&amp;&amp;, range_difference_t&lt;R&gt;) -&gt; drop_view&lt;all_view&lt;R&gt;&gt;;
}
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.drop.while.view]"/>, class template <tt>drop_while_view</tt> synopsis, 
as indicated:</p>

<blockquote>
<pre>
namespace std::ranges {
  [&hellip;]
  template&lt;<del>class</del><ins>input_range</ins> R, class Pred&gt;
    <ins>requires viewable_range&lt;R&gt; &amp;&amp; 
        indirect_unary_predicate&lt;const Pred, iterator_t&lt;R&gt;&gt;</ins>
      drop_while_view(R&amp;&amp;, Pred) -&gt; drop_while_view&lt;all_view&lt;R&gt;, Pred&gt;;
}
</pre>
</blockquote>
</li>
</ol>
</resolution>
</issue>
