<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3301" status="New">
<title><tt>transform_view::iterator</tt> has incorrect <tt>iterator_category</tt></title>
<section><sref ref="[range.transform.iterator]"/></section>
<submitter>Michel Morin</submitter>
<date>03 Oct 2019</date>
<priority>1</priority>

<discussion>
<p>
When the transformation function returns an rvalue, <tt>transform_view::iterator</tt> 
cannot model <tt><i>cpp17-forward-iterator</i></tt>. However, similar to LWG <iref ref="3291"/>,
the current wording on <tt>transform_view::iterator::iterator_category</tt> does not 
consider this.
<p/>
As Casey Carter pointed out <a href="https://github.com/ericniebler/stl2/issues/637#issuecomment-535594100">here</a>,
the proposed wording below does not consider <tt>input_iterator</tt> that is not 
<tt><i>cpp17-input-iterator</i></tt> (this problem is not specific to the PR; it's pervasive 
in adapted iterators) and concepts-based determination would be a better fix for issues around 
<tt>iterator_category</tt>. But anyway, I consider this PR as a minimal fix at the moment.
</p>

<note>2019-10-31 Issue Prioritization</note>
<p>Priority to 1 after reflector discussion.</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4830">N4830</a>.</p>

<ol>
<li><p>Modify <sref ref="[range.transform.iterator]"/> as indicated:</p>

<blockquote>
<p>
-2- <ins><tt>iterator::iterator_category</tt> is defined as follows:</ins> 
Let <tt>C</tt> denote the type <tt>iterator_traits&lt;iterator_t&lt;Base&gt;&gt;::iterator_category</tt>.
</p>
<ol style="list-style-type: none">
<li><p><ins>(2.?) &mdash; If <tt>is_lvalue_reference_v&lt;iter_reference_t&lt;iterator_t&lt;Base&gt;&gt;&gt;</tt> 
is <tt>true</tt>,</ins></p>
<ol style="list-style-type: none">
<li><p><ins>(2.?.?) &mdash;</ins> If <tt>C</tt> models <tt>derived_from&lt;contiguous_iterator_tag&gt;</tt>, 
then <tt>iterator_category</tt> denotes <tt>random_access_iterator_tag</tt>;</p></li>
<li><p><ins>(2.?.?) &mdash;</ins> <ins>O</ins><del>o</del>therwise, <tt>iterator_category</tt> denotes 
<tt>C</tt>.</p></li>
</ol>
</li>
<li><p><ins>(2.?) &mdash; Otherwise, <tt>iterator_category</tt> denotes 
<tt>input_iterator_tag</tt>.</ins></p></li>
</ol>
</blockquote>
</li>

</ol>

</resolution>
</issue>
