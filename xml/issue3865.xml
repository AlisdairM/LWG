<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3865" status="New">
<title>Sorting a range of <tt>pair</tt>s</title>
<section><sref ref="[pairs.spec]"/></section>
<submitter>Barry Revzin</submitter>
<date>28 Jan 2023</date>
<priority>99</priority>

<discussion>
<p>
Consider this example:
</p>
<blockquote><pre>
#include &lt;algorithm&gt;
#include &lt;ranges&gt;

int main() {
  int a[3] = {1, 2, -1};
  int b[3] = {1, 4, 1};
  std::ranges::sort(std::views::zip(a, b));
}
</pre></blockquote>
<p>
This is currently valid C++23 code, but wasn't before <paper num="P2165"/> (Compatibility between <tt>tuple</tt>, <tt>pair</tt> 
and <i>tuple-like</i> objects). Before P2165, <tt>zip(a, b)</tt> returned a range whose reference was 
<tt>std::pair&lt;int&amp;, int&amp;&gt;</tt> and whose <tt>value_type</tt> was <tt>std::pair&lt;int, int&gt;</tt> and 
<tt>std::pair</tt>, unlike <tt>std::tuple</tt>, does not have any heterogeneous comparisons &mdash; which is required to 
satisfy the <tt>sortable</tt> concept. 
<p/>
While the zip family of range adapters no longer has this problem, nothing prevents users from themselves creating a range 
whose reference type is <tt>pair&lt;T&amp;, U&amp;&gt;</tt> and whose <tt>value_type</tt> is <tt>pair&lt;T, U&gt;</tt> 
(which is now a valid range after the zip paper) and then discovering that this range isn't sortable, even though the 
equivalent using <tt>tuple</tt> is. 
<p/>
Suggested resolution:
<p/>
Change <tt>pair</tt>'s comparison operators from comparing two arguments of type <tt>const pair&lt;T1, T2&gt;&amp;</tt> 
to instead comparing arguments of types <tt>const pair&lt;T1, T2&gt;&amp;</tt> and <tt>const pair&lt;U1, U2&gt;&amp;</tt>. 
</p>

<note>2023-02-05; Barry provides wording</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4928"/>.
</p>

<ol>
<li><p>Modify <sref ref="[utility.syn]"/>, header <tt>&lt;utility&gt;</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
[&hellip;]
// <i><sref ref="[pairs.spec]"/>, pair specialized algorithms</i>
template&lt;class T1, class T2<ins>, class U1, class U2</ins>&gt;
  constexpr bool operator==(const pair&lt;T1, T2&gt;&amp;, const pair&lt;<del>T</del><ins>U</ins>1, <del>T</del><ins>U</ins>2&gt;&amp;);
template&lt;class T1, class T2<ins>, class U1, class U2</ins>&gt;
  constexpr common_comparison_category_t&lt;<i>synth-three-way-result</i>&lt;T1<ins>, U1</ins>&gt;,
                                         <i>synth-three-way-result</i>&lt;T2<ins>, U2</ins>&gt;&gt;
    operator&lt;=&gt;(const pair&lt;T1, T2&gt;&amp;, const pair&lt;<del>T</del><ins>U</ins>1, <del>T</del><ins>U</ins>2&gt;&amp;);
[&hellip;]
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[pairs.spec]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class T1, class T2<ins>, class U1, class U2</ins>&gt;
  constexpr bool operator==(const pair&lt;T1, T2&gt;&amp; x, const pair&lt;<del>T</del><ins>U</ins>1, <del>T</del><ins>U</ins>2&gt;&amp; y);
</pre>
<blockquote>
<p>
-1- [&hellip;]
<p/>
-2- [&hellip;]
</p>
</blockquote>
<pre>
template&lt;class T1, class T2<ins>, class U1, class U2</ins>&gt;
  constexpr common_comparison_category_t&lt;<i>synth-three-way-result</i>&lt;T1<ins>, U1</ins>&gt;,
                                         <i>synth-three-way-result</i>&lt;T2<ins>, U2</ins>&gt;&gt;
    operator&lt;=&gt;(const pair&lt;T1, T2&gt;&amp; x, const pair&lt;<del>T</del><ins>U</ins>1, <del>T</del><ins>U</ins>2&gt;&amp; y);
</pre>
<blockquote>
<p>
-3- [&hellip;]
</p>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
