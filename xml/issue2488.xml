<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2488" status="New">
<title>Placeholders should be allowed and encouraged to be <tt>constexpr</tt></title>
<section><sref ref="[func.bind.place]"/></section>
<submitter>Stephan T. Lavavej</submitter>
<date>27 Mar 2015</date>
<priority>2</priority>

<discussion>
<p>
<tt>piecewise_construct</tt> (<sref ref="[pair.piecewise]"/>), <tt>allocator_arg</tt> (<sref ref="[allocator.tag]"/>), 
and <tt>adopt_lock</tt>/<tt>defer_lock</tt>/<tt>try_to_lock</tt> (<sref ref="[thread.lock]"/>) are all required to be 
<tt>constexpr</tt> with internal linkage. <tt>bind()</tt>'s placeholders should be allowed to follow this modern practice, 
for increased consistency and reduced implementer headaches (header-only is easier than separately-compiled).
</p>

</discussion>

<resolution>
<p>This wording is relative to N4296.</p>

<ol>
<li><p>Change <sref ref="[function.objects]"/> p2 "Header <tt>&lt;functional&gt;</tt> synopsis" as depicted:</p>

<blockquote>
<pre>
namespace placeholders {
  <i>// M is the implementation-defined number of placeholders</i>
  <ins><i>see below</i></ins><del>extern <i>unspecified</i></del> _1;
  <ins><i>see below</i></ins><del>extern <i>unspecified</i></del> _2;
  ...
  <ins><i>see below</i></ins><del>extern <i>unspecified</i></del> _M;
}
</pre>
</blockquote>
</li>

<li><p>Change <sref ref="[func.bind.place]"/> p2 as depicted:</p>

<blockquote>
<pre>
namespace std::placeholders {
  <i>// M is the implementation-defined number of placeholders</i>
  <ins><i>see below</i></ins><del>extern <i>unspecified</i></del> _1;
  <ins><i>see below</i></ins><del>extern <i>unspecified</i></del> _2;
             .
             .
             .
  <ins><i>see below</i></ins><del>extern <i>unspecified</i></del> _M;
}
</pre>
<p>
-1- All placeholder types shall be <tt>DefaultConstructible</tt> and <tt>CopyConstructible</tt>, and 
their default constructors and copy/move constructors shall not throw exceptions. It is 
implementation-defined whether placeholder types are <tt>CopyAssignable</tt>. <tt>CopyAssignable</tt> 
placeholders' copy assignment operators shall not throw exceptions.
<p/>
<ins>-?- Placeholders should be defined as:</ins>
</p>
<blockquote>
<pre>
<ins>constexpr <i>unspecified</i> _1{};</ins>
</pre>
</blockquote>
<p>
<ins>If they are not, they shall be declared as:</ins>
</p>
<blockquote>
<pre>
<ins>extern <i>unspecified</i> _1;</ins>
</pre>
</blockquote>
</blockquote>
</li>
</ol>

</resolution>

</issue>
