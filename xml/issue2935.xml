<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2935" status="Voting">
<title>What should <tt>create_directories</tt> do when <tt>p</tt> already exists but is not a directory?</title>
<section><sref ref="[fs.op.create_directories]"/><sref ref="[fs.op.create_directory]"/></section>
<submitter>Billy Robert O'Neal III</submitter>
<date>15 Feb 2017</date>
<priority>0</priority>

<discussion>
<p>
The <tt>create_directory</tt> and <tt>create_directories</tt> functions have a postcondition that says 
<tt>is_directory(p)</tt>, but it is unclear how they are supposed to provide this. Both of their effects say that 
they create a directory and return whether it was actually created. It is possible to interpret this as "if 
creation fails due to the path already existing, issue another system call to see if the path is a directory, 
and change the result if so" &mdash; but it seems unfortunate to require both Windows and POSIX to issue more 
system calls in this case.
<p/>
In email discussion Davis Herring and Billy O'Neal discussed this issue and agreed that this was probably 
unintentional. Special thanks for Jonathan Wakely's suggested change to <tt>create_directories</tt>' 
<em>Returns</em> clause.
</p>

<note>2017-07 Toronto Thurs Issue Prioritization</note>
<p>Priority 0; move to Ready</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4640">N4640</a>.</p>

<ol>
<li><p>Make the following edits to <sref ref="[fs.op.create_directories]"/>:</p>

<blockquote>
<pre>
bool create_directories(const path&amp; p);
bool create_directories(const path&amp; p, error_code&amp; ec) noexcept;
</pre>
</blockquote>
<p>
-1- <em>Effects:</em><del> Establishes the postcondition by calling </del><ins>Calls </ins><tt>create_directory()</tt> for <del>any</del><ins>each</ins> element of <tt>p</tt> that does not exist.
<p/>
<del>-2- <em>Postconditions:</em> <tt>is_directory(p)</tt>.</del>
<p/>
-3- <em>Returns:</em> <tt>true</tt> if a new directory was created <ins>for the directory <tt>p</tt> resolves to</ins>, 
otherwise <tt>false</tt>. The signature with argument <tt>ec</tt> returns <tt>false</tt> if an error occurs.
<p/>
-4- <em>Throws:</em> As specified in <sref ref="[fs.err.report]"/>.</p>
<p>
-5- <em>Complexity:</em> &#x1d4aa;(<i>n</i>) where <i>n</i> is the number of elements of <tt>p</tt><del> that do not exist</del>.
</p>
</li>

<li><p>Make the following edits to <sref ref="[fs.op.create_directory]"/>:</p>

<blockquote>
<pre>
bool create_directory(const path&amp; p);
bool create_directory(const path&amp; p, error_code&amp; ec) noexcept;
</pre>
</blockquote>
<p>
-1- <em>Effects:</em><del> Establishes the postcondition by attempting to create</del><ins>Creates</ins> the directory 
<tt>p</tt> resolves to, as if by POSIX <tt>mkdir()</tt> with a second argument of <tt>static_cast&lt;int&gt;(perms::all)</tt>. 
Creation failure because <tt>p</tt> <del>resolves to an existing directory shall not be treated as</del><ins>already exists 
is not</ins> an error.
<p/>
<del>-2- <em>Postconditions:</em> <tt>is_directory(p)</tt>.</del>
<p/>
-3- <em>Returns:</em> <tt>true</tt> if a new directory was created, otherwise <tt>false</tt>. The signature with argument 
<tt>ec</tt> returns <tt>false</tt> if an error occurs.
<p/>
-4- <em>Throws:</em> As specified in <sref ref="[fs.err.report]"/>.
</p>
</li>
</ol>

</resolution>

</issue>

