<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3910" status="New">
<title>The effects of including <code>&lt;iostream&gt;</code> on initialization are not yet precisely specified</title>
<section><sref ref="[iostream.objects.overview]"/></section>
<submitter>Jiang An</submitter>
<date>27 Mar 2023</date>
<priority>99</priority>

<discussion>
<p>
LWG <iref ref="3878"/> specified the effects of importing standard library modules on initialization.
However, the effects of including <code>&lt;iostream&gt;</code> are not yet precisely specified.
A hostile reading may consider this to allow the <code>ios_base::Init</code> variable to be
a function-local static variable or an inline variable, which defeats the purpose.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="n4944"/>.
</p>

<ol>
<li>
<p>
Change <sref ref="[iostream.objects.overview]"/>/5 as indicated:
</p>
<blockquote>
<p>
-5-
The results of including <code>&lt;iostream&gt;</code> in a translation unit
shall be as if <code>&lt;iostream&gt;</code>
defined an <del>instance of</del> <code>ios_base::Init</code> with
<del>static storage duration</del>
<ins>ordered initialization (<sref ref="[basic.start.dynamic]"/>)</ins>.
Each C++ library module (<sref ref="[std.modules]"/>) in a hosted implementation
shall behave as if it contains an interface unit that defines an unexported
<code>ios_base::Init</code> variable with
ordered initialization <del>(<sref ref="[basic.start.dynamic]"/>)</del>.
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
