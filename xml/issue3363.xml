<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3363" status="New">
<title><tt>drop_while_view</tt> should opt-out of <tt>sized_range</tt></title>
<section><sref ref="[range.drop.while.view]"/></section>
<submitter>Johel Ernesto Guerrero Pe&ntilde;a</submitter>
<date>07 Jan 2020</date>
<priority>1</priority>

<discussion>
<p>If <tt>drop_while_view</tt>'s <tt>iterator_t</tt> and <tt>sentinel_t</tt>
model <tt>forward_iterator</tt> and <tt>sized_sentinel_for</tt>, it will 
incorrectly satisfy <tt>sized_range</tt> thanks to the size member function
inherited from <tt>view_interface</tt>.</p>

<p>Because it has to compute its <tt>begin()</tt>, it can never model 
<tt>sized_range</tt> due to not meeting its non-amortized O(1) requirement.</p>

<note>2020-01-16 Priority set to 1 after discussion on the reflector.</note>

<note>2020-02-10; Prague 2020; Casey comments and provides alternative wording</note>
<p>
The fundamental issue here is that both <tt>ranges::size</tt> and <tt>view_interface::size</tt> 
(it should be unsurprising that many of the "default" implementations of member <tt>meow</tt> in 
<tt>view_interface</tt> look just like fallback cases of the <tt>ranges::meow</tt> CPO) have 
a case that returns the difference of <tt>ranges::end</tt> and <tt>ranges::begin</tt>. If 
<tt>begin</tt> and <tt>end</tt> are amortized* O(1) but not "true" O(1), then the resulting 
<tt>size</tt> operation is amortized O(1) and not "true" O(1) as required by the 
<tt>sized_range</tt> concept. I don't believe we can or should fix this on a case by case basis,
but we should instead relax the complexity requirement for <tt>sized_range</tt> to be 
handwavy-amortized O(1).
</p>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>This wording is relative to <a href="https://wg21.link/N4849">N4849</a>.</p>

<ol>
<li><p>Add the following specialization to <sref ref="[ranges.syn]"/>:</p>

<blockquote>
<pre>
// [drop.while.view], drop while view
  template&lt;view V, class Pred&gt;
    requires input_range&lt;V&gt; &amp;&amp; is_object_v&lt;Pred&gt; &amp;&amp;
      indirect_unary_predicate&lt;const Pred, iterator_t&lt;V&gt;&gt;
    class drop_while_view;

<ins>
  template&lt;view V, class Pred&gt;
    inline constexpr bool disable_sized_range&lt;drop_while_view&lt;V, Pred&gt;&gt; = true;
</ins>

  namespace views { inline constexpr unspecified drop_while = unspecified; }
</pre>
</blockquote>

</li>
</ol>
</blockquote>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/N4849">N4849</a>.</p>

<ol>
<li><p>Modify <sref ref="[ranges.syn]"/> as indicated:</p>

<blockquote>
<p>
-2- Given an lvalue <tt>t</tt> of type <tt>remove_reference_t&lt;T&gt;</tt>, <tt>T</tt> models 
<tt>sized_range</tt> only if
</p>
<ol style="list-style-type: none"> 
<li><p>(2.1) &mdash; <tt>ranges::size(t)</tt> is <ins>amortized</ins> &#x1d4aa;(<tt>1</tt>), does not modify <tt>t</tt>, 
and is equal to <tt>ranges::distance(t)</tt>, and</p></li>
<li><p>[&hellip;]</p></li>
</ol>
</blockquote>

</li>
</ol>
</resolution>

</issue>
