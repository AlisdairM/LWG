<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4295" status="New">
<title>[fund.ts.v3] `experimental::observer_ptr` should have more constexpr</title>
<section><sref ref="[memory.observer.ptr.special]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>14 Jul 2025</date>
<priority>99</priority>

<discussion>
<p>
In the Library Fundamentals TS, the `swap` overload, `make_observer_ptr`
function, and comparisons for `observer_ptr` could be constexpr, but are not.
The member `swap` is already constexpr in the TS, and the non-member `swap`
is constexpr in libc++ but not the comparisons. The proposed resolution has
been implemented and tested in libstdc++.
</p>
<p>
If we ever rebase the TS on a new C++ standard the comparisons should all be
updated like so:
</p>

<blockquote>
<pre><code>
template &lt;class W1, class W2&gt;
<ins>constexpr</ins> bool operator==(observer_ptr&lt;W1&gt; p1, observer_ptr&lt;W2&gt; p2);
</code></pre>
<blockquote>
<i>Returns</i>: `p1.get() == p2.get()`.
</blockquote>

<pre><code><del>bool operator!=(...);</del></code></pre>

<pre><code>
template &lt;class W&gt;
<ins>constexpr</ins> bool operator==(observer_ptr&lt;W&gt; p, nullptr_t) noexcept;
<del>bool operator==(...);</del>
</code></pre>
<blockquote>
<i>Returns</i>: `not p`.
</blockquote>

<pre><code><del>bool operator!=(...);
bool operator!=(...);</del></code></pre>

<pre><code>
template &lt;class W1, class W2&gt;
<ins>constexpr</ins> bool operator&lt;<ins>=&gt;</ins>(observer_ptr&lt;W1&gt; p1, observer_ptr&lt;W2&gt; p2);
</code></pre>
<blockquote>
<i>Returns</i>:
    <code><del>less&lt;W3&gt;</del><ins>compare_three_way</ins>()(p1.get(), p2.get())</code><del>,
    where `W3` is the composite pointer type (C++20 ยง7) of `W1*` and `W2*`</del>.
</blockquote>

<pre><code><del>bool operator&gt;(...);
bool operator&lt;=(...);
bool operator&gt;=(...);</del></code></pre>
</blockquote>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4939"/>.
</p>

<ol>
<li>
Modify <sref ref="[memory.syn]"/> as indicated:
<blockquote>
<pre><code>
#include &lt;memory&gt;

namespace std {
  namespace experimental::inline fundamentals_v3 {

    <i>// 8.2, Non-owning (observer) pointers</i>
    template &lt;class W&gt; class observer_ptr;

    <i>// 8.2.6, observer_ptr specialized algorithms</i>
    template &lt;class W&gt;
    <ins>constexpr</ins> void swap(observer_ptr&lt;W&gt;&amp;, observer_ptr&lt;W&gt;&amp;) noexcept;
    template &lt;class W&gt;
    <ins>constexpr</ins> observer_ptr&lt;W&gt; make_observer(W*) noexcept;
    <i>// (in)equality operators</i>
    template &lt;class W1, class W2&gt;
    <ins>constexpr</ins> bool operator==(observer_ptr&lt;W1&gt;, observer_ptr&lt;W2&gt;);

    template &lt;class W1, class W2&gt;
    <ins>constexpr</ins> bool operator!=(observer_ptr&lt;W1&gt;, observer_ptr&lt;W2&gt;);
    template &lt;class W&gt;
    <ins>constexpr</ins> bool operator==(observer_ptr&lt;W&gt;, nullptr_t) noexcept;
    template &lt;class W&gt;
    <ins>constexpr</ins> bool operator!=(observer_ptr&lt;W&gt;, nullptr_t) noexcept;
    template &lt;class W&gt;
    <ins>constexpr</ins> bool operator==(nullptr_t, observer_ptr&lt;W&gt;) noexcept;
    template &lt;class W&gt;
    <ins>constexpr</ins> bool operator!=(nullptr_t, observer_ptr&lt;W&gt;) noexcept;
    <i>// ordering operators</i>
    template &lt;class W1, class W2&gt;
    <ins>constexpr</ins> bool operator&lt;(observer_ptr&lt;W1&gt;, observer_ptr&lt;W2&gt;);
    template &lt;class W1, class W2&gt;
    <ins>constexpr</ins> bool operator&gt;(observer_ptr&lt;W1&gt;, observer_ptr&lt;W2&gt;);
    template &lt;class W1, class W2&gt;
    <ins>constexpr</ins> bool operator&lt;=(observer_ptr&lt;W1&gt;, observer_ptr&lt;W2&gt;);
    template &lt;class W1, class W2&gt;
    <ins>constexpr</ins> bool operator&gt;=(observer_ptr&lt;W1&gt;, observer_ptr&lt;W2&gt;);

  } <i>// namespace experimental::inline fundamentals_v3</i>

  <i>// 8.2.7, observer_ptr hash support</i>
  template &lt;class T&gt; struct hash;
  template &lt;class T&gt; struct hash&lt;experimental::observer_ptr&lt;T&gt;&gt;;

} <i>// namespace std</i>
</code></pre>
</blockquote>
</li>

<li>
Modify <sref ref="[memory.observer.ptr.special]"/> as indicated:
<blockquote>


<pre><code>
template &lt;class W&gt;
  <ins>constexpr</ins> void swap(observer_ptr&lt;W&gt;&amp; p1, observer_ptr&lt;W&gt;&amp; p2) noexcept;
</code></pre>
<blockquote>
-2- <i>Effects</i>: `p1.swap(p2)`.
</blockquote>

<pre><code>
template &lt;class W&gt; <ins>constexpr</ins> observer_ptr&lt;W&gt; make_observer(W* p) noexcept;
</code></pre>
<blockquote>
-4- <i>Returns</i>: <code>observer_ptr&lt;W&gt;{p}</code>.
</blockquote>


<pre><code>
template &lt;class W1, class W2&gt;
  <ins>constexpr</ins> bool operator==(observer_ptr&lt;W1&gt; p1, observer_ptr&lt;W2&gt; p2);
</code></pre>
<blockquote>
-6- <i>Returns</i>: `p1.get() == p2.get()`.
</blockquote>

<pre><code>
template &lt;class W1, class W2&gt;
  <ins>constexpr</ins> bool operator!=(observer_ptr&lt;W1&gt; p1, observer_ptr&lt;W2&gt; p2);
</code></pre>
<blockquote>
-8- <i>Returns</i>: `not (p1 == p2)`.
</blockquote>

<pre><code>
template &lt;class W&gt;
  <ins>constexpr</ins> bool operator==(observer_ptr&lt;W&gt; p, nullptr_t) noexcept;
template &lt;class W&gt;
  <ins>constexpr</ins> bool operator==(nullptr_t, observer_ptr&lt;W&gt; p) noexcept;
</code></pre>
<blockquote>
-10- <i>Returns</i>: `not p`.
</blockquote>

<pre><code>
template &lt;class W&gt;
  <ins>constexpr</ins> bool operator!=(observer_ptr&lt;W&gt; p, nullptr_t) noexcept;
template &lt;class W&gt;
  <ins>constexpr</ins> bool operator!=(nullptr_t, observer_ptr&lt;W&gt; p) noexcept;
</code></pre>
<blockquote>
-12- <i>Returns</i>: `(bool)p`.
</blockquote>

<pre><code>
template &lt;class W1, class W2&gt;
  <ins>constexpr</ins> bool operator&lt;(observer_ptr&lt;W1&gt; p1, observer_ptr&lt;W2&gt; p2);
</code></pre>
<blockquote>
-14- <i>Returns</i>:
    <code>less&lt;W3&gt;()(p1.get(), p2.get())</code>,
    where `W3` is the composite pointer type (C++20 ยง7) of `W1*` and `W2*`.
</blockquote>

<pre><code>
template &lt;class W1, class W2&gt;
  <ins>constexpr</ins> bool operator&gt;(observer_ptr&lt;W1&gt; p1, observer_ptr&lt;W2&gt; p2);
</code></pre>
<blockquote>
-16- <i>Returns</i>: <code>p2 &lt; p1</code>.
</blockquote>

<pre><code>
template &lt;class W1, class W2&gt;
  <ins>constexpr</ins> bool operator&lt;=(observer_ptr&lt;W1&gt; p1, observer_ptr&lt;W2&gt; p2);
</code></pre>
<blockquote>
-16- <i>Returns</i>: <code>not p2 &lt; p1</code>.
</blockquote>

<pre><code>
template &lt;class W1, class W2&gt;
  <ins>constexpr</ins> bool operator&gt;=(observer_ptr&lt;W1&gt; p1, observer_ptr&lt;W2&gt; p2);
</code></pre>
<blockquote>
-16- <i>Returns</i>: <code>not p1 &lt; p2</code>.
</blockquote>


</blockquote>
</li>
</ol>

</resolution>

</issue>
