<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3990" status="WP">
<title>Program-defined specializations of <tt>std::tuple</tt> and <tt>std::variant</tt> can't be properly supported</title>
<section><sref ref="[tuple.tuple]"/><sref ref="[variant.variant.general]"/></section>
<submitter>Jiang An</submitter>
<date>29 Aug 2023</date>
<priority>99</priority>

<discussion>
<p>
Currently, program-defined specializations of <tt>std::tuple</tt> and <tt>std::variant</tt> are not explicitly disallowed. 
However, they can't be properly supported by standard library implementations, because the corresponding <tt>std::get</tt> 
function templates have to inspect the implementation details of these types, and users have no way to make <tt>std::get</tt> 
behave correctly for a program-defined specializations.
<p/>
Perhaps we should explicitly disallow specializing <tt>std::tuple</tt> and <tt>std::variant</tt>.
</p>

<note>2023-11-02; Reflector poll</note>
<p>
Set status to Tentatively Ready after five votes in favour during reflector poll.
</p>

<note>Kona 2023-11-11; Status changed: Voting &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4958"/>.
</p>

<ol>

<li><p>Modify <sref ref="[tuple.tuple]"/> as indicated:</p>

<blockquote>
<pre>
namespace std {
  template&lt;class... Types&gt;
  class tuple {
    [&hellip;]
  };

  [&hellip;]
}
</pre>
</blockquote>
<blockquote>
<p>
<ins>-?- If a program declares an explicit or partial specialization of <tt>tuple</tt>, 
the program is ill-formed, no diagnostic required.</ins>
</p>
</blockquote>

</li>

<li><p>Modify <sref ref="[variant.variant.general]"/> as indicated:</p>

<blockquote>
<p>
[&hellip;]
<p/>
-3- A program that instantiates the definition of <tt>variant</tt> with no template arguments is ill-formed.
<p/>
<ins>-?- If a program declares an explicit or partial specialization of <tt>variant</tt>, 
the program is ill-formed, no diagnostic required.</ins>
</p>
</blockquote>

</li>

</ol>
</resolution>

</issue>
