<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3185" status="New">
<title>Uses-allocator construction functions missing <tt>constexpr</tt> and <tt>noexcept</tt></title>
<section><sref ref="[allocator.uses.construction]"/></section>
<submitter>Pablo Halpern</submitter>
<date>29 Jan 2019</date>
<priority>99</priority>

<discussion>
<p>
The uses-allocator construction functions introduced into WP when <a href="https://wg21.link/p0591r4">P0591r4</a> 
was accepted (Nov 2018, San Diego) should all be <tt>constexpr</tt>. All but two should also be <tt>noexcept</tt>. 
Getting this right is an important part of correctly adding <tt>constexpr</tt> memory allocation into the WP.
<p/>
The minimal change is to add the <tt>constexpr</tt> to all of the new functions except 
<tt>uninitialized_construct_using_allocator</tt> and <tt>noexcept</tt> to all 
of the overloads of <tt>uses_allocator_construction_args</tt>. Optionally, we could consider adding conditional 
<tt>noexcept</tt> to the remaining two functions. If <a href="https://wg21.link/p0784">p0784</a> is accepted, 
then also add <tt>constexpr</tt> to <tt>uninitialized_construct_using_allocator</tt>.
</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4800">N4800</a>.</p>

<ol>
<li><p>Change header <tt>&lt;memory&gt;</tt> synopsis, <sref ref="[memory.syn]"/>, as indicated:</p>
<blockquote>
<pre>
[&hellip;]
<i>// <sref ref="[allocator.uses.construction]"/>, uses-allocator construction</i>
template &lt;class T, class Alloc, class... Args&gt;
<ins>constexpr</ins> auto uses_allocator_construction_args(const Alloc&amp; alloc, Args&amp;&amp;... args) <ins>noexcept</ins> -&gt; <i>see below</i>;
template &lt;class T, class Alloc, class Tuple1, class Tuple2&gt;
<ins>constexpr</ins> auto uses_allocator_construction_args(const Alloc&amp; alloc, piecewise_construct_t,
                                      Tuple1&amp;&amp; x, Tuple2&amp;&amp; y) <ins>noexcept</ins> -&gt; <i>see below</i>;
template &lt;class T, class Alloc&gt;
<ins>constexpr</ins> auto uses_allocator_construction_args(const Alloc&amp; alloc) <ins>noexcept</ins> -&gt; <i>see below</i>;
template &lt;class T, class Alloc, class U, class V&gt;
<ins>constexpr</ins> auto uses_allocator_construction_args(const Alloc&amp; alloc, U&amp;&amp; u, V&amp;&amp; v) <ins>noexcept</ins> -&gt; <i>see below</i>;
template &lt;class T, class Alloc, class U, class V&gt;
<ins>constexpr</ins> auto uses_allocator_construction_args(const Alloc&amp; alloc, const pair&lt;U,V&gt;&amp; pr) <ins>noexcept</ins> -&gt; <i>see below</i>;
template &lt;class T, class Alloc, class U, class V&gt;
<ins>constexpr</ins> auto uses_allocator_construction_args(const Alloc&amp; alloc, pair&lt;U,V&gt;&amp;&amp; pr) <ins>noexcept</ins> -&gt; <i>see below</i>;
template &lt;class T, class Alloc, class... Args&gt;
<ins>constexpr</ins> T make_obj_using_allocator(const Alloc&amp; alloc, Args&amp;&amp;... args);
template &lt;class T, class Alloc, class... Args&gt;
T* uninitialized_construct_using_allocator(T* p, const Alloc&amp; alloc, Args&amp;&amp;... args);
[&hellip;]
</pre>
</blockquote>
</li>

<li><p>Change <sref ref="[allocator.uses.construction]"/> as indicated:</p>
<blockquote>
<pre>
template &lt;class T, class Alloc, class... Args&gt;
  <ins>constexpr</ins> auto uses_allocator_construction_args(const Alloc&amp; alloc, Args&amp;&amp;... args) <ins>noexcept</ins> -&gt; <i>see below</i>;
</pre>
<blockquote>
<p>
[&hellip;]
</p>
</blockquote>
<pre>
template &lt;class T, class Alloc, class Tuple1, class Tuple2&gt;
  <ins>constexpr</ins> auto uses_allocator_construction_args(const Alloc&amp; alloc, piecewise_construct_t,
                                        Tuple1&amp;&amp; x, Tuple2&amp;&amp; y) <ins>noexcept</ins> -&gt; <i>see below</i>;
</pre>
<blockquote>
<p>
[&hellip;]
</p>
</blockquote>
<pre>
template &lt;class T, class Alloc&gt;
  <ins>constexpr</ins> auto uses_allocator_construction_args(const Alloc&amp; alloc) <ins>noexcept</ins> -&gt; <i>see below</i>;
</pre>
<blockquote>
<p>
[&hellip;]
</p>
</blockquote>
<pre>
template &lt;class T, class Alloc, class U, class V&gt;
  <ins>constexpr</ins> auto uses_allocator_construction_args(const Alloc&amp; alloc, U&amp;&amp; u, V&amp;&amp; v) <ins>noexcept</ins> -&gt; <i>see below</i>;
</pre>
<blockquote>
<p>
[&hellip;]
</p>
</blockquote>
<pre>
template &lt;class T, class Alloc, class U, class V&gt;
  <ins>constexpr</ins> auto uses_allocator_construction_args(const Alloc&amp; alloc, const pair&lt;U,V&gt;&amp; pr) <ins>noexcept</ins> -&gt; <i>see below</i>;
</pre>
<blockquote>
<p>
[&hellip;]
</p>
</blockquote>
<pre>
template &lt;class T, class Alloc, class U, class V&gt;
  <ins>constexpr</ins> auto uses_allocator_construction_args(const Alloc&amp; alloc, pair&lt;U,V&gt;&amp;&amp; pr) <ins>noexcept</ins> -&gt; <i>see below</i>;
</pre>
<blockquote>
<p>
[&hellip;]
</p>
</blockquote>
<pre>
template &lt;class T, class Alloc, class... Args&gt;
  <ins>constexpr</ins> T make_obj_using_allocator(const Alloc&amp; alloc, Args&amp;&amp;... args);
</pre>
<blockquote>
<p>
[&hellip;]
</p>
</blockquote>
<pre>
template &lt;class T, class Alloc, class... Args&gt;
  T* uninitialized_construct_using_allocator(T* p, const Alloc&amp; alloc, Args&amp;&amp;... args);
</pre>
<blockquote>
<p>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>
</issue>
