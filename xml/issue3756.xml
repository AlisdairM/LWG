<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3756" status="Voting">
<title>Is the <tt>std::atomic_flag</tt> class signal-safe?</title>
<section><sref ref="[support.signal]"/><sref ref="[atomics.flag]"/></section>
<submitter>Ruslan Baratov</submitter>
<date>18 Aug 2022</date>
<priority>3</priority>

<discussion>
<p>
Following document number <paper num="N4910"/> about signal-safe instructions
<sref ref="[support.signal]"/> Signal handlers, and it's unclear whether
<tt>std::atomic_flag</tt> is signal-safe.
<p/>
Formally it doesn't fit any of the mentioned conditions:
</p>
<ul>
<li><p><tt>f</tt> is a non-static member function invoked on an object <tt>A</tt>, such that
<tt>A.is_lock_free()</tt> yields <tt>true</tt>, or</p>
<blockquote class="note"><p>
(there is no <tt>is_lock_free</tt> method in <tt>std::atomic_flag</tt> class)
</p></blockquote>
</li>
<li><p><tt>f</tt> is a non-member function, and for every pointer-to-atomic argument <tt>A</tt>
passed to <tt>f</tt>, <tt>atomic_is_lock_free(A)</tt> yields <tt>true</tt></p>
<blockquote class="note"><p>
(<tt>std::atomic_flag</tt> object can't be passed to <tt>atomic_is_lock_free</tt> as argument)
</p></blockquote></li>
</ul>
<p>
However, <tt>std::atomic_flag</tt> seem to fit well here, it's atomic, and it's
always lock-free.
<p/>
The suggestion is as follows: If <tt>std::atomic_flag</tt> is signal-safe, then it
should be explicitly mentioned in <sref ref="[support.signal]"/>, e.g., the following lines
should be added:
</p>
<blockquote>
<ul>
<li><p><ins><tt>f</tt> is a non-static member function invoked on an <tt>atomic_flag</tt> object, or</ins></p></li>
<li><p><ins><tt>f</tt> is a non-member function, and every pointer-to-atomic argument
passed to <tt>f</tt> is <tt>atomic_flag</tt>, or</ins></p></li>
</ul>
</blockquote>
<p>
If the <tt>std::atomic_flag</tt> is not signal-safe, the following note could be added:
</p>
<blockquote>
<p>
<ins>[<i>Note:</i> Even though <tt>atomic_flag</tt> is atomic and lock-free, it's not signal-safe. &mdash; <i>end note</i>]</ins>
</p>
</blockquote>

<note>2022-09-23; Reflector poll</note>
<p>
Set priority to 3 after reflector poll. Send to SG1.
</p>
<p>
Another way to fix this is to add <tt>is_always_lock_free (=true)</tt> and
<tt>is_lock_free() { return true; }</tt> to <tt>atomic_flag</tt>.
</p>

<note>Kona 2022-11-10; SG1 yields a recommendation</note>
<p>
Poll: Adopt the proposed resolution for LWG3756 <br/>
"f is a non-static member function invoked on an
atomic_flag object, or"
<br/>
"f is a non-member function, and every pointer-to-
atomic argument passed to f is atomic_flag, or"
<pre>
SF F N A SA
11 3 0 0 0
</pre>
</p>
<p>
Unanimous consent
</p>
<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">

<p>
This wording is relative to <paper num="N4917"/>.
</p>

<ol>
<li><p>Modify <sref ref="[support.signal]"/> as indicated:</p>
<blockquote>
<p>-1-
A call to the function <tt>signal</tt> synchronizes with any resulting
invocation of the signal handler so installed.
</p>

<p>-2-
A <i>plain lock-free atomic operation</i> is an invocation of a function
<tt>f</tt> from <sref ref="[atomics]"/>, such that:
</p>
<ol style="list-style-type: none">
<li>(2.1) &mdash;
<tt>f</tt> is the function <tt>atomic_is_lock_free()</tt>, or
</li>
<li>(2.2) &mdash;
<tt>f</tt> is the member function <tt>is_lock_free()</tt>, or
</li>
<li><ins>(2.?) &mdash;
<tt>f</tt> is a non-static member function invoked on an
<tt>atomic_flag</tt> object, or</ins>
</li>
<li><ins>(2.?) &mdash;
<tt>f</tt> is a non-member function, and every pointer-to-atomic argument
passed to <tt>f</tt> is <tt>atomic_flag</tt>, or</ins>
</li>
<li>(2.3) &mdash;
<tt>f</tt> is a non-static member function invoked on an object <tt>A</tt>,
such that <tt>A.is_lock_free()</tt> yields <tt>true</tt>, or
</li>
<li>(2.4) &mdash;
<tt>f</tt> is a non-member function, and for every pointer-to-atomic argument
<tt>A</tt> passed to <tt>f</tt>,
<tt>atomic_is_lock_free(A)</tt> yields <tt>true</tt>.
</li>
</ol>
<p>-3-
An evaluation is <i>signal-safe</i> unless it includes one of the following:
</p>
<ol style="list-style-type: none">
<li>(3.1) &mdash;
a call to any standard library function, except for plain lock-free
atomic operations and functions explicitly identified as signal-safe;
<p>
[<i>Note 1</i>: This implicitly excludes the use of <tt>new</tt> and
<tt>delete</tt> expressions that rely on a library-provided memory allocator.
&mdash; <i>end note</i>]
</p>
</li>
<li>(3.2) &mdash;
an access to an object with thread storage duration;
</li>
<li>(3.3) &mdash;
a <tt>dynamic_cast</tt> expression;
</li>
<li>(3.4) &mdash;
throwing of an exception;
</li>
<li>(3.5) &mdash;
control entering a <i>try-block</i> or <i>function-try-block</i>;
</li>
<li>(3.6) &mdash;
initialization of a variable with static storage duration requiring
dynamic initialization (<sref ref="[basic.start.dynamic]"/>, <sref ref="[stmt.dcl]"/>)<sup>206</sup>; or
</li>
<li>(3.7) &mdash;
waiting for the completion of the initialization of a variable with
static storage duration (<sref ref="[stmt.dcl]"/>).
</li>
</ol>
<p>
A signal handler invocation has undefined behavior if it includes an
evaluation that is not signal-safe.
</p>
</blockquote>
</li>
</ol>


</blockquote>

<note>2022-11-11; Jonathan provides improved wording</note>
<note>Kona 2022-11-11; Move to Ready</note>

</discussion>

<resolution>

<p>
This wording is relative to <paper num="N4917"/>.
</p>

<ol>
<li><p>Modify <sref ref="[support.signal]"/> as indicated:</p>
<blockquote>
<p>-1-
A call to the function <tt>signal</tt> synchronizes with any resulting
invocation of the signal handler so installed.
</p>

<p>-2-
A <i>plain lock-free atomic operation</i> is an invocation of a function
<tt>f</tt> from <sref ref="[atomics]"/>, such that:
</p>
<ol style="list-style-type: none">
<li>(2.1) &mdash;
<tt>f</tt> is the function <tt>atomic_is_lock_free()</tt>, or
</li>
<li>(2.2) &mdash;
<tt>f</tt> is the member function <tt>is_lock_free()</tt>, or
</li>
<li><ins>(2.?) &mdash;
<tt>f</tt> is a non-static member function of class <tt>atomic_flag</tt>, or
</ins>
</li>
<li><ins>(2.?) &mdash;
<tt>f</tt> is a non-member function, and the first parameter of <tt>f</tt>
has type <i>cv</i> <tt>atomic_flag*</tt>, or
</ins>
</li>
<li>(2.3) &mdash;
<tt>f</tt> is a non-static member function invoked on an object <tt>A</tt>,
such that <tt>A.is_lock_free()</tt> yields <tt>true</tt>, or
</li>
<li>(2.4) &mdash;
<tt>f</tt> is a non-member function, and for every pointer-to-atomic argument
<tt>A</tt> passed to <tt>f</tt>,
<tt>atomic_is_lock_free(A)</tt> yields <tt>true</tt>.
</li>
</ol>
<p>-3-
An evaluation is <i>signal-safe</i> unless it includes one of the following:
</p>
<ol style="list-style-type: none">
<li>(3.1) &mdash;
a call to any standard library function, except for plain lock-free
atomic operations and functions explicitly identified as signal-safe;
<p>
[<i>Note 1</i>: This implicitly excludes the use of <tt>new</tt> and
<tt>delete</tt> expressions that rely on a library-provided memory allocator.
&mdash; <i>end note</i>]
</p>
</li>
<li>(3.2) &mdash;
an access to an object with thread storage duration;
</li>
<li>(3.3) &mdash;
a <tt>dynamic_cast</tt> expression;
</li>
<li>(3.4) &mdash;
throwing of an exception;
</li>
<li>(3.5) &mdash;
control entering a <i>try-block</i> or <i>function-try-block</i>;
</li>
<li>(3.6) &mdash;
initialization of a variable with static storage duration requiring
dynamic initialization (<sref ref="[basic.start.dynamic]"/>, <sref ref="[stmt.dcl]"/>)<sup>206</sup>; or
</li>
<li>(3.7) &mdash;
waiting for the completion of the initialization of a variable with
static storage duration (<sref ref="[stmt.dcl]"/>).
</li>
</ol>
<p>
A signal handler invocation has undefined behavior if it includes an
evaluation that is not signal-safe.
</p>
</blockquote>
</li>
</ol>

</resolution>

</issue>
