<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3794" status="New">
<title><tt>std::filesystem::path::iterator::reference</tt> should be allowed to be <tt>std::filesystem::path</tt></title>
<section><sref ref="[fs.path.itr]"/></section>
<submitter>Jiang An</submitter>
<date>17 Oct 2022</date>
<priority>99</priority>

<discussion>
<p>
Currently, <sref ref="[fs.path.itr]"/>/2 effectively requires <tt>std::filesystem::path::iterator::reference</tt> to be 
a reference type, due to the requirements for (legacy) bidirectional iterators. However, it's reasonable for the 
<tt>operator*</tt> to return <tt>path</tt> by value, which can make the iterator model <tt>std::bidirectional_iterator</tt>, 
be compatible with <tt>std::reverse_iterator</tt>, and avoid complicated data structures (e.g. those in libstdc++) 
for achieving such purpose.
<p/>
libc++ is already doing so. I think we should make such a strategy conforming.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4917"/>.
</p>

<ol>
<li><p>Modify <sref ref="[fs.path.itr]"/> as indicated:</p>

<blockquote>
<p>
-2- A <tt>path::iterator</tt> is a constant iterator meeting all the requirements of a bidirectional iterator 
(<sref ref="[bidirectional.iterators]"/>) except that, for dereferenceable iterators <tt>a</tt> and <tt>b</tt> of 
type <tt>path::iterator</tt> with <tt>a == b</tt>, there is no requirement that <tt>*a</tt> and <tt>*b</tt> 
are bound to the same object<ins>, and its <tt>reference</tt> may be <tt>path</tt></ins>. Its <tt>value_type</tt> is <tt>path</tt>.
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
