<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2751" status="New">
<title><tt>shared_ptr</tt> deleter not specified to observe expired <tt>weak_ptr</tt> instances</title>
<section><sref ref="[util.smartptr.shared.dest]"/></section>
<submitter>Aaron Jacobs</submitter>
<date>21 Jul 2016</date>
<priority>4</priority>

<discussion>
<p>
The C++14 standard contains no language that guarantees the deleter run by a
<tt>shared_ptr</tt> will see all associated <tt>weak_ptr</tt> instances as expired. For example,
the standard doesn't appear to guarantee that the assertion in the following
snippet won't fire:
</p>
<blockquote><pre>
std::weak_ptr&lt;Foo&gt; weak;
std::shared_ptr&lt;Foo&gt; strong{
  new Foo,
  [&amp;weak] (Foo* f) {
    assert(weak.expired());
    delete f;
  },
};

weak = strong;
strong.reset();
</pre></blockquote>
<p>
It seems clear that the intent is that associated <tt>weak_ptr</tt>s are expired,
because otherwise <tt>shared_ptr</tt> deleters could resurrect a reference to an object
that is being deleted.
<p/>
Suggested fix: <sref ref="[util.smartptr.shared.dest]"/> should specify that the decrease in
<tt>use_count()</tt> caused by the destructor is sequenced before the call to the
deleter or the call to <tt>delete p</tt>.
</p>

<note>2016-11-08, Jonathan and STL suggest NAD</note>
<p>
STL and Jonathan feel that the example has unspecified behaviour, and the
assertion is allowed to fire, and that's OK (the program's expectation
is not reasonable). Otherwise it's necessary to move-construct a copy
of the deleter and use that copy to destroy the owned pointer. We do
not want to be required to do that.
</p>
<p>See also <iref ref="2262"/>.</p>

<note>2017-09-20, Jonathan comments</note>
<p>
I'd like to withdraw my NAD suggestion. The value of <tt>use_count()</tt> is already observable during the destructor via 
<tt>shared_ptr</tt> and <tt>weak_ptr</tt> objects that share ownership, so specifying when it changes ensures correct 
behaviour.
</p>

<note>2025-03-18, Jonathan comments</note>
<p>See also <iref ref="2907"/>.</p>

</discussion>

<resolution>
</resolution>

</issue>
