<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2819" status="New">
<title>Unspecified <i>Return type:</i> elements</title>
<section><sref ref="[thread.req.lockable]"/><sref ref="[thread.mutex.requirements]"/></section>
<submitter>Agust&iacute;n K-ballo Berg&eacute;</submitter>
<date>12 Nov 2016</date>
<priority>3</priority>

<discussion>
<p>
The current draft contains 14 occurrences of a <i>Return type:</i> clause.
That clause is not covered by <sref ref="[structure.specifications]"/> p3.
This was reported as editorial request <a href="https://github.com/cplusplus/draft/issues/266">#266</a>.
</p>

<note>Issues Telecon 16-Dec-2016</note>
<p>Priority 3; Jonathan to provide wording.</p>

<note>12-May-2020, Jonathan provides wording to correct the <b>13</b> occurrences.</note>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>This wording is relative to <a href="https://wg21.link/n4861">N4681</a>.</p>

<ol>
<li>
<p>Modify <sref ref="[thread.req.lockable.req]"/> as indicated:</p>
<blockquote>
<p>-1- A type <code>L</code> meets the <i>Cpp17Lockable</i> requirements
if it meets the <i>Cpp17BasicLockable</i> requirements
and the following expressions are
well-formed<ins>, have type <code>bool</code>,</ins>
and have the specified semantics
(<code>m</code> denotes a value of type <code>L</code>).
</p>
<p><code>m.try_lock()</code></p>
<blockquote>
<p>-2- <i>Effects:</i> [...]</p>
<p><del>-3- <i>Return type:</i> <code>bool</code>.</del></p>
<p>-4- <i>Returns:</i> <code>true</code> if the lock was acquired, <code>false</code> otherwise.</p>
</blockquote>
</blockquote>
</li>

<li>
<p>Modify <sref ref="[thread.req.lockable.timed]"/> as indicated:</p>
<blockquote>
<p>-1- A type <code>L</code> meets the <i>Cpp17TimedLockable</i> requirements
if it meets the <i>Cpp17BasicLockable</i> requirements
and the following expressions are
well-formed<ins>, have type <code>bool</code>,</ins>
and have the specified semantics
(<code>m</code> denotes a value of type <code>L</code>,
<code>rel_time</code> denotes a value of an instantiation of
<code>duration</code> (<sref ref="[time.duration]"/>),
and <code>abs_time</code> denotes a value of an instantiation of
<code>time_point</code> (<sref ref="[time.point]"/>)).
</p>
<p><code>m.try_lock_for(rel_time)</code></p>
<blockquote>
<p>-2- <i>Effects:</i> [...]</p>
<p><del>-3- <i>Return type:</i> <code>bool</code>.</del></p>
<p>-4- <i>Returns:</i> <code>true</code> if the lock was acquired, <code>false</code> otherwise.</p>
</blockquote>
<p><code>m.try_lock_until(abs_time)</code></p>
<blockquote>
<p>-2- <i>Effects:</i> [...]</p>
<p><del>-3- <i>Return type:</i> <code>bool</code>.</del></p>
<p>-4- <i>Returns:</i> <code>true</code> if the lock was acquired, <code>false</code> otherwise.</p>
</blockquote>
</blockquote>
</li>

<li>
<p>Modify <sref ref="[thread.mutex.requirements.mutex]"/> as indicated:</p>
<blockquote>
<p>-6- The expression <code>m.lock()</code> is
well-formed<ins>, has type <code>void</code>,</ins>
and has the following semantics:</p>
<blockquote>
<p>-7- <i>Preconditions:</i> [...]</p>
<p>-8- <i>Effects:</i> [...]</p>
<p>-9- <i>Postconditions:</i> [...]</p>
<p><del>-10- <i>Return type:</i> <code>void</code>.</del></p>
<p>-11- <i>Synchronization:</i> [...]</p>
<p>-12- <i>Throws:</i> [...]</p>
<p>-13- <i>Error conditions:</i> [...]</p>
</blockquote>
<p>-14- The expression <code>m.try_lock()</code> is
well-formed<ins>, has type <code>bool</code>,</ins>
and has the following semantics:</p>
<blockquote>
<p>-15- <i>Preconditions:</i> [...]</p>
<p>-16- <i>Effects:</i> [...]</p>
<p><del>-17- <i>Return type:</i> <code>bool</code>.</del></p>
<p>-18- <i>Returns:</i> <code>true</code> if ownership of the mutex was
obtained for the calling thread, otherwise <code>false</code>.</p>
<p>-19- <i>Synchronization:</i> [...]</p>
<p>-20- <i>Throws:</i> Nothing.</p>
</blockquote>
<p>-21- The expression <code>m.unlock()</code> is
well-formed<ins>, has type <code>void</code>,</ins>
and has the following semantics:</p>
<blockquote>
<p>-22- <i>Preconditions:</i> [...]</p>
<p>-23- <i>Effects:</i> [...]</p>
<p><del>-24- <i>Return type:</i> <code>void</code>.</del></p>
<p>-25- <i>Synchronization:</i> [...]</p>
<p>-26- <i>Throws:</i> Nothing.</p>
</blockquote>
</blockquote>
</li>

<li>
<p>Modify <sref ref="[thread.timedmutex.requirements]"/> as indicated:</p>
<blockquote>
<p>-1- The <i>timed mutex types</i> are the standard library types [...] </p>
<p>-2- The timed mutex types meet the <i>Cpp17TimedLockable</i> requirements
(<sref ref="[thread.req.lockable.timed]"/>).</p>
<p>-3- The expression <code>m.try_lock_for(rel_time)</code> is
well-formed<ins>, has type <code>bool</code>,</ins>
and has the following semantics:
</p>
<blockquote>
<p>-4- <i>Preconditions:</i> [...]</p>
<p>-5- <i>Effects:</i> [...]</p>
<p><del>-6- <i>Return type:</i> <code>bool</code>.</del></p>
<p>-7- <i>Returns:</i> <code>true</code> if the shared lock was acquired,
<code>false</code> otherwise.</p>
<p>-8- <i>Synchronization:</i> [...]</p>
<p>-9- <i>Throws:</i> [...]</p>
</blockquote>
<p>-10- The expression <code>m.try_lock_until(abs_time)</code> is
well-formed<ins>, has type <code>bool</code>,</ins>
and has the following semantics:
</p>
<blockquote>
<p>-11- <i>Preconditions:</i> [...]</p>
<p>-12- <i>Effects:</i> [...]</p>
<p><del>-13- <i>Return type:</i> <code>bool</code>.</del></p>
<p>-14- <i>Returns:</i> <code>true</code> if ownership was obtained,
otherwise <code>false</code>.</p>
<p>-15- <i>Synchronization:</i> [...]</p>
<p>-16- <i>Throws:</i> [...]</p>
</blockquote>
</blockquote>
</li>

<li>
<p>Modify <sref ref="[thread.sharedmutex.requirements]"/> as indicated:</p>
<blockquote>
<p>-1- The standard library types <code>shared_mutex</code>
and  <code>shared_timed_mutex</code>
are <i>shared mutex types</i>. [...]
</p>
<p>-2- In addition to the exclusive lock ownership mode [...]</p>
<p>-3- The expression <code>m.lock_shared()</code> is
well-formed<ins>, has type <code>void</code>,</ins>
and has the following semantics:
</p>
<blockquote>
<p>-4- <i>Preconditions:</i> [...]</p>
<p>-5- <i>Effects:</i> [...]</p>
<p>-6- <i>Postconditions:</i> [...]</p>
<p><del>-7- <i>Return type:</i> <code>void</code>.</del></p>
<p>-8- <i>Synchronization:</i> [...]</p>
<p>-9- <i>Throws:</i> [...]</p>
<p>-10- <i>Error conditions:</i> [...]</p>
</blockquote>
<p>-11- The expression <code>m.unlock_shared()</code> is
well-formed<ins>, has type <code>void</code>,</ins>
and has the following semantics:
</p>
<blockquote>
<p>-12- <i>Preconditions:</i> [...]</p>
<p>-13- <i>Effects:</i> [...]</p>
<p><del>-14- <i>Return type:</i> <code>void</code>.</del></p>
<p>-15- <i>Synchronization:</i> [...]</p>
<p>-16- <i>Throws:</i> [...]</p>
</blockquote>
<p>-17- The expression <code>m.try_lock_shared()</code> is
well-formed<ins>, has type <code>bool</code>,</ins>
and has the following semantics:
</p>
<blockquote>
<p>-18- <i>Preconditions:</i> [...]</p>
<p>-19- <i>Effects:</i> [...]</p>
<p><del>-20- <i>Return type:</i> <code>bool</code>.</del></p>
<p>-21- <i>Returns:</i> <code>true</code> if the shared ownership lock was acquired,
<code>false</code> otherwise.</p>
<p>-22- <i>Synchronization:</i> [...]</p>
<p>-23- <i>Throws:</i> [...]</p>
</blockquote>
</blockquote>
</li>

<li>
<p>Modify <sref ref="[thread.sharedtimedmutex.requirements]"/> as indicated:</p>
<blockquote>
<p>-1- The standard library type <code>shared_timed_mutex</code>
is a <i>shared timed mutex type</i>. [...]
</p>
<p>-2- The expression <code>m.try_lock_shared_for(rel_time)</code> is
well-formed<ins>, has type <code>bool</code>,</ins>
and has the following semantics:
</p>
<blockquote>
<p>-3- <i>Preconditions:</i> [...]</p>
<p>-4- <i>Effects:</i> [...]</p>
<p><del>-5- <i>Return type:</i> <code>bool</code>.</del></p>
<p>-6- <i>Returns:</i> <code>true</code> if the shared lock was acquired,
<code>false</code> otherwise.</p>
<p>-7- <i>Synchronization:</i> [...]</p>
<p>-8- <i>Throws:</i> [...]</p>
</blockquote>
<p>-9- The expression <code>m.try_lock_shared_until(abs_time)</code> is
well-formed<ins>, has type <code>bool</code>,</ins>
and has the following semantics:
</p>
<blockquote>
<p>-10- <i>Preconditions:</i> [...]</p>
<p>-11- <i>Effects:</i> [...]</p>
<p><del>-12- <i>Return type:</i> <code>bool</code>.</del></p>
<p>-13- <i>Returns:</i> <code>true</code> if the shared lock was acquired,
<code>false</code> otherwise.</p>
<p>-14- <i>Synchronization:</i> [...]</p>
<p>-15- <i>Throws:</i> [...]</p>
</blockquote>
</blockquote>
</li>
</ol>
</blockquote>

<note>2022-11-06; Daniel comments and provides alternative wording</note>
<p>
Now that we have the new element <i>Result:</i> specified in <sref ref="[structure.specifications]"/>,
we can simply replace all occurrences of the <i>Return type:</i> by this element.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4917"/>.
</p>

<ol>
<li>
<p>Modify <sref ref="[thread.req.lockable.req]"/> as indicated:</p>
<blockquote>
<p>-1- A type <tt>L</tt> meets the <i>Cpp17Lockable</i> requirements
if it meets the <i>Cpp17BasicLockable</i> requirements
and the following expressions are
well-formed and have the specified semantics
(<tt>m</tt> denotes a value of type <tt>L</tt>).
</p>
<p><tt>m.try_lock()</tt></p>
<blockquote>
<p>-2- <i>Effects:</i> [...]</p>
<p>-3- <i><del>Return type</del><ins>Result</ins>:</i> <tt>bool</tt><del>.</del></p>
<p>-4- <i>Returns:</i> <tt>true</tt> if the lock was acquired, otherwise <tt>false</tt>.</p>
</blockquote>
</blockquote>
</li>

<li>
<p>Modify <sref ref="[thread.req.lockable.timed]"/> as indicated:</p>
<blockquote>
<p>-1- A type <tt>L</tt> meets the <i>Cpp17TimedLockable</i> requirements
if it meets the <i>Cpp17Lockable</i> requirements
and the following expressions are
well-formed and have the specified semantics
(<tt>m</tt> denotes a value of type <tt>L</tt>,
<tt>rel_time</tt> denotes a value of an instantiation of
<tt>duration</tt> (<sref ref="[time.duration]"/>),
and <tt>abs_time</tt> denotes a value of an instantiation of
<tt>time_point</tt> (<sref ref="[time.point]"/>)).
</p>
<p><tt>m.try_lock_for(rel_time)</tt></p>
<blockquote>
<p>-2- <i>Effects:</i> [...]</p>
<p>-3- <i><del>Return type</del><ins>Result</ins>:</i> <tt>bool</tt><del>.</del></p>
<p>-4- <i>Returns:</i> <tt>true</tt> if the lock was acquired, otherwise <tt>false</tt>.</p>
</blockquote>
<p><tt>m.try_lock_until(abs_time)</tt></p>
<blockquote>
<p>-5- <i>Effects:</i> [...]</p>
<p>-6- <i><del>Return type</del><ins>Result</ins>:</i> <tt>bool</tt><del>.</del></p>
<p>-7- <i>Returns:</i> <tt>true</tt> if the lock was acquired, otherwise <tt>false</tt>.</p>
</blockquote>
</blockquote>
</li>

<li>
<p>Modify <sref ref="[thread.mutex.requirements.mutex.general]"/> as indicated:</p>
<blockquote>
<p>-5- The expression <tt>m.lock()</tt> is
well-formed and has the following semantics:</p>
<blockquote>
<p>-6- <i>Preconditions:</i> [...]</p>
<p>-7- <i>Effects:</i> [...]</p>
<p>-8- <i>Synchronization:</i> [...]</p>
<p>-9- <i>Postconditions:</i> [...]</p>
<p>-10- <i><del>Return type</del><ins>Result</ins>:</i> <tt>void</tt><del>.</del></p>
<p>-11- <i>Throws:</i> [...]</p>
<p>-12- <i>Error conditions:</i> [...]</p>
</blockquote>
<p>-13- The expression <tt>m.try_lock()</tt> is
well-formed and has the following semantics:</p>
<blockquote>
<p>-14- <i>Preconditions:</i> [...]</p>
<p>-15- <i>Effects:</i> [...]</p>
<p>-16- <i>Synchronization:</i> [...]</p>
<p>-17- <i><del>Return type</del><ins>Result</ins>:</i> <tt>bool</tt><del>.</del></p>
<p>-18- <i>Returns:</i> <tt>true</tt> if ownership was obtained, otherwise <tt>false</tt>.</p>
<p>-19- <i>Throws:</i> Nothing.</p>
</blockquote>
<p>-20- The expression <tt>m.unlock()</tt> is
well-formed and has the following semantics:</p>
<blockquote>
<p>-21- <i>Preconditions:</i> [...]</p>
<p>-22- <i>Effects:</i> [...]</p>
<p>-23- <i><del>Return type</del><ins>Result</ins>:</i> <tt>void</tt><del>.</del></p>
<p>-24- <i>Synchronization:</i> [...]</p>
<p>-25- <i>Throws:</i> Nothing.</p>
</blockquote>
</blockquote>
</li>

<li>
<p>Modify <sref ref="[thread.timedmutex.requirements.general]"/> as indicated:</p>
<blockquote>
<p>-1- The <i>timed mutex types</i> are the standard library types [&hellip;] </p>
<p>-2- The expression <tt>m.try_lock_for(rel_time)</tt> is
well-formed and has the following semantics:
</p>
<blockquote>
<p>-3- <i>Preconditions:</i> [...]</p>
<p>-4- <i>Effects:</i> [...]</p>
<p>-5- <i>Synchronization:</i> [...]</p>
<p>-6- <i><del>Return type</del><ins>Result</ins>:</i> <tt>bool</tt><del>.</del></p>
<p>-7- <i>Returns:</i> <tt>true</tt> if ownership was obtained, otherwise <tt>false</tt>.</p>
<p>-8- <i>Throws:</i> [...]</p>
</blockquote>
<p>-9- The expression <tt>m.try_lock_until(abs_time)</tt> is
well-formed and has the following semantics:
</p>
<blockquote>
<p>-10- <i>Preconditions:</i> [...]</p>
<p>-11- <i>Effects:</i> [...]</p>
<p>-12- <i>Synchronization:</i> [...]</p>
<p>-13- <i><del>Return type</del><ins>Result</ins>:</i> <tt>bool</tt><del>.</del></p>
<p>-14- <i>Returns:</i> <tt>true</tt> if ownership was obtained, otherwise <tt>false</tt>.</p>
<p>-15- <i>Throws:</i> [...]</p>
</blockquote>
</blockquote>
</li>

<li>
<p>Modify <sref ref="[thread.sharedmutex.requirements.general]"/> as indicated:</p>
<blockquote>
<p>-1- The standard library types <tt>shared_mutex</tt>
and  <tt>shared_timed_mutex</tt>
are <i>shared mutex types</i>. [...]
</p>
<p>-2- In addition to the exclusive lock ownership mode [...]</p>
<p>-3- The expression <tt>m.lock_shared()</tt> is
well-formed and has the following semantics:
</p>
<blockquote>
<p>-4- <i>Preconditions:</i> [...]</p>
<p>-5- <i>Effects:</i> [...]</p>
<p>-6- <i>Synchronization:</i> [...]</p>
<p>-7- <i>Postconditions:</i> [...]</p>
<p>-8- <i><del>Return type</del><ins>Result</ins>:</i> <tt>void</tt><del>.</del></p>
<p>-9- <i>Throws:</i> [...]</p>
<p>-10- <i>Error conditions:</i> [...]</p>
</blockquote>
<p>-11- The expression <tt>m.unlock_shared()</tt> is
well-formed and has the following semantics:
</p>
<blockquote>
<p>-12- <i>Preconditions:</i> [...]</p>
<p>-13- <i>Effects:</i> [...]</p>
<p>-14- <i><del>Return type</del><ins>Result</ins>:</i> <tt>void</tt><del>.</del></p>
<p>-15- <i>Synchronization:</i> [...]</p>
<p>-16- <i>Throws:</i> [...]</p>
</blockquote>
<p>-17- The expression <tt>m.try_lock_shared()</tt> is
well-formed and has the following semantics:
</p>
<blockquote>
<p>-18- <i>Preconditions:</i> [...]</p>
<p>-19- <i>Effects:</i> [...]</p>
<p>-20- <i>Synchronization:</i> [...]</p>
<p>-21- <i><del>Return type</del><ins>Result</ins>:</i> <tt>bool</tt><del>.</del></p>
<p>-22- <i>Returns:</i> <tt>true</tt> if the shared lock was acquired, otherwise <tt>false</tt>.</p>
<p>-23- <i>Throws:</i> [...]</p>
</blockquote>
</blockquote>
</li>

<li>
<p>Modify <sref ref="[thread.sharedtimedmutex.requirements.general]"/> as indicated:</p>
<blockquote>
<p>-1- The standard library type <tt>shared_timed_mutex</tt>
is a <i>shared timed mutex type</i>. [...]
</p>
<p>-2- The expression <tt>m.try_lock_shared_for(rel_time)</tt> is
well-formed and has the following semantics:
</p>
<blockquote>
<p>-3- <i>Preconditions:</i> [...]</p>
<p>-4- <i>Effects:</i> [...]</p>
<p>-5- <i>Synchronization:</i> [...]</p>
<p>-6- <i><del>Return type</del><ins>Result</ins>:</i> <tt>bool</tt><del>.</del></p>
<p>-7- <i>Returns:</i> <tt>true</tt> if the shared lock was acquired, otherwise
<tt>false</tt>.</p>
<p>-8- <i>Throws:</i> [...]</p>
</blockquote>
<p>-9- The expression <tt>m.try_lock_shared_until(abs_time)</tt> is
well-formed and has the following semantics:
</p>
<blockquote>
<p>-10- <i>Preconditions:</i> [...]</p>
<p>-11- <i>Effects:</i> [...]</p>
<p>-12- <i>Synchronization:</i> [...]</p>
<p>-13- <i><del>Return type</del><ins>Result</ins>:</i> <tt>bool</tt><del>.</del></p>
<p>-14- <i>Returns:</i> <tt>true</tt> if the shared lock was acquired, otherwise
<tt>false</tt>.</p>
<p>-15- <i>Throws:</i> [...]</p>
</blockquote>
</blockquote>
</li>
</ol>

</resolution>

</issue>
