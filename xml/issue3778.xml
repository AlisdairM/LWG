<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3778" status="New">
<title><tt>vector&lt;bool&gt;</tt> missing exception specifications</title>
<section><sref ref="[vector.bool.pspc]"/></section>
<submitter>Alisdair Meredith</submitter>
<date>13 Sep 2022</date>
<priority>99</priority>

<discussion>
<p>
As noted back in <paper num="P0177R2"/>, the primary template for <tt>vector</tt> has picked 
up some exception specification, but the partial specialization for <tt>vector&lt;bool&gt;</tt> 
has not been so updated.
<p/>
Several other changes have been made to <tt>vector</tt> in the intervening years, but these 
particular exception specifications have still not been updated. Note that the free-function 
<tt>swap</tt> in the header synopsis will automatically pick up this update once applied.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4917"/>.
</p>

<ol>

<li><p>Modify <sref ref="[vector.bool.pspc]"/>, partial class template 
<tt>vector&lt;bool, Allocator&gt;</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
namespace std {
  template&lt;class Allocator&gt;
  class vector&lt;bool, Allocator&gt; {
  public:
    [&hellip;]
    // <i>construct/copy/destroy</i>
    constexpr vector() <ins>noexcept(noexcept(Allocator()))</ins> : vector(Allocator()) { }
    constexpr explicit vector(const Allocator&amp;) <ins>noexcept</ins>;
    constexpr explicit vector(size_type n, const Allocator&amp; = Allocator());
    constexpr vector(size_type n, const bool&amp; value, const Allocator&amp; = Allocator());
    template&lt;class InputIterator&gt;
      constexpr vector(InputIterator first, InputIterator last, const Allocator&amp; = Allocator());
    template&lt;container-compatible-range &lt;bool&gt; R&gt;
      constexpr vector(from_range_t, R&amp;&amp; rg, const Allocator&amp; = Allocator());
    constexpr vector(const vector&amp; x);
    constexpr vector(vector&amp;&amp; x) <ins>noexcept</ins>;
    constexpr vector(const vector&amp;, const type_identity_t&lt;Allocator&gt;&amp;);
    constexpr vector(vector&amp;&amp;, const type_identity_t&lt;Allocator&gt;&amp;);
    constexpr vector(initializer_list&lt;bool&gt;, const Allocator&amp; = Allocator());
    constexpr ~vector();
    constexpr vector&amp; operator=(const vector&amp; x);
    constexpr vector&amp; operator=(vector&amp;&amp; x)
      <ins>noexcept(allocator_traits&lt;Allocator&gt;::propagate_on_container_move_assignment::value ||</ins>
               <ins>allocator_traits&lt;Allocator&gt;::is_always_equal::value)</ins>;
    constexpr vector&amp; operator=(initializer_list&lt;bool&gt;);
    template&lt;class InputIterator&gt;
      constexpr void assign(InputIterator first, InputIterator last);
    template&lt;container-compatible-range &lt;bool&gt; R&gt;
      constexpr void assign_range(R&amp;&amp; rg);
    constexpr void assign(size_type n, const bool&amp; t);
    constexpr void assign(initializer_list&lt;bool&gt;);
    constexpr allocator_type get_allocator() const noexcept;
  
    [&hellip;]
    constexpr iterator erase(const_iterator position);
    constexpr iterator erase(const_iterator first, const_iterator last);
    constexpr void swap(vector&amp;)
      <ins>noexcept(allocator_traits&lt;Allocator&gt;::propagate_on_container_swap::value ||</ins>
               <ins>allocator_traits&lt;Allocator&gt;::is_always_equal::value)</ins>;
    constexpr static void swap(reference x, reference y) noexcept;
    constexpr void flip() noexcept; // <i>flips all bits</i>
    constexpr void clear() noexcept;
  };
}
</pre>
</blockquote>
</li>

</ol>
</resolution>

</issue>
