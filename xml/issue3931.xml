<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3931" status="New">
<title>Too many paper bump <tt>__cpp_lib_ranges</tt></title>
<section><sref ref="[version.syn]"/></section>
<submitter>Jiang An</submitter>
<date>03 May 2023</date>
<priority>3</priority>

<discussion>
<p>
Currently MSVC STL implements <paper num="P2602R2"/> and <paper num="P2609R3"/> in C++20 mode 
as if they were defect reports. However, since <paper num="P2387R3"/> and <paper num="P2494R2"/>, 
which are possibly considered pure functionality extensions in C++23, also bump <tt>__cpp_lib_ranges</tt>, 
it's impossible to detect the status of P2602R2 and P2609R3 in C++20 mode (see 
<a href="https://github.com/microsoft/STL/pull/3486#discussion_r1112178364">the discussion in MSVC STL repo</a>).
<p/>
This may be a non-defect as P2602R2 and P2609R3 are not officially DRs. However, if these papers 
(including upcoming <paper num="P2538R1"/>) are expected to be implemented in C++20 modes, it seems better 
to establish another feature-test macro (e.g., <tt>__cpp_lib_ranges_mechanism</tt>) for them.
</p>

<note>2023-05-24; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
</p>
<p>
"Needs a more descriptive name than <tt>mechanism</tt>."
</p>

<superseded>
<p>
This wording is relative to <paper num="N4944"/>.
</p>

<ol>
<li>
<p>Modify <sref ref="[version.syn]"/> as indicated:</p>

<blockquote class="note">
<p>
[<i>Drafting note</i>: It is proposed to restore <tt>__cpp_lib_ranges</tt> to the value denoting 
<paper num="P2494R2"/>.]
</p>
</blockquote>

<blockquote>
<pre>
[&hellip;]
#define __cpp_lib_ranges                            <del>202302L</del><ins>202207L</ins>
[&hellip;]
#define __cpp_lib_ranges_join_with                  202202L <i>// also in &lt;ranges&gt;</i>
<ins>#define __cpp_lib_ranges_mechanism                  202302L</ins>
  <ins><i>// also in &lt;algorithm&gt;, &lt;functional&gt;, &lt;iterator&gt;, &lt;memory&gt;, &lt;ranges&gt;</i></ins>
#define __cpp_lib_ranges_repeat                     202207L <i>// also in &lt;ranges&gt;</i>
[&hellip;]
</pre>
</blockquote>
</li>

</ol>

</superseded>

<note>2024-07-24; Jiang An comments and provides improved wording</note>
<p>
All utilities changed by <paper num="P2602R2"/>, <paper num="P2609R3"/>, and <paper num="P2997R1"/> 
are now freestanding, so these proposed macros should also be freestanding.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4986"/>.
</p>

<ol>
<li>
<p>Modify <sref ref="[version.syn]"/> as indicated:</p>

<blockquote class="note">
<p>
[<i>Drafting notes</i>: 
</p>
<ul>
<li><p>It is proposed to restore <tt>__cpp_lib_ranges</tt> to the value denoting <paper num="P2494R2"/>.</p></li>
<li><p><tt>__cpp_lib_ranges_accessors</tt> will cover <paper num="P2602R2"/>.</p></li>
<li><p><tt>__cpp_lib_ranges_indirect_invocation</tt> will cover <paper num="P2609R3"/> and 
<paper num="P2997R1"/>.</p></li>
<li><p>None of <paper num="P2602R2"/>, <paper num="P2609R3"/>, and <paper num="P2997R1"/> 
really affected utilities in <tt>&lt;functional&gt;</tt>, so these two proposed macros are 
not required to be also in <tt>&lt;functional&gt;</tt>.</p></li>
<li><p>Proposed macros are freestanding because utilities changed by these papers are all freestanding now.</p></li>
</ul>
<p>
]
</p>
</blockquote>

<blockquote>
<pre>
[&hellip;]
#define __cpp_lib_ranges                            <del>202406L</del><ins>202207L</ins>
  // <i>also in</i> &lt;algorithm&gt;, &lt;functional&gt;, &lt;iterator&gt;, &lt;memory&gt;, &lt;ranges&gt;
<ins>#define __cpp_lib_ranges_accessors                  202211L
  // <i>freestanding, also in</i> &lt;algorithm&gt;, &lt;iterator&gt;, &lt;memory&gt;, &lt;ranges&gt;</ins>
[&hellip;]
#define __cpp_lib_ranges_generate_random            202403L // <i>also in</i> &lt;random&gt;
<ins>#define __cpp_lib_ranges_indirect_invocation        202406L
  // <i>freestanding, also in</i> &lt;algorithm&gt;, &lt;iterator&gt;, &lt;memory&gt;, &lt;ranges&gt;</ins>
#define __cpp_lib_ranges_iota                       202202L // <i>also in</i> &lt;numeric&gt;
[&hellip;]
</pre>
</blockquote>
</li>

</ol>
</resolution>

</issue>
