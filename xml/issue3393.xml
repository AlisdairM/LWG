<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3393" status="New">
<title>Missing/incorrect feature test macro for coroutines</title>
<section><sref ref="[version.syn]"/></section>
<submitter>Barry Revzin</submitter>
<date>25 Jan 2020</date>
<priority>99</priority>

<discussion>
<p>
We have a policy, established in <a href="https://wg21.link/p1353">P1353</a> (and needing to be added to SD-6):
<p/>
In some cases a feature requires two macros, one for the language and one for the library. For example, the 
library does not want to define its three-way comparison operations unless the compiler supports the feature.
<p/>
For end-users, it is suggested that they test only the library macro, as that will only be true if the 
language macro is also true. As a result, the language macros contain "impl" to distinguish them from the 
more general version that is expected to be set by the library.
That paper added two papers of macros: one for <tt>&lt;=&gt;</tt> and one for destroying <tt>delete</tt>. 
We have a third such example in coroutines: there is library machinery that needs to be provided only when 
the compiler has language support for it, and the end user should just check the library macro.
</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4849">N4849</a>.</p>

<ol>
<li><p>Modify <sref ref="[cpp.predefined]"/>, Table [tab:cpp.predefined.ft], as indicated:</p>

<blockquote>
<table border="1">
<caption>Table 18: Feature-test macros [tab:cpp.predefined.ft]</caption>
<tr align="center">
<th>Macro name</th>
<th>Value</th>
</tr> 

<tr>
<td colspan="2" align="center">
<tt>[&hellip;]</tt>
</td>
</tr>

<tr>
<td>
<tt>__cpp<ins>_impl</ins>_coroutines</tt>
</td>
<td>
<tt>201902L</tt>
</td>
</tr>

<tr>
<td colspan="2" align="center">
<tt>[&hellip;]</tt>
</td>
</tr>

</table>
</blockquote>

</li>

<li><p>Modify <sref ref="[version.syn]"/>, header <tt>&lt;version&gt;</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
[&hellip;]
#define __cpp_lib_constexpr_vector    201907L <i>// also in &lt;vector&gt;</i>
<ins>#define __cpp_lib_coroutines          201902L <i>// also in &lt;coroutine&gt;</i></ins>
#define __cpp_lib_destroying_delete   201806L <i>// also in &lt;new&gt;</i>
[&hellip;]
</pre>
</blockquote>
</li>

</ol>
</resolution>

</issue>
