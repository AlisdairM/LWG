<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2813" status="New">
<title><tt>std::function</tt> should not return dangling references</title>
<section><sref ref="[func.wrap.func.con]"/></section>
<submitter>Brian Bi</submitter>
<date>3 Nov 2016</date>
<priority>99</priority>

<discussion>
<p>
If a <tt>std::function</tt> has a reference as a return type, and that reference binds to a prvalue 
returned by the callable that it wraps, then the reference is always dangling. Because any use of such 
a reference results in undefined behaviour, the <tt>std::function</tt> should not be allowed to be 
initialized with such a callable. Instead, the program should be ill-formed.
<p/>
A minimal example of well-formed code under the current standard that exhibits this issue:
</p>
<blockquote><pre>
#include &lt;functional&gt;
int main() {
  std::function&lt;const int&amp;()&gt; F([]{ return 42; });
  int x = F(); // oops!
}
</pre></blockquote>
</discussion>

<resolution>
</resolution>

</issue>
