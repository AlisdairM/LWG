<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3712" status="New">
<title><tt>chunk_view</tt> and <tt>slide_view</tt> should not be <tt>default_initializable</tt></title>
<section><sref ref="[range.chunk.view.input]"/><sref ref="[range.chunk.view.fwd]"/><sref ref="[range.slide.view]"/></section>
<submitter>Hewill Kang</submitter>
<date>10 Jun 2022</date>
<priority>99</priority>

<discussion>
<p>
Both <tt>chunk_view</tt> and <tt>slide_view</tt> have a precondition that <tt>N</tt> must be positive, 
but they are still <tt>default_initializable</tt> when the underlying range is <tt>default_initializable</tt>, 
which makes the member variable <tt><i>n_</i></tt> initialized with an invalid value <tt>0</tt> when they 
are default-constructed, which produces the following unexpected result:
</p>
<blockquote><pre>
#include &lt;ranges&gt;

using V = std::ranges::iota_view&lt;int, int&gt;;
static_assert(std::ranges::slide_view&lt;V&gt;().empty()); // <span style="color:red;font-weight:bolder">fails</span>
static_assert(std::ranges::chunk_view&lt;V&gt;().empty()); // <span style="color:red;font-weight:bolder">division by zero is not a constant expression</span>
</pre></blockquote>
<p>
Although we could provide a default positive value for <tt><i>n_</i></tt>, I think a more appropriate solution 
would be to not provide the default constructor, since default-constructed values for integer types will 
never be valid.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4910"/>.
</p>

<ol>
<li><p>Modify <sref ref="[range.chunk.view.input]"/> as indicated:</p>

<blockquote>
<pre>
namespace std::ranges {
  [&hellip;]
 
  template&lt;view V&gt;
    requires input_range&lt;V&gt;
  class chunk_view : public view_interface&lt;chunk_view&lt;V&gt;&gt; {
    V <i>base_</i> <del>= V()</del>;                                        <i>// exposition only</i>
    range_difference_t&lt;V&gt; <i>n_</i> <del>= 0</del>;                         <i>// exposition only</i>
    range_difference_t&lt;V&gt; <i>remainder_</i> = 0;                 <i>// exposition only</i>
    [&hellip;]
  public:
    <del>chunk_view() requires default_initializable&lt;V&gt; = default;</del>
    constexpr explicit chunk_view(V base, range_difference_t&lt;V&gt; n);
    [&hellip;]
  };
  [&hellip;]
}
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.chunk.view.fwd]"/> as indicated:</p>

<blockquote>
<pre>
namespace std::ranges {
  template&lt;view V&gt;
    requires forward_range&lt;V&gt;
  class chunk_view&lt;V&gt; : public view_interface&lt;chunk_view&lt;V&gt;&gt; {
    V <i>base_</i> <del>= V()</del>;                   <i>// exposition only</i>
    range_difference_t&lt;V&gt; <i>n_</i> <del>= 0</del>;    <i>// exposition only</i>
    [&hellip;]
  public:
    <del>chunk_view() requires default_initializable&lt;V&gt; = default;</del>
    constexpr explicit chunk_view(V base, range_difference_t&lt;V&gt; n);

    [&hellip;]
  };
}
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.slide.view]"/> as indicated:</p>

<blockquote>
<pre>
namespace std::ranges {
  [&hellip;]

  template&lt;forward_range V&gt;
    requires view&lt;V&gt;
  class slide_view : public view_interface&lt;slide_view&lt;V&gt;&gt; {
    V <i>base_</i> <del>= V()</del>;                      <i>// exposition only</i>
    range_difference_t&lt;V&gt; <i>n_</i> <del>= 0</del>;       <i>// exposition only</i>
    [&hellip;]
  public:
    <del>slide_view() requires default_initializable&lt;V&gt; = default;</del>
    constexpr explicit slide_view(V base, range_difference_t&lt;V&gt; n);

    [&hellip;]
  };
  [&hellip;]
}
</pre>
</blockquote>
</li>

</ol>
</resolution>

</issue>
