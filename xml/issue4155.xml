<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4155" status="New">
<title><i>Cpp17NullablePointer</i> should require that some expression can be contextually converted to bool</title>
<section><sref ref="[nullablepointer.requirements]"/></section>
<submitter>Jiang An</submitter>
<date>18 Sep 2024</date>
<priority>3</priority>

<discussion>
<p>
Currently, <sref ref="[nullablepointer.requirements]"/>/3 requires
"An object `p` of type `P` can be contextually converted to `bool`",
while the core language wording (<sref ref="[conv.general]"/>/4) only says
some expressions can be contextually converted to `bool`.
Moreover, the value category and cv-qualification are not mentioned,
presumably both non-const and const `P`,
together with all value categories are expected.
</p>

<note>2024-10-02; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
</p>
<p>
"This is an improvement, but judging from
<a href="https://github.com/microsoft/STL/issues/4964">microsoft/STL 4964</a>,
I think we actually want to define a "contextually-boolean-testable" for this."
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4988"/>.
</p>

<ol>
<li><p>Modify <sref ref="[nullablepointer.requirements]"/> as indicated:</p>
<blockquote>
<p>
<del>-3- An object `p` of type `P` can be contextually converted to `bool`.
The effect shall be as if `p != nullptr` had been evaluated in place of `p`.
</del>
</p>
</blockquote>
</li>
<li><p>Add a row to the bottom of [tab:cpp17.nullablepointer]:</p>
<blockquote>
<table style="border: 1px solid; border-spacing: 1.5em">
<thead style="text-align: center">
<tr><th>Expression</th><th>Return type</th><th>Operational semantics</th></tr>
</thead>
<tbody>
<tr> <td>...</td> <td>...</td> <td>...</td> </tr>
<tr>
<td><ins>`a ? true : false`</ins></td>
<td><ins>`bool`</ins></td>
<td><ins>`a != np`</ins></td>
</tr>
</tbody>
</table>
</blockquote>
</li>
</ol>
</resolution>

</issue>
