<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3646" status="LEWG">
<title><tt>std::ranges::view_interface::size</tt> returns a signed type</title>
<section><sref ref="[view.interface.general]"/></section>
<submitter>Jiang An</submitter>
<date>29 Nov 2021</date>
<priority>3</priority>

<discussion>
<p>
According to <sref ref="[view.interface.general]"/>, <tt>view_interface::size</tt> returns 
the difference between the sentinel and the beginning iterator, which always has a 
signed-integer-like type. However, IIUC the decision that a <tt>size</tt> member function 
should return an unsigned type by default was made when adopting <paper num="P1227R2"/>, 
and the relative changes of the ranges library were done in <paper num="P1523R1"/>. 
I don't know why <tt>view_interface::size</tt> was unchanged, while <tt>ranges::size</tt> 
returns an unsigned type in similar situations (<sref ref="[range.prim.size]"/> (2.5)).
<p/>
If we want to change <tt>views_interface::size</tt> to return an unsigned type, the both 
overloads should be changed as below:
</p>
<blockquote><pre>
constexpr auto size() requires forward_range&lt;D&gt; &amp;&amp;
  sized_sentinel_for&lt;sentinel_t&lt;D&gt;, iterator_t&lt;D&gt;&gt; {
    return <i>to-unsigned-like</i>(ranges::end(<i>derived</i>()) - ranges::begin(<i>derived</i>()));
  }
constexpr auto size() const requires forward_range&lt;const D&gt; &amp;&amp;
  sized_sentinel_for&lt;sentinel_t&lt;const D&gt;, iterator_t&lt;const D&gt;&gt; {
    return <i>to-unsigned-like</i>(ranges::end(<i>derived</i>()) - ranges::begin(<i>derived</i>()));
  }
</pre></blockquote>

<note>2022-01-30; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4901"/>.
</p>

<ol>

<li><p>Modify <sref ref="[view.interface.general]"/>, class template <tt>view_interface</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
[&hellip;]
constexpr auto size() requires forward_range&lt;D&gt; &amp;&amp;
  sized_sentinel_for&lt;sentinel_t&lt;D&gt;, iterator_t&lt;D&gt;&gt; {
    return <ins><i>to-unsigned-like</i>(</ins>ranges::end(<i>derived</i>()) - ranges::begin(<i>derived</i>())<ins>)</ins>;
  }
constexpr auto size() const requires forward_range&lt;const D&gt; &amp;&amp;
  sized_sentinel_for&lt;sentinel_t&lt;const D&gt;, iterator_t&lt;const D&gt;&gt; {
    return <ins><i>to-unsigned-like</i>(</ins>ranges::end(<i>derived</i>()) - ranges::begin(<i>derived</i>())<ins>)</ins>;
  }
[&hellip;]
</pre>
</blockquote>
</li>

</ol>
</resolution>

</issue>
