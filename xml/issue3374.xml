<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3374" status="WP">
<title>P0653 + P1006 should have made the other <tt>std::to_address</tt> overload <tt>constexpr</tt></title>
<section><sref ref="[pointer.conversion]"/></section>
<submitter>Billy O'Neal III</submitter>
<date>14 Jan 2020</date>
<priority>0</priority>

<discussion>
<p>
While reviewing some interactions with <a href="https://wg21.link/p0653">P0653</a> + 
<a href="https://wg21.link/p1006">P1006</a>, Billy discovered that one of the overloads was 
missing the <tt>constexpr</tt> tag. This might be a typo or a missed merge interaction between 
P0653 (which adds <tt>to_address</tt> with the pointer overload being <tt>constexpr</tt>) and 
P1006 (which makes <tt>pointer_traits::pointer_to constexpr</tt>). Mail was sent the LWG reflector, 
and Glen Fernandes, the author of P0653, indicates that this might have been an oversight.
</p>

<note>2020-02-01 Status set to Tentatively Ready after seven positive votes on the reflector.</note>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4842">N4842</a>.</p>

<ol>
<li><p>Modify <sref ref="[memory.syn]"/>, header <tt>&lt;memory&gt;</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
[&hellip;]
<i>// <sref ref="[pointer.conversion]"/>, pointer conversion</i>
template&lt;class T&gt;
  constexpr T* to_address(T* p) noexcept;
template&lt;class Ptr&gt;
  <ins>constexpr</ins> auto to_address(const Ptr&amp; p) noexcept;
[&hellip;]
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[pointer.conversion]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class Ptr&gt; <ins>constexpr</ins> auto to_address(const Ptr&amp; p) noexcept;
</pre>
<blockquote>
<p>
-3- <i>Returns:</i> <tt>pointer_traits&lt;Ptr&gt;::to_address(p)</tt> if that expression is well-formed 
(see <sref ref="[pointer.traits.optmem]"/>), otherwise <tt>to_address(p.operator-&gt;())</tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
