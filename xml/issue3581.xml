<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3581" status="C++23">
<title>The range constructor makes <tt>basic_string_view</tt> not trivially move constructible</title>
<section><sref ref="[string.view.cons]"/></section>
<submitter>Jiang An, Casey Carter</submitter>
<date>16 Aug 2021</date>
<priority>99</priority>

<discussion>
<p>
<b>Jiang An</b>:
</p>
<p>
 The issue is found in <a href="https://github.com/microsoft/STL/pull/2128">this Microsoft STL pull request</a>.
<p/>
I think an additional constraint should be added to <sref ref="[string.view.cons]"/>/11 (a similar constraint is 
already present for <tt>reference_wrapper</tt>):
</p>
<blockquote><p>
<ins>(11.?) &mdash; <tt>is_same_v&lt;remove_cvref_t&lt;R&gt;, basic_string_view&gt;</tt> is <tt>false</tt>.</ins>
</p></blockquote>
<p>
<b>Casey Carter</b>:
</p>
<p>
<a href="https://wg21.link/p1989R2">P1989R2</a> "Range constructor for <tt>std::string_view</tt> 2: Constrain Harder" 
added a converting constructor to <tt>basic_string_view</tt> that accepts (by forwarding reference) any sized 
contiguous range with a compatible element type. This constructor unfortunately intercepts attempts at move 
construction which previously would have resulted in a call to the copy constructor. (I suspect the authors of 
P1989 were under the mistaken impression that <tt>basic_string_view</tt> had a defaulted move constructor, which 
would sidestep this issue by being chosen by overload resolution via the "non-template vs. template" tiebreaker.)
<p/>
The resulting inefficiency could be corrected by adding a defaulted move constructor and move assignment operator 
to <tt>basic_string_view</tt>, but it would be awkward to add text to specify that these moves always leave the 
source intact. Presumably this is why the move operations were omitted in the first place. We therefore recommend 
constraining the conversion constructor template to reject arguments whose decayed type is <tt>basic_string_view</tt> 
(which we should probably do for all conversion constructor templates in the Standard Library).
<p/>
Implementation experience: MSVC STL is in the process of implementing this fix. Per Jonathan Wakely, libstdc++ has a 
similar constraint.
</p>

<note>2021-09-20; Reflector poll</note>
<p>
Set status to Tentatively Ready after nine votes in favour during reflector poll.
</p>

<note>2021-10-14 Approved at October 2021 virtual plenary. Status changed: Voting &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4892">N4892</a>.
</p>

<ol>
<li><p>Modify <sref ref="[string.view.cons]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class R&gt;
  constexpr basic_string_view(R&amp;&amp; r);
</pre>
<blockquote>
<p>
-10- Let <tt>d</tt> be an lvalue of type <tt>remove_cvref_t&lt;R&gt;</tt>.
<p/>
-11- <i>Constraints</i>:
</p>
<ol style="list-style-type: none">
<li><p><ins>(11.?) &mdash; <tt>remove_cvref_t&lt;R&gt;</tt> is not the same type as <tt>basic_string_view</tt>,</ins></p></li>
<li><p>(11.1) &mdash; <tt>R</tt> models <tt>ranges::contiguous_range</tt> and <tt>ranges::sized_range</tt>,</p></li>
<li><p>(11.2) &mdash; <tt>is_same_v&lt;ranges::range_value_t&lt;R&gt;, charT&gt;</tt> is <tt>true</tt>,</p></li>
<li><p>[&hellip;]</p></li>
</ol>
</blockquote>
</blockquote>
</li>

</ol></resolution>

</issue>
