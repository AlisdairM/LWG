<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2989" status="New">
<title><tt>path</tt>'s stream insertion operator lets you insert everything under the sun</title>
<section><sref ref="[fs.path.io]"/></section>
<submitter>Billy O'Neal III</submitter>
<date>27 Jun 2017</date>
<priority>2</priority>

<discussion>
<p>
The rules for converting a <tt>path</tt> to a narrow character sequence aren't necessarily the same as that iostreams should use. Note that this program creates a temporary path and stream inserts that, which likely destroys information.
</p>

<blockquote><pre>
#include &lt;iostream&gt;
#include &lt;filesystem&gt;
#include &lt;string&gt;

void foo() {
  using namespace std;
  using namespace std::experimental::filesystem::v1;
  wstring val(L"abc");
  std::cout &lt;&lt; val;
}
</pre></blockquote>
<p>
Using <a href="https://godbolt.org/g/dTQ8Pw">the godbolt online compiler</a> we get:
</p>
<blockquote><pre>
foo PROC
  sub      rsp, 104   ; 00000068H
  lea      rdx, OFFSET FLAT:$SG44895
  lea      rcx, QWORD PTR val$[rsp]
  call     std::basic_string&lt;wchar_t,std::char_traits&lt;wchar_t&gt;,std::allocator&lt;wchar_t&gt;
           &gt;::basic_string&lt;wchar_t,std::char_traits&lt;wchar_t&gt;,std::allocator&lt;wchar_t&gt; &gt;
  lea      rdx, QWORD PTR val$[rsp]
  lea      rcx, QWORD PTR $T1[rsp]
  call     ??$?0_WU?$char_traits@_W@std@@V?$allocator@_W@1@@path@v1@filesystem@experimental@std@@QEAA@AEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@4@@Z
  lea      rdx, QWORD PTR $T1[rsp]
  lea      rcx, OFFSET FLAT:std::cout
  <span style="color:#C80000;font-weight:bold">call     std::experimental::filesystem::v1::operator&lt;&lt;&lt;char,std::char_traits&lt;char&gt; &gt;</span>
  lea      rcx, QWORD PTR $T1[rsp]
  <span style="color:#C80000;font-weight:bold">call     std::experimental::filesystem::v1::path::~path</span>
  lea      rcx, QWORD PTR val$[rsp]
  call     std::basic_string&lt;wchar_t,std::char_traits&lt;wchar_t&gt;,std::allocator&lt;wchar_t&gt;
           &gt;::~basic_string&lt;wchar_t,std::char_traits&lt;wchar_t&gt;,std::allocator&lt;wchar_t&gt; &gt;
  add      rsp, 104   ; 00000068H
  ret      0
foo ENDP
</pre></blockquote>
<p>
This should either be disabled with a SFINAE constraint, use the <tt>auto_ptr</tt> user-defined conversion
trick, or the stream insertion operators should be made "hidden friends" to prevent conversions to <tt>path</tt>
from being considered here.
</p>

<note>2017-07 Toronto Monday issue prioritization</note>
<p>Priority 2</p>

<note>2017-07 Toronto Saturday afternoon</note>
<p>LWG confirmed they want the hidden friend solution, Billy O'Neal to provide wording.</p>
</discussion>

<resolution>
<p>This resolution is relative to N4659.</p>

<ol>
<li><p>Edit <sref ref="[fs.filesystem.syn]"/>, header <tt>&lt;filesystem&gt;</tt> synopsis, as indicated:</p>
<blockquote><del><pre>
<i>// <sref ref="[fs.path.io]"/>,</i> path <i>inserter and extractor</i>
template &lt;class charT, class traits&gt;
  basic_ostream&lt;charT, traits&gt;&amp;
    operator&lt;&lt;(basic_ostream&lt;charT, traits&gt;&amp; os, const path&amp; p);
template &lt;class charT, class traits&gt;
  basic_istream&lt;charT, traits&gt;&amp;
    operator&gt;&gt;(basic_istream&lt;charT, traits&gt;&amp; is, path&amp; p);
</pre></del></blockquote></li>

<li><p>Move <sref ref="[fs.path.io]" /> before <sref ref="[fs.path.nonmember]" /> (as a peer of it) and make the following edits:</p>

<blockquote><pre>
template &lt;class charT, class traits&gt;
  <ins>friend</ins> basic_ostream&lt;charT, traits&gt;&amp;
    operator&lt;&lt;(basic_ostream&lt;charT, traits&gt;&amp; os, const path&amp; p);

[&hellip;]

template &lt;class charT, class traits&gt;
  <ins>friend</ins> basic_istream&lt;charT, traits&gt;&amp;
    operator&gt;&gt;(basic_istream&lt;charT, traits&gt;&amp; is, path&amp; p);
</pre></blockquote></li>

<li><p>Edit <sref ref="[fs.class.path]" /> p2 as indicated (replacing ??? with the new section number for <sref ref="[fs.path.io]" /> after the move)</p>
<blockquote><pre>
namespace std::filesystem {
  class path {
  public:
    [&hellip;]
    iterator begin() const;
    iterator end() const;

    <ins><i>// ???</i> path <i>inserter and extractor</i>
    template &lt;class charT, class traits&gt;
      friend basic_ostream&lt;charT, traits&gt;&amp;
        operator&lt;&lt;(basic_ostream&lt;charT, traits&gt;&amp; os, const path&amp; p);
    template &lt;class charT, class traits&gt;
      friend basic_istream&lt;charT, traits&gt;&amp;
        operator&gt;&gt;(basic_istream&lt;charT, traits&gt;&amp; is, path&amp; p);</ins>
  };
}
</pre></blockquote></li>
</ol>
</resolution>
</issue>
