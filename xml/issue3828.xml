<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3828" status="LEWG">
<title>Sync <tt>intmax_t</tt> and <tt>uintmax_t</tt> with C2x</title>
<section><sref ref="[cstdint.syn]"/></section>
<submitter>GB</submitter>
<date>10 Nov 2022</date>
<priority>99</priority>

<discussion>
<p>
This is the resolution for NB comment <b><a href="https://github.com/cplusplus/nbballot/issues/454">GB-080</a></b> 
17.4.1 [cstdint.syn] Sync <tt>intmax_t</tt> and <tt>uintmax_t</tt> with C2x.
</p>

<p>
With the approval of
<a href="https://www.open-std.org/jtc1/sc22/WG14/www/docs/n2888.htm">WG14 N2888</a>
the next C standard will resolve the long-standing issue that implementations
cannot support 128-bit integer types properly without ABI breaks.
C++ should adopt the same fix now, rather than waiting until a future
C++ standard is rebased on C2x.
</p><p>
<sref ref="[cinttypes.syn]"/> also mentions those types, but doesn't need
a change. The proposed change allows <tt>intmax_t</tt> to be an
extended integer type of the same width as <tt>long long</tt>,
in which case we'd still want those <tt>abs</tt> overloads.
</p><p>
Recommended change:
Add to <sref ref="[cinttypes.syn]"/> p2 "except that <tt>intmax_t</tt> is not required to be able to 
represent all values of extended integer types wider than <tt>long long</tt>, and <tt>uintmax_t</tt> is not required 
to be able to represent all values of extended integer types wider than <tt>unsigned long long</tt>."
</p>

<note>Kona 2022-11-10; Waiting for LEWG electronic polling</note>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4917"/>.
</p>

<ol>
<li><p>Modify <sref ref="[cinttypes.syn]"/> as indicated:</p>

<blockquote>
<p> -1-
The contents and meaning of the header <tt>&lt;cinttypes&gt;</tt>
are the same as the C standard library header <tt>&lt;inttypes.h&gt;</tt>,
with the following changes:
</p>
<ol style="list-style-type: none">
<li><p>(1.1) &mdash;
The header <tt>&lt;cinttypes&gt;</tt> includes the header
<tt>&lt;cstdint&gt;</tt> instead of <tt>&lt;stdint.h&gt;</tt>, and
</p></li>
<li><p><ins>(1.?) &mdash;
<tt>intmax_t</tt> and <tt>uintmax_t</tt> are not required to be able to
represent all values of extended integer types wider than <tt>long long</tt>
and <tt>unsigned long long</tt> respectively, and
</ins>
</p></li>
<li><p>(1.2) &mdash;
if and only if the type <tt>intmax_t</tt> designates an extended integer type,
the following function signatures are added:
</p>
<blockquote><pre>
intmax_t abs(intmax_t);
imaxdiv_t div(intmax_t, intmax_t);
</pre></blockquote>
<p>
which shall have the same semantics as the function signatures
<tt>intmax_t imaxabs(intmax_t)</tt> and
<tt>imaxdiv_t imaxdiv(intmax_t, intmax_t)</tt>, respectively.
</p></li>
</ol>
<p><span style="font-variant: small-caps">See also</span>: ISO C 7.8</p>
</blockquote>
</li>
</ol>

</resolution>

</issue>
