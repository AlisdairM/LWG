<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2954" status="WP">
<title>Specialization of the convenience variable templates should be prohibited</title>
<section><sref ref="[constraints]"/></section>
<submitter>Tim Song</submitter>
<date>31 Mar 2017</date>
<priority>99</priority>

<discussion>
<p>
There's currently no rule against specializing the various <tt>_v</tt>
convenience variable templates outside of <tt>&lt;type_traits&gt;</tt>.
<p/>
There should be; <tt>foo_v&lt;T&gt;</tt> should be always equal to 
<tt>foo&lt;T&gt;::value</tt>. The correct way to influence, say, 
<tt>is_placeholder_v&lt;T&gt;</tt> should be to specialize <tt>is_placeholder</tt>, 
not <tt>is_placeholder_v</tt>. Otherwise, the editorial changes to use the 
<tt>_v</tt> form to the specification would no longer be editorial but have 
normative impact.
<p/>
Adding a global prohibition in <sref ref="[namespace.std]"/> seems preferable to
adding individual prohibitions to each affected template; the PR below
carves out an exception for variable templates that are intended to be
specialized by users. As far as I know there are no such templates in
the current WP, but the Ranges TS does use them.
</p>

<note>2017-06-14, Moved to Tentatively Ready after 6 positive votes on c++std-lib</note>
</discussion>

<resolution>
<p>
This wording is relative to <a href="http://wg21.link/n4659">N4659</a>.
</p>

<ol>
<li><p>Add a paragraph to <sref ref="[namespace.std]"/>, before p2:</p>

<blockquote>
<p>
-1- The behavior of a C++ program is undefined if it adds declarations or definitions to namespace <tt>std</tt> or to a
namespace within namespace <tt>std</tt> unless otherwise specified. A program may add a template specialization
for any standard library template to namespace <tt>std</tt> only if the declaration depends on a user-defined type
and the specialization meets the standard library requirements for the original template and is not explicitly
prohibited.(footnote: [&hellip;])
<p/>
<ins>-?- The behavior of a C++ program is undefined if it declares an explicit or partial specialization of any 
standard library variable template, except where explicitly permitted by the specification of that variable template.</ins>
<p/>
-2- The behavior of a C++ program is undefined if it declares [&hellip;]
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
