<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3896" status="New">
<title>The definition of <tt>viewable_range</tt> is not quite right</title>
<section><sref ref="[range.refinements]"/></section>
<submitter>Hewill Kang</submitter>
<date>27 Feb 2023</date>
<priority>4</priority>

<discussion>
<p>
The requirements of <tt>viewable_range</tt> for <tt>view</tt> type is <tt>view&lt;remove_cvref_t&lt;T&gt;&gt; &amp;&amp; 
constructible_from&lt;remove_cvref_t&lt;T&gt;, T&gt;</tt>, that is, when the decayed type of <tt>T</tt> models <tt>view</tt>, 
it must be constructible from <tt>T</tt>.
</p>
<p>
This part of the constraint corresponds to first bullet of <tt>views::all</tt> (<sref ref="[range.all.general]"/>), 
which returns <tt><i>decay-copy</i>(E)</tt> if the decayed type of <tt>E</tt> models <tt>view</tt>.
</p>
<p>
However, <tt><i>decay-copy</i>(E)</tt> constraints <tt>convertible_to&lt;T, decay_t&lt;T&gt;&gt;</tt> which is a 
stronger requirement than <tt>constructible_from</tt>, which is reflected in its rejection of types with explicit 
copy constructors.
</p>
<p>
This inconsistency is such that the following causes the range adapter to produce a hard error when invoked 
(<a href="https://godbolt.org/z/PxWfs1Yco">online example</a>):
</p>
<blockquote><pre>
#include &lt;ranges&gt;

struct View : std::ranges::view_base 
{
  View();
  explicit View(const View&amp;); // explicit copy constructor
  View&amp; operator=(const View&amp;);
  View(View&amp;&amp;);
  
  int* begin();
  int* end();
};

int main() 
{
  View v;
  auto r = std::views::take(v, 5); // <span style="color:red;font-weight:bolder">hard error</span>
}
</pre></blockquote>

<note>2023-03-22; Reflector poll</note>
<p>
Set priority to 4 after reflector poll.
"About as contrived as it gets."
"Add generic front matter telling users the library doesn't support types
with explicit copy constructors."
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4928"/>.
</p>

<ol>

<li><p>Modify <sref ref="[range.refinements]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class T&gt;
  concept viewable_range =
    range&lt;T&gt; &amp;&amp;
    ((view&lt;remove_cvref_t&lt;T&gt;&gt; &amp;&amp; <ins>convertible_to&lt;T, remove_cvref_t&lt;T&gt;&gt;</ins><del>constructible_from&lt;remove_cvref_t&lt;T&gt;, T&gt;</del>) ||
     (!view&lt;remove_cvref_t&lt;T&gt;&gt; &amp;&amp;
      (is_lvalue_reference_v&lt;T&gt; || (movable&lt;remove_reference_t&lt;T&gt;&gt; &amp;&amp; !<i>is-initializer-list</i>&lt;T&gt;))));
</pre>
</blockquote>

</li>

</ol>
</resolution>

</issue>
