<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3647" status="New">
<title><tt><i>nothrow-input-iterator</i></tt> constraints should not mention copying</title>
<section><sref ref="[special.mem.concepts]"/></section>
<submitter>Konstantin Varlamov</submitter>
<date>30 Nov 2021</date>
<priority>3</priority>

<discussion>
<p>
<sref ref="[special.mem.concepts]"/> states that a type qualifies as a <tt><i>nothrow-input-iterator</i></tt> 
only if no exceptions are thrown from, among other things, <em>copy</em> construction and <em>copy</em> 
assignment. However, being copyable isn't part of the requirements for an <tt>input_iterator</tt> on which 
<tt><i>nothrow-input-iterator</i></tt> is based (indeed, one of the things <tt>forward_iterator</tt> 
adds to <tt>input_iterator</tt> is copyability), and the <tt><i>nothrow-input-iterator</i></tt> concept 
doesn't add any new constraints related to copyability.
</p>

<note>2021-12-19; Daniel comments</note>
<p>
During LWG discussion of the issue one argument brought forward against the proposed wording was that it 
might be incomplete, because it doesn't adjust the <tt><i>nothrow-forward-iterator</i></tt> concept, 
which adds among other things the <tt>copyable</tt> requirements. But 
<tt><i>nothrow-forward-iterator</i></tt> also requires <tt><i>nothrow-sentinel-for</i>&lt;I, I&gt;</tt>, 
which already extends this necessary no-throw requirement for copy operations by p. 4:
</p>
<blockquote>
<p>
Types <tt>S</tt> and <tt>I</tt> model <tt><i>nothrow-sentinel-for</i></tt> only if no exceptions are thrown 
from copy construction, move construction, copy assignment, move assignment, or comparisons between valid 
values of type <tt>I</tt> and <tt>S</tt>.
</p>
</blockquote>
<p>
It should also be emphasized that the definitions of move construction (<sref ref="[defns.move.constr]"/>) and
move assignment (<sref ref="[defns.move.assign]"/>) are compatible even for copyable input iterator types, 
because these definitions refer just to expression conditions, and not to concrete operator overloads. So as long
as an implementation applies these expression conditions, we are safe.
</p>

<note>2022-01-30; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4901"/>.
</p>

<ol>

<li><p>Modify <sref ref="[special.mem.concepts]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class I&gt;
concept <i>nothrow-input-iterator</i> = <i>// exposition only</i>
  input_iterator&lt;I&gt; &amp;&amp;
  is_lvalue_reference_v&lt;iter_reference_t&lt;I&gt;&gt; &amp;&amp;
  same_as&lt;remove_cvref_t&lt;iter_reference_t&lt;I&gt;&gt;, iter_value_t&lt;I&gt;&gt;;
</pre>
<blockquote>
<p>
-2- A type <tt>I</tt> models <tt><i>nothrow-input-iterator</i></tt> only if no exceptions are thrown 
from increment, <del>copy construction,</del> move construction, <del>copy assignment,</del> move assignment, 
or indirection through valid iterators.
</p>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
