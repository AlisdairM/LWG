<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2425" status="New">
<title><tt>operator delete(void*, size_t)</tt> doesn't invalidate pointers sufficiently</title>
<section><sref ref="[new.delete]"/></section>
<submitter>Richard Smith</submitter>
<date>29 Aug 2014</date>
<priority>99</priority>

<discussion>
<p>
<sref ref="[new.delete.single]"/>/12 says:
</p>
<blockquote><p>
<i>Requires</i>: <tt>ptr</tt> shall be a null pointer or its value shall be a value returned by an earlier call to the 
(possibly replaced) <tt>operator new(std::size_t)</tt> or <tt>operator new(std::size_t,const std::nothrow_t&amp;)</tt> 
which has not been invalidated by an intervening call to <tt>operator delete(void*)</tt>.
</p></blockquote>
<p>
This should say:
</p>
<blockquote><p>
[&hellip;] by an intervening call to <tt>operator delete(void*)</tt> <ins>or <tt>operator delete(void*, std::size_t)</tt></ins>.
</p></blockquote>
<p>
Likewise at the end of <sref ref="[new.delete.array]"/>/11, <ins><tt>operator delete[](void*, std::size_t)</tt></ins>.
</p>
</discussion>

<resolution>
<ol>
<li><p>Change <sref ref="[new.delete.single]"/>p12 as indicated:</p>

<blockquote>
<p>
-12- <i>Requires</i>: <tt>ptr</tt> shall be a null pointer or its value shall be a value returned by an earlier call to the 
(possibly replaced) <tt>operator new(std::size_t)</tt> or <tt>operator new(std::size_t,const std::nothrow_t&amp;)</tt> which 
has not been invalidated by an intervening call to <tt>operator delete(void*)</tt> <ins>or 
<tt>operator delete(void*, std::size_t)</tt></ins>.
</p>
</blockquote>
</li>

<li><p>Change <sref ref="[new.delete.array]"/>p11 as indicated:</p>

<blockquote>
<p>
-11- <i>Requires</i>: <tt>ptr</tt> shall be a null pointer or its value shall be the value returned by an earlier call to 
<tt>operator new[](std::size_t)</tt> or <tt>operator new[](std::size_t,const std::nothrow_t&amp;)</tt> which 
has not been invalidated by an intervening call to <tt>operator delete[](void*)</tt> <ins>or 
<tt>operator delete[](void*, std::size_t)</tt></ins>.
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
