<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4001" status="New">
<title><tt>iota_view</tt> should provide <tt>empty</tt></title>
<section><sref ref="[range.iota.view]"/></section>
<submitter>Hewill Kang</submitter>
<date>27 Oct 2023</date>
<priority>99</priority>

<discussion>
<p>
When <tt>iota_view</tt>'s template parameter is not an integer type and does not model <tt><i>advanceable</i></tt>, 
its <tt>size</tt> member will not be provided as constraints are not satisfied.
<p/>
If the type further fails to model the <tt>incrementable</tt>, this results in its <tt>view_interface</tt> base being 
unable to synthesize a valid <tt>empty</tt> member as <tt>iota_view</tt> will just be an <tt>input_range</tt> 
(<a href="https://godbolt.org/z/hG9GWvv97">demo</a>):
</p>
<blockquote><pre>
#include &lt;ranges&gt;
#include &lt;vector&gt;
#include &lt;iostream&gt;

int main() {
  std::vector&lt;int&gt; v;
  auto it = std::back_inserter(v);
  auto s = std::ranges::subrange(it, std::unreachable_sentinel);
  auto r = std::views::iota(it);
  std::cout &lt;&lt; s.empty() &lt;&lt; "\n"; // 0
  std::cout &lt;&lt; r.empty() &lt;&lt; "\n"; // <span style="color:red;font-weight:bolder">ill-formed</span>
}
</pre></blockquote>
<p>
This seems to be an oversight. I don't see a reason why <tt>iota_view</tt> doesn't provide <tt>empty</tt> 
as it does store the start and end like <tt>subrange</tt>, in which case it's easy to tell if it's empty 
just by comparing the two.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4964"/>.
</p>

<ol>

<li><p>Modify <sref ref="[range.iota.view]"/>, class template <tt>iota_view</tt> synopsis, as indicated:</p>

<blockquote>
<blockquote><pre>
namespace std::ranges {
  [&hellip;]
  template&lt;weakly_incrementable W, semiregular Bound = unreachable_sentinel_t&gt;
    requires <i>weakly-equality-comparable-with</i>&lt;W, Bound&gt; &amp;&amp; copyable&lt;W&gt;
  class iota_view : public view_interface&lt;iota_view&lt;W, Bound&gt;&gt; {
  private:
    [&hellip;]
    W <i>value_</i> = W();                     // <i>exposition only</i>
    Bound <i>bound_</i> = Bound();             // <i>exposition only</i>
  public:
    [&hellip;]
    constexpr <i>iterator</i> begin() const;
    constexpr auto end() const;
    constexpr <i>iterator</i> end() const requires same_as&lt;W, Bound&gt;;

    <ins>constexpr bool empty() const;</ins>
    constexpr auto size() const requires <i>see below</i>;
  };
  [&hellip;]
}
</pre></blockquote>
<p>
[&hellip;]
</p>
<pre>
constexpr <i>iterator</i> end() const requires same_as&lt;W, Bound&gt;;
</pre>
<blockquote>
<p>
-14- <i>Effects</i>: Equivalent to: <tt>return <i>iterator</i>{<i>bound_</i>};</tt> 
</p>
</blockquote>
<pre>
<ins>constexpr bool empty() const;</ins>
</pre>
<blockquote>
<p>
<ins>-?- <i>Effects</i>: Equivalent to: <tt>return <i>value_</i> == <i>bound_</i>;</tt></ins>
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>

</li>

</ol>
</resolution>

</issue>
