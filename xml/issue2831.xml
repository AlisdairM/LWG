<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2831" status="Resolved">
<title>Equality can be defined when <tt>Hash</tt> function objects have different behaviour</title>
<section><sref ref="[unord.req]"/></section>
<submitter>Daniel James</submitter>
<date>24 Nov 2016</date>
<priority>99</priority>

<discussion>
<p>
In <sref ref="[unord.req]"/> paragraph 12, it says that the behaviour of <tt>operator==</tt> is undefined unless the 
<tt>Hash</tt> and <tt>Pred</tt> function objects respectively have the same behaviour. This makes comparing containers 
with randomized hashes with different seeds undefined behaviour, but I think that's a valid use case. It's not much 
more difficult to support it when the <tt>Hash</tt> function objects behave differently. I did a little testing and 
both libstdc++ and libc++ appear to support this correctly.
<p/>
I suggest changing the appropriate sentence in <sref ref="[unord.req]"/> paragraph 12: "The behavior of a program that 
uses <tt>operator==</tt> or <tt>operator!=</tt> on unordered containers is undefined unless the <del><tt>Hash</tt> and 
</del><tt>Pred</tt> function <del>objects respectively have</del><ins>object has</ins> the same behavior for both 
containers and the equality comparison operator for Key is a <tt>refinement</tt>"
</p>

<note>2017-01-27 Telecon</note>
<p>This is a design issue; send to LEWG</p>

<note>2018-3-17 Resolved by <a href="http://wg21.link/P0809R0">P0809R0</a>, which was adopted in Jacksonville.</note>
</discussion>

<resolution>
<p>
This wording is relative to <a href="http://wg21.link/n4618">N4618</a>.
</p>
<ol>
<li><p>Change <sref ref="[unord.req]"/> as indicated:</p>
<blockquote>
<p>
-12- Two unordered containers <tt>a</tt> and <tt>b</tt> compare equal if <tt>a.size() == b.size()</tt> and, 
for every equivalent-key group <tt>[Ea1, Ea2)</tt> obtained from <tt>a.equal_range(Ea1)</tt>, there exists 
an equivalent-key group <tt>[Eb1, Eb2)</tt> obtained from <tt>b.equal_range(Ea1)</tt>, such that 
<tt>is_permutation(Ea1, Ea2, Eb1, Eb2)</tt> returns <tt>true</tt>. For <tt>unordered_set</tt> and 
<tt>unordered_map</tt>, the complexity of <tt>operator==</tt> (i.e., the number of calls to the <tt>==</tt>
operator of the <tt>value_type</tt>, to the predicate returned by <tt>key_eq()</tt>, and to the hasher returned 
by <tt>hash_function()</tt>) is proportional to <tt><i>N</i></tt> in the average case and to <tt><i>N</i><sup>2</sup></tt> 
in the worst case, where <tt><i>N</i></tt> is <tt>a.size()</tt>. For <tt>unordered_multiset</tt> and 
<tt>unordered_multimap</tt>, the complexity of <tt>operator==</tt> is proportional to 
&sum; <tt><i>E<sub>i</sub></i><sup>2</sup></tt> in the average case and to <tt><i>N</i><sup>2</sup></tt> in the worst case, 
where <tt><i>N</i></tt> is a.size(), and <tt><i>E<sub>i</sub></i></tt> is the size of the <tt><i>i</i></tt>th 
equivalent-key group in <tt>a</tt>. However, if the respective elements of each corresponding pair of equivalent-key 
groups <tt><i>Ea<sub>i</sub></i></tt> and <tt><i>Eb<sub>i</sub></i></tt> are arranged in the same order (as is commonly 
the case, e.g., if <tt>a</tt> and <tt>b</tt> are unmodified copies of the same container), then the average-case 
complexity for <tt>unordered_multiset</tt> and <tt>unordered_multimap</tt> becomes proportional to <tt><i>N</i></tt> 
(but worst-case complexity remains &#x1d4aa;(<tt><i>N</i><sup>2</sup></tt>), e.g., for a pathologically bad hash function).
The behavior of a program that uses <tt>operator==</tt> or <tt>operator!=</tt> on unordered containers is undefined 
unless the <del><tt>Hash</tt> and</del> <tt>Pred</tt> function object<del>s respectively have</del><ins>has</ins> 
the same behavior for both containers and the equality comparison operator for <tt>Key</tt> is a refinement(footnote 258) 
of the partition into equivalent-key groups produced by <tt>Pred</tt>.
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
