<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3663" status="New">
<title><tt>basic_string(const T&amp;, const Alloc&amp;)</tt> turns moves into copies</title>
<section><sref ref="[string.cons]"/><sref ref="[string.assign]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>21 Jan 2022</date>
<priority>3</priority>

<discussion>
<p>
This will do a copy not a move:
</p>
<blockquote>
<pre>
struct Str : std::string {
  Str() = default;
  Str(Str&amp;&amp; s) : std::string(std::move(s)) { }
};
Str s;
Str s2(std::move(s));
</pre>
</blockquote>
<p>
The problem is that the new C++17 constructor:
</p>
<blockquote><pre>
basic_string(const T&amp;, const Alloc&amp; = Alloc());
</pre></blockquote>
<p>
is an exact match, but the <tt>basic_string</tt> move constructor requires a derived-to-base conversion.
<p/>
This is a regression since C++14, because the move constructor was called in C++14.
<p/>
This problem also exists for <tt>assign(const T&amp;)</tt> and <tt>operator=(const T&amp;)</tt>.
<p/>
We can fix this by constraining those functions with <tt>!derived_from&lt;T, basic_string&gt;</tt>, so 
that the move constructor is the only viable function. Libstdc++ has done something very similar since 
2017, but using <tt>!is_convertible&lt;const T*, const basic_string*&gt;</tt> instead of <tt>derived_from</tt>.
</p>

<note>2022-01-30; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
Jonathan to revise P/R to use <code>is_base_of</code> or
<code>is_convertible</code> instead of <code>derived_from</code>.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4901"/>. 
</p>

<ol>
<li><p>Modify <sref ref="[string.cons]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class T&gt;
  constexpr explicit basic_string(const T&amp; t, const Allocator&amp; a = Allocator());
</pre>
<blockquote>
<p>
-7- <i>Constraints:</i>
</p>
<ol style="list-style-type:none">
<li><p>(7.1) &mdash; <tt>is_convertible_v&lt;const T&amp;, basic_string_view&lt;charT, traits&gt;&gt;</tt> 
is <tt>true</tt> and</p></li>
<li><p><ins>(7.?) &mdash; <tt>derived_from&lt;T, basic_string&gt;</tt> is <tt>false</tt> and</ins></p></li>
<li><p>(7.2) &mdash; <tt>is_convertible_v&lt;const T&amp;, const charT*&gt;</tt> is <tt>false</tt>.</p></li>
</ol>
<p>
-8- <i>Effects:</i> Creates a variable, <tt>sv</tt>, as if by <tt>basic_string_view&lt;charT, traits&gt; sv = t;</tt> 
and then behaves the same as <tt>basic_string(sv.data(), sv.size(), a)</tt>.
</p>
</blockquote>
<p>
[&hellip;]
</p>
<pre>
template&lt;class T&gt;
  constexpr basic_string&amp; operator=(const T&amp; t);
</pre>
<blockquote>
<p>
-27- <i>Constraints:</i>
</p>
<ol style="list-style-type:none">
<li><p>(27.1) &mdash; <tt>is_convertible_v&lt;const T&amp;, basic_string_view&lt;charT, traits&gt;&gt;</tt> 
is <tt>true</tt> and</p></li>
<li><p><ins>(27.?) &mdash; <tt>derived_from&lt;T, basic_string&gt;</tt> is <tt>false</tt> and</ins></p></li>
<li><p>(27.2) &mdash; <tt>is_convertible_v&lt;const T&amp;, const charT*&gt;</tt> is <tt>false</tt>.</p></li>
</ol>
<p>
-28- <i>Effects:</i> Equivalent to:
</p>
<blockquote><pre>
basic_string_view&lt;charT, traits&gt; sv = t;
return assign(sv);
</pre></blockquote>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[string.assign]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class T&gt;
  constexpr basic_string&amp; assign(const T&amp; t);
</pre>
<blockquote>
<p>
-4- <i>Constraints:</i>
</p>
<ol style="list-style-type:none">
<li><p>(4.1) &mdash; <tt>is_convertible_v&lt;const T&amp;, basic_string_view&lt;charT, traits&gt;&gt;</tt> 
is <tt>true</tt> and</p></li>
<li><p><ins>(4.?) &mdash; <tt>derived_from&lt;T, basic_string&gt;</tt> is <tt>false</tt> and</ins></p></li>
<li><p>(4.2) &mdash; <tt>is_convertible_v&lt;const T&amp;, const charT*&gt;</tt> is <tt>false</tt>.</p></li>
</ol>
<p>
-5- <i>Effects:</i> Equivalent to:
</p>
<blockquote><pre>
basic_string_view&lt;charT, traits&gt; sv = t;
return assign(sv.data(), sv.size());
</pre></blockquote>
</blockquote>
</blockquote>
</li>
</ol>

</resolution>

</issue>
