<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3246" status="Voting">
<title>What are the constraints on the template parameter of <tt>basic_format_arg</tt>?</title>
<section><sref ref="[format.arg]"/></section>
<submitter>Richard Smith</submitter>
<date>1 Aug 2019</date>
<priority>0</priority>

<discussion>
<p>
In <a href="http://wg21.link/p0645r10">P0645R10</a> 20.?.5.1/ we find:
</p>
<blockquote><p>
<i>Constraints:</i> <tt>typename Context::template formatter_type&lt;T&gt;</tt> is enabled.
</p></blockquote>
<p>
&hellip; which doesn't mean anything, because that is an arbitrary type. Presumably the intent 
is that that type will always be a specialization of formatter, but there appear to be 
no constraints whatsoever on the <tt>Context</tt> template parameter, so there seems to be no 
requirement that that is the case.
<p/>
Should <tt>basic_format_arg</tt> place some constraints on its <tt>Context</tt> template parameter? 
E.g., should it be required to be a specialization of <tt>basic_format_context</tt>?
<p/>
<b>Victor Zverovich:</b>
<p/>
The intent here is to allow different context types provide their own formatter extension types. 
The default formatter context and extension are <tt>basic_format_context</tt> and formatter 
respectively, but it's possible to have other. For example, in the <tt>fmt</tt> library there 
is a formatter context that supports <tt>printf</tt> formatting for legacy code. It cannot use 
the default formatter specializations because of the different syntax <tt>(%...</tt> vs 
<tt>{...})</tt>.
<p/>
<b>Richard Smith:</b>
<p/>
In either case, the specification here seems to be missing the rules for what is a valid 
<tt>Context</tt> parameter.
<p/>
I'm happy to editorially change "is enabled" to "is an enabled specialization of formatter", 
since there's nothing else that this could mean, but we still need a wording fix for the 
broader issue here. Here's what I have so far for this wording:
</p>
<blockquote><p>
<i>Constraints:</i> The template specialization <tt>typename Context::template 
formatter_type&lt;T&gt;</tt> is an enabled specialization of formatter 
([formatter.requirements]).
</p></blockquote>
<p>
<b>Tim Song:</b>
<p/>
I think what we actually want here is "<tt>typename Context::template formatter_type&lt;T&gt;</tt> 
meets the <i>Formatter</i> requirements".
</p>

<note>2019-08-17 Issue Prioritization</note>
<p>Status to Tentatively Ready and priority to 0 after six positive votes on the reflector.</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4830">N4830</a>.</p>

<ol>
<li><p>Modify <sref ref="[format.arg]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class T&gt; explicit basic_format_arg(const T&amp; v) noexcept;
</pre>
<blockquote>
<p>
-4- <i>Constraints:</i> The template specialization
</p>
<blockquote>
<pre>
typename Context::template formatter_type&lt;T&gt;
</pre>
</blockquote>
<p>
<del>is an enabled specialization of <tt>formatter</tt></del><ins>meets the
<i>Formatter</i> requirements</ins> (<sref ref="[format.formatter]"/>). The extent 
to which an implementation determines that the specialization <del>is 
enabled</del><ins>meets the <i>Formatter</i> requirements</ins> is unspecified, 
except that as a minimum the expression
</p>
<blockquote>
<pre>
typename Context::template formatter_type&lt;T&gt;()
  .format(declval&lt;const T&amp;&gt;(), declval&lt;Context&amp;&gt;())
</pre>
</blockquote>
<p>
shall be well-formed when treated as an unevaluated operand.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>
</issue>
