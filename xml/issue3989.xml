<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3989" status="New">
<title>The whole range for an iterator obtained from a <tt>std::span</tt> or <tt>std::basic_string_view</tt> is not clear</title>
<section><sref ref="[string.view]"/><sref ref="[views.span]"/></section>
<submitter>Jiang An</submitter>
<date>29 Aug 2023</date>
<priority>99</priority>

<discussion>
<p>
It is unclear whether the following program has undefined behavior:
</p>
<blockquote><pre>
#include &lt;cassert&gt;
#include &lt;span&gt;
#include &lt;string_view&gt;

int main()
{
  int arr[2]{42, 84};
  std::span&lt;int&gt; sp1{arr, 1};
  std::span&lt;int&gt; sp2{arr + 1, 1};

  assert(sp2.begin() - sp1.begin() == 1); // Is this well-defined?
  assert(sp2.begin() == sp1.end());       // ditto
  assert(*sp1.end() == 84);               // ditto

  const char str[]{"string"};
  std::string_view sv1{str, 3};
  std::string_view sv2{str + 3, 3};

  assert(sv2.begin() - sv1.begin() == 3); // Is this well-defined?
  assert(sv2.begin() == sv1.end());       // ditto
  assert(*sv1.end() == 'i');              // ditto
}
</pre></blockquote>
<p>
Currently MSVC STL strictly diagnose the arithmetic between different <tt>span</tt>s/<tt>basic_string_view</tt>s, 
even the views are on the same underlying range (see <a href="https://github.com/microsoft/STL/issues/1435">this Github issue</a>). 
libstdc++ and libc++ silently accept these operations.
<p/>
Perhaps the standard should clarify what the whole ranges are when determining whether operations between iterators 
from different views on the same underlying range is well-defined.
</p>
</discussion>

<resolution>
</resolution>

</issue>
