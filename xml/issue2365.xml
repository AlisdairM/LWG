<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2365" status="Pending WP">
<title>Missing <tt>noexcept</tt> in <tt>shared_ptr::shared_ptr(nullptr_t)</tt></title>
<section><sref ref="[util.smartptr.shared]"/></section>
<submitter>Cassio Neri</submitter>
<date>13 Feb 2014</date>
<priority>99</priority>

<discussion>
<p>
The declaration and definition of <tt>shared_ptr::shared_ptr(nullptr_t)</tt>, given in <sref ref="[util.smartptr.shared]"/>, is 
</p>
<blockquote><pre>
constexpr shared_ptr(nullptr_t) : shared_ptr() { }
</pre></blockquote>
<p>
The intention seems clear: this constructor should have the same semantics of the default constructor. However, contrarily to the 
default constructor, this one is not <tt>noexcept</tt>. In contrast, <tt>unique_ptr::unique_ptr(nullptr_t)</tt> is <tt>noexcept</tt>, 
as per <sref ref="[unique.ptr.single]"/>: 
</p>
<blockquote><pre>
constexpr unique_ptr(nullptr_t) noexcept : unique_ptr() { }
</pre></blockquote>
<p>
Both libstdc++ and libc++ have added <tt>noexcept</tt> to <tt>shared_ptr::shared_ptr(nullptr_t)</tt>. Microsoft's STL has not.
</p>

<note>2014-03-26 Library reflector vote</note>
<p>
The issue has been identified as Tentatively Ready based on six votes in favour.
</p>

</discussion>

<resolution>

<p>This wording is relative to N3936.</p>

<ol>
<li><p>Change class template <tt>shared_ptr</tt> synopsis, <sref ref="[util.smartptr.shared]"/>, as indicated:</p>

<blockquote>
<pre>
constexpr shared_ptr(nullptr_t) <ins>noexcept</ins> : shared_ptr() { }
</pre>
</blockquote>
</li>
</ol>

</resolution>

</issue>
