<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3890" status="New">
<title>ABI issue for integer-class types</title>
<section><sref ref="[iterator.concept.winc]"/></section>
<submitter>Jiang An</submitter>
<date>19 Feb 2023</date>
<priority>3</priority>

<discussion>
<p>
Currently integer-class types are required to be wider than every integer type 
(<sref ref="[iterator.concept.winc]"/>/3). As a result, if compiler provides extended integer types 
later whose width are not less than that of an integer-class type, then integer-class types with 
that width must be abandoned, which seems ABI-breaking (see also LWG <iref ref="3828"/>).
<p/>
I think we should allow some extended integer types to be wider than some integer-class types.
</p>

<note>2023-03-22; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
"Proposed resolution is insufficient. A lot of the wording depends on the fact
that the range of widths of integer-class types and that of integer types are
disjoint. And it also disallows signed integer -> unsigned integer-class
conversion and by extension mixed ops, which is seriously breaking (e.g., it
disallows <code>x += 1</code>)."
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4928"/>.
</p>

<ol>

<li><p>Modify <sref ref="[iterator.concept.winc]"/> as indicated:</p>

<blockquote>
<p>
-3- The range of representable values of an integer-class type is the continuous set of values over which it is
defined. For any integer-class type, its range of representable values is either <tt>-2<sup><i>N</i>-1</sup></tt> to 
<tt>2<sup><i>N</i>-1</sup> - 1</tt> (inclusive) for some integer <tt><i>N</i></tt>, in which case it is a 
<i>signed-integer-class type</i>, or <tt>0</tt> to <tt>2<sup><i>N</i></sup> - 1</tt> (inclusive) for some integer
<tt><i>N</i></tt>, in which case it is an <i>unsigned-integer-class type</i>. In both cases, <tt><i>N</i></tt> is called 
the <i>width</i> of the integer-class type. The width of an integer-class type is greater than that of every 
<ins>standard</ins> integral type of the same signedness.
<p/>
[&hellip;]
<p/>
-6- Expressions of integer-class type are explicitly convertible to any integer-like type, and implicitly convertible
to any <ins>integral type or</ins> integer-class type of equal or greater width and the same signedness. 
Expressions of integral type are <del>both implicitly and</del> explicitly convertible to any integer-class type<ins>, 
and implicitly convertible to any integer-class type that can represent all values of the source type</ins>. 
Conversions between integral and integer-class types and between two integer-class types do not exit via an exception. 
The result of such a conversion is the unique value of the destination type that is congruent to the source modulo 
<tt>2<sup><i>N</i></sup></tt>, where <tt><i>N</i></tt> is the width of the destination type.
</p>
</blockquote>

</li>

</ol>
</resolution>

</issue>
