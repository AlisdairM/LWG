<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3710" status="WP">
<title>The <tt>end</tt> of <tt>chunk_view</tt> for input ranges can be <tt>const</tt></title>
<section><sref ref="[range.chunk.view.input]"/></section>
<submitter>Hewill Kang</submitter>
<date>09 Jun 2022</date>
<priority>99</priority>

<discussion>
<p>
The input range version of <tt>chunk_view</tt>'s <tt>end</tt> is a very simple function that only returns 
<tt>default_sentinel</tt>, and simple <tt>end</tt>s like this also appear in other range adaptors, such 
as <tt>basic_istream_view</tt>, <tt>lazy_split_view::<i>outer-iterator</i>::value_type</tt>, and 
<tt>chunk_view::<i>outer-iterator</i>::value_type</tt>. 
<p/>
However, unlike <tt>chunk_view</tt>, their <tt>end</tt>s all are <tt>const</tt>-qualified, 
which allows us to freely get <tt>default_sentinel</tt> through the <tt>end</tt> of these <tt>const</tt> 
objects even though they may not themselves be <tt>range</tt>s.
<p/>
I think we should add <tt>const</tt> to this <tt>chunk_view</tt>'s <tt>end</tt> as 
I don't see any harm in doing this, and in some cases, it may have a certain value. Also, this makes it 
consistent with <tt>basic_istream_view</tt> and the upcoming <tt>std::generator</tt>, which, like it, only 
has a non-<tt>const begin</tt>.
</p>

<note>2022-06-21; Reflector poll</note>
<p>
Set status to Tentatively Ready after eight votes in favour during reflector poll.
</p>

<note>2022-07-15; LWG telecon: move to Ready</note>

<note>2022-07-25 Approved at July 2022 virtual plenary. Status changed: Ready &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4910"/>.
</p>

<ol>
<li><p>Modify <sref ref="[range.chunk.view.input]"/> as indicated:</p>

<blockquote>
<blockquote>
<pre>
namespace std::ranges {
  [&hellip;]
 
  template&lt;view V&gt;
    requires input_range&lt;V&gt;
  class chunk_view : public view_interface&lt;chunk_view&lt;V&gt;&gt; {
    V <i>base_</i> = V();                                        <i>// exposition only</i>
    [&hellip;]
  public:
    [&hellip;]

    constexpr <i>outer-iterator</i> begin();
    constexpr default_sentinel_t end() <ins>const</ins> noexcept;

    constexpr auto size() requires sized_range&lt;V&gt;;
    constexpr auto size() const requires sized_range&lt;const V&gt;;
  };
  [&hellip;]
}
</pre>
</blockquote>
[&hellip;]
<pre>
constexpr default_sentinel_t end() <ins>const</ins> noexcept;
</pre>
<blockquote>
<p>
-4- <i>Returns</i>: <tt>default_sentinel</tt>.
</p>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
