<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2840" status="Open">
<title><tt>directory_iterator::increment</tt> is seemingly narrow-contract but marked <tt>noexcept</tt></title>
<section><sref ref="[fs.dir.itr.members]"/><sref ref="[fs.rec.dir.itr.members]"/></section>
<submitter>Tim Song</submitter>
<date>9 Dec 2016</date>
<priority>2</priority>

<discussion>
<p>
<tt>directory_iterator::increment</tt> and <tt>recursive_directory_iterator::increment</tt> are specified by 
reference to the input iterator requirements, which is narrow-contract: it has a precondition that the iterator
is dereferenceable. Yet they are marked as <tt>noexcept</tt>.
<p/>
Either the <tt>noexcept</tt> (one of which was added by LWG <iref ref="2637"/>) should be removed, or the 
behavior of <tt>increment</tt> when given a nondereferenceable iterator should be specified.
<p/>
Currently, libstdc++ and MSVC report an error via the <tt>error_code</tt> argument for a nondereferenceable 
<tt>directory_iterator</tt>, while libc++ and <tt>boost::filesystem</tt> assert.
</p>
  
<note>2017-01-27 Telecon</note>
<p>Priority 2; there are some problems with the wording in alternative B.</p>
  
<note>2018-01-24 Tim Song comments</note>
<p> LWG <iref ref="3013"/> will remove this <tt>noexcept</tt> (for a different reason). The behavior of
  calling <tt>increment</tt> on a nondereferenceble iterator should still be clarified, as I was informed
  that LWG wanted it to be well-defined. </p>

<note>2018-1-26 issues processing telecon</note>
<p>Part A is already done by <iref ref="3013"/>.</p>
<p>Marshall to talk to Tim about Part B; it would be odd if <tt>operator++</tt> was undefined behaviour, but <tt>increment</tt> on the same iterator returned an error</p>

<note>2018-8-15 Offline discussions</note>
<p>Tim and Marshall recommend NAD for about Part B</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://wg21.link/n4618">N4618</a>.</p>

<ol style="list-style-type: none">
<li><p>Alternative A (remove the <tt>noexcept</tt>):</p>

<ol>
<li><p>Edit <sref ref="[fs.class.directory_iterator]"/>, class <tt>directory_iterator</tt> synopsis, as indicated:</p>
<blockquote>
<pre>
directory_iterator&amp; operator++();
directory_iterator&amp; increment(error_code&amp; ec) <del>noexcept</del>;
</pre>
</blockquote>
</li>

<li><p>Edit <sref ref="[fs.dir.itr.members]"/> before p10 as indicated:</p>
<blockquote>
<pre>
directory_iterator&amp; operator++();
directory_iterator&amp; increment(error_code&amp; ec) <del>noexcept</del>;
</pre>
<blockquote>
<p>
-10- <i>Effects:</i> As specified for the prefix increment operation of Input iterators (24.2.3).
<p/>
-11- <i>Returns:</i> <tt>*this</tt>.
<p/>
-12- <i>Throws:</i> As specified in 27.10.7.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Edit <sref ref="[fs.class.rec.dir.itr]"/>, class <tt>recursive_directory_iterator</tt> synopsis, as indicated:</p>
<blockquote>
<pre>
recursive_directory_iterator&amp; operator++();
recursive_directory_iterator&amp; increment(error_code&amp; ec) <del>noexcept</del>;
</pre>
</blockquote>
</li>

<li><p>Edit <sref ref="[fs.rec.dir.itr.members]"/> before p23 as indicated:</p>
<blockquote>
<pre>
recursive_directory_iterator&amp; operator++();
recursive_directory_iterator&amp; increment(error_code&amp; ec) <del>noexcept</del>;
</pre>
<blockquote>
<p>
-23- <i>Effects:</i> As specified for the prefix increment operation of Input iterators (24.2.3), except that: [&hellip;]
<p/>
-24- <i>Returns:</i> <tt>*this</tt>.
<p/>
-25- <i>Throws:</i> As specified in 27.10.7.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</li>

<li><p>Alternative B (specify that <tt>increment</tt> reports an error if the iterator is not dereferenceable):</p>

<ol>
<li><p>Edit <sref ref="[fs.dir.itr.members]"/> p10 as indicated:</p>
<blockquote>
<pre>
directory_iterator&amp; operator++();
directory_iterator&amp; increment(error_code&amp; ec) noexcept;
</pre>
<blockquote>
<p>
-10- <i>Effects:</i> As specified for the prefix increment operation of Input iterators (24.2.3)<ins>, except that 
<tt>increment</tt> reports an error if <tt>*this</tt> is not dereferenceable</ins>.
<p/>
-11- <i>Returns:</i> <tt>*this</tt>.
<p/>
-12- <i>Throws:</i> As specified in 27.10.7.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Edit <sref ref="[fs.rec.dir.itr.members]"/> p23 as indicated:</p>
<blockquote>
<pre>
recursive_directory_iterator&amp; operator++();
recursive_directory_iterator&amp; increment(error_code&amp; ec) noexcept;
</pre>
<blockquote>
<p>
-23- <i>Effects:</i> As specified for the prefix increment operation of Input iterators (24.2.3), except that: 
</p>
<ul>
<li><p><ins><tt>increment</tt> reports an error if <tt>*this</tt> is not dereferenceable.</ins></p></li>
<li><p>If there are no more entries at the current depth, [&hellip;]</p></li>
<li><p>Otherwise if [&hellip;]</p></li>
</ul>
<p>
-24- <i>Returns:</i> <tt>*this</tt>.
<p/>
-25- <i>Throws:</i> As specified in 27.10.7.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</li>
</ol>


</resolution>

</issue>
