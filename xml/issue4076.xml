<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4076" status="New">
<title><tt>concat_view</tt> should be freestanding</title>
<section><sref ref="[version.syn]"/></section>
<submitter>Hewill Kang</submitter>
<date>21 Apr 2024</date>
<priority>99</priority>

<discussion>
<p>
<tt>concat_view</tt> can be freestanding, but this never seems to come up in the discussion, 
which seems to be an oversight.
</p>

<note>2024-04-21; Daniel comments</note>
<p>
The specification of some member functions of <tt>concat_view</tt> seem to depend on freestanding-deleted
<tt>get</tt> overloads for <tt>variant</tt>, but so does <tt>join_with_view</tt>, which is marked as freestanding,
so that does not seem like a reason to accept <tt>join_with_view</tt> but not <tt>concat_view</tt> as freestanding.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4981"/>.
</p>

<ol>
<li><p>Modify <sref ref="[version.syn]"/> as indicated:</p>

<blockquote>
<pre>
#define __cpp_lib_ranges_concat 202403L // <ins><i>freestanding</i>,</ins> <i>also in</i> &lt;ranges&gt;
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[ranges.syn]"/> as indicated:</p>

<blockquote>
<pre>
#include &lt;compare&gt;              // <i>see <sref ref="[compare.syn]"/></i>
#include &lt;initializer_list&gt;     // <i>see <sref ref="[initializer.list.syn]"/></i>
#include &lt;iterator&gt;             // <i>see <sref ref="[iterator.synopsis]"/></i>

namespace std::ranges {
  [&hellip;]
  // <i><sref ref="[range.concat]"/>, concat view</i>
  template&lt;input_range... Views&gt;
    requires <i>see below</i>
  class concat_view;                                                                <ins>// <i>freestanding</i></ins>
  
  namespace views { inline constexpr <i>unspecified</i> concat = <i>unspecified</i>; }            <ins>// <i>freestanding</i></ins>
  [&hellip;]
}
</pre>
</blockquote>
</li>

</ol>
</resolution>

</issue>
