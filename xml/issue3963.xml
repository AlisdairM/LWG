<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3963" status="New">
<title>Different <tt>std::flat_map</tt>/<tt>std::flat_multimap</tt> specializations should be able to share same nested classes</title>
<section><sref ref="[flat.map.defn]"/><sref ref="[flat.multimap.defn]"/></section>
<submitter>Jiang An</submitter>
<date>24 Jul 2023</date>
<priority>3</priority>

<discussion>
<p>
Per current wording, <tt>std::flat_map&lt;K, V, C1, KCont, VCont&gt;::containers</tt> and 
<tt>std::flat_multimap&lt;K, V, C2, KCont, VCont&gt;::containers</tt> need to be different types 
since they are specified as nested classes. Likewise, 
<tt>std::flat_map&lt;K, V, C, KCont1, VCont1&gt;::value_compare</tt> and 
<tt>std::flat_multimap&lt;K, V, C, KCont2, VCont2&gt;::value_compare</tt> also need to be different types.
<p/>
It may be better to allow implementations to make different <tt>std::flat_map</tt>/<tt>std::flat_multimap</tt> 
specializations share same nested classes.
</p>

<note>2023-11-02; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
"This would mean we have to care about whether the template parameters are
associated entities of the <code>containers</code> type, for ADL purposes."
"That only matters if you're doing silly things, we shouldn't design the
library with silly people in mind."
"Nobody asked to be able to do this for <code>value_compare</code> in
associative containers, why do we think vendors would take advantage of this
freedom here? NAD."
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4950"/>.
</p>

<ol>

<li><p>Add the new paragraph after <sref ref="[flat.map.defn]"/> p1 and <sref ref="[flat.multimap.defn]"/> p1 (twice):</p>

<blockquote class="note">
<p>
[<i>Drafting note</i>: The intent is to keep the property that key/mapped types, key/mapped containers, 
and the comparator type are not the associated types of these nested classes during ADL. ]
</p>
</blockquote>

<blockquote>
<p>
<ins>
-?- Implementations may define member types <tt>containers</tt> and <tt>value_compare</tt> as nested 
classes of another templated class and introduce them as <i>typedef-name</i>s. Implementations shall ensure that 
these nested classes are not themselves class templates and have the specified names.
</ins>
</p>

</blockquote>
</li>
</ol>
</resolution>

</issue>
