<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2770" status="Immediate">
<title><tt>tuple_size&lt;const T&gt;</tt> specialization is not SFINAE compatible and breaks decomposition declarations</title>
<section><sref ref="[tuple.helper]"/></section>
<submitter>Richard Smith</submitter>
<date>15 Aug 2016</date>
<priority>1</priority>

<discussion>
<p>
Consider:
</p>
<blockquote><pre>
#include &lt;utility&gt;

struct X { int a, b; };
const auto [x, y] = X();
</pre></blockquote>
<p>
This is ill-formed: it triggers the instantiation of <tt>std::tuple_size&lt;const X&gt;</tt>, which hits a hard error 
because it tries to use <tt>tuple_size&lt;X&gt;::value</tt>, which does not exist. The code compiles if 
<tt>&lt;utility&gt;</tt> (or another header providing <tt>tuple_size</tt>) is not included.
<p/>
It seems that we either need a different strategy for decomposition declarations, or we need to change the library to 
make the <tt>tuple_size</tt> partial specializations for <i>cv</i>-qualifiers SFINAE-compatible.
<p/>
The latter seems like the better option to me, and like a good idea regardless of decomposition declarations.
</p>

<note>2016-09-05, Daniel comments</note>
<p>
This is partially related to LWG <iref ref="2446"/>.
</p>

<note>2016-09-09 Issues Resolution Telecom</note>
<p>Geoffrey to provide wording</p>

<note>2016-09-14 Geoffrey provides wording</note>

<note>2016-10 Telecom</note>
<p>Alisdair to add his concerns here before Issaquah. Revisit then. Status to 'Open'</p>
</discussion>

<resolution>
<p>This wording is relative to N4606.</p>

<ol>
<li><p>Edit <sref ref="[tuple.helper]"/> as follows:</p>
<blockquote>
<pre>
template &lt;class T&gt; class tuple_size&lt;const T&gt;;
template &lt;class T&gt; class tuple_size&lt;volatile T&gt;;
template &lt;class T&gt; class tuple_size&lt;const volatile T&gt;;
</pre>
<blockquote>
<p>
-4- Let <tt><i>TS</i></tt> denote <tt>tuple_size&lt;T&gt;</tt> of the <i>cv</i>-unqualified type <tt>T</tt>. 
<ins>If the expression <tt><i>TS</i>::value</tt> is well-formed when treated as an unevaluated operand, 
t</ins><del>T</del>hen each of the three templates shall meet the <tt>UnaryTypeTrait</tt> requirements (20.15.1) 
with a <tt>BaseCharacteristic</tt> of
</p>
<blockquote>
<pre>
integral_constant&lt;size_t, <i>TS</i>::value&gt;
</pre>
</blockquote>
<p>
<ins>Otherwise, they shall have no member <tt>value</tt>.</ins>
</p>
<p>
<ins>Access checking is performed as if in a context unrelated to <tt><i>TS</i></tt> and <tt>T</tt>. Only the 
validity of the immediate context of the expression is considered. [<i>Note:</i> The compilation of the expression 
can result in side effects such as the instantiation of class template specializations and function template 
specializations, the generation of implicitly-defined functions, and so on. Such side effects are not in the 
"immediate context" and can result in the program being ill-formed. &mdash; <i>end note</i>]</ins>
<p/>
-5- In addition to being available via inclusion of the <tt>&lt;tuple&gt;</tt> header, the three templates are available
when either of the headers <tt>&lt;array&gt;</tt> or <tt>&lt;utility&gt;</tt> are included.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>

