<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3403" status="Tentatively Ready">
<title>Domain of <tt>ranges::ssize(E)</tt> doesn't match <tt>ranges::size(E)</tt></title>
<section><sref ref="[range.prim.ssize]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>19 Feb 2020</date>
<priority>2</priority>

<discussion>
<p>
<tt>ranges::size(E)</tt> works with a non-range for which <tt>E.size()</tt> or <tt>size(E)</tt> is valid.
But <tt>ranges::ssize(E)</tt> requires the type <tt>range_difference_t</tt> which requires
<tt>ranges::begin(E)</tt> to be valid. This means there are types for which <tt>ranges::size(E)</tt>
is valid but <tt>ranges::ssize(E)</tt> is not.
<p/>
Casey's reaction to this is:
<p/>
I believe we want <tt>ranges::ssize</tt> to work with any argument that <tt>ranges::size</tt> accepts.
That suggest to me that we're going to need <tt><i>make-signed-like-t</i>&lt;T&gt;</tt> after all,
so we can "Let <tt>E</tt> be an expression, and let <tt>D</tt> be the wider of <tt>ptrdiff_t</tt>
or <tt>decltype(ranges::size(E))</tt>. Then <tt>ranges::ssize(E)</tt> is expression-equivalent to
<tt>static_cast&lt;<i>make-signed-like-t</i>&lt;D&gt;&gt;(ranges::size(E))</tt>." Although this wording
is still slightly icky since <tt>D</tt> isn't a valid type when <tt>ranges::size(E)</tt> isn't a valid
expression, I think it's an improvement?
</p>

<note>2020-03-11 Issue Prioritization</note>
<p>Priority to 2 after reflector discussion.</p>

<note>2020-07-22 Casey provides wording</note>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>
This wording is relative to <a href="https://wg21.link/n4861">N4861</a>.
</p>

<ol>
<li><p>Add a new paragraph after paragraph 1 in <sref ref="[ranges.syn]"/>:</p>
<blockquote>
<ins>
-?- Also within this clause,
<tt><i>make-signed-like-t</i>&lt;X&gt;</tt>
for an integer-like type <tt>X</tt>
denotes <tt>make_signed_t&lt;X&gt;</tt>
if <tt>X</tt> is an integer type;
otherwise, it denotes a corresponding
unspecified signed-integer-like type
of the same width as <tt>X</tt>.
</ins>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.prim.ssize]"/> as indicated:</p>

<blockquote>
<p>-1- The name <tt>ranges::ssize</tt> denotes
a customization point object (<sref ref="[customization.point.object]"/>).
<del>The expression <tt>ranges::ssize(E)</tt>
for a subexpression <tt>E</tt> of type <tt>T</tt>
is expression-equivalent to:</del>
</p><p>
<del>(1.1) &mdash; If <tt>range_difference_t&lt;T&gt;</tt> has
width less than <tt>ptrdiff_t</tt>,
<tt>static_cast&lt;ptrdiff_t&gt;(ranges::size(E))</tt>.</del>
</p><p>
<del>(1.2) &mdash; Otherwise,
<tt>static_cast&lt;range_difference_t&lt;T&gt;&gt;(ranges::size(E))</tt>.</del>
</p><p>
<ins>
-?- Given a subexpression <tt>E</tt> with type <tt>T</tt>,
let <tt>t</tt> be an lvalue that denotes the reified object for <tt>E</tt>.
If <tt>ranges::size(t)</tt> is ill-formed,
<tt>ranges::ssize(E)</tt> is ill-formed.
Otherwise, let <tt>D</tt> be the wider of
<tt>ptrdiff_t</tt> or <tt>decltype(ranges::size(t))</tt>;
<tt>ranges::ssize(E)</tt> is expression-equivalent to
<tt>static_cast&lt;<i>make-signed-like-t</i>&lt;D&gt;&gt;(ranges::size(t))</tt>.
</ins>
</p>
</blockquote>
</li>
</ol>
</blockquote>

<note>2020-07-31 Casey provides updated wording</note>
Per discussion on the reflector.

<note>2020-08-21; Issue processing telecon: Tentatively Ready</note>
</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4861">N4861</a>.
</p>

<ol>
<li><p>Add a new paragraph after paragraph 1 in <sref ref="[ranges.syn]"/>:</p>
<blockquote class="note">
<p>
[<i>Drafting note:</i> The following does not define
an analog <tt><i>to-signed-like</i></tt> for <tt><i>to-unsigned-like</i></tt>
since we don't need it at this time.]
</p>
</blockquote>
<blockquote>
<ins>
-?- Also within this Clause,
<tt><i>make-signed-like-t</i>&lt;X&gt;</tt>
for an integer-like type <tt>X</tt>
denotes <tt>make_signed_t&lt;X&gt;</tt>
if <tt>X</tt> is an integer type;
otherwise, it denotes a corresponding
unspecified signed-integer-like type
of the same width as <tt>X</tt>.
</ins>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.prim.ssize]"/> as indicated:</p>

<blockquote>
<p>-1- The name <tt>ranges::ssize</tt> denotes
a customization point object (<sref ref="[customization.point.object]"/>).
<del>The expression <tt>ranges::ssize(E)</tt>
for a subexpression <tt>E</tt> of type <tt>T</tt>
is expression-equivalent to:</del>
</p><p>
<del>(1.1) &mdash; If <tt>range_difference_t&lt;T&gt;</tt> has
width less than <tt>ptrdiff_t</tt>,
<tt>static_cast&lt;ptrdiff_t&gt;(ranges::size(E))</tt>.</del>
</p><p>
<del>(1.2) &mdash; Otherwise,
<tt>static_cast&lt;range_difference_t&lt;T&gt;&gt;(ranges::size(E))</tt>.</del>
</p><p>
<ins>
-?- Given a subexpression <tt>E</tt> with type <tt>T</tt>,
let <tt>t</tt> be an lvalue that denotes the reified object for <tt>E</tt>.
If <tt>ranges::size(t)</tt> is ill-formed,
<tt>ranges::ssize(E)</tt> is ill-formed.
Otherwise let <tt>D</tt> be
<tt><i>make-signed-like-t</i>&lt;decltype(ranges::size(t))&gt;</tt>,
or <tt>ptrdiff_t</tt> if it is wider than that type;
<tt>ranges::ssize(E)</tt> is expression-equivalent to
<tt>static_cast&lt;D&gt;(ranges::size(t))</tt>.
</ins>
</p>
</blockquote>
</li>
</ol>
</resolution>
</issue>
