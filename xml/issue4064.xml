<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4064" status="Ready">
<title>Clarify that <tt>std::launder</tt> is not needed when using the result of <tt>std::memcpy</tt></title>
<section><sref ref="[cstring.syn]"/></section>
<submitter>Jan Schultke</submitter>
<date>05 Apr 2024</date>
<priority>3</priority>

<discussion>
<blockquote><pre>
int x = 0;
alignas(int) std::byte y[sizeof(int)];
int z = *static_cast&lt;int*&gt;(std::memcpy(y, &amp;x, sizeof(int)));
</pre></blockquote>
<p>
This example should be well-defined, even without the use of <tt>std::launder</tt>.
<tt>std::memcpy</tt> implicitly creates an <tt>int</tt> inside <tt>y</tt>, and 
<a href="https://www.iso-9899.info/n3047.html#7.26.2.1p3">https://www.iso-9899.info/n3047.html#7.26.2.1p3</a> 
states that
</p>
<blockquote style="border-left: 3px solid #ccc;padding-left: 15px;">
<p>
The <tt>memcpy</tt> function returns the value of [the destination operand].
</p>
</blockquote>
<p>
In conjunction with <sref ref="[cstring.syn]"/> p3, this presumably means that <tt>std::memcpy</tt> 
returns a pointer to the (first) implicitly-created object, and no use of <tt>std::launder</tt> 
is necessary.
<p/>
The wording should be clarified to clearly support this interpretation or reject it.
</p>

<note>2024-06-24; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
</p>

<superseded>
<p>
This wording is relative to <paper num="N4971"/>.
</p>

<ol>
<li><p>Modify <sref ref="[cstring.syn]"/> as indicated:</p>

<blockquote>
<p>
-3- The functions <tt>memcpy</tt> and <tt>memmove</tt> are signal-safe (<sref ref="[support.signal]"/>). 
Both functions implicitly create objects (<sref ref="[intro.object]"/>) in the destination region of 
storage immediately prior to copying the sequence of characters to the destination. <ins>Both functions 
return a pointer to a suitable created object.</ins>
</p>
</blockquote>
</li>
</ol>
</superseded>

<note>St. Louis 2024-06-26; CWG suggested improved wording</note>
<note>St. Louis 2024-06-28; LWG: move to Ready</note>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4981"/>.
</p>

<ol>
<li><p>Modify <sref ref="[cstring.syn]"/> as indicated:</p>

<blockquote>
<p>
-3-
The functions <tt>memcpy</tt> and <tt>memmove</tt> are signal-safe
(<sref ref="[support.signal]"/>).
<del>Both</del> <ins>Each of these</ins> functions implicitly
<del>create</del> <ins>creates</ins> objects (<sref ref="[intro.object]"/>)
in the destination region of storage immediately prior to copying
the sequence of characters to the destination.
<ins>Each of these functions returns a pointer to a suitable created object,
if any, otherwise the value of the first parameter.</ins>
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
