<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3754" status="C++23">
<title>Class template <code>expected</code> synopsis contains declarations that do not match the detailed description</title>
<section><sref ref="[expected.object.general]"/></section>
<submitter>S. B. Tam</submitter>
<date>23 Aug 2022</date>
<priority>99</priority>

<discussion>
<p>
<sref ref="[expected.object.general]"/> declares the following constructors:
</p>

<blockquote><pre>
template&lt;class G&gt;
  constexpr expected(const unexpected&lt;G&gt;&amp;);
template&lt;class G&gt;
  constexpr expected(unexpected&lt;G&gt;&amp;&amp;);
</pre></blockquote>

<p>
But in <sref ref="[expected.object.ctor]"/>, these constructors are declared as:
</p>

<blockquote><pre>
template&lt;class G&gt;
  constexpr explicit(!is_convertible_v&lt;const G&amp;, E&gt;) expected(const unexpected&lt;G&gt;&amp; e);
template&lt;class G&gt;
  constexpr explicit(!is_convertible_v&lt;G, E&gt;) expected(unexpected&lt;G&gt;&amp;&amp; e);
</pre></blockquote>

<p>
Note that they have no explicit-specifiers in <sref ref="[expected.object.general]"/>,
but are conditionally explicit in <sref ref="[expected.object.ctor]"/>.
</p>

<p>
I presume that <sref ref="[expected.object.general]"/>
is missing a few <code>explicit(<i>see below</i>)</code>.
</p>

<p>
The same inconsistency exists in <sref ref="[expected.void]"/>.
</p>

<note>2022-09-05; Jonathan Wakely provides wording</note>

<p>
In <paper num="n4910"/> the <tt>expected</tt> synopses had
<tt>explicit(<i>see below</i>)</tt> on the copy and move constructors.
That was fixed editorially, but this other inconsistency was not noticed.
</p>

<note>2022-09-07; Moved to "Ready" at LWG telecon</note>

<note>2022-11-12 Approved at November 2022 meeting in Kona. Status changed: Voting &rarr; WP.</note>
</discussion>

<resolution>

<p>
This wording is relative to <paper num="n4917"/>.
</p>

<ol>
<li><p>Change <sref ref="[expected.object.general]"/> as indicated:</p>

<blockquote><pre>
<i>// 22.8.6.2, constructors</i>
constexpr expected();
constexpr expected(const expected&amp;);
constexpr expected(expected&amp;&amp;) noexcept(<i>see below</i>);
template&lt;class U, class G&gt;
  constexpr explicit(<i>see below</i>) expected(const expected&lt;U, G&gt;&amp;);
template&lt;class U, class G&gt;
  constexpr explicit(<i>see below</i>) expected(expected&lt;U, G&gt;&amp;&amp;);

template&lt;class U = T&gt;
  constexpr explicit(<i>see below</i>) expected(U&amp;&amp; v);

template&lt;class G&gt;
  constexpr <ins>explicit(<i>see below</i>)</ins> expected(const unexpected&lt;G&gt;&amp;);
template&lt;class G&gt;
  constexpr <ins>explicit(<i>see below</i>)</ins> expected(unexpected&lt;G&gt;&amp;&amp;);

template&lt;class... Args&gt;
  constexpr explicit expected(in_place_t, Args&amp;&amp;...);
</pre> </blockquote>
</li>

<li><p>Change <sref ref="[expected.void.general]"/> as indicated:</p>

<blockquote><pre>
<i>// 22.8.7.2, constructors</i>
constexpr expected() noexcept;
constexpr expected(const expected&amp;);
constexpr expected(expected&amp;&amp;) noexcept(<i>see below</i>);
template&lt;class U, class G&gt;
  constexpr explicit(<i>see below</i>) expected(const expected&lt;U, G&gt;&amp;&amp;);

template&lt;class G&gt;
  constexpr <ins>explicit(<i>see below</i>)</ins> expected(const unexpected&lt;G&gt;&amp;);
template&lt;class G&gt;
  constexpr <ins>explicit(<i>see below</i>)</ins> expected(unexpected&lt;G&gt;&amp;&amp;);

constexpr explicit expected(in_place_t) noexcept;
</pre> </blockquote>

</li>

</ol>

</resolution>

</issue>
