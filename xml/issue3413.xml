<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3413" status="New">
<title>[fund.ts.v3] <tt>propagate_const</tt>'s <tt>swap</tt>'s <tt>noexcept</tt> specification needs to use a trait</title>
<section><sref ref="[propagate_const.modifiers]"/><sref ref="[propagate_const.algorithms]"/></section>
<submitter>Thomas K&ouml;ppe</submitter>
<date>29 Feb 2020</date>
<priority>99</priority>

<discussion>
<p><b>Addresses: fund.ts.v3</b></p>
<p>
In the Fundamentals TS, the <tt>noexcept</tt> specifications of both the member and non-member <tt>swap</tt> 
functions for <tt>propagate_const</tt> are using the old, ill-formed pattern of attempting to use 
"<tt>noexcept(swap(...))</tt>" as the boolean predicate. According to LWG <iref ref="2456"/>, this is 
ill-formed, and a resolution such as in <a href="http://wg21.link/p0185r1">P0185R1</a> is required.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <a href="http://wg21.link/n4840">N4840</a>.
</p>

<ol>
<li><p>Modify <sref ref="[propagate_const.syn]"/>, header <tt>&lt;experimental/propagate_const&gt;</tt> synopsis, 
as indicated:</p>

<blockquote>
<pre>
<i>// <sref ref="[propagate_const.algorithms]"/>, propagate_const specialized algorithms</i>
template &lt;class T&gt;
  constexpr void swap(propagate_const&lt;T&gt;&amp; pt, propagate_const&lt;T&gt;&amp; pt2) noexcept(<del><i>see below</i></del><ins>is_nothrow_swappable_v&lt;T&gt;</ins>);
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[propagate_const.overview]"/>, class template <tt>propagate_const</tt> synopsis, 
as indicated:</p>

<blockquote>
<pre>
<i>// <sref ref="[propagate_const.modifiers]"/>, propagate_const modifiers</i>
constexpr void swap(propagate_const&amp; pt) noexcept(<del><i>see below</i></del><ins>is_nothrow_swappable_v&lt;T&gt;</ins>);
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[propagate_const.modifiers]"/> as indicated:</p>

<blockquote>
<pre>
constexpr void swap(propagate_const&amp; pt) noexcept(<del><i>see below</i></del><ins>is_nothrow_swappable_v&lt;T&gt;</ins>);
</pre>
<blockquote>
<p>
<del>-2- The constant-expression in the exception-specification is <tt>noexcept(swap(t_, pt.t_))</tt>.</del>
<p/>
-3- <i>Effects:</i> <tt>swap(t_, pt.t_)</tt>. 
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[propagate_const.algorithms]"/> as indicated:</p>

<blockquote>
<pre>
template &lt;class T&gt;
  constexpr void swap(propagate_const&lt;T&gt;&amp; pt1, propagate_const&lt;T&gt;&amp; pt2) noexcept(<del><i>see below</i></del><ins>is_nothrow_swappable_v&lt;T&gt;</ins>);
</pre>
<blockquote>
<p>
<del>-2- The constant-expression in the exception-specification is <tt>noexcept(pt1.swap(pt2))</tt>.</del>
<p/>
-3- <i>Effects:</i> <tt>pt1.swap(pt2)</tt>. 
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>
</issue>
