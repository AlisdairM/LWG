<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3540" status="New">
<title>&sect;[format.arg] There should be no <tt>const</tt> in <tt>basic_format_arg(const T* p)</tt></title>
<section><sref ref="[format.arg]"/></section>
<submitter>S. B. Tam</submitter>
<date>7 Apr 2021</date>
<priority>99</priority>

<discussion>
<p>
When <a href="https://wg21.link/p0645r10">P0645R10</a> "Text formatting" was merged into the draft standard, there was 
a typo: an exposition-only constructor of <tt>basic_format_arg</tt> is declared as accepting <tt>const T*</tt> in the 
class synopsis, but is later declared to accept <tt>T*</tt>. This was 
<a href="https://github.com/cplusplus/draft/issues/3461">editorial issue 3461</a> and was resolved by adding 
<tt>const</tt> to the redeclaration.
<p/>
As it is, constructing <tt>basic_format_arg</tt> from <tt>void*</tt> will select 
<tt>template&lt;class T&gt; explicit basic_format_arg(const T&amp; v)</tt> and store a 
<tt>basic_format_arg::handle</tt> instead of select <tt>template&lt;class T&gt; basic_format_arg(const T*)</tt> and 
store a <tt>const void*</tt>, because <tt>void*</tt> &rarr; <tt>void*const&amp;</tt> is identity conversion, while 
<tt>void*</tt> &rarr; <tt>const void*</tt> is qualification conversion.
<p/>
While this technically works, it seems that storing a <tt>const void*</tt> would be more intuitive.
<p/>
Hence, I think <tt>const</tt> should be removed from both declarations of <tt>basic_format_arg(const T*)</tt>, 
so that construction from <tt>void*</tt> will select this constructor, resulting in more intuitive behavior.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4885">N4885</a>.
</p>

<ol>
<li><p>Modify <sref ref="[format.arg]"/> as indicated:</p>

<blockquote>
<blockquote>
<pre>
namespace std {
  template&lt;class Context&gt;
  class basic_format_arg {
  public:
    class handle;

  private:
    using char_type = typename Context::char_type;                     <i>// exposition only</i>

    variant&lt;monostate, bool, char_type,
      int, unsigned int, long long int, unsigned long long int,
      float, double, long double,
      const char_type*, basic_string_view&lt;char_type&gt;,
      const void*, handle&gt; value;                                      <i>// exposition only</i>

    template&lt;class T&gt; explicit basic_format_arg(const T&amp; v) noexcept;  <i>// exposition only</i>
    explicit basic_format_arg(float n) noexcept;                       <i>// exposition only</i>
    explicit basic_format_arg(double n) noexcept;                      <i>// exposition only</i>
    explicit basic_format_arg(long double n) noexcept;                 <i>// exposition only</i>
    explicit basic_format_arg(const char_type* s);                     <i>// exposition only</i>

    template&lt;class traits&gt;
      explicit basic_format_arg(
        basic_string_view&lt;char_type, traits&gt; s) noexcept;              <i>// exposition only</i>

    template&lt;class traits, class Allocator&gt;
      explicit basic_format_arg(
        const basic_string&lt;char_type, traits, Allocator&gt;&amp; s) noexcept; <i>// exposition only</i>
    
    explicit basic_format_arg(nullptr_t) noexcept;                     <i>// exposition only</i>

    template&lt;class T&gt;
      explicit basic_format_arg(<del>const</del> T* p) noexcept;                  <i>// exposition only</i>
  public:
    basic_format_arg() noexcept;

    explicit operator bool() const noexcept;
  };
}
</pre>
</blockquote>
<p>
[&hellip;]
</p>
<pre>
template&lt;class T&gt; explicit basic_format_arg(<del>const</del> T* p) noexcept;
</pre>
<blockquote>
<p>
-12- <i>Constraints:</i> <tt>is_void_v&lt;T&gt;</tt> is <tt>true</tt>.
<p/>
-13- <i>Effects:</i> Initializes <tt>value</tt> with <tt>p</tt>.
<p/>
-14- [<i>Note 1</i>: Constructing <tt>basic_format_arg</tt> from a pointer to a member is ill-formed unless the 
user provides an enabled specialization of formatter for that pointer to member type. &mdash; <i>end note</i>]
</p>
</blockquote>
</blockquote>
</li>

</ol></resolution>

</issue>
