<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3311" status="Dup">
<title><tt>basic_string::operator=(charT c)</tt> should be constrained</title>
<section><sref ref="[string.cons]"/></section>
<submitter>Russia</submitter>
<date>04 Nov 2019</date>
<priority>99</priority>

<discussion>
<p><b>Addresses RU 013</b></p>

<p>
Because of the implicit conversion of arithmetic types it is error prone to use the
<tt>basic_string::operator=(charT c)</tt>:
</p>
<blockquote><pre>
double d = 3.14;
std::string s;
s = d; // Compiles
</pre></blockquote>
<p>
Make sure that the program is ill-formed if an implicit conversion from arithmetic type happens while
assigning to <tt>std::basic_string</tt>. Or at least make sure that the program is ill-formed if an 
implicit conversion from floating point type happens while assigning to <tt>std::basic_string</tt>.
</p>

<note>2019-11 Status to Duplicate during Tuesday morning issue processing in Belfast.</note>
<p>Duplicate of <iref ref="2372"/>.</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4835">N4835</a>.</p>

<ol>
<li><p>Modify <sref ref="[basic.string]"/> p3, class template <tt>basic_string</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
<ins>template&lt;class T&gt;</ins>
constexpr basic_string&amp; operator=(<del>char</del>T c);
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[string.cons]"/> as indicated:</p>

<blockquote>
<pre>
<ins>template&lt;class T&gt;</ins>
constexpr basic_string&amp; operator=(<del>char</del>T c);
</pre>
<blockquote>
<p>
<ins>-?- <i>Constraints:</i> <tt>is_same_v&lt;T, charT&gt;</tt> is <tt>true</tt>.</ins>
<p/>
-30- <i>Effects:</i> Equivalent to:
<blockquote><pre>
return *this = basic_string_view&lt;charT, traits&gt;(addressof(c), 1);
</pre></blockquote>
</p>
</blockquote>
</blockquote>

</li>
</ol>
</resolution>
</issue>
