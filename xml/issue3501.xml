<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3501" status="New">
<title><tt>basic_syncbuf</tt>-related manipulators refer to some <tt>Allocator</tt> without defining it</title>
<section><sref ref="[ostream.manip]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>15 Nov 2020</date>
<priority>99</priority>

<discussion>
<p>
From <a href="https://github.com/cplusplus/draft/pull/4300">this editorial issue request</a>: 
</p>
<p>
The three <tt>basic_syncbuf</tt>-related manipulators <tt>emit_on_flush</tt>, <tt>noemit_on_flush</tt>, 
and <tt>flush_emit</tt> use in their <i>Effects:</i> elements the following wording:
</p>
<blockquote><p>
"If <tt>os.rdbuf()</tt> is a <tt>basic_syncbuf&lt;charT, traits, Allocator&gt;*</tt>, called <tt>buf</tt> 
for the purpose of exposition, calls [&hellip;]
</p></blockquote>
<p>
There are two problems with that wording (even when considering the helpful note following p8): First, 
the type <tt>Allocator</tt> is not defined elsewhere (e.g. it is not part of the function signature) 
and second, <tt>os.rdbuf()</tt> has type <tt>basic_streambuf&lt;charT, traits&gt;*</tt> and not any 
other type.
<p/>
By introducing an expository <tt><i>SYNCBUF</i></tt> to detect <tt>basic_syncbuf</tt> during the work 
on the above mentioned editorial issue to solve these problems it turned out that the suggested wording 
fix would introduce an apparently normative change that the <tt>syncbuf</tt> type must not use a 
program-defined specialization.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4868">N4868</a>. 
</p>

<blockquote class="note">
<p>
This proposed wording is known to be incorrect, but is nonetheless depicted to present the
overall idea.
</p>
</blockquote>

<ol>
<li>
<p>
Modify <sref ref="[ostream.manip]"/> as indicated:
</p>

<blockquote>
<p>
-1- Each instantiation of any of the function templates specified in this subclause is a designated 
addressable function (<sref ref="[namespace.std]"/>).
<p/>
<ins>-?- In this subclause, <tt><i>SYNCBUF</i>(p)</tt> for a pointer <tt>p</tt> of type <tt>B*</tt>
is determined as follows. If <tt>*p</tt> is a base class subobject of an object of type <tt>S</tt>,
where <tt>S</tt> is a specialization generated from the <tt>basic_syncbuf</tt> primary template,
and <tt>is_convertible_v&lt;S*, B*&gt;</tt> is <tt>true</tt>, then <tt><i>SYNCBUF</i>(p)</tt> is 
<tt>dynamic_cast&lt;S*&gt;(p)</tt>. Otherwise, <tt><i>SYNCBUF</i>(p)</tt> is 
<tt>static_cast&lt;void*&gt;(nullptr)</tt>. [<i>Note ?:</i> To work around the issue that the
<tt>Allocator</tt> template argument of <tt>S</tt> cannot be deduced, implementations can introduce an 
intermediate base class to <tt>basic_syncbuf</tt> that manages its <tt>emit_on_sync</tt> flag. &mdash; 
<i>end note</i>]</ins>
<p/>
[&hellip;]
</p>
<pre>
template&lt;class charT, class traits&gt;
  basic_ostream&lt;charT, traits&gt;&amp; emit_on_flush(basic_ostream&lt;charT, traits&gt;&amp; os);
</pre>
<blockquote>
<p>
<ins>Let <tt>p</tt> be <tt><i>SYNCBUF</i>(os.rdbuf())</tt>.</ins>
<p/>
-8- <i>Effects:</i> If <tt><ins>p</ins><del>os.rdbuf()</del></tt> is <ins>not null</ins><del>a 
<tt>basic_syncbuf&lt;charT, traits, Allocator&gt;*</tt>, called <tt>buf</tt> for the purpose of exposition</del>, 
calls <tt><ins>p</ins><del>buf</del>-&gt;set_emit_on_sync(true)</tt>. Otherwise this manipulator has no effect.
<del>[<i>Note 1:</i> To work around the issue that the Allocator template argument cannot be deduced, 
implementations can introduce an intermediate base class to <tt>basic_syncbuf</tt> that manages 
its <tt>emit_on_sync</tt> flag. &mdash; <i>end note</i>]</del>
<p/>
-9- <i>Returns:</i> <tt>os</tt>.
</p>
</blockquote>
<pre>
template&lt;class charT, class traits&gt;
  basic_ostream&lt;charT, traits&gt;&amp; noemit_on_flush(basic_ostream&lt;charT, traits&gt;&amp; os);
</pre>
<blockquote>
<p>
<ins>Let <tt>p</tt> be <tt><i>SYNCBUF</i>(os.rdbuf())</tt>.</ins>
<p/>
-10- <i>Effects:</i> If <tt><ins>p</ins><del>os.rdbuf()</del></tt> is <ins>not null</ins><del>a 
<tt>basic_syncbuf&lt;charT, traits, Allocator&gt;*</tt>, called <tt>buf</tt> for the purpose of exposition</del>, 
calls <tt><ins>p</ins><del>buf</del>-&gt;set_emit_on_sync(false)</tt>. 
Otherwise this manipulator has no effect.
<p/>
-11- <i>Returns:</i> <tt>os</tt>.
</p>
</blockquote>
<pre>
template&lt;class charT, class traits&gt;
  basic_ostream&lt;charT, traits&gt;&amp; flush_emit(basic_ostream&lt;charT, traits&gt;&amp; os);
</pre>
<blockquote>
<p>
<ins>Let <tt>p</tt> be <tt><i>SYNCBUF</i>(os.rdbuf())</tt>.</ins>
<p/>
-12- <i>Effects:</i> Calls <tt>os.flush()</tt>. Then, if <tt><ins>p</ins><del>os.rdbuf()</del></tt> is 
<ins>not null</ins><del>a <tt>basic_syncbuf&lt;charT, traits, Allocator&gt;*</tt>, called <tt>buf</tt> 
for the purpose of exposition</del>, calls <tt><ins>p</ins><del>buf</del>-&gt;emit()</tt>.
<p/>
-13- <i>Returns:</i> <tt>os</tt>.
</p>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
