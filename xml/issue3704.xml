<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3704" status="New">
<title>LWG 2059 added overloads that might be ill-formed for sets</title>
<section><sref ref="[set.overview]"/><sref ref="[multiset.overview]"/>
<sref ref="[unord.set.overview]"/><sref ref="[unord.multiset.overview]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>25 May 2022</date>
<priority>99</priority>

<discussion>
<p>
The restored <tt>erase(iterator)</tt> overloads introduced by LWG <iref ref="2059"/> would be duplicates 
of the <tt>erase(const_iterator)</tt> ones if <tt>iterator</tt> and <tt>const_iterator</tt> are the same 
type, which is allowed for sets.
<p/>
We should constrain them (or add prose) so that the <tt>erase(iterator)</tt> overloads are only present 
when the iterator types are distinct.
<p/>
This applies to <tt>set</tt>, <tt>multiset</tt>, <tt>unordered_set</tt>, <tt>unordered_multiset</tt> 
(and <tt>flat_set</tt> and <tt>flat_multiset</tt>).
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4910"/>.
</p>

<ol>
<li><p>Modify <sref ref="[set.overview]"/>, class template <tt>set</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
iterator erase(iterator position) <ins>requires !same_as&lt;iterator, const_iterator&gt;</ins>;
iterator erase(const_iterator position);
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[multiset.overview]"/>, class template <tt>multiset</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
iterator erase(iterator position) <ins>requires !same_as&lt;iterator, const_iterator&gt;</ins>;
iterator erase(const_iterator position);
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[unord.set.overview]"/>, class template <tt>unordered_set</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
iterator erase(iterator position) <ins>requires !same_as&lt;iterator, const_iterator&gt;</ins>;
iterator erase(const_iterator position);
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[unord.multiset.overview]"/>, class template <tt>unordered_multiset</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
iterator erase(iterator position) <ins>requires !same_as&lt;iterator, const_iterator&gt;</ins>;
iterator erase(const_iterator position);
</pre>
</blockquote>
</li>

</ol>
</resolution>

</issue>
