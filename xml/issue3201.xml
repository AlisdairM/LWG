<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3201" status="WP">
<title><tt>lerp</tt> should be marked as <tt>noexcept</tt></title>
<section><sref ref="[c.math.lerp]"/></section>
<submitter>Paolo Torres</submitter>
<date>10 Apr 2019</date>
<priority>2</priority>

<discussion>
<p>
The overloads of <tt>lerp</tt> should be marked as <tt>noexcept</tt>, and this can be explained through the Lakos Rule. 
This function does not specify any undefined behaviour, and as such has no preconditions. This implies it has a wide 
contract, meaning it cannot throw, and thus can be marked as <tt>noexcept</tt>.
</p>

<note>2020-02 Moved to Immediate on Thursday afternoon in Prague.</note>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4810">N4810</a>.</p>

<ol>
<li><p>Modify <sref ref="[cmath.syn]"/>, header <tt>&lt;cmath&gt;</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
<i>// <sref ref="[c.math.lerp]"/>, linear interpolation</i>
constexpr float lerp(float a, float b, float t) <ins>noexcept</ins>;
constexpr double lerp(double a, double b, double t) <ins>noexcept</ins>;
constexpr long double lerp(long double a, long double b, long double t) <ins>noexcept</ins>;
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[c.math.lerp]"/> as indicated:</p>

<blockquote>
<pre>
constexpr float lerp(float a, float b, float t) <ins>noexcept</ins>;
constexpr double lerp(double a, double b, double t) <ins>noexcept</ins>;
constexpr long double lerp(long double a, long double b, long double t) <ins>noexcept</ins>;
</pre>
</blockquote>
</li>
</ol>
</resolution>
</issue>
