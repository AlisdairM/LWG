<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2137" status="Open">
<title>Misleadingly constrained post-condition in the presence of exceptions</title>
<section><sref ref="[re.regex.assign]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>8 Mar 2012</date>
<priority>3</priority>

<discussion>

<p>
The post-conditions of <tt>basic_regex&lt;&gt;::assign</tt> <sref ref="[re.regex.assign]"/> p16 say:
</p>
<blockquote><p>
<span style="color:#C80000;font-weight:bold">If no exception is thrown,</span> <tt>flags()</tt> returns
<tt>f</tt> and <tt>mark_count()</tt> returns the number of marked sub-expressions within the expression.
</p></blockquote>
<p>
The default expectation in the library is that post-conditions only hold, if there is no failure
(see also <iref ref="2136"/>), therefore the initial condition should be removed to prevent any
misunderstanding.
</p>

<note>
2012-10 Portland: Move to Open
</note>

<p>
A favorable resolution clearly depends on a favorable resolution to <iref ref="2136"/>.
There is also a concern that this is just one example of where we would want to apply
such a wording clean-up, and which is really needed to resolve both this issue and
<iref ref="2136"/> is a paper providing the clause 17 wording that gives the guarantee
for <i>postcondition</i> paragraphs, and then reviews clauses 18-30 to apply that
guarantee consistently.  We do not want to pick up these issues piecemeal, as we risk
opening many issues in an ongoing process.
</p>

<note>2015-05-06 Lenexa: EricWF to write paper addressing 2136 and 2137</note>

<note>2024-10-03; Jonathan comments</note>
<p>
I could find no other cases in the entire standard where we say something
like this in a <i>Postconditions</i>: element.
<sref ref="[streambuf.virt.pback]"/> p2 says
"<i>Postconditions</i>: On return, the constraints of [...]"
which is probably redundant (postconditions are always "on return").
</p>
</discussion>

<resolution>
<p>This wording is relative to N3376.</p>

<blockquote><pre>
template &lt;class string_traits, class A&gt;
  basic_regex&amp; assign(const basic_string&lt;charT, string_traits, A&gt;&amp; s,
    flag_type f = regex_constants::ECMAScript);
</pre><blockquote>
<p>
[&hellip;]
<p/>
-15- <i>Effects</i>: Assigns the regular expression contained in the string <tt>s</tt>, interpreted according
the flags specified in <tt>f</tt>. If an exception is thrown, <tt>*this</tt> is unchanged.
<p/>
-16- <i>Postconditions</i>: <del>If no exception is thrown,</del> <tt>flags()</tt> returns <tt>f</tt> and
<tt>mark_count()</tt> returns the number of marked sub-expressions within the expression.
</p>
</blockquote>
</blockquote>

</resolution>

</issue>
