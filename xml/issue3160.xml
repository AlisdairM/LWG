<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3160" status="C++20">
<title><tt>atomic_ref() = delete;</tt> should be deleted</title>
<section><sref ref="[atomics.ref.generic]"/></section>
<submitter>Tim Song</submitter>
<date>1 Oct 2018</date>
<priority>0</priority>

<discussion>
<p>
<tt>atomic_ref</tt> has a deleted default constructor, which causes pointless ambiguities in cases like:
</p>
<blockquote>
<pre>
void meow(atomic_ref&lt;int&gt;);
void meow(some_default_constructible_struct);

meow({});
</pre>
</blockquote>
<p>
It should have no default constructor rather than a deleted one.
(Note that it has other user-defined constructors
and so cannot be an aggregate under any definition.)
</p>

<note>2018-10-06 Status to Tentatively Ready after seven positive votes on the reflector.</note>
<note>2018-11, Adopted in San Diego</note>
</discussion>

<resolution>

<p>This wording is relative to <a href="https://wg21.link/n4762">N4762</a>.</p>

<ul>
<li><p>Edit <sref ref="[atomics.ref.generic]"/>, class template <tt>atomic_ref</tt> synopsis, as indicated:</p>
<blockquote><pre>
[&hellip;]
<del>atomic_ref() = delete;</del>
atomic_ref&amp; operator=(const atomic_ref&amp;) = delete;
[&hellip;]
</pre></blockquote>
</li>

<li><p>Edit <sref ref="[atomics.ref.int]"/>, class template specialization <tt>atomic_ref&lt;<i>integral</i>&gt;</tt> synopsis, as indicated:</p>
<blockquote><pre>
[&hellip;]
<del>atomic_ref() = delete;</del>
atomic_ref&amp; operator=(const atomic_ref&amp;) = delete;
[&hellip;]
</pre></blockquote>
</li>

<li><p>Edit <sref ref="[atomics.ref.float]"/>, class template specialization <tt>atomic_ref&lt;<i>floating-point</i>&gt;</tt> synopsis, as indicated:</p>
<blockquote><pre>
[&hellip;]
<del>atomic_ref() = delete;</del>
atomic_ref&amp; operator=(const atomic_ref&amp;) = delete;
[&hellip;]
</pre></blockquote>
</li>

<li><p>Edit <sref ref="[atomics.ref.pointer]"/>, class template specialization <tt>atomic_ref&lt;T*&gt;</tt> synopsis, as indicated:</p>
<blockquote><pre>
[&hellip;]
<del>atomic_ref() = delete;</del>
atomic_ref&amp; operator=(const atomic_ref&amp;) = delete;
[&hellip;]
</pre></blockquote>
</li>
</ul>
</resolution>

</issue>
