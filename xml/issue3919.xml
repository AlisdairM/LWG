<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3919" status="WP">
<title><tt>enumerate_view</tt> may invoke UB for sized common non-forward underlying ranges</title>
<section><sref ref="[range.enumerate]"/></section>
<submitter>Patrick Palka</submitter>
<date>7 Apr 2023</date>
<priority>3</priority>

<discussion>
<p>
For a sized common range, <tt>enumerate_view::end()</tt> is specified to call
<tt>ranges::distance</tt>. But <tt>ranges::distance</tt> is not necessarily well-defined
for a sized non-forward range after calling <tt>ranges::begin</tt> (according to
<sref ref="[range.sized]"/>).
<p/>
So for a sized common non-forward underlying range, it seems calling
<tt>enumerate_view::begin()</tt> followed by <tt>enumerate_view::end()</tt> may invoke UB
and thus make <tt>enumerate_view</tt> potentially unusable for such ranges.
<p/>
I suppose we might need to instead call and cache the result of
<tt>ranges::distance</tt> from <tt>enumerate_view::begin()</tt> for such ranges.
</p>

<note>2022-04-12; Patrick Palka provides wording</note>
<p>
The proposed wording follows the suggestion provided by Tim Song, to simply make <tt>enumerate</tt> non-common for this case.
</p>

<note>2023-05-24; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
</p>

<note>Kona 2023-11-10; move to Ready</note>

<note>Tokyo 2024-03-23; Status changed: Voting &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4944"/>.
</p>

<ol>
<li>
<p>Modify <sref ref="[range.enumerate.view]"/>, class template class <tt>enumerate_view</tt> synopsis, as indicated:</p>

<blockquote>
<blockquote><pre>
[&hellip;]
constexpr auto end() requires (!<i>simple-view</i>&lt;V&gt;) {
  if constexpr (<ins>forward_range&lt;V&gt; &amp;&amp;</ins> common_range&lt;V&gt; &amp;&amp; sized_range&lt;V&gt;)
    return <i>iterator</i>&lt;false&gt;(ranges::end(<i>base_</i>), ranges::distance(<i>base_</i>));
  else
    return <i>sentinel</i>&lt;false&gt;(ranges::end(<i>base_</i>));
}
constexpr auto end() const requires <i>range-with-movable-references</i>&lt;const V&gt; {
  if constexpr (<ins>forward_range&lt;const V&gt; &amp;&amp;</ins> common_range&lt;const V&gt; &amp;&amp; sized_range&lt;const V&gt;)
    return <i>iterator</i>&lt;true&gt;(ranges::end(<i>base_</i>), ranges::distance(<i>base_</i>));
  else
    return <i>sentinel</i>&lt;true&gt;(ranges::end(<i>base_</i>));
}
[&hellip;]
</pre></blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
