<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3622" status="New">
<title>Misspecified transitivity of equivalence in &sect;[unord.req.general]</title>
<section><sref ref="[unord.req.general]"/></section>
<submitter>Thomas K&ouml;ppe</submitter>
<date>20 Oct 2021</date>
<priority>99</priority>

<discussion>
<p>
The paper <paper num="P2077R3"/> ("Heterogeneous erasure overloads for associative containers") 
adds a new variable <tt>kx</tt> with specific meaning for use in the Table of Unordered Associative 
Container Requirements, <sref ref="[unord.req.general]"/> p11, which is meant to stand for an 
equivalence class of heterogeneous values that can be compared with container keys.
<p/>
One property required of <tt>kx</tt> is transitivity of equality/equivalence, but this is currently specified as:
</p>
<blockquote><p>
"<tt>kx</tt> is a value such that [&hellip;] <tt>(eq(r1, kx) &amp;&amp; eq(r1, r2)) == eq(r2, kx)</tt> [&hellip;], 
where <tt>r1</tt> and <tt>r2</tt> are [any] keys".
</p></blockquote>
<p>
But this doesn't seem right. Transitivity means that <tt>eq(r1, kx) &amp;&amp; eq(r1, r2)</tt> being 
true implies <tt>eq(r2, kx)</tt> being true, but it does <em>not</em> imply that both sides are equal 
in general. In particular, <tt>eq(r2, kx)</tt> can be true even when <tt>eq(r1, kx) &amp;&amp; eq(r1, r2)</tt> 
is false.
<p/>
More abstractly, equality is transitive, but inequality is not.
<p/>
The new wording appears to have been copied from the pre-existing wording for the variable "<tt>ke</tt>", which 
suffers from the same problem, and so we propose to fix both cases.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4901">N4901</a>.
</p>

<ol>
<li><p>Modify <sref ref="[unord.req.general]"/> as indicated:</p>

<blockquote>
<ol style="list-style-type: none">
<li><p>[&hellip;]</p></li>
<li><p>(11.19) &mdash; <tt>ke</tt> is a value such that</p>
<ol style="list-style-type: none">
<li><p>(11.19.1) &mdash; <tt>eq(r1, ke) == eq(ke, r1)</tt>,</p></li>
<li><p>(11.19.2) &mdash; <tt>hf(r1) == hf(ke)</tt> if <tt>eq(r1, ke)</tt> is <tt>true</tt>, and</p></li>
<li><p>(11.19.3) &mdash; <del><tt>(eq(r1, ke) &amp;&amp; eq(r1, r2)) == eq(r2, ke)</tt></del><ins><tt>eq(ke, r2)</tt> 
is <tt>true</tt> if <tt>eq(ke, r1) &amp;&amp; eq(r1, r2)</tt> is <tt>true</tt></ins>,</p></li>
</ol>
<p>where <tt>r1</tt> and <tt>r2</tt> are keys of elements in <tt>a_tran</tt>,</p>
</li>
<li><p>(11.20) &mdash; <tt>kx</tt> is a value such that</p>
<ol style="list-style-type: none">
<li><p>(11.20.1) &mdash; <tt>eq(r1, kx) == eq(kx, r1)</tt>,</p></li>
<li><p>(11.20.2) &mdash; <tt>hf(r1) == hf(kx)</tt> if <tt>eq(r1, kx)</tt> is <tt>true</tt>,</p></li>
<li><p>(11.20.3) &mdash; <del><tt>(eq(r1, kx) &amp;&amp; eq(r1, r2)) == eq(r2, kx)</tt></del><ins><tt>eq(kx, r2)</tt> 
is <tt>true</tt> if <tt>eq(kx, r1) &amp;&amp; eq(r1, r2)</tt> is <tt>true</tt></ins>, and</p></li>
<li><p>(11.20.4) &mdash; <tt>kx</tt> is not convertible to either <tt>iterator</tt> or <tt>const_iterator</tt>,</p></li>
</ol>
<p>where <tt>r1</tt> and <tt>r2</tt> are keys of elements in <tt>a_tran</tt>,</p>
</li>
<li><p>[&hellip;]</p></li>
</ol>
</blockquote>
</li>
</ol>
</resolution>

</issue>
