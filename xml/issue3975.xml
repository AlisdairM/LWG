<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3975" status="New">
<title>Specializations of <tt>basic_format_context</tt> should not be permitted</title>
<section><sref ref="[format.context]"/></section>
<submitter>Brian Bi</submitter>
<date>13 Aug 2023</date>
<priority>99</priority>

<discussion>
<p>
The current wording allows users to specialize <tt>std::basic_format_context</tt>. However, an implementation is not 
likely to accept a program that uses the library in a way that would instantiate such a specialization, because 
<sref ref="[format.context]"/> does not provide a complete description of the interface that such a specialization 
would need to have (e.g., it does not provide a means to initialize the exposition-only <tt>args_</tt> member). Since the 
library was not designed to be able to work with user specializations of <tt>std::basic_format_context</tt>, declaring 
such specializations should be explicitly disallowed.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4958"/>.
</p>

<ol>

<li><p>Modify the <sref ref="[format.context]"/> as indicated:</p>

<blockquote>
<p>
-1- An instance of <tt>basic_format_context</tt> holds formatting state consisting of the formatting arguments and
the output iterator.
<p/>
<ins>-?- The behavior of a program that adds specializations of <tt>basic_format_context</tt> is undefined.</ins>
<p/>
-2- <tt>Out</tt> shall model <tt>output_iterator&lt;const charT&amp;&gt;</tt>.
</p>
</blockquote>

</li>
</ol>
</resolution>

</issue>
