<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3975" status="New">
<title>Specializations of <tt>basic_format_context</tt> should not be permitted</title>
<section><sref ref="[format.context]"/></section>
<submitter>Brian Bi</submitter>
<date>13 Aug 2023</date>
<priority>3</priority>

<discussion>
<p>
The current wording allows users to specialize <tt>std::basic_format_context</tt>. However, an implementation is not 
likely to accept a program that uses the library in a way that would instantiate such a specialization, because 
<sref ref="[format.context]"/> does not provide a complete description of the interface that such a specialization 
would need to have (e.g., it does not provide a means to initialize the exposition-only <tt>args_</tt> member). Since the 
library was not designed to be able to work with user specializations of <tt>std::basic_format_context</tt>, declaring 
such specializations should be explicitly disallowed.
</p>

<superseded>
<p>
This wording is relative to <paper num="N4958"/>.
</p>

<ol>

<li><p>Modify the <sref ref="[format.context]"/> as indicated:</p>

<blockquote>
<p>
-1- An instance of <tt>basic_format_context</tt> holds formatting state consisting of the formatting arguments and
the output iterator.
<p/>
<ins>-?- The behavior of a program that adds specializations of <tt>basic_format_context</tt> is undefined.</ins>
<p/>
-2- <tt>Out</tt> shall model <tt>output_iterator&lt;const charT&amp;&gt;</tt>.
</p>
</blockquote>

</li>
</ol>
</superseded>

<note>2023-09-23; Daniel comments and provides improved wording</note>
<p>
During the reflector discussion, Dietmar pointed out that the constraint can in principle be checked statically (e.g. when the 
Library creates or refers to an instantiation of <tt>basic_format_context</tt>), so we can reduce the rather draconian consequence of
"undefined behaviour" to "ill-formed, no diagnostics required". Furthermore, the new wording also adds the same constraint to
<tt>basic_format_parse_context</tt> as suggested by Tim. This is needed, since only one public constructor is specified, but
that specification does not allow to construct an object a non-zero <tt>num_args_</tt> or with the type information necessary 
for the <tt>check_dynamic_spec*</tt> functions, so the library has an unspecified way to realize this.
</p>

<note>2023-10-30; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4958"/>.
</p>

<blockquote class="note">
<p>
[<i>Drafting note:</i> The suggested wording form is borrowed from exactly the same wording form used for <tt>allocator_traits</tt>.]
</p>
</blockquote>

<ol>

<li><p>Modify <sref ref="[format.context]"/> as indicated:</p>

<blockquote>
<p>
-1- An instance of <tt>basic_format_context</tt> holds formatting state consisting of the formatting arguments and
the output iterator.
<p/>
<ins>-?- If a program declares an explicit or partial specialization of <tt>basic_format_context</tt>, the program is ill-formed,
no diagnostic required.</ins>
<p/>
-2- <tt>Out</tt> shall model <tt>output_iterator&lt;const charT&amp;&gt;</tt>.
</p>
</blockquote>

</li>

<li><p>Modify <sref ref="[format.parse.ctx]"/> as indicated:</p>

<blockquote>
<p>
-1- An instance of <tt>basic_format_parse_context</tt> holds the format string parsing state consisting of the format
string range being parsed and the argument counter for automatic indexing.
<p/>
<ins>-?- If a program declares an explicit or partial specialization of <tt>basic_format_parse_context</tt>, the program is ill-formed,
no diagnostic required.</ins>
</p>
</blockquote>

</li>
</ol>
</resolution>

</issue>
