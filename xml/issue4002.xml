<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4002" status="New">
<title>The definition of <tt>iota_view::<i>iterator</i>::iterator_concept</tt> should be improved</title>
<section><sref ref="[range.iota.iterator]"/></section>
<submitter>Hewill Kang</submitter>
<date>27 Oct 2023</date>
<priority>3</priority>

<discussion>
<p>
When <tt>W</tt> models <tt>incrementable</tt>, the <tt>iota_view</tt> iterator will be a <tt>forward_iterator</tt>, 
which accidentally makes <tt>iota_view&lt;istream_iterator&lt;int&gt;&gt;</tt> satisfies <tt>forward_range</tt>, 
which is obviously incorrect.
<p/>
Since iterator types are well within the domain of <tt>W</tt>, it seems more appropriate and accurate to define 
the <tt>iterator_concept</tt> through the iterator concept in this case.
</p>

<note>2023-11-07; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
"This would change the iterator concept for types which model <code>advanceable</code> but do not model <code>random_access_iterator</code>. A type with +=
and -= and operator* will currently get <code>random_access_iterator_tag</code>
but this proposed resolution would change it to <code>bidirectional_iterator_tag</code>."
"If we want to handle this case (and not leave it as IFNDR - the type
satisfies-but-not-models <code>incrementable</code>) then we need to account
for it everywhere we are currently using <code>incrementable</code>
(and possibly <code>equality_comparable</code>?), and not just in the concept."
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4964"/>.
</p>

<ol>

<li><p>Modify <sref ref="[range.iota.iterator]"/> as indicated:</p>

<blockquote class="note">
<p>
[<i>Drafting note</i>: When <tt>W</tt> only models <tt>input_or_output_iterator</tt>, it implies that its 
pre- and post-increment are not equality-preserving, so <tt>iterator_concept</tt> should be <tt>input_iterator_tag</tt>.]
</p>
</blockquote>

<blockquote>
<p>
-1- <tt><i>iterator</i>::iterator_concept</tt> is defined as follows:
</p>
<ol style="list-style-type: none">
<li><p>(?.?) <ins>&mdash; If <tt>W</tt> models <tt>input_or_output_iterator</tt>, then</ins></p>
<ol style="list-style-type: none">
<li><p>(?.?) <ins>&mdash; if <tt>W</tt> models <tt>random_access_iterator</tt>, then <tt>iterator_concept</tt> is 
<tt>random_access_iterator_tag</tt>;</ins></p></li>
<li><p>(?.?) <ins>&mdash; otherwise, if <tt>W</tt> models <tt>bidirectional_iterator</tt>, then <tt>iterator_concept</tt> 
is <tt>bidirectional_iterator_tag</tt>;</ins></p></li>
<li><p>(?.?) <ins>&mdash; otherwise, if <tt>W</tt> models <tt>forward_iterator</tt>, then <tt>iterator_concept</tt> 
is <tt>forward_iterator_tag</tt>;</ins></p></li>
<li><p>(?.?) <ins>&mdash; otherwise, <tt>iterator_concept</tt> is <tt>input_iterator_tag</tt>.</ins></p></li>
</ol>
</li>
<li><p>(1.1) &mdash; <ins>Otherwise, i</ins><del>I</del>f <tt>W</tt> models <tt><i>advanceable</i></tt>, then 
<tt>iterator_concept</tt> is <tt>random_access_iterator_tag</tt>.</p></li>
<li><p>(1.2) &mdash; Otherwise, if <tt>W</tt> models <tt><i>decrementable</i></tt>, then <tt>iterator_concept</tt> is 
<tt>bidirectional_iterator_tag</tt>.</p></li>
<li><p>(1.3) &mdash; Otherwise, if <tt>W</tt> models <tt>incrementable</tt>, then <tt>iterator_concept</tt> is 
<tt>forward_iterator_tag</tt>.</p></li>
<li><p>(1.4) &mdash; Otherwise, <tt>iterator_concept</tt> is <tt>input_iterator_tag</tt>.</p></li>
</ol>
</blockquote>

</li>

</ol>
</resolution>

</issue>
