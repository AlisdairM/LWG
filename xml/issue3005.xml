<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3005" status="New">
<title>Destruction order of arrays by <tt>make_shared/allocate_shared</tt> only recommended?</title>
<section><sref ref="[util.smartptr.shared.create]"/></section>
<submitter>Richard Smith</submitter>
<date>1 Aug 2017</date>
<priority>99</priority>

<discussion>
<p>
In [util.smartptr.shared.create]/7.9 we find this:
</p>
<blockquote><p>
"When the lifetime of the object managed by the return value ends, or when the initialization of an 
array element throws an exception, the initialized elements should be destroyed in the reverse order 
of their construction."
</p></blockquote>
<p>
Why is this only a "should be" and not a "shall be" (or, following usual conventions for how we write 
requirements on the implementation, "are")? Is there some problem that means we can't require an 
implementation to destroy in reverse construction order in all cases?
</p>
</discussion>

<resolution>
<p>This resolution is relative to <a href="http://wg21.link/n4687">N4687</a>.</p>

<ol>
<li><p>Edit <sref ref="[util.smartptr.shared.atomic]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class T, ...&gt;
shared_ptr&lt;T&gt; make_shared(<i>args</i>);
template&lt;class T, class A, ...&gt;
shared_ptr&lt;T&gt; allocate_shared(const A&amp; a, <i>args</i>);
</pre>
<blockquote>
<p>
[&hellip;]
<p/>
-7- <i>Remarks:</i>
</p>
<ol style="list-style-type: none">
<li><p>[&hellip;]</p></li>
<li><p>(7.9) &mdash; When the lifetime of the object managed by the return value ends, or when the initialization of
an array element throws an exception, the initialized elements <ins>are</ins><del>should be</del> destroyed in the reverse
order of their construction.</p></li>
</ol>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>
</issue>
