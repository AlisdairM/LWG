<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2723" status="WP">
<title>Do <tt>directory_iterator</tt> and <tt>recursive_directory_iterator</tt> become the end iterator upon error?</title>
<section><sref ref="[fs.class.directory_iterator]"/><sref ref="[fs.class.rec.dir.itr]"/></section>
<submitter>Eric Fiselier</submitter>
<date>28 May 2016</date>
<priority>0</priority>

<discussion>
<p>
Constructing or performing an increment on directory iterator types can result in an error. Currently there is 
implementation divergence regarding the value of the iterator after an error occurs. Both boost and libc++ construct 
the end iterator. libstdc++ constructs a singular iterator which is not equal to the end iterator. For this reason 
we should clarify the state of the iterators after an error occurs.
</p>

<note>2016-06 Oulu</note>
<p>Moved to P0/Ready during issues prioritization.</p>
<p>Friday: status to Immediate</p>
</discussion>

<resolution>
<p>This wording is relative to N4582.</p>
<ol>
<li><p>Modify <sref ref="[fs.class.directory_iterator]"/> as follows:</p>

<blockquote>
<p>
-3- If an iterator of type <tt>directory_iterator</tt> <ins>reports an error or</ins> is advanced past the last 
directory element, that iterator shall
become equal to the end iterator value. The <tt>directory_iterator</tt> default constructor shall create an iterator
equal to the end iterator value, and this shall be the only valid iterator for the end condition.
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
