<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4006" status="New">
<title><tt>chunk_view::<i>outer-iterator</i>::value_type</tt> should provide <tt>empty</tt></title>
<section><sref ref="[range.chunk.outer.value]"/></section>
<submitter>Hewill Kang</submitter>
<date>05 Nov 2023</date>
<priority>99</priority>

<discussion>
<p>
<tt>chunk_view::<i>outer-iterator</i>::value_type</tt> can determine whether it is empty by simply checking whether the 
<tt>chunk_view</tt>'s <tt><i>remainder_</i></tt> is <tt>0</tt>, which makes it valuable to explicitly provide a 
<tt>noexcept empty</tt> member.
<p/>
Otherwise, the <tt>view_interface::empty</tt> is synthesized only through the <tt>size</tt> member when the original 
sentinel and iterator type model <tt>sized_sentinel_for</tt>, <a href="https://godbolt.org/z/v3MbzfT9G">which seems overkill</a>:
</p>
<blockquote><pre>
#include &lt;cassert&gt;
#include &lt;iostream&gt;
#include &lt;sstream&gt;
#include &lt;ranges&gt;

int main() {
  auto ints = std::istringstream{"1 2 3 4 5 6 7 8 9 10"};
  for (auto chunk : std::views::istream&lt;int&gt;(ints) | std::views::chunk(3)) {
    for (auto elem : chunk) {
      assert(!chunk.empty()); // <span style="color:red;font-weight:bolder">no matching function for call to 'empty()'</span>
      std::cout &lt;&lt; elem &lt;&lt; " ";
    }
    assert(chunk.empty()); // <span style="color:red;font-weight:bolder">ditto</span>
    std::cout &lt;&lt; "\n";
  }
}
</pre></blockquote>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4964"/>.
</p>

<ol>

<li><p>Modify <sref ref="[range.chunk.outer.value]"/> as indicated:</p>

<blockquote>
<blockquote>
<pre>
  namespace std::ranges {
    template&lt;view V&gt;
      requires input_range&lt;V&gt;
    struct chunk_view&lt;V&gt;::<i>outer-iterator</i>::value_type : view_interface&lt;value_type&gt; {
    private:
      chunk_view* <i>parent_</i>;                                        // <i>exposition only</i>

      constexpr explicit value_type(chunk_view&amp; parent);          // <i>exposition only</i>

    public:
      constexpr <i>inner-iterator</i> begin() const noexcept;
      constexpr default_sentinel_t end() const noexcept;

      <ins>constexpr bool empty() const noexcept;</ins>
      constexpr auto size() const
        requires sized_sentinel_for&lt;sentinel_t&lt;V&gt;, iterator_t&lt;V&gt;&gt;;
    };
  }
</pre>
</blockquote>
[&hellip;]
<pre>
constexpr default_sentinel_t end() const noexcept;
</pre>
<blockquote>
<p>
-3- <i>Returns</i>: <tt>default_sentinel</tt>.
</p>
</blockquote>
<pre>
<ins>constexpr bool empty() const noexcept;</ins>
</pre>
<blockquote>
<p>
<ins>-?- <i>Effects</i>: Equivalent to: <tt>return <i>parent_</i>-&gt;<i>remainder_</i> == 0;</tt></ins>
</p>
</blockquote>
</blockquote>

</li>

</ol>
</resolution>

</issue>
