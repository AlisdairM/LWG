<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3281" status="WP">
<title>Conversion from <tt><i>pair-like</i></tt> types to <tt>subrange</tt> is a silent semantic promotion</title>
<section><sref ref="[range.subrange]"/></section>
<submitter>Eric Niebler</submitter>
<date>10 Sep 2019</date>
<priority>1</priority>

<discussion>
<p>
Just because a <tt>pair</tt> is holding two iterators, it doesn't mean those two iterators denote a 
valid range. Implicitly converting such <tt><i>pair-like</i></tt> types to a <tt>subrange</tt> is 
dangerous and should be disallowed.
<p/>
Suggested priority P1.
<p/>
Implementation experience: range-v3's subrange lacks these constructors.
</p>

<note>2019-10 Priority set to 1 and status to LEWG after reflector discussion</note>
<note>2019-11 Status to Ready after LWG discussion Friday in Belfast.</note>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4830">N4830</a>.</p>

<ol>
<li><p>Modify <sref ref="[range.subrange]"/> as indicated:</p>

<blockquote>
<pre>
namespace std::ranges {
[&hellip;]
  <del>template&lt;class T, class U, class V&gt;
    concept <i>pair-like-convertible-to</i> = <i>// exposition only</i>
      !range&lt;T&gt; &amp;&amp; <i>pair-like</i>&lt;remove_reference_t&lt;T&gt;&gt; &amp;&amp;
      requires(T&amp;&amp; t) {
        { get&lt;0&gt;(std::forward&lt;T&gt;(t)) } -&gt; convertible_to&lt;U&gt;;
        { get&lt;1&gt;(std::forward&lt;T&gt;(t)) } -&gt; convertible_to&lt;V&gt;;
      };</del>
[&hellip;]
  template&lt;input_or_output_iterator I, sentinel_for&lt;I&gt; S = I, subrange_kind K =
           sized_sentinel_for&lt;S, I&gt; ? subrange_kind::sized : subrange_kind::unsized&gt;
    requires (K == subrange_kind::sized || !sized_sentinel_for&lt;S, I&gt;)
  class subrange : public view_interface&lt;subrange&lt;I, S, K&gt;&gt; {
  private:
    [&hellip;]
  public:
    [&hellip;]
    <del>template&lt;<i>not-same-as</i>&lt;subrange&gt; PairLike&gt;
      requires <i>pair-like-convertible-to</i>&lt;PairLike, I, S&gt;
    constexpr subrange(PairLike&amp;&amp; r) requires (!StoreSize)
      : subrange{std::get&lt;0&gt;(std::forward&lt;PairLike&gt;(r)),
                 std::get&lt;1&gt;(std::forward&lt;PairLike&gt;(r))}
    {}
    template&lt;<i>pair-like-convertible-to</i>&lt;I, S&gt; PairLike&gt;
    constexpr subrange(PairLike&amp;&amp; r, <i>make-unsigned-like-t</i>(iter_difference_t&lt;I&gt;) n)
      requires (K == subrange_kind::sized)
      : subrange{std::get&lt;0&gt;(std::forward&lt;PairLike&gt;(r)),
                 std::get&lt;1&gt;(std::forward&lt;PairLike&gt;(r)), n}
    {}</del>
  [&hellip;]
  };
[&hellip;]
}
</pre>
</blockquote>
</li>

</ol>

</resolution>
</issue>
