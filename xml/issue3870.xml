<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3870" status="New">
<title>Remove voidify</title>
<section><sref ref="[specialized.algorithms.general]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>30 Jan 2023</date>
<priority>99</priority>

<discussion>
<p>
This is the resolution for NB comment <b><a href="https://github.com/cplusplus/nbballot/issues/452">GB-121</a></b>
</p>

<p>
The <tt><i>voidify</i></tt> helper breaks const-correctness, for no tangible benefit.
C++20 ballot comment US 215 also suggested removing it,
but failed to achieve consensus. That should be reconsidered.
</p>
<p>
The only claimed benefits are:
<ul>
<li>Allowing the <tt>uninitialized_xxx</tt> algorithms
to create objects in const storage
(including overwriting objects declared as const which is usually UB).
The caller should be responsible for using <tt>const_cast</tt>
if that's really desirable.
Implicitly removing 'const' is unsafe and unnecessary.
</li>
<li>
Supporting creation of const objects with <tt>std::construct_at</tt>.
This seems reasonable, but should be supported by adding a dedicated
function that doesn't conflate the type of the storage to write to
and the object to create, e.g. <tt>construct_at&lt;const T&gt;(ptr)</tt>.
</li>
</ul>
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4928"/>.
</p>

<ol>
<li><p>Modify <sref ref="[specialized.algorithms.general]"/>, <b>General</b>,
as indicated:</p>

<blockquote>
<p>-4-
Some algorithms specified in <sref ref="[specialized.algorithms]"/>
make use of the exposition-only function <tt><i>voidify</i></tt>:
</p>
<blockquote>
<pre><code>
template&lt;class T&gt;
  constexpr void* <i>voidify</i>(T&amp; obj) noexcept {
    return <del>const_cast&lt;void*&gt;(</del>static_cast&lt;<del>const volatile </del>void*&gt;(addressof(obj))<del>)</del>;
  }
</code></pre>
</blockquote>
</blockquote>
</li>
</ol>

</resolution>

</issue>
