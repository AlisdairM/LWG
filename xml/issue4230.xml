<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4230" status="New">
<title><tt>simd&lt;complex&gt;::real/imag</tt> is overconstrained</title>
<section>
<sref ref="[simd.complex.access]"/>
</section>
<submitter>Matthias Kretz</submitter>
<date>18 Mar 2025</date>
<priority>99</priority>

<discussion>
<p>
<sref ref="[simd.complex.access]"/> overconstrains the arguments to `real` and `imag`.
<tt>complex&lt;T&gt;::real/imag</tt> allows conversions to `T` whereas <tt>simd&lt;complex&lt;T&gt;&gt;</tt>
requires basically an exact match (<tt>same_as&lt;simd&lt;T&gt;&gt;</tt> modulo ABI tag differences).
</p>
<blockquote><pre>
complex&lt;double&gt; c = {};
c.real(1.f); // OK

simd&lt;complex&lt;double&gt;&gt; sc = {};
sc.real(simd&lt;float&gt;(1.f)); // <span style="color:red;font-weight:bolder">ill-formed, should be allowed</span>
</pre></blockquote>
<p>
The design intent was to match the <tt>std::complex&lt;T&gt;</tt> interface. In which case
the current wording doesn't match that intent. `complex` doesn't say <tt>real(same_as&lt;T&gt; auto)</tt> 
but 'real(T)', which allows conversions.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N5008"/>.
</p>

<ol>

<li><p>Modify <sref ref="[simd.overview]"/>, class template `basic_simd` synopsis, as indicated:</p>

<blockquote>
<pre>
[&hellip;]
<i>// <sref ref="[simd.complex.access]"/>, basic_simd complex-value accessors</i>
constexpr auto real() const noexcept;
constexpr auto imag() const noexcept;
<del>template&lt;<i>simd-floating-point</i> V&gt;</del>
  constexpr void real(<ins><i>see below</i></ins><del>const V&amp;</del> v) noexcept;
<del>template&lt;<i>simd-floating-point</i> V&gt;</del>
  constexpr void imag(<ins><i>see below</i></ins><del>const V&amp;</del> v) noexcept;
[&hellip;]
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[simd.complex.access]"/> as indicated:</p>

<blockquote>
<pre>
<del>template&lt;<i>simd-floating-point</i> V&gt;</del>
  constexpr void real(<ins><i>see below</i></ins><del>const V&amp;</del> v) noexcept;
<del>template&lt;<i>simd-floating-point</i> V&gt;</del>
  constexpr void imag(<ins><i>see below</i></ins><del>const V&amp;</del> v) noexcept;
</pre>
<blockquote>
<p>
-3- <i>Constraints</i>:
</p>
<ol style="list-style-type: none">
<li><p><del>(3.1) &mdash;</del> <tt><i>simd-complex</i>&lt;basic_simd&gt;</tt> is modeled<ins>.</ins><del>,</del></p></li>
<li><p><del>(3.2) &mdash; <tt>same_as&lt;typename V::value_type, typename T::value_type&gt;</tt> is modeled, and</del></p></li>
<li><p><del>(3.3) &mdash; `V::size() == size()` is `true`.</del></p></li>
</ol>
<p>
-4- <i>Effects</i>: Replaces each element of the `basic_simd` object such that the <tt><i>i</i></tt><sup>th</sup> 
element is replaced with <tt>value_type(v[<i>i</i>], operator[](<i>i</i>).imag())</tt> or 
<tt>value_type(operator[](<i>i</i>).real(), v[<i>i</i>])</tt> for `real` and `imag` respectively, 
for all <tt><i>i</i></tt> in the range `[0, size())`.
<p/>
<ins>-?- <i>Remarks</i>: The type of argument `v` is 
<tt>const rebind_t&lt;typename T::value_type, basic_simd&gt;&amp;</tt>.</ins>
</p>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
