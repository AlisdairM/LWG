<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4230" status="New">
<title><tt>simd&lt;complex&gt;::real/imag</tt> is overconstrained</title>
<section>
<sref ref="[simd.complex.access]"/>
</section>
<submitter>Matthias Kretz</submitter>
<date>18 Mar 2025</date>
<priority>99</priority>

<discussion>
<p>
<sref ref="[simd.complex.access]"/> overconstrains the arguments to `real` and `imag`.
<tt>complex&lt;T&gt;::real/imag</tt> allows conversions to `T` whereas <tt>simd&lt;complex&lt;T&gt;&gt;</tt>
requires basically an exact match (<tt>same_as&lt;simd&lt;T&gt;&gt;</tt> modulo ABI tag differences).
</p>
<blockquote><pre>
complex&lt;double&gt; c = {};
c.real(1.f); // OK

simd&lt;complex&lt;double&gt;&gt; sc = {};
sc.real(simd&lt;float&gt;(1.f)); // <span style="color:red;font-weight:bolder">ill-formed, should be allowed</span>
</pre></blockquote>
<p>
The design intent was to match the <tt>std::complex&lt;T&gt;</tt> interface. In which case
the current wording doesn't match that intent. `complex` doesn't say <tt>real(same_as&lt;T&gt; auto)</tt> 
but 'real(T)', which allows conversions.
<p/>
This issue is also present in the `basic_simd(real, imag)` constructor. It deduces the type for the 
real/imag arguments instead of using a dependent type derived from `value_type` and ABI tag.
</p>
<blockquote><pre>
// OK:
complex&lt;double&gt; c{1., 1.f};

// <span style="color:red;font-weight:bolder">Ill-formed, should be allowed</span>:
simd&lt;complex&lt;double&gt;&gt; sc0(1., 1.);
simd&lt;complex&lt;double&gt;, 4&gt; sc1(simd&lt;double, 4&gt;(1.), simd&lt;float, 4&gt;(1.f));
</pre></blockquote>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N5008"/>.
</p>

<ol>

<li><p>Modify <sref ref="[simd.overview]"/>, class template `basic_simd` synopsis, as indicated:</p>

<blockquote>
<pre>
namespace std::datapar {
  template&lt;class T, class Abi&gt; class basic_simd {
  public:
    using value_type = T;
    using mask_type = basic_simd_mask&lt;sizeof(T), Abi&gt;;
    using abi_type = Abi;
    
    <ins>using <i>real-type</i> = rebind_t&lt;typename T::value_type, basic_simd&gt; <i>// exposition-only</i></ins>
    
    <i>// <sref ref="[simd.ctor]"/>, basic_simd constructors</i>   
    [&hellip;]
    <del>template&lt;<i>simd-floating-point</i> V&gt;</del>
      constexpr explicit(<i>see below</i>) basic_simd(const <ins><i>real-type</i></ins><del>V</del>&amp; reals, const <ins><i>real-type</i></ins><del>V</del>&amp; imags = {}) noexcept;
    [&hellip;]
    <i>// <sref ref="[simd.complex.access]"/>, basic_simd complex-value accessors</i>
    constexpr <ins><i>real-type</i></ins><del>auto</del> real() const noexcept;
    constexpr <ins><i>real-type</i></ins><del>auto</del> imag() const noexcept;
    <del>template&lt;<i>simd-floating-point</i> V&gt;</del>
      constexpr void real(const <ins><i>real-type</i></ins><del>V</del>&amp; v) noexcept;
    <del>template&lt;<i>simd-floating-point</i> V&gt;</del>
      constexpr void imag(const <ins><i>real-type</i></ins><del>V</del>&amp; v) noexcept;
    [&hellip;]
  };
  [&hellip;]
}
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[simd.ctor]"/> as indicated:</p>

<blockquote>
<pre>
<del>template&lt;<i>simd-floating-point</i> V&gt;</del>
  constexpr explicit(<i>see below</i>) basic_simd(const <ins><i>real-type</i></ins><del>V</del>&amp; reals, const <ins><i>real-type</i></ins><del>V</del>&amp; imags = {}) noexcept;
</pre>
<blockquote>
<p>
-19- <i>Constraints</i>:
</p>
<ol style="list-style-type: none">
<li><p><del>(19.1) &mdash;</del> <tt><i>simd-complex</i>&lt;basic_simd&gt;</tt> is modeled<ins>.</ins><del>, and</del></p></li>
<li><p><del>(19.2) &mdash; `V::size() == size()` is `true`.</del></p></li>
</ol>
<p>
[&hellip;]
<p/>
-21- <i>Remarks</i>: The expression inside `explicit` evaluates to `false` if and only if the 
floating-point conversion rank of `T::value_type` is greater than or equal to the floating-point 
conversion rank of <tt><ins><i>real-type</i></ins><del>V</del>::value_type</tt>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[simd.complex.access]"/> as indicated:</p>

<blockquote>
<pre>
constexpr <ins><i>real-type</i></ins><del>auto</del> real() const noexcept;
constexpr <ins><i>real-type</i></ins><del>auto</del> imag() const noexcept;
</pre>
<blockquote>
<p>
-1- <i>Constraints</i>: <tt><i>simd-complex</i>&lt;basic_simd&gt;</tt> is modeled.
<p/>
-2- <i>Returns</i>: An object of type <tt><ins><i>real-type</i></ins><del>rebind_t&lt;typename T::value_type, basic_simd&gt;</del></tt> 
where the <tt><i>i</i></tt><sup>th</sup> element is initialized to the result of 
<tt><i>cmplx-func</i>(operator[](<i>i</i>))</tt> for all <tt><i>i</i></tt> in the range 
`[0, size())`, where <tt><i>cmplx-func</i></tt> is the corresponding function from 
<tt>&lt;complex&gt;</tt>.
</p>
</blockquote>
<pre>
<del>template&lt;<i>simd-floating-point</i> V&gt;</del>
  constexpr void real(const <ins><i>real-type</i></ins><del>V</del>&amp; v) noexcept;
<del>template&lt;<i>simd-floating-point</i> V&gt;</del>
  constexpr void imag(const <ins><i>real-type</i></ins><del>V</del>&amp; v) noexcept;
</pre>
<blockquote>
<p>
-3- <i>Constraints</i>:
</p>
<ol style="list-style-type: none">
<li><p><del>(3.1) &mdash;</del> <tt><i>simd-complex</i>&lt;basic_simd&gt;</tt> is modeled<ins>.</ins><del>,</del></p></li>
<li><p><del>(3.2) &mdash; <tt>same_as&lt;typename V::value_type, typename T::value_type&gt;</tt> is modeled, and</del></p></li>
<li><p><del>(3.3) &mdash; `V::size() == size()` is `true`.</del></p></li>
</ol>
<p>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
