<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2727" status="WP">
<title>Parallel algorithms with <tt>constexpr</tt> specifier</title>
<section><sref ref="[algorithms.general]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>21 Jun 2016</date>
<priority>0</priority>

<discussion>
<p>
In LEWG we noticed some parallel algorithms are <tt>constexpr</tt>. Jared said:
<p/>
I think this is an oversight, and it also applies to <tt>std::max_element</tt>/<tt>std::minmax_element</tt>. To my knowledge, 
neither SG1 nor LWG ever explicitly considered whether a parallel algorithm should be <tt>constexpr</tt>. I think the assumption 
was that parallel algorithms would be regular old function templates without additional specifiers such as <tt>constexpr</tt>.
</p>

<note>2016-06 Oulu</note>
<p>Moved to P0/Ready during issues prioritization.</p>
<p>Friday: status to Immediate</p>
</discussion>

<resolution>
<p>This wording is relative to N4594.</p>
<ol>
<li><p>Change the <tt>&lt;algorithm&gt;</tt> header synopsis, <sref ref="[algorithms.general]"/>, as indicated,
to remove "<tt>constexpr</tt>" from the six <tt>{min,max,minmax}_element</tt> overloads with an <tt>ExecutionPolicy</tt> argument:</p>

<blockquote>
<pre>
namespace std {

[&hellip;]
<i>// 25.5.7, minimum and maximum:</i>
[&hellip;]
template&lt;class ExecutionPolicy, class ForwardIterator&gt;
  <del>constexpr</del> ForwardIterator min_element(ExecutionPolicy&amp;&amp; exec, // see 25.2.5
                                        ForwardIterator first, ForwardIterator last);
template&lt;class ExecutionPolicy, class ForwardIterator, class Compare&gt;
  <del>constexpr</del> ForwardIterator min_element(ExecutionPolicy&amp;&amp; exec, // see 25.2.5
                                        ForwardIterator first, ForwardIterator last,
                                        Compare comp);
[&hellip;]
template&lt;class ExecutionPolicy, class ForwardIterator&gt;
  <del>constexpr</del> ForwardIterator max_element(ExecutionPolicy&amp;&amp; exec, // see 25.2.5
                                        ForwardIterator first, ForwardIterator last);
template&lt;class ExecutionPolicy, class ForwardIterator, class Compare&gt;
  <del>constexpr</del> ForwardIterator max_element(ExecutionPolicy&amp;&amp; exec, // see 25.2.5
                                        ForwardIterator first, ForwardIterator last,
                                        Compare comp);
[&hellip;]
template&lt;class ExecutionPolicy, class ForwardIterator&gt;
  <del>constexpr</del> pair&lt;ForwardIterator, ForwardIterator&gt;
    minmax_element(ExecutionPolicy&amp;&amp; exec, // see 25.2.5
                   ForwardIterator first, ForwardIterator last);
template&lt;class ExecutionPolicy, class ForwardIterator, class Compare&gt;
  <del>constexpr</del> pair&lt;ForwardIterator, ForwardIterator>
    minmax_element(ExecutionPolicy&amp;&amp; exec, // see 25.2.5
                   ForwardIterator first, ForwardIterator last, Compare comp);
[&hellip;]
}
</pre>
</blockquote>
</li>

</ol>
</resolution>

</issue>
