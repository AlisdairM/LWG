<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3740" status="New">
<title><tt>slide_view::size const</tt> should always return unsigned <tt>range_difference_t&lt;const V&gt;</tt></title>
<section><sref ref="[range.slide.view]"/></section>
<submitter>Hewill Kang</submitter>
<date>15 Jul 2022</date>
<priority>99</priority>

<discussion>
<p>
Currently, <tt>slide_view::size const</tt> has the following <i>Effects</i>:
</p>
<pre>
auto sz = ranges::distance(<i>base_</i>) - <i>n_</i> + 1;
if (sz &gt; 0) sz = 0;
return <i>to-unsigned-like</i>(sz);
</pre>
<p>
Since the types of <tt>ranges::distance(<i>base_</i>)</tt> and <tt><i>n_</i></tt> are 
<tt>range_difference_t&lt;const V&gt;</tt> and <tt>range_difference_t&lt;V&gt;</tt> respectively,
the type of <tt>sz</tt> will enter superposition states when the two are not the same, 
and even if they are the same type, there may still be integer promotion issues mentioned 
by LWG <iref ref="3730"/>. We should make sure that <tt>slide_view::size const</tt> 
always returns unsigned <tt>range_difference_t&lt;const V&gt;</tt>.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4910"/>.
</p>

<ol>
<li><p>Modify <sref ref="[range.slide.view]"/> as indicated:</p>

<blockquote>
<pre>
constexpr auto size() requires sized_range&lt;V&gt;;
constexpr auto size() const requires sized_range&lt;const V&gt;;
</pre>
<blockquote>
<p>
-8- <i>Effects:</i> Equivalent to:
<pre>
auto sz = ranges::distance(<i>base_</i>) - <i>n_</i> + 1;
if (sz &lt; 0) sz = 0;
return <ins>static_cast&lt;decltype(ranges::size(<i>base_</i>))&gt;</ins><del><i>to-unsigned-like</i></del>(sz);
</pre>
</p>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
