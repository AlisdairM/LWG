<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2761" status="NAD">
<title><tt>directory_entry</tt> comparisons are members</title>
<section><sref ref="[directory_entry.obs]"/></section>
<submitter>Ville Voutilainen</submitter>
<date>03 Aug 2016</date>
<priority>2</priority>

<discussion>
<p>
The comparison operators for <tt>directory_entry</tt> are member functions
(<sref ref="[directory_entry.obs]"/>).
<p/>
That means that a <tt>directory_entry</tt> can be compared with a <tt>path</tt>,
but a <tt>path</tt> cannot be compared with a <tt>directory_entry</tt>, because
the left-hand side is not subject to conversions. This seems
unfortunate.
<p/>
Note that the comparisons for <tt>path</tt> are non-members (<sref ref="[path.non-member]"/>).
<p/>
The meta-p/r is to turn the <tt>directory_entry</tt> comparisons into non-member functions.
</p>

<note>2016-08 Chicago</note>
<p>Wed PM: Priority 2</p>

<note>2016-10-05 Ville provides concrete wording</note>

<note>2016-10 Telecom</note>
<p>This (comparing a <tt>path</tt> with a <tt>directory_entry</tt>) works today w/o any changes. Closing as NAD.</p>
</discussion>

<resolution>
<p>This wording is relative to N4606.</p>

<ol>
<li><p>In <sref ref="[class.directory_entry]"/> synopsis, edit as follows:</p>

<blockquote>
<pre>
namespace std::filesystem {
class directory_entry {
public:
  [&hellip;]
  <del>bool operator&lt; (const directory_entry&amp; rhs) const noexcept;
  bool operator==(const directory_entry&amp; rhs) const noexcept;
  bool operator!=(const directory_entry&amp; rhs) const noexcept;
  bool operator&lt;=(const directory_entry&amp; rhs) const noexcept;
  bool operator&gt; (const directory_entry&amp; rhs) const noexcept;
  bool operator&gt;=(const directory_entry&amp; rhs) const noexcept;</del>

private:
  path pathobject; // exposition only
};
<ins>
bool operator&lt; (const directory_entry&amp; lhs, const directory_entry&amp; rhs) noexcept;
bool operator==(const directory_entry&amp; lhs, const directory_entry&amp; rhs) noexcept;
bool operator!=(const directory_entry&amp; lhs, const directory_entry&amp; rhs) noexcept;
bool operator&lt;=(const directory_entry&amp; lhs, const directory_entry&amp; rhs) noexcept;
bool operator&gt; (const directory_entry&amp; lhs, const directory_entry&amp; rhs) noexcept;
bool operator&gt;=(const directory_entry&amp; lhs, const directory_entry&amp; rhs) noexcept;
</ins>
}
</pre>
</blockquote>
</li>

<li><p>In <sref ref="[directory_entry.obs]"/>/6-11, edit as follows:</p>

<blockquote>
<pre>
bool operator==(<ins>const directory_entry&amp; lhs,</ins> const directory_entry&amp; rhs) <del>const</del> noexcept;
</pre>
<blockquote>
<p>
-6- <i>Returns:</i> <tt><del>pathobject</del><ins>lhs.path()</ins> == rhs.<del>pathobject</del><ins>path()</ins></tt>.
</p>
</blockquote>
<pre>
bool operator!=(<ins>const directory_entry&amp; lhs,</ins> const directory_entry&amp; rhs) <del>const</del> noexcept;
</pre>
<blockquote>
<p>
-7- <i>Returns:</i>: <tt><del>pathobject</del><ins>lhs.path()</ins> != rhs.<del>pathobject</del><ins>path()</ins></tt>.
</p>
</blockquote>
<pre>
bool operator&lt; (<ins>const directory_entry&amp; lhs,</ins> const directory_entry&amp; rhs) <del>const</del> noexcept;
</pre>
<blockquote>
<p>
-8- <i>Returns:</i>: <tt><del>pathobject</del><ins>lhs.path()</ins> &lt; rhs.<del>pathobject</del><ins>path()</ins></tt>.
</p>
</blockquote>
<pre>
bool operator&lt;&lt;=(<ins>const directory_entry&amp; lhs,</ins> const directory_entry&amp; rhs) <del>const</del> noexcept;
</pre>
<blockquote>
<p>
-9- <i>Returns:</i>: <tt><del>pathobject</del><ins>lhs.path()</ins> &lt;= rhs.<del>pathobject</del><ins>path()</ins></tt>.
</p>
</blockquote>
<pre>
bool operator&gt; (<ins>const directory_entry&amp; lhs,</ins> const directory_entry&amp; rhs) <del>const</del> noexcept;
</pre>
<blockquote>
<p>
-10- <i>Returns:</i>: <tt><del>pathobject</del><ins>lhs.path()</ins> > rhs.<del>pathobject</del><ins>path()</ins></tt>.
</p>
</blockquote>
<pre>
bool operator&gt;=(<ins>const directory_entry&amp; lhs,</ins> const directory_entry&amp; rhs) <del>const</del> noexcept;
</pre>
<blockquote>
<p>
-11- <i>Returns:</i>: <tt><del>pathobject</del><ins>lhs.path()</ins> &gt;= rhs.<del>pathobject</del><ins>path()</ins></tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
