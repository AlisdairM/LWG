<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2688" status="C++17">
<title><tt>clamp</tt> misses preconditions and has extraneous condition on result</title>
<section><sref ref="[alg.clamp]"/></section>
<submitter>Martin Moene</submitter>
<date>23 Mar 2016</date>
<priority>0</priority>

<discussion>
<p>
In Jacksonville (2016), <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0025r0.html">P0025R0</a> was 
voted in instead of the intended <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0025r1.html">P0025R1</a>. 
This report contains the necessary mending along with two other improvements.
<p/>
This report:
</p>
<ul>
<li><p>adds the precondition that misses from P0025R0 but is in P0025R1,</p></li>
<li><p>corrects the returns: specification that contains an extraneous condition,</p></li>
<li><p>replaces the now superfluous remark with a note on usage of clamp with <tt>float</tt> or <tt>double</tt>.</p></li>
</ul>
<p>
Thanks to Carlo Assink and David Gaarenstroom for making us aware of the extraneous condition in the returns: 
specification and for suggesting the fix and to Jeffrey Yasskin for suggesting to add a note like p3.
</p>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<ol>
<li><p>Edit <sref ref="[alg.clamp]"/> as indicated:</p>

<blockquote><pre>
template&lt;class T&gt;
  constexpr const T&amp; clamp(const T&amp; v, const T&amp; lo, const T&amp; hi);
template&lt;class T, class Compare&gt;
  constexpr const T&amp; clamp(const T&amp; v, const T&amp; lo, const T&amp; hi, Compare comp);
</pre>
<blockquote>
<p>
-1- <i>Requires</i>: <ins>The value of <tt>lo</tt> shall be no greater than <tt>hi</tt>.</ins> For the first form, 
type <tt>T</tt> shall be <tt>LessThanComparable</tt> (Table 18).
<p/>
-2- <i>Returns</i>: <ins><tt>lo</tt> if <tt>v</tt> is less than <tt>lo</tt>, <tt>hi</tt> if <tt>hi</tt> is less than 
<tt>v</tt>, otherwise <tt>v</tt></ins><del>The larger value of <tt>v</tt> and <tt>lo</tt> if <tt>v</tt> is smaller than 
<tt>hi</tt>, otherwise the smaller value of <tt>v</tt> and <tt>hi</tt></del>.
<p/>
-3- <i><ins>Note</ins><del>Remarks</del></i>: <ins>If NaN is avoided, <tt>T</tt> can be <tt>float</tt> or 
<tt>double</tt></ins><del>Returns the first argument when it is equivalent to one of the boundary arguments</del>.
<p/>
-4- <i>Complexity</i>: At most two comparisons.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</blockquote>

<note>2016-05 Issues Telecon</note>
<p>
Reworded p3 slightly.
</p>
</discussion>

<resolution>
<p>
This wording is relative to N4582.
</p>

<ol>
<li><p>Edit <sref ref="[alg.clamp]"/> as indicated:</p>

<blockquote><pre>
template&lt;class T&gt;
  constexpr const T&amp; clamp(const T&amp; v, const T&amp; lo, const T&amp; hi);
template&lt;class T, class Compare&gt;
  constexpr const T&amp; clamp(const T&amp; v, const T&amp; lo, const T&amp; hi, Compare comp);
</pre>
<blockquote>
<p>
-1- <i>Requires</i>: <ins>The value of <tt>lo</tt> shall be no greater than <tt>hi</tt>.</ins> For the first form, 
type <tt>T</tt> shall be <tt>LessThanComparable</tt> (Table 18).
<p/>
-2- <i>Returns</i>: <ins><tt>lo</tt> if <tt>v</tt> is less than <tt>lo</tt>, <tt>hi</tt> if <tt>hi</tt> is less than 
<tt>v</tt>, otherwise <tt>v</tt></ins><del>The larger value of <tt>v</tt> and <tt>lo</tt> if <tt>v</tt> is smaller than 
<tt>hi</tt>, otherwise the smaller value of <tt>v</tt> and <tt>hi</tt></del>.
<p/>
-3- <i><ins>Note</ins><del>Remarks</del></i>: <ins>If NaN is avoided, <tt>T</tt> can be a floating point type</ins>
<del>Returns the first argument when it is equivalent to one of the boundary arguments</del>.
<p/>
-4- <i>Complexity</i>: At most two comparisons.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
