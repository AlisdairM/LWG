<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4126" status="New">
<title>Some feature-test macros for fully freestanding features are not yet marked freestanding</title>
<section><sref ref="[version.syn]"/></section>
<submitter>Jiang An</submitter>
<date>24 Jul 2024</date>
<priority>2</priority>

<discussion>
<p>
Currently (<paper num="N4986"/>), it's a bit weird in <sref ref="[version.syn]"/> that some feature-test
macros are not marked freestanding, despite the indicated features being fully freestanding. The 
freestanding status seems sometimes implicitly covered by "also in" headers that are mostly or all 
freestanding, but sometimes not.
<p/>
I think it's more consistent to ensure feature-test macros for fully freestanding features are also freestanding.
</p>

<note>2024-08-02; Reflector poll</note>
<p>
Set priority to 2 after reflector poll.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4986"/>.
</p>

<ol>
<li><p>Modify <sref ref="[version.syn]"/> as indicated:</p>

<blockquote class="note">
<p>
[<i>Drafting note</i>:  <tt>&lt;charconv&gt;</tt> is not fully freestanding, but all functions made <tt>constexpr</tt> 
by <paper num="P2291R3"/> are furtherly made freestanding by <paper num="P2338R4"/>. ]
</p>
</blockquote>

<blockquote>
<pre>
[&hellip;]
#define __cpp_lib_common_reference                  202302L // <i><ins>freestanding,</ins> also in</i> &lt;type_traits&gt;
#define __cpp_lib_common_reference_wrapper          202302L // <i><ins>freestanding,</ins> also in</i> &lt;functional&gt;
[&hellip;]                                                                              
#define __cpp_lib_constexpr_charconv                202207L // <i><ins>freestanding,</ins> also in</i> &lt;charconv&gt;
[&hellip;]                                                                              
#define __cpp_lib_coroutine                         201902L // <i><ins>freestanding,</ins> also in</i> &lt;coroutine&gt;
[&hellip;]                                                                              
#define __cpp_lib_is_implicit_lifetime              202302L // <i><ins>freestanding,</ins> also in</i> &lt;type_traits&gt;
[&hellip;]                                                                              
#define __cpp_lib_is_virtual_base_of                202406L // <i><ins>freestanding,</ins> also in</i> &lt;type_traits&gt;
[&hellip;]                                                                              
#define __cpp_lib_is_within_lifetime                202306L // <i><ins>freestanding,</ins> also in</i> &lt;type_traits&gt;
[&hellip;]                                                                              
#define __cpp_lib_mdspan                            202406L // <i><ins>freestanding,</ins> also in</i> &lt;mdspan&gt;
[&hellip;]                                                                              
#define __cpp_lib_ratio                             202306L // <i><ins>freestanding,</ins> also in</i> &lt;ratio&gt;
[&hellip;]                                                                              
#define __cpp_lib_span_initializer_list             202311L // <i><ins>freestanding,</ins> also in</i> &lt;span&gt;
[&hellip;]                                                                              
#define __cpp_lib_submdspan                         202403L // <i><ins>freestanding,</ins> also in</i> &lt;mdspan&gt;
[&hellip;]                                                                              
#define __cpp_lib_to_array                          201907L // <i><ins>freestanding,</ins> also in</i> &lt;array&gt;
[&hellip;]
</pre>
</blockquote>

</li>

</ol>
</resolution>

</issue>
