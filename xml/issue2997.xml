<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2997" status="New">
<title>LWG 491 and the specification of <tt>{forward_,}list::unique</tt></title>
<section><sref ref="[list.ops]"/><sref ref="[forwardlist.ops]"/></section>
<submitter>Tim Song</submitter>
<date>7 Jul 2017</date>
<priority>99</priority>

<discussion>
<p>
There are various problems with the specification of <tt>list::unique</tt> and its <tt>forward_list</tt> counterpart, some of which are obvious even on cursory inspection:
<ul>
<li>It refers to the identifiers <tt>first</tt> and <tt>last</tt>, which aren't even defined.</li>
<li>It uses <tt>i - 1</tt> on non-random-access iterators - in the case of <tt>forward_list</tt>, on forward-only iterators.</li>
<li>The resolution of LWG <iref ref="202"/>, changing the specification of <tt>std::unique</tt> to require an equivalence relation 
    and adjusting the order of comparison, weren't applied to these member functions.</li>
</ul>
<p/>
LWG <iref ref="491"/>, which pointed out many of those problems with the specification of <tt>list::unique</tt>, was closed as NAD with the rationale that
<blockquote>
"All implementations known to the author of this Defect Report comply with these assumption", and "no impact on current code is expected", i.e. there is no evidence of real-world confusion or harm.
</blockquote>
That implementations somehow managed to do the right thing in spite of obviously defective standardese doesn't seem like a good reason to not fix the defects.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4659">N4659</a>.
</p>

<ol>
<li><p>Edit <sref ref="[list.ops]"/> as indicated:</p>
<blockquote>
<pre>
void unique();
template &lt;class BinaryPredicate&gt; void unique(BinaryPredicate binary_pred);
</pre>
<blockquote><p>
<ins>-?- <i>Requires:</i> The comparison function shall be an equivalence relation. </ins>
<p/>
-19- <i>Effects:</i> <ins>If <tt>empty()</tt>, has no effects. Otherwise, e</ins><del>E</del>rases all but the first element from every consecutive 
group of <del>equal</del><ins>equivalent</ins> elements referred to by the iterator <tt>i</tt> in the range <tt><del>[first + 1, last)</del><ins>[next(begin()), end())</ins></tt>
for which <tt><del>*i == *(i-1)</del><ins>*j == *i</ins></tt> (for the version of <tt>unique</tt> with no arguments) or
<tt><del>pred(*i, *(i - 1))</del><ins>pred(*j, *i)</ins></tt> (for the version of <tt>unique</tt> with a predicate argument) holds<ins>,
where <tt>j</tt> is an iterator in <tt>[begin(), end())</tt> such that <tt>next(j) == i</tt></ins>. Invalidates only the iterators and references to the erased elements.
<p/>
-20- <i>Throws:</i> Nothing unless an exception is thrown by <del><tt>*i == *(i-1)</tt> or <tt>pred(*i, *(i - 1))</tt></del><ins> the equality comparison or the predicate</ins>.
<p/>
-21- <i>Complexity:</i> If <del>the range <tt>[first, last)</tt> is not empty</del><ins><tt>!empty()</tt></ins>, exactly <tt><del>(last - first) - 1</del><ins>size() - 1</ins></tt>
applications of the corresponding predicate, otherwise no applications of the predicate.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Edit <sref ref="[forwardlist.ops]" /> as indicated:</p>
<blockquote>
<pre>
void unique();
template &lt;class BinaryPredicate&gt; void unique(BinaryPredicate binary_pred);
</pre>
<blockquote><p>
<ins>-?- <i>Requires:</i> The comparison function shall be an equivalence relation. </ins>
<p/>
-16- <i>Effects:</i> <ins>If <tt>empty()</tt>, has no effects. Otherwise, e</ins><del>E</del>rases all but the first element from every consecutive 
group of <del>equal</del><ins>equivalent</ins> elements referred to by the iterator <tt>i</tt> in the range <tt><del>[first + 1, last)</del><ins>[next(begin()), end())</ins></tt>
for which <tt><del>*i == *(i-1)</del><ins>*j == *i</ins></tt> (for the version with no arguments) or 
<tt><del>pred(*i, *(i - 1))</del><ins>pred(*j, *i)</ins></tt> (for the version with a predicate argument) holds<ins>,
where <tt>j</tt> is an iterator in <tt>[begin(), end())</tt> such that <tt>next(j) == i</tt></ins>. Invalidates only the iterators and references to the erased elements.
<p/>
-17- <i>Throws:</i> Nothing unless an exception is thrown by the equality comparison or the predicate.
<p/>
-18- <i>Complexity:</i> If <del>the range <tt>[first, last)</tt> is not empty</del><ins><tt>!empty()</tt></ins>, exactly 
<tt><del>(last - first) - 1</del><ins>distance(begin(), end()) - 1</ins></tt> applications of the corresponding predicate,
 otherwise no applications of the predicate.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>
</issue>
