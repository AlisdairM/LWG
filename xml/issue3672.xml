<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3672" status="C++23">
<title><tt>common_iterator::operator-&gt;()</tt> should return by value</title>
<section><sref ref="[common.iter.access]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>12 Feb 2022</date>
<priority>99</priority>

<discussion>
<p>
<sref ref="[common.iter.access]"/> p5 (5.1) says that <tt>common_iterator&lt;T*, S&gt;::operator-&gt;()</tt> 
returns <tt>std::get&lt;T*&gt;(v_)</tt> which has type <tt>T* const&amp;</tt>. That means that 
<tt>iterator_traits::pointer</tt> is <tt>T* const&amp;</tt> as well (this was recently clarified by LWG 
<iref ref="3660"/>). We have an actual pointer here, why are we returning it by reference?
<p/>
For the three bullet points in <sref ref="[common.iter.access]"/> p5, the second and third return by value 
anyway, so <tt>decltype(auto)</tt> is equivalent to <tt>auto</tt>. For the first bullet, it would make a lot 
more sense for raw pointers to be returned by value. That leaves the case where the iterator has an 
<tt>operator-&gt;()</tt> member, which could potentially benefit from returning by reference. But it must 
return something that is iterator-like or pointer-like, which we usually just pass by value. Casey suggested 
we should just change <tt>common_iterator&lt;I, S&gt;::operator-&gt;()</tt> to return by value in all cases.
<p/>
Libstdc++ has always returned by value, as an unintended consequence of using a union instead of 
<tt>std::variant&lt;I, S&gt;</tt>, so that it doesn't use <tt>std::get&lt;I&gt;</tt> to return the member.
</p>

<note>2022-03-04; Reflector poll</note>
<p>
Set status to Tentatively Ready after six votes in favour during reflector poll.
</p>

<note>2022-07-15; LWG telecon: move to Ready</note>

<note>2022-07-25 Approved at July 2022 virtual plenary. Status changed: Ready &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4901"/>.
</p>

<ol>
<li><p>Modify <sref ref="[common.iterator]"/>, class template <tt>common_iterator</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
[&hellip;]
constexpr decltype(auto) operator*();
constexpr decltype(auto) operator*() const
  requires <i>dereferenceable</i>&lt;const I&gt;;
constexpr <del>decltype(</del>auto<del>)</del> operator-&gt;() const
  requires <i>see below</i>;
[&hellip;]
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[common.iter.access]"/> as indicated:</p>

<blockquote>
<pre>
constexpr <del>decltype(</del>auto<del>)</del> operator-&gt;() const
  requires <i>see below</i>;
</pre>
<blockquote>
<p>
-3- The expression in the <i>requires-clause</i> is equivalent to: [&hellip;]
<p/>
-4- <i>Preconditions:</i> <tt>holds_alternative&lt;I&gt;(v_)</tt> is <tt>true</tt>.
<p/>
-5- <i>Effects:</i>
</p>
<ol style="list-style-type:none">
<li><p>(5.1) &mdash; If <tt>I</tt> is a pointer type or if the expression <tt>get&lt;I&gt;(v_).operator-&gt;()</tt> 
is well-formed, equivalent to: <tt>return get&lt;I&gt;(v_);</tt></p></li>
<li><p>(5.2) &mdash; Otherwise, if <tt>iter_reference_t&lt;I&gt;</tt> is a reference type, equivalent to:</p>
<blockquote><pre>
auto&amp;&amp; tmp = *get&lt;I&gt;  (v_);
return addressof(tmp);
</pre></blockquote>
</li>
<li><p>(5.3) &mdash; Otherwise, equivalent to: <tt>return <i>proxy</i>(*get&lt;I&gt;(v_));</tt> where <tt><i>proxy</i></tt> 
is the exposition-only class:</p>
<blockquote><pre>
class <i>proxy</i> {
  iter_value_t&lt;I&gt; keep_;
  constexpr <i>proxy</i>(iter_reference_t&lt;I&gt;&amp;&amp; x)
    : keep_(std::move(x)) {}
public:
  constexpr const iter_value_t&lt;I&gt;* operator-&gt;() const noexcept {
    return addressof(keep_);
  }
};
</pre></blockquote>
</li>
</ol>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
