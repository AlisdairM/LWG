<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3032" status="WP">
<title><tt>ValueSwappable</tt> requirement missing for <tt>push_heap</tt> and <tt>make_heap</tt></title>
<section><sref ref="[alg.heap.operations]"/></section>
<submitter>Robert Douglas</submitter>
<date>8 Nov 2017</date>
<priority>3</priority>

<discussion>
<p>
In discussion of D0202R3 in Albuquerque, it was observed that <tt>pop_heap</tt> and <tt>sort_heap</tt> had 
<tt>constexpr</tt> removed for their requirement of <tt>ValueSwappable</tt>. It was then observed that 
<tt>push_heap</tt> and <tt>make_heap</tt> were not similarly marked as having the <tt>ValueSwappable</tt> requirement. 
The room believed this was likely a specification error, and asked to open an issue to track it.
</p>

<note>2017-11 Albuquerque Wednesday night issues processing</note>
<p>Priority set to 3; Marshall to investigate</p>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>This wording is relative to <a href="https://wg21.link/n4700">N4700</a>.</p>

<ol>
<li><p>Change <sref ref="[push.heap]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class RandomAccessIterator&gt;
  void push_heap(RandomAccessIterator first, RandomAccessIterator last);
template&lt;class RandomAccessIterator, class Compare&gt;
  void push_heap(RandomAccessIterator first, RandomAccessIterator last,
                 Compare comp);
</pre>
<blockquote>
<p>
-1- <i>Requires:</i> The range <tt>[first, last - 1)</tt> shall be a valid heap. <ins><tt>RandomAccessIterator</tt> shall satisfy 
the requirements of <tt>ValueSwappable</tt> (<sref ref="[swappable.requirements]"/>).</ins> The type of <tt>*first</tt> 
shall satisfy the <tt>MoveConstructible</tt> requirements (Table 23) and the <tt>MoveAssignable</tt> requirements (Table 25).
</p>
</blockquote>
</blockquote>
</li>

<li><p>Change <sref ref="[make.heap]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class RandomAccessIterator&gt;
  void make_heap(RandomAccessIterator first, RandomAccessIterator last);
template&lt;class RandomAccessIterator, class Compare&gt;
  void make_heap(RandomAccessIterator first, RandomAccessIterator last,
                 Compare comp);
</pre>
<blockquote>
<p>
-1- <i>Requires:</i> <ins><tt>RandomAccessIterator</tt> shall satisfy the requirements of <tt>ValueSwappable</tt> 
(<sref ref="[swappable.requirements]"/>).</ins> The type of <tt>*first</tt> shall satisfy the <tt>MoveConstructible</tt> 
requirements (Table 23) and the <tt>MoveAssignable</tt> requirements (Table 25).
</p>
</blockquote>
</blockquote>
</li>
</ol>
</blockquote>

<note>2022-11-06; Daniel comments and syncs wording with recent working draft</note>
<p>
For reference, the finally accepted paper was <paper num="P0202R3"/> and the constexpr-ification of
swap-related algorithms had been realized later by <paper num="P0879R0"/> after resolution of
<a href="https://wg21.link/cwg1581">CWG 1581</a> and more importantly <a href="https://wg21.link/cwg1330">CWG 1330</a>.
</p>

<note>Kona 2022-11-09; Move to Ready</note>
<note>2023-02-13 Status changed: Voting &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4917"/>.
</p>

<ol>
<li><p>Change <sref ref="[push.heap]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class RandomAccessIterator&gt;
  constexpr void push_heap(RandomAccessIterator first, RandomAccessIterator last);

template&lt;class RandomAccessIterator, class Compare&gt;
  constexpr void push_heap(RandomAccessIterator first, RandomAccessIterator last,
                           Compare comp);
                 
template&lt;random_access_iterator I, sentinel_for&lt;I&gt; S, class Comp = ranges::less,
         class Proj = identity&gt;
  requires sortable&lt;I, Comp, Proj&gt;
  constexpr I
    ranges::push_heap(I first, S last, Comp comp = {}, Proj proj = {});
template&lt;random_access_range R, class Comp = ranges::less, class Proj = identity&gt;
  requires sortable&lt;iterator_t&lt;R&gt;, Comp, Proj&gt;
  constexpr borrowed_iterator_t&lt;R&gt;
    ranges::push_heap(R&amp;&amp; r, Comp comp = {}, Proj proj = {});
</pre>
<blockquote>
<p>
-1- Let <tt>comp</tt> be <tt>less{}</tt> and <tt>proj</tt> be <tt>identity{}</tt> for the overloads with no parameters by those names.
<p/>
-2- <i>Preconditions</i>: The range <tt>[first, last - 1)</tt> is a valid heap with respect to 
<tt>comp</tt> and <tt>proj</tt>. For the overloads in namespace <tt>std</tt>, 
<ins><tt>RandomAccessIterator</tt> meets the <i>Cpp17ValueSwappable</i> requirements 
(<sref ref="[swappable.requirements]"/>) and</ins> the type of <tt>*first</tt> meets the 
<i>Cpp17MoveConstructible</i> requirements (Table 32) and the <i>Cpp17MoveAssignable</i> 
requirements (Table 34).
<p/>
-3- <i>Effects</i>: Places the value in the location <tt>last - 1</tt> into the resulting heap <tt>[first, last)</tt>.
<p/>
-4- <i>Returns</i>: <tt>last</tt> for the overloads in namespace <tt>ranges</tt>.
<p/>
-5- <i>Complexity</i>: At most log(<tt>last - first</tt>) comparisons and twice as many projections.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Change <sref ref="[make.heap]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class RandomAccessIterator&gt;
  constexpr void make_heap(RandomAccessIterator first, RandomAccessIterator last);

template&lt;class RandomAccessIterator, class Compare&gt;
  constexpr void make_heap(RandomAccessIterator first, RandomAccessIterator last,
                           Compare comp);
                           
template&lt;random_access_iterator I, sentinel_for&lt;I&gt; S, class Comp = ranges::less,
         class Proj = identity&gt;
  requires sortable&lt;I, Comp, Proj&gt;
  constexpr I
    ranges::make_heap(I first, S last, Comp comp = {}, Proj proj = {});
template&lt;random_access_range R, class Comp = ranges::less, class Proj = identity&gt;
  requires sortable&lt;iterator_t&lt;R&gt;, Comp, Proj&gt;
  constexpr borrowed_iterator_t&lt;R&gt;
    ranges::make_heap(R&amp;&amp; r, Comp comp = {}, Proj proj = {});
</pre>
<blockquote>
<p>
-1- Let <tt>comp</tt> be <tt>less{}</tt> and <tt>proj</tt> be <tt>identity{}</tt> for the overloads with no parameters by those names.
<p/>
-2- <i>Preconditions</i>: For the overloads in namespace <tt>std</tt>, <ins><tt>RandomAccessIterator</tt> 
meets the <i>Cpp17ValueSwappable</i> requirements (<sref ref="[swappable.requirements]"/>) and</ins> the type 
of <tt>*first</tt> meets the <i>Cpp17MoveConstructible</i> (Table 32) and <i>Cpp17MoveAssignable</i> (Table 34) requirements.
<p/>
-3- <i>Effects</i>: Constructs a heap with respect to <tt>comp</tt> and <tt>proj</tt> out of the range <tt>[first, last)</tt>.
<p/>
-4- <i>Returns</i>: <tt>last</tt> for the overloads in namespace <tt>ranges</tt>.
<p/>
-5- <i>Complexity</i>: At most 3(<tt>last - first</tt>) comparisons and twice as many projections.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
