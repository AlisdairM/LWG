<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3493" status="New">
<title>The constructor of <tt>std::function</tt> taking an <tt>F</tt> is missing a constraint</title>
<section><sref ref="[func.wrap.func.con]"/></section>
<submitter>Ville Voutilainen</submitter>
<date>31 Oct 2020</date>
<priority>3</priority>

<discussion>
<p>
In <a href="https://wg21.link/p0288">P0288</a>, <tt>any_invocable</tt> is (correctly) constraining
its constructor that takes an <tt>F</tt>:
</p>
<blockquote>
<pre>
template&lt;class F&gt; any_invocable(F&amp;&amp; f);
</pre>
<blockquote>
<p>
Let <tt>VT</tt> be <tt>decay_t&lt;F&gt;</tt>.
<p/>
<i>Constraints:</i>
</p>
<ol style="list-style-type: none">
<li><p>&mdash; [&hellip;]</p></li>
<li><p>&mdash; <tt>is_constructible_v&lt;VT, F&gt;</tt> is <tt>true</tt>, and</p></li>
<li><p>&mdash; [&hellip;]</p></li>
</ol>
</blockquote>
</blockquote>
<p>
<tt>std::function</tt> doesn't do that. According to <a href="https://wg21.link/n4868">N4868</a>,
<sref ref="[func.wrap.func.con]"/> p8 has a constraint for Lvalue-Callable, but not for
copy-constructibility. There is a precondition in p9, but that's not enough for portable
well/ill-formedness.
<p/>
Since this is a constructor, and we want to give the right answer to
<tt>is_constructible</tt>/<tt>constructible_from</tt> queries, we should
add the relevant constraint.
</p>

<note>2020-11-01; Daniel comments</note>
<p>
This issue has some overlap with LWG <iref ref="2774"/>.
</p>

<note>2021-01-15; Telecon prioritization</note>
<p>
Set priority to 3 following reflector and telecon discussions.
</p>

<note>2021-05-17; Tim comments</note>
<p>
The new constraint causes constraint recursion in an example like:
</p>
<blockquote>
<pre>
struct C {
    explicit C(std::function&lt;void()&gt;); // #1
    void operator()() {}
};
static_assert(std::is_constructible_v&lt;C, const C&amp;&gt;);
</pre>
</blockquote>
<p>
Here, to determine whether a <tt>C</tt> can be constructed from a <tt>const C</tt>
lvalue, the overload resolution will attempt to determine whether the constructor
marked <tt>#1</tt> is a viable candidate, which involves a determination of
whether that lvalue can be implicitly converted to a <tt>std::function&lt;void()&gt;</tt>,
which, with the new constraint, requires a determination whether
<tt>C</tt> is copy-constructible &mdash; in other words, whether it can be constructed
from a <tt>C</tt> lvalue.
<p/>
This is similar to LWG <iref ref="3420"/>: in both cases we have a class
(<tt>filesystem::path</tt> there, <tt>function</tt> here) that is
convertible from every type that are, <i>inter alia</i>, copy constructible,
and this then results in constraint recursion when we ask whether a different
type that is constructible from such a class is copy constructible.
<p/>
The <tt>C</tt> above is reduced from an internal helper type in libstdc++. Given
the ubiquity of call wrappers &mdash; types that are callable in their own right
and therefore may not be able to be ruled out by the Lvalue-Callable constraint,
and can also naturally have a constructor that take the wrapped function object
as the argument, triggering the recursion scenario &mdash; it is not clear that
there is a good way to add this constraint without causing undue breakage.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4868">N4868</a>.
</p>

<ol>
<li>
<p>
Modify <sref ref="[func.wrap.func.con]"/> as indicated:
</p>

<blockquote>
<pre>
template&lt;class F&gt; function(F f);
</pre>
<blockquote>
<p>
-8- <i>Constraints:</i> <tt>F</tt> is Lvalue-Callable (<sref ref="[func.wrap.func.general]"/>) for
argument types <tt>ArgTypes...</tt> and return type <tt>R</tt><ins>, and
<tt>is_copy_constructible_v&lt;F&gt;</tt> is <tt>true</tt></ins>.
<p/>
-9- <i>Preconditions:</i> <tt>F</tt> meets the <i>Cpp17CopyConstructible</i> requirements.
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
