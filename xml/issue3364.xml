<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3364" status="WP">
<title>Initialize data members of ranges and their iterators</title>
<section><sref ref="[range.take.while.view]"/><sref ref="[range.drop.view]"/>
<sref ref="[range.drop.while.view]"/><sref ref="[range.elements.iterator]"/></section>
<submitter>Johel Ernesto Guerrero Pe&ntilde;a</submitter>
<date>07 Jan 2020</date>
<priority>0</priority>

<discussion>
<p>Before <a href="https://wg21.link/p1035">P1035</a> was accepted, no data member in [ranges] whose type could
potentially be an aggregate or fundamental type was left without initializer. P1035 left some such data members 
without initializer, so it is possible to have them have indeterminate values. We propose restoring consistency.</p>

<note>2020-01-14 Status set to Tentatively Ready after five positive votes on the reflector.</note>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/N4842">N4842</a>.</p>

<ol>
<li><p>Modify <sref ref="[range.take.while.view]"/> as follows:</p>
<blockquote>
<pre>
class take_while_view : public view_interface&lt;take_while_view&lt;V, Pred&gt;&gt; {
  template&lt;bool&gt; class sentinel;                      <i>// exposition only</i>

  V base_ <ins>= V()</ins>;                                      <i>// exposition only</i>
  semiregular-box&lt;Pred&gt; pred_;                        <i>// exposition only</i>

public:
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.drop.view]"/> as follows:</p>
<blockquote>
<pre>
private:
  V base_ <ins>= V()</ins>;                                     <i>// exposition only</i>
  range_difference_t&lt;V&gt; count_ <ins>= 0</ins>;                  <i>// exposition only</i>
};
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.drop.while.view]"/> as follows:</p>
<blockquote>
<pre>
private:
  V base_ <ins>= V()</ins>;                                     <i>// exposition only</i>
  semiregular-box&lt;Pred&gt; pred_;                       <i>// exposition only</i>
};
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.elements.iterator]"/> as follows:</p>
<blockquote>
<pre>
class elements_view&lt;V, N&gt;::iterator {                <i>// exposition only</i>
  using base-t = conditional_t&lt;Const, const V, V&gt;;
  friend iterator&lt;!Const&gt;;

  iterator_t&lt;base-t&gt; current_ <ins>= iterator_t&lt;base-t&gt;()</ins>;
public:
</pre>
</blockquote>
</li>

</ol>
</resolution>

</issue>
