<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4080" status="New">
<title>Presumed value and difference types of an iterator type in ranges and non-ranges algorithms</title>
<section><sref ref="[iterator.assoc.types]"/></section>
<submitter>Jiang An</submitter>
<date>26 Apr 2024</date>
<priority>99</priority>

<discussion>
<p>
Given an iterator type <tt>I</tt>, currently both <tt>std::iter_value_t&lt;I&gt;</tt> and 
<tt>std::iterator_traits&lt;I&gt;::value_type</tt> can be called the value type of <tt>I</tt>. 
These two types can be different if one specializes <tt>std::indirect_readable_traits</tt> for 
<tt>I</tt> such that <tt>std::indierct_readable_traits&lt;I&gt;::value_type</tt> is different 
from <tt>I::value_type</tt>.
<p/>
It seems intended that ranges algorithms use <tt>std::iter_value_t&lt;I&gt;</tt> and non-ranges algorithms, 
along with other legacy iterator-related mechanisms, use <tt>std::iterator_traits&lt;I&gt;::value_type</tt>. 
But this doesn't seem clarified anywhere.
<p/>
<paper num="P2408R5"/> made the situation more complicated. In C++23, the type requirements of 
non-mutating iterators passed to many legacy algorithms were changed to C++20 iterator concepts, 
which are strongly associated with <tt>std::iter_value_t</tt>. It didn't seem intended that 
implementations were expected to use possibly different value types since C++23, but such reading
might be suggested by the use of concepts.
<p/>
Likewise, a non-random-access iterator type <tt>I</tt> can have two different difference types 
if one specializes <tt>std::incrementable_traits</tt> for <tt>I</tt> such that 
<tt>std::incrementable_traits&lt;I&gt;::difference_type</tt> is different from <tt>I::difference_type</tt>. 
It's also unclear which one should be used for non-mutating iterator in algorithms.
</p>
</discussion>

<resolution>
</resolution>

</issue>
