<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2470" status="New">
<title>Allocator's <tt>destroy</tt> function should be allowed to fail to instantiate</title>
<section><sref ref="[allocator.requirements]"/></section>
<submitter>Daniel Kr&uuml;gler</submitter>
<date>22 Mar 2015</date>
<priority>99</priority>

<discussion>
<p>
This issue is a spin-off of issue LWG <iref ref="2447"/>: It focuses on the observation that
<sref ref="[allocator.requirements]"/> p9 (based on the numbering of working draft N4296) gives 
the template member <tt>construct</tt> more relaxations than the template member <tt>destroy</tt>:
</p>
<blockquote>
<p>
An allocator may constrain the types on which it can be instantiated and the arguments for which its
<tt>construct</tt> member may be called. If a type cannot be used with a particular allocator, the allocator class
or the call to <tt>construct</tt> may fail to instantiate.
</p>
</blockquote>
<p>
Construction and destruction of a type <tt>T</tt> are usually intimately related to each other, so it
seems similarly useful to allow the <tt>destroy</tt> member to fail to instantiate for a possible sub-set
of instantiation types.
</p>
</discussion>

<resolution>
<p>This wording is relative to N4296.</p>

<ol>
<li><p>Change <sref ref="[allocator.requirements]"/> p9 as indicated:</p>

<blockquote><p>
-8- An allocator may constrain the types on which it can be instantiated and the arguments for which its
<tt>construct</tt> <ins>or <tt>destroy</tt></ins> member<ins>s</ins> may be called. If a type cannot be 
used with a particular allocator, the allocator class or the call to <tt>construct</tt> <ins>or <tt>destroy</tt></ins> 
may fail to instantiate.
</p></blockquote>
</li>
</ol>
</resolution>

</issue>
