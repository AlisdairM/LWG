<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3810" status="LEWG">
<title>CTAD for <tt>std::basic_format_args</tt></title>
<section><sref ref="[format.args]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>03 Nov 2022</date>
<priority>3</priority>

<discussion>
<p>
It seems desirable for this should work:
</p>
<blockquote><pre>
auto args_store = std::make_format_args&lt;C&gt;(1,2,3);
// &hellip;
std::basic_format_args args = args_store;
</pre></blockquote>
<p>
i.e. CTAD should deduce the <tt>Context</tt> argument from the <tt><i>fmt-store-args</i>&lt;C, int, int, int&gt;</tt> 
object returned by <tt>make_format_args</tt>.
<p/>
Another example (from Tomasz Kami&nacute;ski):
<p/>
Given:
</p>
<blockquote><pre>
template&lt;typename Context&gt;
void foo(basic_format_args&lt;Context&gt; c);

foo(make_format_args&lt;SomeContext&gt;(&hellip;)); // won't work
foo(basic_format_args(make_format_args&lt;SomeContext&gt;(&hellip;))); // should work
</pre></blockquote>
<p>
Since <tt><i>fmt-store-args</i></tt> is exposition-only, it's not entirely clear that it must have 
exactly the form shown in <sref ref="[format.arg.store]"/>. E.g. maybe it can have different template arguments, 
or could be a nested type defined inside <tt>basic_format_args</tt>. I don't know how much of the exposition-only 
spec is actually required for conformance. If CTAD is already intended to be required, it's a bit subtle.
<p/>
If we want the CTAD to work (and I think it's nice if it does) we could make that explicit by adding a deduction guide.
</p>

<note>Kona 2022-11-12; Set priority to 3, status to LEWG</note>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4917"/>.
</p>

<ol>
<li><p>Modify <sref ref="[format.args]"/> as indicated:</p>

<blockquote>
<pre>
namespace std {
  template&lt;class Context&gt;
  class basic_format_args {
    size_t size_;                           <i>// exposition only</i>
    const basic_format_arg&lt;Context&gt;* data_; <i>// exposition only</i>

  public:
    basic_format_args() noexcept;

    template&lt;class... Args&gt;
      basic_format_args(const <i>format-arg-store</i>&lt;Context, Args...&gt;&amp; store) noexcept;

    basic_format_arg&lt;Context&gt; get(size_t i) const noexcept;
  };
  
  <ins>template&lt;class Context, class... Args&gt;
    basic_format_args(<i>format-arg-store</i>&lt;Context, Args...&gt;) -&gt; basic_format_args&lt;Context&gt;;</ins>
}
</pre>
</blockquote>
</li>

</ol>
</resolution>

</issue>
