<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3964" status="New">
<title><tt>std::atan2</tt> and <tt>std::pow</tt> overloads that take two <tt>std::valarray</tt> parameters 
should require the arguments to have the same length</title>
<section><sref ref="[valarray.transcend]"/></section>
<submitter>Jiang An</submitter>
<date>28 Jul 2023</date>
<priority>4</priority>

<discussion>
<p>
All binary operation between <tt>std::valarray</tt>s expect them to have the same length. 
But <tt>std::atan2</tt> and <tt>std::pow</tt> lack such <i>Preconditions</i>.
</p>

<note>2023-10-30; Reflector poll</note>
<p>
Set priority to 4 after reflector poll.
"Also need to say what those functions return."
"Paragraph 1 needs a correction for the functions that takes two operands."
"And those are arguments not operands."
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4950"/>.
</p>

<ol>

<li><p>Modify <sref ref="[valarray.transcend]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class T&gt; valarray&lt;T&gt; abs (const valarray&lt;T&gt;&amp;);
template&lt;class T&gt; valarray&lt;T&gt; acos (const valarray&lt;T&gt;&amp;);
template&lt;class T&gt; valarray&lt;T&gt; asin (const valarray&lt;T&gt;&amp;);
template&lt;class T&gt; valarray&lt;T&gt; atan (const valarray&lt;T&gt;&amp;);
template&lt;class T&gt; valarray&lt;T&gt; atan2(const valarray&lt;T&gt;&amp;, const valarray&lt;T&gt;&amp;);
template&lt;class T&gt; valarray&lt;T&gt; atan2(const valarray&lt;T&gt;&amp;, const typename valarray&lt;T&gt;::value_type&amp;);
template&lt;class T&gt; valarray&lt;T&gt; atan2(const typename valarray&lt;T&gt;::value_type&amp;, const valarray&lt;T&gt;&amp;);
template&lt;class T&gt; valarray&lt;T&gt; cos (const valarray&lt;T&gt;&amp;);
template&lt;class T&gt; valarray&lt;T&gt; cosh (const valarray&lt;T&gt;&amp;);
template&lt;class T&gt; valarray&lt;T&gt; exp (const valarray&lt;T&gt;&amp;);
template&lt;class T&gt; valarray&lt;T&gt; log (const valarray&lt;T&gt;&amp;);
template&lt;class T&gt; valarray&lt;T&gt; log10(const valarray&lt;T&gt;&amp;);
template&lt;class T&gt; valarray&lt;T&gt; pow (const valarray&lt;T&gt;&amp;, const valarray&lt;T&gt;&amp;);
template&lt;class T&gt; valarray&lt;T&gt; pow (const valarray&lt;T&gt;&amp;, const typename valarray&lt;T&gt;::value_type&amp;);
template&lt;class T&gt; valarray&lt;T&gt; pow (const typename valarray&lt;T&gt;::value_type&amp;, const valarray&lt;T&gt;&amp;);
template&lt;class T&gt; valarray&lt;T&gt; sin (const valarray&lt;T&gt;&amp;);
template&lt;class T&gt; valarray&lt;T&gt; sinh (const valarray&lt;T&gt;&amp;);
template&lt;class T&gt; valarray&lt;T&gt; sqrt (const valarray&lt;T&gt;&amp;);
template&lt;class T&gt; valarray&lt;T&gt; tan (const valarray&lt;T&gt;&amp;);
template&lt;class T&gt; valarray&lt;T&gt; tanh (const valarray&lt;T&gt;&amp;);
</pre>
<blockquote>
<p>
-1- <i>Mandates</i>: A unique function with the indicated name can be applied (unqualified) to an operand of
type <tt>T</tt>. This function returns a value of type <tt>T</tt> or which can be unambiguously implicitly converted to
type <tt>T</tt>.
<p/>
<ins>-?- <i>Preconditions</i>: For <tt>atan2</tt> and <tt>pow</tt> overloads that take two <tt>valarray</tt> parameters, 
the corresponding array arguments have the same length.</ins>
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
