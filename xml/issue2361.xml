<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2361" status="Tentatively Ready">
<title>Apply 2299 resolution throughout library</title>
<section><sref ref="[unique.ptr.single]"/>, <sref ref="[pointer.traits.types]"/>, <sref ref="[allocator.uses.trait]"/>,
<sref ref="[allocator.traits.types]"/>, <sref ref="[sequence.reqmts]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>14 Feb 2014</date>
<priority>99</priority>

<discussion>
<p>
LWG <iref ref="2299"/> addressed a N.B. comment pointing out that recently added
wording about a type existing was not clear what happens if the type
exists but is inaccessible. There are 16 pre-existing uses of the same
language in the library that should use the same wording used to
resolve 2299.
</p>

<p>
The relevant paragraphs are:
</p>

<p>
<sref ref="[unique.ptr.single]"/>
<p/>
<sref ref="[pointer.traits.types]"/>
<p/>
<sref ref="[allocator.uses.trait]"/>
<p/>
<sref ref="[allocator.traits.types]"/>
<p/>
<sref ref="[sequence.reqmts]"/>
</p>

<note>2014-05-16, Daniel provides wording</note>

<note>2014-05-18 Library reflector vote</note>
<p>
The issue has been identified as Tentatively Ready based on six votes in favour.
</p>

</discussion>

<resolution>
<p>This wording is relative to N3936.</p>

<ol>
<li><p>Change <sref ref="[pointer.traits.types]"/> as indicated:</p>

<blockquote>
<pre>
typedef <i>see below</i> element_type;
</pre>
<blockquote>
<p>
-1- <i>Type</i>: <tt>Ptr::element_type</tt> if <del>such a type exists</del><ins>the qualified-id <tt>Ptr::element_type</tt> is
valid and denotes a type (<sref ref="[temp.deduct]"/>)</ins>; otherwise, <tt>T</tt> if <tt>Ptr</tt> is a class template instantiation
of the form <tt>SomePointer&lt;T, Args&gt;</tt>, where <tt>Args</tt> is zero or more type arguments; otherwise, the
specialization is ill-formed.
</p>
</blockquote>

<pre>
typedef <i>see below</i> difference_type;
</pre>
<blockquote>
<p>
-2- <i>Type</i>: <tt>Ptr::difference_type</tt> if <del>such a type exists</del><ins>the qualified-id <tt>Ptr::difference_type</tt> is
valid and denotes a type (<sref ref="[temp.deduct]"/>)</ins>; otherwise, <tt>std::ptrdiff_t</tt>.
</p>
</blockquote>

<pre>
template &lt;class U&gt; using rebind = <i>see below</i>;
</pre>
<blockquote>
<p>
-3- <i>Alias template</i>: <tt>Ptr::rebind&lt;U&gt;</tt> if <del>such a type exists</del><ins>the qualified-id 
<tt>Ptr::rebind&lt;U&gt;</tt> is valid and denotes a type (<sref ref="[temp.deduct]"/>)</ins>; otherwise, 
<tt>SomePointer&lt;U, Args&gt;</tt> if <tt>Ptr</tt> is a class template instantiation of the form <tt>SomePointer&lt;T, Args&gt;</tt>, 
where <tt>Args</tt> is zero or more type arguments; otherwise, the instantiation of <tt>rebind</tt> is ill-formed.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Change <sref ref="[allocator.uses.trait]"/> p1 as indicated:</p>

<blockquote>
<pre>
template &lt;class T, class Alloc&gt; struct uses_allocator;
</pre>
<blockquote>
<p>
-1- <i>Remark<ins>s</ins></i>: automatically detects whether <tt>T</tt> has a nested <tt>allocator_type</tt> that is 
convertible from <tt>Alloc</tt>. Meets the <tt>BinaryTypeTrait</tt> requirements (20.10.1). The implementation shall provide a definition
that is derived from <tt>true_type</tt> if <del>a type</del><ins>the qualified-id</ins> <tt>T::allocator_type</tt> <del>exists</del><ins>is
valid and denotes a type (<sref ref="[temp.deduct]"/>)</ins> and <tt>is_convertible&lt;Alloc, T::allocator_type&gt;::value != false</tt>, 
otherwise it shall be derived from <tt>false_type</tt>. [&hellip;]
</p>
</blockquote>
</blockquote>
</li>

<li><p>Change <sref ref="[allocator.traits.types]"/> as indicated:</p>

<blockquote>
<pre>
typedef <i>see below</i> pointer;
</pre>
<blockquote>
<p>
-1- <i>Type</i>: <tt>Alloc::pointer</tt> if <del>such a type exists</del><ins>the qualified-id <tt>Alloc::pointer</tt> is
valid and denotes a type (<sref ref="[temp.deduct]"/>)</ins>; otherwise, <tt>value_type*</tt>.
</p>
</blockquote>

<pre>
typedef <i>see below</i> const_pointer;
</pre>
<blockquote>
<p>
-2- <i>Type</i>: <tt>Alloc::const_pointer</tt> if <del>such a type exists</del><ins>the qualified-id <tt>Alloc::const_pointer</tt> is
valid and denotes a type (<sref ref="[temp.deduct]"/>)</ins>; otherwise, 
<tt>pointer_traits&lt;pointer&gt;::rebind&lt;const value_type&gt;</tt>.
</p>
</blockquote>

<pre>
typedef <i>see below</i> void_pointer;
</pre>
<blockquote>
<p>
-3- <i>Type</i>: <tt>Alloc::void_pointer</tt> if <del>such a type exists</del><ins>the qualified-id <tt>Alloc::void_pointer</tt> is
valid and denotes a type (<sref ref="[temp.deduct]"/>)</ins>; otherwise, 
<tt>pointer_traits&lt;pointer&gt;::rebind&lt;void&gt;</tt>.
</p>
</blockquote>

<pre>
typedef <i>see below</i> const_void_pointer;
</pre>
<blockquote>
<p>
-4- <i>Type</i>: <tt>Alloc::const_void_pointer</tt> if <del>such a type exists</del><ins>the qualified-id 
<tt>Alloc::const_void_pointer</tt> is valid and denotes a type (<sref ref="[temp.deduct]"/>)</ins>; otherwise, 
<tt>pointer_traits&lt;pointer&gt;::rebind&lt;const void&gt;</tt>.
</p>
</blockquote>

<pre>
typedef <i>see below</i> difference_type;
</pre>
<blockquote>
<p>
-5- <i>Type</i>: <tt>Alloc::difference_type</tt> if <del>such a type exists</del><ins>the qualified-id 
<tt>Alloc::difference_type</tt> is valid and denotes a type (<sref ref="[temp.deduct]"/>)</ins>; otherwise, 
<tt>pointer_traits&lt;pointer&gt;::difference_type</tt>.
</p>
</blockquote>

<pre>
typedef <i>see below</i> size_type;
</pre>
<blockquote>
<p>
-6- <i>Type</i>: <tt>Alloc::size_type</tt> if <del>such a type exists</del><ins>the qualified-id 
<tt>Alloc::size_type</tt> is valid and denotes a type (<sref ref="[temp.deduct]"/>)</ins>; otherwise, 
<tt>make_unsigned_t&lt;difference_type&gt;</tt>.
</p>
</blockquote>

<pre>
typedef <i>see below</i> propagate_on_container_copy_assignment;
</pre>
<blockquote>
<p>
-7- <i>Type</i>: <tt>Alloc::propagate_on_container_copy_assignment</tt> if <del>such a type exists</del><ins>the qualified-id 
<tt>Alloc::propagate_on_container_copy_assignment</tt> is valid and denotes a type (<sref ref="[temp.deduct]"/>)</ins>; otherwise, 
<tt>false_type</tt>.
</p>
</blockquote>

<pre>
typedef <i>see below</i> propagate_on_container_move_assignment;
</pre>
<blockquote>
<p>
-8- <i>Type</i>: <tt>Alloc::propagate_on_container_move_assignment</tt> if <del>such a type exists</del><ins>the qualified-id 
<tt>Alloc::propagate_on_container_move_assignment</tt> is valid and denotes a type (<sref ref="[temp.deduct]"/>)</ins>; otherwise, 
<tt>false_type</tt>.
</p>
</blockquote>

<pre>
typedef <i>see below</i> propagate_on_container_swap;
</pre>
<blockquote>
<p>
-9- <i>Type</i>: <tt>Alloc::propagate_on_container_swap</tt> if <del>such a type exists</del><ins>the qualified-id 
<tt>Alloc::propagate_on_container_swap</tt> is valid and denotes a type (<sref ref="[temp.deduct]"/>)</ins>; otherwise, 
<tt>false_type</tt>.
</p>
</blockquote>

<pre>
template &lt;class T&gt; using rebind_alloc = <i>see below</i>;
</pre>
<blockquote>
<p>
-10- <i>Alias template</i>: <tt>Alloc::rebind&lt;T&gt;::other</tt> if <del>such a type exists</del><ins>the qualified-id 
<tt>Alloc::rebind&lt;T&gt;::other</tt> is valid and denotes a type (<sref ref="[temp.deduct]"/>)</ins>; otherwise, 
<tt>Alloc&lt;T, Args&gt;</tt> if <tt>Alloc</tt> is a class template instantiation of the form <tt>Alloc&lt;U, Args&gt;</tt>, 
where <tt>Args</tt> is zero or more type arguments; otherwise, the instantiation of <tt>rebind_alloc</tt> is ill-formed.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Change <sref ref="[unique.ptr.single]"/> p3 as indicated:</p>

<blockquote><p>
-3- If the <del>type</del><ins>qualified-id</ins> <tt>remove_reference_t&lt;D&gt;::pointer</tt> <del>exists</del><ins>is 
valid and denotes a type (<sref ref="[temp.deduct]"/>)</ins>, then <tt>unique_ptr&lt;T, D&gt;::pointer</tt> shall be a synonym
for <tt>remove_reference_t&lt;D&gt;::pointer</tt>. [&hellip;]
</p></blockquote>
</li>

<li><p>Change <sref ref="[sequence.reqmts]"/> p3 as indicated:</p>

<blockquote><p>
-3- In Tables 100 and 101, <tt>X</tt> denotes a sequence container class, <tt>a</tt> denotes a value of <tt>X</tt> containing elements
of type <tt>T</tt>, <tt>A</tt> denotes <tt>X::allocator_type</tt> if <del>it exists</del><ins>the qualified-id 
<tt>X::allocator_type</tt> is valid and denotes a type (<sref ref="[temp.deduct]"/>)</ins> and <tt>std::allocator&lt;T&gt;</tt> 
if it doesn't, [&hellip;]
</p></blockquote>
</li>


</ol>

</resolution>

</issue>
