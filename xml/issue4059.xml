<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4059" status="New">
<title>Leaky abstraction in <tt>join_with_view</tt>'s iterator</title>
<section><sref ref="[range.join.with.iterator]"/></section>
<submitter>S. B. Tam</submitter>
<date>23 Mar 2024</date>
<priority>99</priority>

<discussion>
<p>
<tt>join_with_view</tt>'s iterator is defined in terms of <tt>variant</tt>, <tt>visit</tt> and <tt>get</tt>, 
which implies that the iterator operations throw <tt>bad_variant_access</tt> if the underlying variant is 
valueless-by-exception (which can happen if an underlying iterator has a throwing copy constructor).
<p/>
IMO, the <tt>variant</tt> is an implementation detail and shouldn't be exposed. It's confusing for users to 
get <tt>bad_variant_access</tt> when user code does not deal with <tt>variant</tt>.
<p/>
The spec of <tt>join_with_view</tt> is also inconsistent with <tt>concat_view</tt> as recently added to the
working draft by <paper num="P2542R8"/>. The latter has "<tt><i>it_</i>.valueless_by_exception()</tt> is 
<tt>false</tt>" as a precondition.
<p/>
I believe that <tt>join_with_view</tt> should similarly require that <tt><i>inner_it_</i>.valueless_by_exception()</tt> 
is <tt>false</tt> for each iterator operation.
<p/>
(FWIW, MSVC STL implements <tt>join_with_view</tt> with a trimmed-down version of <tt>variant</tt>, and having 
to throw <tt>bad_variant_access</tt> causes a small maintenance burden.)
</p>
</discussion>

<resolution>
</resolution>

</issue>
