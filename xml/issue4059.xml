<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4059" status="New">
<title>Leaky abstraction in <tt>join_with_view</tt>'s iterator</title>
<section><sref ref="[range.join.with.iterator]"/></section>
<submitter>S. B. Tam</submitter>
<date>23 Mar 2024</date>
<priority>3</priority>

<discussion>
<p>
<tt>join_with_view</tt>'s iterator is defined in terms of <tt>variant</tt>, <tt>visit</tt> and <tt>get</tt>, 
which implies that the iterator operations throw <tt>bad_variant_access</tt> if the underlying variant is 
valueless-by-exception (which can happen if an underlying iterator has a throwing copy constructor).
<p/>
IMO, the <tt>variant</tt> is an implementation detail and shouldn't be exposed. It's confusing for users to 
get <tt>bad_variant_access</tt> when user code does not deal with <tt>variant</tt>.
<p/>
The spec of <tt>join_with_view</tt> is also inconsistent with <tt>concat_view</tt> as recently added to the
working draft by <paper num="P2542R8"/>. The latter has "<tt><i>it_</i>.valueless_by_exception()</tt> is 
<tt>false</tt>" as a precondition.
<p/>
I believe that <tt>join_with_view</tt> should similarly require that <tt><i>inner_it_</i>.valueless_by_exception()</tt> 
is <tt>false</tt> for each iterator operation.
<p/>
(FWIW, MSVC STL implements <tt>join_with_view</tt> with a trimmed-down version of <tt>variant</tt>, and having 
to throw <tt>bad_variant_access</tt> causes a small maintenance burden.)
</p>

<note>2024-06-24; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
We like the suggestion to require "not valueless" as a precondition.
</p>

<note>2024-08-08, Inbal Levi provides wording</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4988"/>.
</p>

<ol>

<li><p>Modify <sref ref="[range.join.with.iterator]"/> as indicated:</p>

<blockquote>
<pre>
constexpr void <i>satisfy</i>();
</pre>
<blockquote>
<p>
<ins>-?- <i>Preconditions:</i> <tt><i>inner_it_</i>.valueless_by_exception()</tt> is <tt>false</tt>.</ins>
<p/>
-8- <i>Effects</i>: Equivalent to: [&hellip;]
</p>
</blockquote>
<p>
[&hellip;]
</p>
<pre>
constexpr <i>iterator</i>(<i>iterator</i>&lt;!Const&gt; i)
    requires Const &amp;&amp; convertible_to&lt;iterator_t&lt;V&gt;, <i>OuterIter</i>&gt; &amp;&amp;
             convertible_to&lt;iterator_t&lt;<i>InnerRng</i>&gt;, <i>InnerIter</i>&gt; &amp;&amp;
             convertible_to&lt;iterator_t&lt;Pattern&gt;, <i>PatternIter</i>&gt;;
</pre>
<blockquote>
<p>
<ins>-?- <i>Preconditions:</i> <tt><i>inner_it_</i>.valueless_by_exception()</tt> is <tt>false</tt>.</ins>
<p/>
-10- <i>Effects</i>: [&hellip;]
</p>
</blockquote>
<pre>
constexpr decltype(auto) operator*() const;
</pre>
<blockquote>
<p>
<ins>-?- <i>Preconditions:</i> <tt><i>inner_it_</i>.valueless_by_exception()</tt> is <tt>false</tt>.</ins>
<p/>
-12- <i>Effects</i>: Equivalent to: [&hellip;]
</p>
</blockquote>
<pre>
constexpr <i>iterator</i>&amp; operator++();
</pre>
<blockquote>
<p>
<ins>-?- <i>Preconditions:</i> <tt><i>inner_it_</i>.valueless_by_exception()</tt> is <tt>false</tt>.</ins>
<p/>
-13- <i>Effects</i>: Equivalent to: [&hellip;]
</p>
</blockquote>
<pre>
constexpr void operator++(int);
</pre>
<blockquote>
<p>
<ins>-?- <i>Preconditions:</i> <tt><i>inner_it_</i>.valueless_by_exception()</tt> is <tt>false</tt>.</ins>
<p/>
-14- <i>Effects</i>: Equivalent to: <tt>++*this</tt>.
</p>
</blockquote>
<pre>
constexpr <i>iterator</i> operator++(int)
  requires <i>ref-is-glvalue</i> &amp;&amp; forward_iterator&lt;<i>OuterIter</i>&gt; &amp;&amp; forward_iterator&lt;<i>InnerIter</i>&gt;;
</pre>
<blockquote>
<p>
<ins>-?- <i>Preconditions:</i> <tt><i>inner_it_</i>.valueless_by_exception()</tt> is <tt>false</tt>.</ins>
<p/>
-15- <i>Effects</i>: Equivalent to: [&hellip;]
</p>
</blockquote>
<pre>
constexpr <i>iterator</i>&amp; operator--()
  requires <i>ref-is-glvalue</i> &amp;&amp; bidirectional_range&lt;<i>Base</i>&gt; &amp;&amp;
           <i>bidirectional-common</i>&lt;<i>InnerBase</i>&gt; &amp;&amp; <i>bidirectional-common</i>&lt;<i>PatternBase</i>&gt;;
</pre>
<blockquote>
<p>
<ins>-?- <i>Preconditions:</i> <tt><i>inner_it_</i>.valueless_by_exception()</tt> is <tt>false</tt>.</ins>
<p/>
-16- <i>Effects</i>: Equivalent to: [&hellip;]
</p>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
