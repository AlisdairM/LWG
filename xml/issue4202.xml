<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4202" status="WP">
<title><i><code>enable-sender</code></i> should be a variable template</title>
<section><sref ref="[exec.snd.concepts]"/></section>
<submitter>Eric Niebler</submitter>
<date>03 Feb 2025</date>
<priority>1</priority>

<discussion>
<p>
Imported from
<a href="https://github.com/cplusplus/sender-receiver/issues/305">cplusplus/sender-receiver #305</a> and
<a href="https://github.com/cplusplus/sender-receiver/issues/306">cplusplus/sender-receiver #306</a>.
</p>
<p>
We require an opt-in to satisfy the `sender` concept.
Making your type awaitable with an empty environment is one way to opt in.
If your awaitable requires an environment, you have two options:
<ul>
<li>give your awaitable type a nested `sender_concept` typedef, or</li>
<li>specialize `enable_sender` for your awaitable type.</li>
</ul>
The problem is that somewhere along the way,
the `enable_sender` variable template was turned into
an exposition-only <i><code>enable-sender</code></i> concept.
We should roll back that change.
</p>

<note>2025-02-07; Reflector poll</note>
<p>
Set priority to 1 after reflector poll.
</p>

<note>Hagenberg 2025-02-11; move to Ready</note>

<note>Sofia 2025-06-21; Status changed: Voting &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N5001"/>.
</p>

<ol>
<li>
Change <sref ref="[exec.snd.concepts]"/> as indicated:
<blockquote>
<pre><code>
  template&lt;class Sndr&gt;
    concept <i>is-sender</i> =                                         <i>// exposition only</i>
      derived_from&lt;typename Sndr::sender_concept, sender_t&gt;;

  template&lt;class Sndr&gt;
    concept <i>enable-sender</i> =                                     <i>// exposition only</i>
      <i>is-sender</i>&lt;Sndr&gt; ||
      <i>is-awaitable</i>&lt;Sndr, <i>env-promise</i>&lt;empty_env&gt;&gt;;               <i>// [exec.awaitable]</i>
<ins>
  template&lt;class Sndr&gt;
    inline constexpr bool enable_sender = <i>enable-sender</i>&lt;Sndr&gt;;
</ins>
  template&lt;class Sndr&gt;
    concept sender =
      <del>bool(<i>enable-sender</i></del><ins>enable_sender</ins>&lt;remove_cvref_t&lt;Sndr&gt;&gt;<del>)</del> &amp;&amp;
      requires (const remove_cvref_t&lt;Sndr&gt;&amp; sndr) {
        { get_env(sndr) } -&gt; <i>queryable</i>;
      } &amp;&amp;
      move_constructible&lt;remove_cvref_t&lt;Sndr&gt;&gt; &amp;&amp;
      constructible_from&lt;remove_cvref_t&lt;Sndr&gt;, Sndr&gt;;
</code></pre>
<p>&hellip;</p>
<p>
-2-
Given a subexpression `sndr`, [&hellip;]
</p>
<p>
<ins>
-?-
<i>Remarks</i>:
Pursuant to <sref ref="[namespace.std]"/>, users may specialize
`enable_sender` to `true` for cv-unqualified program-defined types that model
`sender`, and `false` for types that do not.
Such specializations shall be usable in constant expressions
(<sref ref="[expr.const]"/>) and have type `const bool`.
</ins>
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
