<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3759" status="WP">
<title><tt>ranges::rotate_copy</tt> should use <tt>std::move</tt></title>
<section><sref ref="[alg.rotate]"/></section>
<submitter>Hewill Kang</submitter>
<date>25 Aug 2022</date>
<priority>99</priority>

<discussion>
<p>
The range version of <tt>ranges::rotate_copy</tt> directly passes the <tt>result</tt> to the 
iterator-pair version. Since the type of <tt>result</tt> only models <tt>weakly_incrementable</tt> 
and may not be copied, we should use <tt>std::move</tt> here.
</p>


<note>2022-09-23; Reflector poll</note>
<p>
Set status to Tentatively Ready after seven votes in favour during reflector poll.
</p>

<note>2022-11-12 Approved at November 2022 meeting in Kona. Status changed: Voting &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4910"/>.
</p>

<ol>
<li><p>Modify <sref ref="[alg.rotate]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;forward_range R, weakly_incrementable O&gt;
  requires indirectly_copyable&lt;iterator_t&lt;R&gt;, O&gt;
  constexpr ranges::rotate_copy_result&lt;borrowed_iterator_t&lt;R&gt;, O&gt;
    ranges::rotate_copy(R&amp;&amp; r, iterator_t&lt;R&gt; middle, O result);
</pre>
<blockquote>
<p>
-11- <i>Effects</i>: Equivalent to:
<blockquote><pre>
return ranges::rotate_copy(ranges::begin(r), middle, ranges::end(r), <ins>std::move(</ins>result<ins>)</ins>);
</pre></blockquote>
</p>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
