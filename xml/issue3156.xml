<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3156" status="New">
<title><tt>ForwardIterator</tt> should only mean forward iterator</title>
<section><sref ref="[specialized.algorithms]"/></section>
<submitter>Casey Carter</submitter>
<date>06 Sep 2018</date>
<priority>3</priority>

<discussion>
<p>
<sref ref="[specialized.algorithms]"/> para 1.2 describes how the specialized
algorithms with a template parameter named <tt>ForwardIterator</tt> impose
requirements on the type passed as argument for that parameter: it must meet
the <tt><i>Cpp17ForwardIterator</i></tt> requirements, which is consistent with
how the rest of the Library uses the template parameter name
<tt>ForwardIterator</tt>, and many of the required operations on that type must
not throw exceptions, which is <em>not</em> consistent with how the rest of the
Library uses that name.
</p><p>
To avoid confusion and keep the meaning of requirements imposed by template
parameter names crisp, the specialized memory algorithms should use a different
template parameter name for this different set of requirements.
</p><p>
Note that the proposed change has no normative effect; it's simply a
clarification of the existing wording.
</p>

<note>2018-09 Reflector prioritization</note>
<p>Set Priority to 3</p>
</discussion>

<resolution>

<p>This wording is relative to <a href="https://wg21.link/n4762">N4762</a>.</p>

<ol>
<li><p>Modify <sref ref="[memory.syn]"/> as indicated:</p>
<blockquote>
<pre>
[&hellip;]

// <sref ref="[specialized.algorithms]"/>, specialized algorithms
template&lt;class T&gt;
  constexpr T* addressof(T&amp; r) noexcept;
template&lt;class T&gt;
  const T* addressof(const T&amp;&amp;) = delete;
template&lt;class <ins>NoThrow</ins>ForwardIterator&gt;
  void uninitialized_default_construct(<ins>NoThrow</ins>ForwardIterator first, <ins>NoThrow</ins>ForwardIterator last);
template&lt;class ExecutionPolicy, class <ins>NoThrow</ins>ForwardIterator&gt;
  void uninitialized_default_construct(ExecutionPolicy&amp;&amp; exec, // see <sref ref="[algorithms.parallel.overloads]"/>
                                       <ins>NoThrow</ins>ForwardIterator first, <ins>NoThrow</ins>ForwardIterator last);
template&lt;class <ins>NoThrow</ins>ForwardIterator, class Size&gt;
  <ins>NoThrow</ins>ForwardIterator uninitialized_default_construct_n(<ins>NoThrow</ins>ForwardIterator first, Size n);
template&lt;class ExecutionPolicy, class <ins>NoThrow</ins>ForwardIterator, class Size&gt;
  <ins>NoThrow</ins>ForwardIterator uninitialized_default_construct_n(ExecutionPolicy&amp;&amp; exec, // see <sref ref="[algorithms.parallel.overloads]"/>
                                                    <ins>NoThrow</ins>ForwardIterator first, Size n);
template&lt;class <ins>NoThrow</ins>ForwardIterator&gt;
  void uninitialized_value_construct(<ins>NoThrow</ins>ForwardIterator first, <ins>NoThrow</ins>ForwardIterator last);
template&lt;class ExecutionPolicy, class <ins>NoThrow</ins>ForwardIterator&gt;
  void uninitialized_value_construct(ExecutionPolicy&amp;&amp; exec, // see <sref ref="[algorithms.parallel.overloads]"/>
                                     <ins>NoThrow</ins>ForwardIterator first, <ins>NoThrow</ins>ForwardIterator last);
template&lt;class <ins>NoThrow</ins>ForwardIterator, class Size&gt;
  <ins>NoThrow</ins>ForwardIterator uninitialized_value_construct_n(<ins>NoThrow</ins>ForwardIterator first, Size n);
template&lt;class ExecutionPolicy, class <ins>NoThrow</ins>ForwardIterator, class Size&gt;
  <ins>NoThrow</ins>ForwardIterator uninitialized_value_construct_n(ExecutionPolicy&amp;&amp; exec, // see <sref ref="[algorithms.parallel.overloads]"/>
                                                  <ins>NoThrow</ins>ForwardIterator first, Size n);
template&lt;class InputIterator, class <ins>NoThrow</ins>ForwardIterator&gt;
  <ins>NoThrow</ins>ForwardIterator uninitialized_copy(InputIterator first, InputIterator last,
                                     <ins>NoThrow</ins>ForwardIterator result);
template&lt;class ExecutionPolicy, class InputIterator, class <ins>NoThrow</ins>ForwardIterator&gt;
  <ins>NoThrow</ins>ForwardIterator uninitialized_copy(ExecutionPolicy&amp;&amp; exec, // see <sref ref="[algorithms.parallel.overloads]"/>
                                     InputIterator first, InputIterator last,
                                     <ins>NoThrow</ins>ForwardIterator result);
template&lt;class InputIterator, class Size, class <ins>NoThrow</ins>ForwardIterator&gt;
  <ins>NoThrow</ins>ForwardIterator uninitialized_copy_n(InputIterator first, Size n,
                                       <ins>NoThrow</ins>ForwardIterator result);
template&lt;class ExecutionPolicy, class InputIterator, class Size, class <ins>NoThrow</ins>ForwardIterator&gt;
  <ins>NoThrow</ins>ForwardIterator uninitialized_copy_n(ExecutionPolicy&amp;&amp; exec, // see <sref ref="[algorithms.parallel.overloads]"/>
                                       InputIterator first, Size n,
                                       <ins>NoThrow</ins>ForwardIterator result);
template&lt;class InputIterator, class <ins>NoThrow</ins>ForwardIterator&gt;
  <ins>NoThrow</ins>ForwardIterator uninitialized_move(InputIterator first, InputIterator last,
                                     <ins>NoThrow</ins>ForwardIterator result);
template&lt;class ExecutionPolicy, class InputIterator, class <ins>NoThrow</ins>ForwardIterator&gt;
  <ins>NoThrow</ins>ForwardIterator uninitialized_move(ExecutionPolicy&amp;&amp; exec, // see <sref ref="[algorithms.parallel.overloads]"/>
                                     InputIterator first, InputIterator last,
                                     <ins>NoThrow</ins>ForwardIterator result);
template&lt;class InputIterator, class Size, class <ins>NoThrow</ins>ForwardIterator&gt;
  pair&lt;InputIterator, <ins>NoThrow</ins>ForwardIterator&gt; uninitialized_move_n(InputIterator first, Size n,
                                                            <ins>NoThrow</ins>ForwardIterator result);
template&lt;class ExecutionPolicy, class InputIterator, class Size, class <ins>NoThrow</ins>ForwardIterator&gt;
  pair&lt;InputIterator, <ins>NoThrow</ins>ForwardIterator&gt; uninitialized_move_n(ExecutionPolicy&amp;&amp; exec, // see <sref ref="[algorithms.parallel.overloads]"/>
                                                            InputIterator first, Size n,
                                                            <ins>NoThrow</ins>ForwardIterator result);
template&lt;class <ins>NoThrow</ins>ForwardIterator, class T&gt;
  void uninitialized_fill(<ins>NoThrow</ins>ForwardIterator first, <ins>NoThrow</ins>ForwardIterator last, const T&amp; x);
template&lt;class ExecutionPolicy, class <ins>NoThrow</ins>ForwardIterator, class T&gt;
  void uninitialized_fill(ExecutionPolicy&amp;&amp; exec, // see <sref ref="[algorithms.parallel.overloads]"/>
                          <ins>NoThrow</ins>ForwardIterator first, <ins>NoThrow</ins>ForwardIterator last, const T&amp; x);
template&lt;class <ins>NoThrow</ins>ForwardIterator, class Size, class T&gt;
  <ins>NoThrow</ins>ForwardIterator uninitialized_fill_n(<ins>NoThrow</ins>ForwardIterator first, Size n, const T&amp; x);
template&lt;class ExecutionPolicy, class <ins>NoThrow</ins>ForwardIterator, class Size, class T&gt;
  <ins>NoThrow</ins>ForwardIterator uninitialized_fill_n(ExecutionPolicy&amp;&amp; exec, // see <sref ref="[algorithms.parallel.overloads]"/>
                                       <ins>NoThrow</ins>ForwardIterator first, Size n, const T&amp; x);
template&lt;class T&gt;
  void destroy_at(T* location);
template&lt;class <ins>NoThrow</ins>ForwardIterator&gt;
  void destroy(<ins>NoThrow</ins>ForwardIterator first, <ins>NoThrow</ins>ForwardIterator last);
template&lt;class ExecutionPolicy, class <ins>NoThrow</ins>ForwardIterator&gt;
  void destroy(ExecutionPolicy&amp;&amp; exec, // see <sref ref="[algorithms.parallel.overloads]"/>
               <ins>NoThrow</ins>ForwardIterator first, <ins>NoThrow</ins>ForwardIterator last);
template&lt;class <ins>NoThrow</ins>ForwardIterator, class Size&gt;
  <ins>NoThrow</ins>ForwardIterator destroy_n(<ins>NoThrow</ins>ForwardIterator first, Size n);
template&lt;class ExecutionPolicy, class <ins>NoThrow</ins>ForwardIterator, class Size&gt;
  <ins>NoThrow</ins>ForwardIterator destroy_n(ExecutionPolicy&amp;&amp; exec, // see <sref ref="[algorithms.parallel.overloads]"/>
                            <ins>NoThrow</ins>ForwardIterator first, Size n);

// <sref ref="[unique.ptr]"/>, class template unique_ptr
[&hellip;]
</pre>
</blockquote>
</li>
<li><p>Modify <sref ref="[specialized.algorithms]"/> as indicated:</p>
<blockquote>
<p>
[&hellip;]
</p><p>
(1.2) &mdash; If an algorithm's template parameter is named
<tt><ins>NoThrow</ins>ForwardIterator</tt>, the template argument shall satisfy
the <tt><i>Cpp17ForwardIterator</i></tt> requirements
(<sref ref="[forward.iterators]"/>), and is required to have the property that
no exceptions are thrown from increment, assignment, comparison, or indirection
through valid iterators.
</p><p>
[&hellip;]
</p>
</blockquote>
</li>
<li><p>Modify the declarations of the specialized algorithms in the remainder of
<sref ref="[specialized.algorithms]"/> to agree with the proposed changes to
<sref ref="[memory.syn]"/> above.</p>
</li>
</ol>
</resolution>

</issue>
